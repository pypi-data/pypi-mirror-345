"""
This type stub file was generated by pyright.
"""

import numpy as np
import pyarrow as pa
from typing import Callable, List, Union
from ..dependencies import pandas as pd

def retry(tries=..., delay=..., max_delay=..., backoff=..., jitter=...): # -> Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any | None]]:
    ...

DATA = Union[pa.Table, "pd.DataFrame"]
TEXT = Union[str, List[str], pa.Array, pa.ChunkedArray, np.ndarray]
IMAGES = Union[str, bytes, List[str], List[bytes], pa.Array, pa.ChunkedArray, np.ndarray]
AUDIO = Union[str, bytes, List[str], List[bytes], pa.Array, pa.ChunkedArray, np.ndarray]
class RateLimiter:
    def __init__(self, max_calls: int = ..., period: float = ...) -> None:
        ...
    
    def __call__(self, func): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
        ...
    


class FunctionWrapper:
    """
    A wrapper for embedding functions that adds rate limiting, retries, and batching.
    """
    def __init__(self, func: Callable) -> None:
        ...
    
    def __call__(self, text): # -> list[Any]:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def rate_limit(self, max_calls=..., period=...): # -> Self:
        ...
    
    def retry(self, tries=..., delay=..., max_delay=..., backoff=..., jitter=...): # -> Self:
        ...
    
    def batch_size(self, batch_size): # -> Self:
        ...
    
    def show_progress(self): # -> Self:
        ...
    
    def to_batches(self, arr): # -> Generator[Any, Any, None]:
        ...
    


def weak_lru(maxsize=...): # -> Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]]:
    """
    LRU cache that keeps weak references to the objects it caches. Only caches the
    latest instance of the objects to make sure memory usage is bounded.

    Parameters
    ----------
    maxsize : int, default 128
        The maximum number of objects to cache.

    Returns
    -------
    Callable
        A decorator that can be applied to a method.

    Examples
    --------
    >>> class Foo:
    ...     @weak_lru()
    ...     def bar(self, x):
    ...         return x
    >>> foo = Foo()
    >>> foo.bar(1)
    1
    >>> foo.bar(2)
    2
    >>> foo.bar(1)
    1
    """
    ...

def retry_with_exponential_backoff(func, initial_delay: float = ..., exponential_base: float = ..., jitter: bool = ..., max_retries: int = ...): # -> Callable[..., Any]:
    """Retry a function with exponential backoff.

    Args:
        func (function): The function to be retried.
        initial_delay (float): Initial delay in seconds (default is 1).
        exponential_base (float): The base for exponential backoff (default is 2).
        jitter (bool): Whether to add jitter to the delay (default is True).
        max_retries (int): Maximum number of retries (default is 10).

    Returns:
        function: The decorated function.
    """
    ...

def url_retrieve(url: str):
    """
    Parameters
    ----------
    url: str
        URL to download from
    """
    ...

def api_key_not_found_help(provider):
    ...

