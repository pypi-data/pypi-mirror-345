# coding: utf-8

"""
    ANTENNEX Reverberation Chamber API

    HTTP API for ANTENNEX The Wireless Connector(tm)

    The version of the OpenAPI document: 3.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from antennex_client.models.sideband import Sideband
from typing import Optional, Set
from typing_extensions import Self

class FmcwSettings(BaseModel):
    """
    Contains the settings used for performing a calibration or measurement.
    """ # noqa: E501
    spectrogram_nfft: Optional[Annotated[int, Field(le=4096, strict=True, ge=128)]] = Field(default=None, description="Number of points in the FFT used for the spectrogram calculation. Should be a power of 2.", alias="spectrogramNFFT")
    sft_overlap_factor: Optional[Union[Annotated[float, Field(le=0.95, strict=True, ge=0)], Annotated[int, Field(le=0, strict=True, ge=0)]]] = Field(default=None, description="The overlap factor of the windows in the spectrogram calculation.", alias="sftOverlapFactor")
    decimate_to_frequency_limit: Optional[StrictBool] = Field(default=None, description="Boolean to specify whether the data should be decimated up to the frequency limit. This can save time if the data is significantly oversampled.", alias="decimateToFrequencyLimit")
    output_resolution: Optional[Annotated[int, Field(le=4096, strict=True, ge=64)]] = Field(default=None, description="Output resolution for the FMCW spectrogram. This determines the resolution of the final N-by-N interpolated image.", alias="outputResolution")
    sideband: Optional[Sideband] = None
    lo_frequency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The frequency of the local oscillator used for the mixer in Hz.", alias="loFrequency")
    __properties: ClassVar[List[str]] = ["spectrogramNFFT", "sftOverlapFactor", "decimateToFrequencyLimit", "outputResolution", "sideband", "loFrequency"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FmcwSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FmcwSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "spectrogramNFFT": obj.get("spectrogramNFFT"),
            "sftOverlapFactor": obj.get("sftOverlapFactor"),
            "decimateToFrequencyLimit": obj.get("decimateToFrequencyLimit"),
            "outputResolution": obj.get("outputResolution"),
            "sideband": obj.get("sideband"),
            "loFrequency": obj.get("loFrequency")
        })
        return _obj


