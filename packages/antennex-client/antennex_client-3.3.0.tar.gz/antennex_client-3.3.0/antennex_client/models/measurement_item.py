# coding: utf-8

"""
    ANTENNEX Reverberation Chamber API

    HTTP API for ANTENNEX The Wireless Connector(tm)

    The version of the OpenAPI document: 3.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MeasurementItem(BaseModel):
    """
    A short summary of a measurement result, showing whether it is available and the creation date.
    """ # noqa: E501
    available: StrictBool = Field(description="Indicates whether this measurement is available. If a measurement is not available, it might also be omitted from this list.")
    timestamp: Optional[StrictInt] = Field(default=None, description="Timestamp value. There is no guaranteed format, it is mainly intended to differentiate between two measurements that are taken.")
    frequency_start: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Starting frequency of the data set.", alias="frequencyStart")
    frequency_end: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="End or stop frequency of the data set.", alias="frequencyEnd")
    fixed_gain: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="If the measurement data only has a fixed gain over the entire frequency range, then this element indicates that value. This is only used for calibrations.", alias="fixedGain")
    __properties: ClassVar[List[str]] = ["available", "timestamp", "frequencyStart", "frequencyEnd", "fixedGain"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeasurementItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeasurementItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "available": obj.get("available"),
            "timestamp": obj.get("timestamp"),
            "frequencyStart": obj.get("frequencyStart"),
            "frequencyEnd": obj.get("frequencyEnd"),
            "fixedGain": obj.get("fixedGain")
        })
        return _obj


