Metadata-Version: 2.4
Name: drf-authentify
Version: 0.4
Summary: A simple authentication module for django rest framework
Author: Gabriel Idenyi
License: BSD 3-Clause License
        
        Copyright (c) 2024, Idenyi Gabriel
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        1. Redistributions of source code must retain the above copyright notice, this
           list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        
        3. Neither the name of the copyright holder nor the names of its
           contributors may be used to endorse or promote products derived from
           this software without specific prior written permission.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
Project-URL: Homepage, https://github.com/idenyigabriel/drf-authentify
Project-URL: Documentation, https://github.com/idenyigabriel/drf-authentify/blob/main/README.md
Project-URL: Repository, https://github.com/idenyigabriel/drf-authentify
Project-URL: Issues, https://github.com/idenyigabriel/drf-authentify/issues
Project-URL: Changelog, https://github.com/idenyigabriel/drf-authentify/blob/main/CHANGELOG.md
Keywords: django,djangorestframework,drf,authentication
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Framework :: Django :: 3.2
Classifier: Framework :: Django :: 4.2
Classifier: Framework :: Django :: 5.2
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Session
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: Django>=3.2
Requires-Dist: djangorestframework>=3.1
Dynamic: license-file

# DRF Authentify

[![Build Status](https://github.com/idenyigabriel/drf-authentify/actions/workflows/test.yml/badge.svg)](https://github.com/idenyigabriel/drf-authentify/actions/workflows/test.yml)
[![License: BSD-3-Clause](https://img.shields.io/badge/License-BSD--3--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)

**[drf-authentify](https://github.com/idenyigabriel/drf-authentify)** is a near drop-in replacement for Django REST Framework‚Äôs default token authentication‚Äîexcept better.


---
## üöÄ Why Use `drf-authentify`?

Compared to the default DRF token system, `drf-authentify` offers several key improvements:

- üîë **Multiple tokens per user**
- üîê **Enhanced security** with contextual access validation
- ‚öôÔ∏è **Utility methods** for creating, revoking, and managing tokens
- üß© **Unopinionated design**‚Äîintegrate it your way

It is built to be simple, extensible, and flexible enough to meet modern authentication needs.

---
## üì¶ Requirements

- Python ‚â• 3.8  
- Django ‚â• 3.2  
- Django REST Framework ‚â• 3.0

---
## ‚öôÔ∏è Installation

Install via pip:

```bash
pip install drf-authentify
```

Add it to your INSTALLED_APPS:

```python
INSTALLED_APPS = [
    # your existing apps...
    'drf_authentify',
]
```
Run migrations:

```bash
python manage.py migrate
```
Once installed, a new AuthToken model will appear in your Django admin for token management.

---
## ‚öôÔ∏è Global Configuration

Customize behavior in settings.py using the DRF_AUTHENTIFY config:

```python
DRF_AUTHENTIFY = {
    "COOKIE_KEY": "token", 
    "ALLOWED_HEADER_PREFIXES": ["bearer", "token"],
    "TOKEN_EXPIRATION": 3000,
    "ENABLE_AUTH_RESTRICTION": False,
    "STRICT_CONTEXT_PARAMS_ACCESS": False,
}
```

### Setting Descriptions

- COOKIE_KEY: Key name used to retrieve tokens from cookies.
- ALLOWED_HEADER_PREFIXES: Acceptable prefixes for the Authorization header.
- TOKEN_EXPIRATION: Default expiration time (in seconds) for new tokens.
- ENABLE_AUTH_RESTRICTION: Restricts a token to only its creation channel (header/cookie).
- STRICT_CONTEXT_PARAMS_ACCESS: Enforces error raising on undefined context_obj keys.

> **Note:**
> ‚ö†Ô∏è Don‚Äôt forget to allow any custom header prefixes in your CORS settings to avoid CORS errors.

---
## üîê Creating Tokens

Use utility methods from TokenService:

```python
from drf_authentify.services import TokenService

# Header-based token
token = TokenService.generate_header_token(user, context=None, expires=3000)

# Cookie-based token
token = TokenService.generate_cookie_token(user, context=None, expires=3000)
```

### Contextual Tokens

You can optionally attach a context dictionary to any token and customize its expiration using the expires parameter. If not set, the default global TOKEN_EXPIRATION is used.

> **Note:**
> If `ENABLE_AUTH_RESTRICTION` is True, a token created for cookie use cannot be used in a header and vice versa.

---
## üßπ Revoking Tokens

You can revoke tokens in several ways:

```python
from drf_authentify.services import TokenService

# Revoke token tied to the current request
TokenService.revoke_token_from_request(request)

# Revoke all tokens for the user in the request
TokenService.revoke_all_tokens_for_user_from_request(request)

# Revoke all tokens for a specific user
TokenService.revoke_all_user_tokens(request.user)

# Revoke all expired tokens (useful for cleanup)
TokenService.revoke_expired_tokens()
```

---
## üõ°Ô∏è Authentication Classes

drf-authentify provides two authentication classes:

```python
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'drf_authentify.auth.CookieAuthentication',
        'drf_authentify.auth.AuthorizationHeaderAuthentication',
    ]
}
```
These can be used globally or at the view level.

---
## üîç Accessing the Current Token and Context

Inside an authenticated view:

```python
def sample_view(request):
    user = request.user            # Authenticated user
    token = request.auth           # AuthToken instance
    context = token.context        # Context dictionary
    scope = token.context_obj      # Access as object
```
