# coding: utf-8

"""
    Wildberries cifrovoi

    Po voprosam raboty s WBD API, obrahaites v <a href=\"https://digital.wildberries.ru/support\" target=\"_blank\">tehniheskuu podderhku</a>.   # noqa: E501

    OpenAPI spec version: wbd
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Content(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'author_id': 'int',
        'title': 'str',
        'description': 'str',
        'content_type': 'str',
        'uri': 'str',
        'files': 'list[OfferContentFiles]',
        'playlist': 'str',
        'meta': 'object',
        'category_id': 'int',
        'status': 'int',
        'created': 'str',
        'updated': 'str'
    }

    attribute_map = {
        'id': 'id',
        'author_id': 'author_id',
        'title': 'title',
        'description': 'description',
        'content_type': 'content_type',
        'uri': 'uri',
        'files': 'files',
        'playlist': 'playlist',
        'meta': 'meta',
        'category_id': 'category_id',
        'status': 'status',
        'created': 'created',
        'updated': 'updated'
    }

    def __init__(self, id=None, author_id=None, title=None, description=None, content_type=None, uri=None, files=None, playlist=None, meta=None, category_id=None, status=None, created=None, updated=None):  # noqa: E501
        """Content - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._author_id = None
        self._title = None
        self._description = None
        self._content_type = None
        self._uri = None
        self._files = None
        self._playlist = None
        self._meta = None
        self._category_id = None
        self._status = None
        self._created = None
        self._updated = None
        self.discriminator = None
        self.id = id
        self.author_id = author_id
        self.title = title
        self.description = description
        self.content_type = content_type
        self.uri = uri
        self.files = files
        self.playlist = playlist
        if meta is not None:
            self.meta = meta
        self.category_id = category_id
        self.status = status
        self.created = created
        self.updated = updated

    @property
    def id(self):
        """Gets the id of this Content.  # noqa: E501

        ID kontenta  # noqa: E501

        :return: The id of this Content.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Content.

        ID kontenta  # noqa: E501

        :param id: The id of this Content.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def author_id(self):
        """Gets the author_id of this Content.  # noqa: E501

        ID avtora  # noqa: E501

        :return: The author_id of this Content.  # noqa: E501
        :rtype: int
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this Content.

        ID avtora  # noqa: E501

        :param author_id: The author_id of this Content.  # noqa: E501
        :type: int
        """
        if author_id is None:
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def title(self):
        """Gets the title of this Content.  # noqa: E501

        Nazvanie kontenta  # noqa: E501

        :return: The title of this Content.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Content.

        Nazvanie kontenta  # noqa: E501

        :param title: The title of this Content.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this Content.  # noqa: E501

        Opisanie kontenta  # noqa: E501

        :return: The description of this Content.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Content.

        Opisanie kontenta  # noqa: E501

        :param description: The description of this Content.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def content_type(self):
        """Gets the content_type of this Content.  # noqa: E501

        Tip faila: - Videokontent:     - `video/mp4` - Audiokontent:     - `audio/mpeg` - Dokument:     - `application/pdf`     - `application/epub+zip`     - `text/plain`        # noqa: E501

        :return: The content_type of this Content.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Content.

        Tip faila: - Videokontent:     - `video/mp4` - Audiokontent:     - `audio/mpeg` - Dokument:     - `application/pdf`     - `application/epub+zip`     - `text/plain`        # noqa: E501

        :param content_type: The content_type of this Content.  # noqa: E501
        :type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501
        allowed_values = ["video/mp4", "audio/mpeg", "text/plain", "application/pdf", "application/epub+zip"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"  # noqa: E501
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def uri(self):
        """Gets the uri of this Content.  # noqa: E501

        URI adres kontenta  # noqa: E501

        :return: The uri of this Content.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Content.

        URI adres kontenta  # noqa: E501

        :param uri: The uri of this Content.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def files(self):
        """Gets the files of this Content.  # noqa: E501

        Spisok s informaciei o dopolnitelnyh failah  # noqa: E501

        :return: The files of this Content.  # noqa: E501
        :rtype: list[OfferContentFiles]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Content.

        Spisok s informaciei o dopolnitelnyh failah  # noqa: E501

        :param files: The files of this Content.  # noqa: E501
        :type: list[OfferContentFiles]
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")  # noqa: E501

        self._files = files

    @property
    def playlist(self):
        """Gets the playlist of this Content.  # noqa: E501

        URI adres na pleilist kontenta.  Esli kontent avlaetsa audio ili video kontentom, to fail dekodiruetsa v pleilist.   # noqa: E501

        :return: The playlist of this Content.  # noqa: E501
        :rtype: str
        """
        return self._playlist

    @playlist.setter
    def playlist(self, playlist):
        """Sets the playlist of this Content.

        URI adres na pleilist kontenta.  Esli kontent avlaetsa audio ili video kontentom, to fail dekodiruetsa v pleilist.   # noqa: E501

        :param playlist: The playlist of this Content.  # noqa: E501
        :type: str
        """
        if playlist is None:
            raise ValueError("Invalid value for `playlist`, must not be `None`")  # noqa: E501

        self._playlist = playlist

    @property
    def meta(self):
        """Gets the meta of this Content.  # noqa: E501

        hranit v sebe metadannye kontenta: - `bisac` —  ISBN (Mehdunarodnyi standartnyi knihnyi nomer) - `voice` — Akter ozvuhivauhii audiokontent - `author` — Avtor kontenta - `rating` — Vozrastnoe ogranihenie - `preview` — Korotkii otrezok kontenta dla predvaritelnogo prosmotra  - `duration` — Prodolhitelnost kontenta  - `thumbnail` — Spisok oblohki dla kontenta raznogo razrehenia - `dimensions` — Spisok razrehenii video - `duration_ms` — Prodolhitelnost kontenta v millisekundah - `translator` — Avtor perevoda - `original_name` — Originalnoe nazvanie kontenta - `pages` — Kolihestvo stranic v kontente - `encoded_videos` — Spisok informacii (razmer, razrehenie) dla dekodirovannogo video - `encoded_audios` — Spisok informacii (razmer, bitreit) dla dekodirovannogo audio    # noqa: E501

        :return: The meta of this Content.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Content.

        hranit v sebe metadannye kontenta: - `bisac` —  ISBN (Mehdunarodnyi standartnyi knihnyi nomer) - `voice` — Akter ozvuhivauhii audiokontent - `author` — Avtor kontenta - `rating` — Vozrastnoe ogranihenie - `preview` — Korotkii otrezok kontenta dla predvaritelnogo prosmotra  - `duration` — Prodolhitelnost kontenta  - `thumbnail` — Spisok oblohki dla kontenta raznogo razrehenia - `dimensions` — Spisok razrehenii video - `duration_ms` — Prodolhitelnost kontenta v millisekundah - `translator` — Avtor perevoda - `original_name` — Originalnoe nazvanie kontenta - `pages` — Kolihestvo stranic v kontente - `encoded_videos` — Spisok informacii (razmer, razrehenie) dla dekodirovannogo video - `encoded_audios` — Spisok informacii (razmer, bitreit) dla dekodirovannogo audio    # noqa: E501

        :param meta: The meta of this Content.  # noqa: E501
        :type: object
        """

        self._meta = meta

    @property
    def category_id(self):
        """Gets the category_id of this Content.  # noqa: E501

        ID kategorii kontenta: - `1` — Videokontent  - `2` — Audiokontent - `4` — Dokument   # noqa: E501

        :return: The category_id of this Content.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Content.

        ID kategorii kontenta: - `1` — Videokontent  - `2` — Audiokontent - `4` — Dokument   # noqa: E501

        :param category_id: The category_id of this Content.  # noqa: E501
        :type: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501
        allowed_values = [1, 2, 4]  # noqa: E501
        if category_id not in allowed_values:
            raise ValueError(
                "Invalid value for `category_id` ({0}), must be one of {1}"  # noqa: E501
                .format(category_id, allowed_values)
            )

        self._category_id = category_id

    @property
    def status(self):
        """Gets the status of this Content.  # noqa: E501

        Status kontenta: - `0` — Sozdan - `1` — Zagruheno na server - `2` — Opublikovan - `3` — Ohibka v obrabotke ili publikacii - `4` — Obrabatyvaetsa - `5` — Otpravleno na server   # noqa: E501

        :return: The status of this Content.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Content.

        Status kontenta: - `0` — Sozdan - `1` — Zagruheno na server - `2` — Opublikovan - `3` — Ohibka v obrabotke ili publikacii - `4` — Obrabatyvaetsa - `5` — Otpravleno na server   # noqa: E501

        :param status: The status of this Content.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def created(self):
        """Gets the created of this Content.  # noqa: E501

        Data sozdania, UTC +3 (Moskva)  # noqa: E501

        :return: The created of this Content.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Content.

        Data sozdania, UTC +3 (Moskva)  # noqa: E501

        :param created: The created of this Content.  # noqa: E501
        :type: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this Content.  # noqa: E501

        Data obnovlenia, UTC +3 (Moskva)  # noqa: E501

        :return: The updated of this Content.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Content.

        Data obnovlenia, UTC +3 (Moskva)  # noqa: E501

        :param updated: The updated of this Content.  # noqa: E501
        :type: str
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Content, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Content):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
