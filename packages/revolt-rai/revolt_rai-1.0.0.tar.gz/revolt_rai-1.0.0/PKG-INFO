Metadata-Version: 2.4
Name: revolt-rai
Version: 1.0.0
Summary: RAI is a next-gen CLI framework to automate the creation of intelligent agents and teams for cybersecurity and offensive security operations
Project-URL: Homepage, https://github.com/RevoltSecurities/RAI
Project-URL: Documentation, https://github.com/RevoltSecurities/RAI/wiki
Project-URL: Repository, https://github.com/RevoltSecurities/RAI
Project-URL: Issues, https://github.com/RevoltSecurities/RAI/issues
Author-email: "D. Sanjai Kumar" <bughunterz0047@gmail.com>
Maintainer-email: "D. Sanjai Kumar" <bughunterz0047@gmail.com>, "Gokul.V" <th3gokul@gmail.com>
License: MIT
License-File: LICENSE
Keywords: AI Security,AI shell,LLM Team,agno,ai-agents,ctf,ethical hacking,framework,llm,multi-agent,penetration testing,rai
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Security
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Utilities
Requires-Python: >=3.13
Requires-Dist: agno>=1.4.3
Requires-Dist: aiofiles>=24.1.0
Requires-Dist: aiohttp>=3.11.18
Requires-Dist: anthropic>=0.50.0
Requires-Dist: appdirs>=1.4.4
Requires-Dist: art>=6.5
Requires-Dist: asyncio>=3.4.3
Requires-Dist: azure-ai-inference>=1.0.0b9
Requires-Dist: boto3>=1.38.6
Requires-Dist: cohere>=5.15.0
Requires-Dist: colorama>=0.4.6
Requires-Dist: google-genai>=1.13.0
Requires-Dist: groq>=0.23.1
Requires-Dist: httpx>=0.28.1
Requires-Dist: ibm-watsonx-ai>=1.3.13
Requires-Dist: litellm>=1.67.5
Requires-Dist: mcp>=1.6.0
Requires-Dist: mistralai>=1.7.0
Requires-Dist: nest-asyncio>=1.6.0
Requires-Dist: ollama>=0.4.8
Requires-Dist: openai>=1.76.2
Requires-Dist: prompt-toolkit>=3.0.51
Requires-Dist: pyyaml>=6.0.2
Description-Content-Type: text/markdown

## RAI ‚Äì Next-Level Automation Tool & Framework for Building LLM Agents and Teams in Cybersecurity

<h1 align="center">
  <img src="static/rai-demo.jpg" alt="RAI" width="450px">
  <br>
</h1>

  <div> 
 <div>

 <div align="center">

**lightweight, faster LLM Agents,Team building with YAML Configuration**

</div>


<p align="center">
    <a href="https://github.com/RevoltSecurities/RAI?tab=readme-ov-file#features">Features</a> |
    <a href="https://github.com/RevoltSecurities/RAI?tab=readme-ov-file#installation">Installation</a> |
    <a href="https://github.com/RevoltSecurities/RAI?tab=readme-ov-file#usage">Usage</a> |
    <a href="https://github.com/RevoltSecurities/RAI?tab=readme-ov-file#-yaml-configuration">Building Agents & Teams with YAML Configuration</a>
</p>

 <div align="center">

![GitHub last commit](https://img.shields.io/github/last-commit/RevoltSecurities/Subdominator) ![GitHub release (latest by date)](https://img.shields.io/github/v/release/RevoltSecurities/Subdominator) [![GitHub license](https://img.shields.io/github/license/RevoltSecurities/Subdominator)](https://github.com/RevoltSecurities/Subdominator/blob/main/LICENSE)

</div>



**RAI (Revolt AI Agent)** is a modern, YAML-driven CLI tool and framework for building intelligent agents and agent teams tailored for cybersecurity automation, offensive security, and penetration testing operations.
Built on top of the powerful [Agno framework](https://docs.agno.com), RAI enables security professionals, red teamers, and AI hackers to design, orchestrate, and deploy advanced LLM-powered agents without writing traditional code. Its no-code architecture leverages structured YAML configurations to define agent behavior, tools, and team collaboration logic.



### Featuresüîß:
---

![demo](https://github.com/user-attachments/assets/c2926693-6b54-4a68-8ba1-cc7fde6fb479)


- üß† **Interactive Shell Mode** ‚Äì Engage in real-time conversations with LLM agents and teams via a powerful interactive CLI. Seamlessly switch between agents or teams with intuitive commands.
  
- üìù **YAML-Based Agent & Team Building** ‚Äì Define agents and teams using easy-to-edit YAML templates. Accelerate development with low-code configurations and smart defaults.
  
- ü§ñ **Multi-Agent & Team Support** ‚Äì Build, run, and manage multiple agents or teams in parallel with full operational isolation and coordination.
  
- üîå **Tool Integration (SSE & stdio)** ‚Äì Integrate custom tools via Server-Sent Events or standard I/O for dynamic agent-tool communication.
  
- üîÑ **Dynamic Team Allocation** ‚Äì Flexibly assign, reassign, or reconfigure agents across different teams at runtime to optimize task workflows.
  
- üß© **MCP-Compatible Infrastructure** ‚Äì Built with modularity in mind, RAI is ready for integration with Model Context Protocol (MCP) tooling and future agent standards.
  
- ‚öôÔ∏è **Fast & Flexible Configuration** ‚Äì Lightweight setup with extensible configuration options. Designed for developers who want control without the clutter.
  
- üß† **Built-In Reasoning Engine** ‚Äì Agents can *think*, *reason*, and *decide* intelligently before taking action, enabling smarter task execution.
  
- üõ°Ô∏è **Cybersecurity-First Design** ‚Äì Purpose-built for red teaming, bug bounty automation, recon, exploit development, and offensive security workflows.
  
- üß¨ **Agent-to-Agent Communication** ‚Äì Enable inter-agent messaging within teams, allowing agents to delegate tasks, collaborate, and share results autonomously.


### Supported LLM Providers:
- **Anthropic**
- **AWS**
- **Azure**
- **Cohere**
- **DeepInfra**
- **DeepSeek**
- **Fireworks**
- **Google (Gemini)**
- **Groq**
- **Hugging Face**
- **IBM**
- **InternLM**
- **LiteLLM**
- **LMStudio**
- **Meta (LLaMA)**
- **Mistral**
- **NVIDIA**
- **Ollama**
- **OpenAI**
- **OpenRouter**
- **Perplexity**
- **SambaNova**
- **Together.ai**
- **xAI**


### InstallationüöÄ

RAI can be easily installed using [**uv**](https://github.com/astral-sh/uv) ‚Äî a fast Python package manager designed for modern workflows.

### üì¶ Install with `uv`

```bash
uv tool install rai
```

> ‚úÖ Make sure you have Python 3.13 or newer installed.  
> ‚úÖ `uv` automatically handles virtual environments, speed, and dependency resolution.

  
### Usage:
---
```code
rai -h
```

```yaml
    ____     ___     ____
   / __ \   /   |   /  _/
  / /_/ /  / /| |   / /  
 / _, _/  / ___ | _/ /   
/_/ |_|  /_/  |_|/___/   
                         

                     - RevoltSecurities


[DESCRIPTION]: 

    RAI is a next-gen CLI tool and framework to automate the creation of intelligent agents and teams for cybersecurity and offensive security operations

[USAGE]: 

    rai [flags]

[FLAGS]:

    -h,    --help                 :  Show this help message and exit.
    -v,    --version              :  Show current version of RAI.
    -cp,   --config-path          :  Path to YAML config file (default: $HOME/.config/RAI/raiagent.yaml).
    -sup,  --show-updates         :  Show latest update details.
    -up,   --update               :  Update RAI to the latest version (manual YAML update).

```


# üõ† YAML Configuration

RAI allows you to define **AI Agents** and **Agent Teams** using a simple YAML configuration. This configuration determines how agents behave, what models they use, what tools are attached, and how they collaborate as teams.

---

## ‚ú≥Ô∏è Agent Configuration (`agents`)

Each agent must define the following **required fields**:

| Field         | Type     | Description |
|--------------|----------|-------------|
| `name`        | string   | Unique agent name, must use `-` or `_` only (e.g., `web_pentest_agent`) |
| `model`       | string   | The provider name (e.g., `openai`, `gemini`, `groq`, `xai`) |
| `model-id`    | string   | The specific model ID to use (e.g., `gpt-4`, `gemini-2.0-pro`) |
| `apikey`      | string   | API key for the chosen provider  |
| `role`        | string   | A short sentence describing the agent‚Äôs purpose |
| `description` | string   | Multi-line detailed description of the agent‚Äôs capabilities |
| `instructions`| string   | A clear set of multi-line operational guidelines for the agent |
| `tools`       | toolconfig     | Tools assigned to the agent (`sse` or `stdio` types with required params) |


> ‚úÖ The only **optional field** is `think: true`, which enables your agent to think and analyze before its response

---

## üß† Team Configuration (`teams`)

Teams are collaborative groups of agents that share analysis tasks.

Each team must define the following **required fields**:

| Field         | Type     | Description |
|--------------|----------|-------------|
| `name`        | string   | Team name, must use `-` or `_` only (e.g., `pentest_team`) |
| `mode`        | string   | Team mode (e.g., `coordinate`, `route`, `collaborate`) |
| `model`       | string   | Provider name for internal logic (same as in agents) |
| `model-id`    | string   | Model ID used for internal processing |
| `apikey`      | string   | API key for the team‚Äôs model |
| `instructions`| string   | Multi-line instructions on how the team should collaborate |
| `members`     | list     | List of agent names (must match agent `name` fields) |
| `tools`       | toolconfig     | Tools assigned to the agent (`sse` or `stdio` types with required params) |
| `success_criteria` | string | Configure your teams collaboration success criteria to achieve your goal for the RAI Team task

> ‚úÖ `think: true` is an **optional field** to allow team-wide reasoning before responding.

---

## üß© Agent Naming Convention

To ensure consistency and compatibility:

- Agent and team `name` fields must:
  - Be unique across agents and teams
  - Use only lowercase characters, numbers, `-`, or `_`
  - Not contain spaces or special characters

‚úÖ **Valid:** `api_pentest_agent`, `web-agent-1`  
‚ùå **Invalid:** `Agent 01`, `Web*Pentest`

---

## üîó Team Member Allocation Rules

- `members` must list agent names **already defined** under the `agents:` section.
- All member agents **must be valid and fully configured** before referencing them in a team.
- Duplicate agent names or undeclared agents will raise errors.

---

### üîß Tools Configuration

Agents or Teams can integrate external or internal MCP tools via yaml configuration:

#### SSE Tool (Server-Sent Events)
```yaml
- type: "sse"
  name: "tool_name"
  params:
    url: "http://host:port/endpoint"
    headers:
      Authorization: "Bearer your_token_here"
```

#### Stdio Tool (Local MCP server execution)
```yaml
- type: "stdio"
  name: "tool_name"
  params:
    command: "command_to_run (ex:uv)"
    args: ["arg1", "arg2", "argN"]
```
---


## üì¶ Sample Full YAML Configuration

```console
nano ~/.config/RAI/raiagent.yaml
```
and paste these below content and also use valid models and secret apikeys to work with RAI‚ö°

```yaml
agents:
  - name: "web_pentest_agent"
    model: "gemini"
    model-id: "gemini-2.0-flash-exp"
    apikey: "AIzaSyDnd-REDACTED-1234567890"
    role: "An expert web application penetration tester."
    description: |
      This agent performs in-depth analysis of web applications, including:
      - XSS, SQLi, CSRF, SSRF detection
      - Payload recommendations
      - Mitigation advice using OWASP guidelines
    instructions: |
      - Analyze HTML, JS, HTTP requests
      - Follow ethical boundaries
      - Provide clear markdown-formatted results
    tools:
      - type: "sse"
        name: "web_tool"
        params:
          url: "http://localhost:8000/sse"
          headers:
            Authorization: "Bearer sample-token-123"
    markdown: true
    enable_history: true

  - name: "api_pentest_agent"
    model: "gemini"
    model-id: "gemini-2.0-flash-exp"
    apikey: "AIzaSyDnd-REDACTED-0987654321"
    role: "API security expert."
    description: |
      Focused on discovering API vulnerabilities:
      - BOLA, Mass Assignment, Broken Auth
      - CORS and Rate Limiting checks
    instructions: |
      Use OWASP API Top 10 as the baseline. Respond only with ethical suggestions.
    tools:
      - type: "stdio"
        name: "api_tool"
        params:
          command: "python3"
          args: ["api_runner.py"]
    markdown: true
    enable_history: true

  - name: "ctf_agent"
    model: "gemini"
    model-id: "gemini-2.0-flash-exp"
    apikey: "AIzaSyDnd-REDACTED-CTFKEY"
    role: "CTF solving agent"
    description: |
      Solves CTF challenges in web, pwn, reverse engineering, crypto, and forensics.
    instructions: |
      - Give step-by-step answers
      - Output payloads and flag extraction logic
    markdown: true
    enable_history: true

teams:
  - name: "pentest_team_alpha"
    mode: "coordinate"
    model: "gemini"
    model-id: "gemini-2.0-flash-exp"
    apikey: "AIzaSyDnd-REDACTED-TEAMKEY"
    instructions: |
      Collaborate across agents to detect and explain vulnerabilities in web or API apps.
    tools:
      - type: "stdio"
        name: "api_tool"
        params:
          command: "python3"
          args: ["api_runner.py"]
    members:
      - "web_pentest_agent"
      - "api_pentest_agent"
      - "ctf_agent"
    success_criteria: "All vulnerabilities are clearly identified, explained, and mitigated."
    think: true
```

---

### üöÄ Future Enhancement Plan:

RAI (Revolt AI Agent) is under **continuous development** üõ†Ô∏è ‚Äî evolving rapidly to empower cybersecurity automation with intelligent, collaborative agents. Upcoming features include:

- üñ• **Agent UI with Agno UI Integration**  
  A powerful web-based UI to manage, monitor, and interact with agents, tools, and teams visually ‚Äî built on Agno's robust interface layer.

- üß† **Memory & Session Storage Management**  
  Agents will support persistent session memory:
  - Maintain conversation continuity  
  - Recall user preferences, task history, and learned context

- üìö **Agent & Team Knowledge Injection**  
  Allow agents and teams to use **custom knowledge bases**, enabling them to:
  - Ingest structured/unstructured data sources (e.g., markdown, PDFs, JSON, code)  
  - Improve reasoning and task performance through embedded knowledge  
  - Learn iteratively and adapt during operations

- üß© **Agent Knowledge Learning Loop**  
  Equip agents with mechanisms to analyze outcomes, refine their behavior, and build contextual awareness from completed tasks.


> ‚ö†Ô∏è **RAI is Under Continuous Development**
> 
> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
> 
> üõ†Ô∏è RAI (Revolt AI Agent) is an actively evolving project built on top of the powerful **Agno** framework.
> This means you can expect:
>
> üîÑ Regular updates & new feature drops  
> üß™ Experimental support for cutting-edge agent workflows  
> üîß Frequent performance and usability improvements  
> üß∞ Expanding tool integrations and LLM backend compatibility  
> üì¶ Community-driven contributions & enhancements welcome!
> 
> While RAI is already production-capable, it‚Äôs designed to grow fast‚Äî
> so expect changes, iteration, and rapid innovation.
> 
> ‚ûï Stay updated. Join the journey. Contribute. Hack with AI.
> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

---

### ‚ù§Ô∏è Acknowledgements & Community Contribution:

A special thanks to the [**Agno Framework**](https://github.com/agno-agi/agno) for providing a powerful foundation for RAI. Their contributions have made it possible to build a sophisticated, flexible, and scalable platform that empowers cybersecurity professionals worldwide. üôè

RAI (Revolt AI Agent) is developed with ‚ù§Ô∏è by [**RevoltSecurities**](https://github.com/RevoltSecurities), driven by a passion for open-source and cybersecurity innovation. We are excited to share this tool with the community and empower the next generation of red teamers, security researchers, and AI hackers. üöÄ
We **welcome** contributions, ideas, and feedback from the open-source community. Together, we can make RAI even more powerful and continue to drive innovation in the cybersecurity field. 
Your contributions, whether in the form of code, documentation, bug reports, or ideas, are highly appreciated. Let's build, learn, and grow together! ü§ù
