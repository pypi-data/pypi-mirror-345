Metadata-Version: 2.4
Name: argo-ai
Version: 0.1.4
Summary: Agent-based Reasoning, Governance, and Orchestration
Requires-Python: >=3.13
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: dotenv>=0.9.9
Requires-Dist: openai>=1.76.0
Requires-Dist: pydantic>=2.11.3
Requires-Dist: rich>=14.0.0
Dynamic: license-file

# ARGO

![PyPI - Version](https://img.shields.io/pypi/v/argo-ai) ![GitHub License](https://img.shields.io/github/license/apiad/argo)



**ARGO** - *Agent-based Reasoning, Governance, and Orchestration* - is a Python framework for building powerful, collaborative multi-agent systems powered by large language models (LLMs) and other AI components. Inspired by the legendary ship Argo that carried the Argonauts on their epic quest, ARGO unites diverse intelligent agents to reason, govern, and orchestrate complex workflows together.
In Greek mythology, the Argo was a ship built by the master craftsman Argus and guided by the goddess Athena. It carried a crew of heroes-the Argonauts-on a daring quest for the Golden Fleece. This legendary voyage symbolizes teamwork, leadership, and the power of collective effort to overcome challenging tasks.

Similarly, **ARGO** embodies a system where multiple specialized agents collaborate under structured governance and orchestration to solve complex problems that no single agent could tackle alone.

## Key Concepts

### Agent-based Reasoning
Each agent in ARGO is an autonomous entity capable of independent reasoning, perception, and action. Agents leverage large language models and AI tools to interpret data, make decisions, and contribute specialized expertise to the collective.

### Governance
ARGO incorporates a governance layer that structures agent interactions, defines roles and responsibilities, and enforces protocols to ensure alignment, compliance, and accountability within the multi-agent system.

### Orchestration
The orchestration component manages communication, task allocation, and workflow execution among agents. It supports flexible collaboration patterns, from linear pipelines to dynamic, adaptive workflows.

## Features

> NOTE: ARGO is a work in progress. The current state is a proof of concept and is not yet ready for production use.

- **Multi-agent collaboration:** Build teams of LLM-powered agents working in concert.
- **Structured governance:** Define organizational models and enforce collaboration protocols.
- **Flexible orchestration:** Coordinate complex workflows with customizable communication and task delegation.
- **Extensible architecture:** Easily add new agent types, tools, and interaction patterns.
- **Pythonic API:** Intuitive interfaces designed for rapid prototyping and deployment.

## Installation

```bash
pip install argo
```

## Quick Start Example

TODO

## Changelog

### Roadmap

- Improve documentation and examples.
- Add skill definition via YAML.
- Add tool definition via YAML and REST endpoints.
- Add support for skill composition.
- Add support for multi-agent collaboration and delegation.

### 0.1.4

- Verbose mode for LLM.
- Several new examples.

### 0.1.3

- Automatic skill selection and tool invocation.

### 0.1.2

- Basic architecture for agents, skills, and tools.

## Contributing

Contributions are welcome! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.

## License

ARGO is released under the MIT License.
