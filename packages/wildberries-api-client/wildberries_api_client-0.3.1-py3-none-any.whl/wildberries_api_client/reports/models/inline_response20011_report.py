# coding: utf-8

"""
    Othety

    <div class=\"description_important\">     Uznat bolhe ob othetah mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/5f2162c5-069b-416d-a4e1-48da2a76e6b0\">spravohnom centre</a> </div>  S pomohu etih metodov vy mohete poluhit [osnovnye othety](/openapi/reports#tag/Osnovnye-otchyoty) i othety o:   1. [Ostatkah na skladah](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah)   2. [Tovarah s obazatelnoi markirovkoi](/openapi/reports#tag/Otchyot-o-tovarah-c-obyazatelnoj-markirovkoj)   3. [Uderhaniah](/openapi/reports#tag/Otchyoty-ob-uderzhaniyah)   4. [Platnoi priemke](/openapi/reports#tag/Platnaya-priyomka)   5. [Platnom hranenii](/openapi/reports#tag/Platnoe-hranenie)   6. [Prodahah po regionam](/openapi/reports#tag/Prodazhi-po-regionam)   7. [Dole brenda v prodahah](/openapi/reports#tag/Dolya-brenda-v-prodazhah)   8. [Skrytyh tovarah](/openapi/reports#tag/Skrytye-tovary)   9. [Vozvratah i peremehenii tovarov](/openapi/reports#tag/Otchyot-o-vozvratah-i-peremeshenii-tovarov)   10. [Dinamike oborahivaemosti](/openapi/reports#tag/Dinamika-oborachivaemosti)   # noqa: E501

    OpenAPI spec version: reports
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20011Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apply_date': 'str',
        'brand_rating': 'int',
        'price_percent': 'float',
        'qty_percent': 'float'
    }

    attribute_map = {
        'apply_date': 'applyDate',
        'brand_rating': 'brandRating',
        'price_percent': 'pricePercent',
        'qty_percent': 'qtyPercent'
    }

    def __init__(self, apply_date=None, brand_rating=None, price_percent=None, qty_percent=None):  # noqa: E501
        """InlineResponse20011Report - a model defined in Swagger"""  # noqa: E501
        self._apply_date = None
        self._brand_rating = None
        self._price_percent = None
        self._qty_percent = None
        self.discriminator = None
        if apply_date is not None:
            self.apply_date = apply_date
        if brand_rating is not None:
            self.brand_rating = brand_rating
        if price_percent is not None:
            self.price_percent = price_percent
        if qty_percent is not None:
            self.qty_percent = qty_percent

    @property
    def apply_date(self):
        """Gets the apply_date of this InlineResponse20011Report.  # noqa: E501

        Data  # noqa: E501

        :return: The apply_date of this InlineResponse20011Report.  # noqa: E501
        :rtype: str
        """
        return self._apply_date

    @apply_date.setter
    def apply_date(self, apply_date):
        """Sets the apply_date of this InlineResponse20011Report.

        Data  # noqa: E501

        :param apply_date: The apply_date of this InlineResponse20011Report.  # noqa: E501
        :type: str
        """

        self._apply_date = apply_date

    @property
    def brand_rating(self):
        """Gets the brand_rating of this InlineResponse20011Report.  # noqa: E501

        Reiting brenda v roditelskoi kategorii  # noqa: E501

        :return: The brand_rating of this InlineResponse20011Report.  # noqa: E501
        :rtype: int
        """
        return self._brand_rating

    @brand_rating.setter
    def brand_rating(self, brand_rating):
        """Sets the brand_rating of this InlineResponse20011Report.

        Reiting brenda v roditelskoi kategorii  # noqa: E501

        :param brand_rating: The brand_rating of this InlineResponse20011Report.  # noqa: E501
        :type: int
        """

        self._brand_rating = brand_rating

    @property
    def price_percent(self):
        """Gets the price_percent of this InlineResponse20011Report.  # noqa: E501

        Dola ot prodah v roditelskoi kategorii — cena, %  # noqa: E501

        :return: The price_percent of this InlineResponse20011Report.  # noqa: E501
        :rtype: float
        """
        return self._price_percent

    @price_percent.setter
    def price_percent(self, price_percent):
        """Sets the price_percent of this InlineResponse20011Report.

        Dola ot prodah v roditelskoi kategorii — cena, %  # noqa: E501

        :param price_percent: The price_percent of this InlineResponse20011Report.  # noqa: E501
        :type: float
        """

        self._price_percent = price_percent

    @property
    def qty_percent(self):
        """Gets the qty_percent of this InlineResponse20011Report.  # noqa: E501

        Dola ot prodah v roditelskoi kategorii — kolihestvo, %  # noqa: E501

        :return: The qty_percent of this InlineResponse20011Report.  # noqa: E501
        :rtype: float
        """
        return self._qty_percent

    @qty_percent.setter
    def qty_percent(self, qty_percent):
        """Sets the qty_percent of this InlineResponse20011Report.

        Dola ot prodah v roditelskoi kategorii — kolihestvo, %  # noqa: E501

        :param qty_percent: The qty_percent of this InlineResponse20011Report.  # noqa: E501
        :type: float
        """

        self._qty_percent = qty_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20011Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20011Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
