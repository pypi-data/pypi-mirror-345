"""
This type stub file was generated by pyright.
"""

from . import LockBase

""" Lockfile behaviour implemented via Unix PID files.
    """
class PIDLockFile(LockBase):
    """ Lockfile implemented as a Unix PID file.

    The lock file is a normal file named by the attribute `path`.
    A lock's PID file contains a single line of text, containing
    the process ID (PID) of the process that acquired the lock.

    >>> lock = PIDLockFile('somefile')
    >>> lock = PIDLockFile('somefile')
    """
    def __init__(self, path, threaded=..., timeout=...) -> None:
        ...
    
    def read_pid(self): # -> int | None:
        """ Get the PID from the lock file.
            """
        ...
    
    def is_locked(self): # -> bool:
        """ Test if the lock is currently held.

            The lock is held if the PID file for this lock exists.

            """
        ...
    
    def i_am_locking(self): # -> bool:
        """ Test if the lock is held by the current process.

        Returns ``True`` if the current process ID matches the
        number stored in the PID file.
        """
        ...
    
    def acquire(self, timeout=...): # -> None:
        """ Acquire the lock.

        Creates the PID file for this lock, or raises an error if
        the lock could not be acquired.
        """
        ...
    
    def release(self): # -> None:
        """ Release the lock.

            Removes the PID file to release the lock, or raises an
            error if the current process does not hold the lock.

            """
        ...
    
    def break_lock(self): # -> None:
        """ Break an existing lock.

            Removes the PID file if it already exists, otherwise does
            nothing.

            """
        ...
    


def read_pid_from_pidfile(pidfile_path): # -> int | None:
    """ Read the PID recorded in the named PID file.

        Read and return the numeric PID recorded as text in the named
        PID file. If the PID file cannot be read, or if the content is
        not a valid PID, return ``None``.

        """
    ...

def write_pid_to_pidfile(pidfile_path): # -> None:
    """ Write the PID in the named PID file.

        Get the numeric process ID (“PID”) of the current process
        and write it to the named file as a line of text.

        """
    ...

def remove_existing_pidfile(pidfile_path): # -> None:
    """ Remove the named PID file if it exists.

        Removing a PID file that doesn't already exist puts us in the
        desired state, so we ignore the condition if the file does not
        exist.

        """
    ...

