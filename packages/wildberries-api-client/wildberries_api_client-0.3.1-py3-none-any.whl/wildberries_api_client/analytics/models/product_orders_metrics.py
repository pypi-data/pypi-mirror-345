# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductOrdersMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dt': 'date',
        'avg_position': 'int',
        'orders': 'int'
    }

    attribute_map = {
        'dt': 'dt',
        'avg_position': 'avgPosition',
        'orders': 'orders'
    }

    def __init__(self, dt=None, avg_position=None, orders=None):  # noqa: E501
        """ProductOrdersMetrics - a model defined in Swagger"""  # noqa: E501
        self._dt = None
        self._avg_position = None
        self._orders = None
        self.discriminator = None
        self.dt = dt
        self.avg_position = avg_position
        self.orders = orders

    @property
    def dt(self):
        """Gets the dt of this ProductOrdersMetrics.  # noqa: E501

        Data sbora statistiki  # noqa: E501

        :return: The dt of this ProductOrdersMetrics.  # noqa: E501
        :rtype: date
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this ProductOrdersMetrics.

        Data sbora statistiki  # noqa: E501

        :param dt: The dt of this ProductOrdersMetrics.  # noqa: E501
        :type: date
        """
        if dt is None:
            raise ValueError("Invalid value for `dt`, must not be `None`")  # noqa: E501

        self._dt = dt

    @property
    def avg_position(self):
        """Gets the avg_position of this ProductOrdersMetrics.  # noqa: E501

        Srednaa pozicia tovara v rezultatah poiska  # noqa: E501

        :return: The avg_position of this ProductOrdersMetrics.  # noqa: E501
        :rtype: int
        """
        return self._avg_position

    @avg_position.setter
    def avg_position(self, avg_position):
        """Sets the avg_position of this ProductOrdersMetrics.

        Srednaa pozicia tovara v rezultatah poiska  # noqa: E501

        :param avg_position: The avg_position of this ProductOrdersMetrics.  # noqa: E501
        :type: int
        """
        if avg_position is None:
            raise ValueError("Invalid value for `avg_position`, must not be `None`")  # noqa: E501

        self._avg_position = avg_position

    @property
    def orders(self):
        """Gets the orders of this ProductOrdersMetrics.  # noqa: E501

        Skolko raz tovary iz poiska zakazali  # noqa: E501

        :return: The orders of this ProductOrdersMetrics.  # noqa: E501
        :rtype: int
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this ProductOrdersMetrics.

        Skolko raz tovary iz poiska zakazali  # noqa: E501

        :param orders: The orders of this ProductOrdersMetrics.  # noqa: E501
        :type: int
        """
        if orders is None:
            raise ValueError("Invalid value for `orders`, must not be `None`")  # noqa: E501

        self._orders = orders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductOrdersMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductOrdersMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
