# coding: utf-8

"""
    Rabota s tovarami

    <div class=\"description_ref\">     Uznat, kak ispolzovat metody v biznes-keisah, mohno v <a href=\"https://dev.wildberries.ru/news/101\">instrukcii po rabote s tovarami</a> </div>  Rabota s tovarami vkluhaet v seba:   1. [Sozdanie](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) i [redaktirovanie](/openapi/work-with-products#tag/Kartochki-tovarov) kartohek tovarov: v tom hisle, poluhenie [kategorii, predmetov i harakteristik tovarov](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) i zagruzku [mediafailov](/openapi/work-with-products#tag/Mediafajly).   2. Nastroiku [arlykov](/openapi/work-with-products#tag/Yarlyki) dla udobnogo poiska tovarov.   3. Ustanovku [cen i skidok](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Upravlenie [ostatkami tovarov](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) i [skladami](/openapi/work-with-products#tag/Sklady-prodavca), esli vy rabotaete po modeli prodah so sklada prodavca.   # noqa: E501

    OpenAPI spec version: products
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QuarantineGoods(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nm_id': 'int',
        'size_id': 'int',
        'tech_size_name': 'str',
        'currency_iso_code4217': 'str',
        'new_price': 'float',
        'old_price': 'float',
        'new_discount': 'int',
        'old_discount': 'int',
        'price_diff': 'float'
    }

    attribute_map = {
        'nm_id': 'nmID',
        'size_id': 'sizeID',
        'tech_size_name': 'techSizeName',
        'currency_iso_code4217': 'currencyIsoCode4217',
        'new_price': 'newPrice',
        'old_price': 'oldPrice',
        'new_discount': 'newDiscount',
        'old_discount': 'oldDiscount',
        'price_diff': 'priceDiff'
    }

    def __init__(self, nm_id=None, size_id=None, tech_size_name=None, currency_iso_code4217=None, new_price=None, old_price=None, new_discount=None, old_discount=None, price_diff=None):  # noqa: E501
        """QuarantineGoods - a model defined in Swagger"""  # noqa: E501
        self._nm_id = None
        self._size_id = None
        self._tech_size_name = None
        self._currency_iso_code4217 = None
        self._new_price = None
        self._old_price = None
        self._new_discount = None
        self._old_discount = None
        self._price_diff = None
        self.discriminator = None
        if nm_id is not None:
            self.nm_id = nm_id
        if size_id is not None:
            self.size_id = size_id
        if tech_size_name is not None:
            self.tech_size_name = tech_size_name
        if currency_iso_code4217 is not None:
            self.currency_iso_code4217 = currency_iso_code4217
        if new_price is not None:
            self.new_price = new_price
        if old_price is not None:
            self.old_price = old_price
        if new_discount is not None:
            self.new_discount = new_discount
        if old_discount is not None:
            self.old_discount = old_discount
        if price_diff is not None:
            self.price_diff = price_diff

    @property
    def nm_id(self):
        """Gets the nm_id of this QuarantineGoods.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this QuarantineGoods.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this QuarantineGoods.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this QuarantineGoods.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def size_id(self):
        """Gets the size_id of this QuarantineGoods.  # noqa: E501

        Ne ispolzuetsa  # noqa: E501

        :return: The size_id of this QuarantineGoods.  # noqa: E501
        :rtype: int
        """
        return self._size_id

    @size_id.setter
    def size_id(self, size_id):
        """Sets the size_id of this QuarantineGoods.

        Ne ispolzuetsa  # noqa: E501

        :param size_id: The size_id of this QuarantineGoods.  # noqa: E501
        :type: int
        """

        self._size_id = size_id

    @property
    def tech_size_name(self):
        """Gets the tech_size_name of this QuarantineGoods.  # noqa: E501

        Ne ispolzuetsa  # noqa: E501

        :return: The tech_size_name of this QuarantineGoods.  # noqa: E501
        :rtype: str
        """
        return self._tech_size_name

    @tech_size_name.setter
    def tech_size_name(self, tech_size_name):
        """Sets the tech_size_name of this QuarantineGoods.

        Ne ispolzuetsa  # noqa: E501

        :param tech_size_name: The tech_size_name of this QuarantineGoods.  # noqa: E501
        :type: str
        """

        self._tech_size_name = tech_size_name

    @property
    def currency_iso_code4217(self):
        """Gets the currency_iso_code4217 of this QuarantineGoods.  # noqa: E501

        Valuta po standartu ISO 4217  # noqa: E501

        :return: The currency_iso_code4217 of this QuarantineGoods.  # noqa: E501
        :rtype: str
        """
        return self._currency_iso_code4217

    @currency_iso_code4217.setter
    def currency_iso_code4217(self, currency_iso_code4217):
        """Sets the currency_iso_code4217 of this QuarantineGoods.

        Valuta po standartu ISO 4217  # noqa: E501

        :param currency_iso_code4217: The currency_iso_code4217 of this QuarantineGoods.  # noqa: E501
        :type: str
        """

        self._currency_iso_code4217 = currency_iso_code4217

    @property
    def new_price(self):
        """Gets the new_price of this QuarantineGoods.  # noqa: E501

        Novaa cena prodavca do skidki  # noqa: E501

        :return: The new_price of this QuarantineGoods.  # noqa: E501
        :rtype: float
        """
        return self._new_price

    @new_price.setter
    def new_price(self, new_price):
        """Sets the new_price of this QuarantineGoods.

        Novaa cena prodavca do skidki  # noqa: E501

        :param new_price: The new_price of this QuarantineGoods.  # noqa: E501
        :type: float
        """

        self._new_price = new_price

    @property
    def old_price(self):
        """Gets the old_price of this QuarantineGoods.  # noqa: E501

        Tekuhaa cena prodavca do skidki  # noqa: E501

        :return: The old_price of this QuarantineGoods.  # noqa: E501
        :rtype: float
        """
        return self._old_price

    @old_price.setter
    def old_price(self, old_price):
        """Sets the old_price of this QuarantineGoods.

        Tekuhaa cena prodavca do skidki  # noqa: E501

        :param old_price: The old_price of this QuarantineGoods.  # noqa: E501
        :type: float
        """

        self._old_price = old_price

    @property
    def new_discount(self):
        """Gets the new_discount of this QuarantineGoods.  # noqa: E501

        Novaa skidka prodavca, %  # noqa: E501

        :return: The new_discount of this QuarantineGoods.  # noqa: E501
        :rtype: int
        """
        return self._new_discount

    @new_discount.setter
    def new_discount(self, new_discount):
        """Sets the new_discount of this QuarantineGoods.

        Novaa skidka prodavca, %  # noqa: E501

        :param new_discount: The new_discount of this QuarantineGoods.  # noqa: E501
        :type: int
        """

        self._new_discount = new_discount

    @property
    def old_discount(self):
        """Gets the old_discount of this QuarantineGoods.  # noqa: E501

        Tekuhaa skidka prodavca, %  # noqa: E501

        :return: The old_discount of this QuarantineGoods.  # noqa: E501
        :rtype: int
        """
        return self._old_discount

    @old_discount.setter
    def old_discount(self, old_discount):
        """Sets the old_discount of this QuarantineGoods.

        Tekuhaa skidka prodavca, %  # noqa: E501

        :param old_discount: The old_discount of this QuarantineGoods.  # noqa: E501
        :type: int
        """

        self._old_discount = old_discount

    @property
    def price_diff(self):
        """Gets the price_diff of this QuarantineGoods.  # noqa: E501

        Raznica: `newPrice` * (1 - `newDiscount` / 100) - `oldPrice` * (1 - `oldDiscount` / 100)  # noqa: E501

        :return: The price_diff of this QuarantineGoods.  # noqa: E501
        :rtype: float
        """
        return self._price_diff

    @price_diff.setter
    def price_diff(self, price_diff):
        """Sets the price_diff of this QuarantineGoods.

        Raznica: `newPrice` * (1 - `newDiscount` / 100) - `oldPrice` * (1 - `oldDiscount` / 100)  # noqa: E501

        :param price_diff: The price_diff of this QuarantineGoods.  # noqa: E501
        :type: float
        """

        self._price_diff = price_diff

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuarantineGoods, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuarantineGoods):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
