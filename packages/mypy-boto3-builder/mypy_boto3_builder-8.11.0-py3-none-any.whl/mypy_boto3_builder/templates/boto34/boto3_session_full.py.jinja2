"""
Type annotated wrapper for {{ package.library_name }} Session.

{{ copyright }}

Usage::

    ```python
    from {{ package.name }}.{{ package.library_name }} import Session

    # Wrapper for {{ package.library_name }}.Session constructor
    # Returns {{ package.name }}.Session inherited from {{ package.library_name }}.Session
    session = Session()
    session: {{ package.name }}.{{ package.library_name }}.session.Session

    # s3_client is botocore.BaseClient
    # with type annotations only in type checking mode
    s3_client = session.s3.client()
    client.list_buckets()

    # s3_resource is boto3.ServiceResource
    # with type annotations only in type checking mode
    s3_resource = session.s3.resource()
    s3_resource.Bucket("bucket").objects.all()
    ```
"""

from {{ package.library_name }}.session import Session as Boto3Session
from {{ package.name }}.{{ package.library_name }}.service_factory import ServiceFactory, ServiceResourceFactory

{% for service_package in package.service_packages %}
from {{ service_package.name }}.client import {{ service_package.client.name }}
{% if service_package.service_resource %}
from {{ service_package.name }}.service_resource import {{ service_package.service_resource.name }}
{% endif %}
{% endfor %}


class Session(Boto3Session):
{% for service_package in package.service_packages %}
{% if service_package.service_resource %}
    @property
    def {{ package.get_property_name(service_package.service_name) }}(self) -> ServiceResourceFactory[{{ service_package.client.name }}, {{ service_package.service_resource.name }}]:
        return ServiceResourceFactory("{{ service_package.service_name.boto3_name }}", self)
{% else %}
    @property
    def {{ package.get_property_name(service_package.service_name) }}(self) -> ServiceFactory[{{ service_package.client.name }}]:
        return ServiceFactory("{{ service_package.service_name.boto3_name }}", self)
{% endif %}
{% endfor %}
