# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from empire_platform_api_public_client_legacy.models.aggregated_nominations_mns_or_gb import AggregatedNominationsMnsOrGb
from empire_platform_api_public_client_legacy.models.aggregated_nominations_nl import AggregatedNominationsNl

class AggregatedNominations(BaseModel):
    """
    AggregatedNominations
    """
    mns: AggregatedNominationsMnsOrGb = Field(...)
    gb: AggregatedNominationsMnsOrGb = Field(...)
    nl: AggregatedNominationsNl = Field(...)
    __properties = ["mns", "gb", "nl"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AggregatedNominations:
        """Create an instance of AggregatedNominations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of mns
        if self.mns:
            _dict['mns'] = self.mns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gb
        if self.gb:
            _dict['gb'] = self.gb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nl
        if self.nl:
            _dict['nl'] = self.nl.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AggregatedNominations:
        """Create an instance of AggregatedNominations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AggregatedNominations.parse_obj(obj)

        _obj = AggregatedNominations.parse_obj({
            "mns": AggregatedNominationsMnsOrGb.from_dict(obj.get("mns")) if obj.get("mns") is not None else None,
            "gb": AggregatedNominationsMnsOrGb.from_dict(obj.get("gb")) if obj.get("gb") is not None else None,
            "nl": AggregatedNominationsNl.from_dict(obj.get("nl")) if obj.get("nl") is not None else None
        })
        return _obj


