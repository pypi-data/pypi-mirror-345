# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PreventionPolicyMacArgs', 'PreventionPolicyMac']

@pulumi.input_type
class PreventionPolicyMacArgs:
    def __init__(__self__, *,
                 host_groups: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 ioa_rule_groups: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 chopper_webshell: Optional[pulumi.Input[builtins.bool]] = None,
                 cloud_adware_and_pup: Optional[pulumi.Input['PreventionPolicyMacCloudAdwareAndPupArgs']] = None,
                 cloud_anti_malware: Optional[pulumi.Input['PreventionPolicyMacCloudAntiMalwareArgs']] = None,
                 custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 detect_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 empyre_backdoor: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 hash_collector: Optional[pulumi.Input[builtins.bool]] = None,
                 intelligence_sourced_threats: Optional[pulumi.Input[builtins.bool]] = None,
                 kc_password_decoded: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 notify_end_users: Optional[pulumi.Input[builtins.bool]] = None,
                 prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
                 sensor_adware_and_pup: Optional[pulumi.Input['PreventionPolicyMacSensorAdwareAndPupArgs']] = None,
                 sensor_anti_malware: Optional[pulumi.Input['PreventionPolicyMacSensorAntiMalwareArgs']] = None,
                 sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 xpcom_shell: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a PreventionPolicyMac resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] chopper_webshell: Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        :param pulumi.Input['PreventionPolicyMacCloudAdwareAndPupArgs'] cloud_adware_and_pup: Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        :param pulumi.Input['PreventionPolicyMacCloudAntiMalwareArgs'] cloud_anti_malware: Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        :param pulumi.Input[builtins.bool] custom_blocking: Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        :param pulumi.Input[builtins.str] description: Description of the prevention policy.
        :param pulumi.Input[builtins.bool] detect_on_write: Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] empyre_backdoor: Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
        :param pulumi.Input[builtins.bool] enabled: Enable the prevention policy.
        :param pulumi.Input[builtins.bool] hash_collector: Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
        :param pulumi.Input[builtins.bool] intelligence_sourced_threats: Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        :param pulumi.Input[builtins.bool] kc_password_decoded: Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
        :param pulumi.Input[builtins.str] name: Name of the prevention policy.
        :param pulumi.Input[builtins.bool] notify_end_users: Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
        :param pulumi.Input[builtins.bool] prevent_suspicious_processes: Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        :param pulumi.Input[builtins.bool] quarantine: Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        :param pulumi.Input[builtins.bool] quarantine_on_write: Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] script_based_execution_monitoring: Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        :param pulumi.Input['PreventionPolicyMacSensorAdwareAndPupArgs'] sensor_adware_and_pup: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
        :param pulumi.Input['PreventionPolicyMacSensorAntiMalwareArgs'] sensor_anti_malware: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        :param pulumi.Input[builtins.bool] sensor_tampering_protection: Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        :param pulumi.Input[builtins.bool] upload_unknown_detection_related_executables: Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] upload_unknown_executables: Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] xpcom_shell: Whether to enable the setting. The execution of an XPCOM shell was blocked.
        """
        pulumi.set(__self__, "host_groups", host_groups)
        pulumi.set(__self__, "ioa_rule_groups", ioa_rule_groups)
        if chopper_webshell is not None:
            pulumi.set(__self__, "chopper_webshell", chopper_webshell)
        if cloud_adware_and_pup is not None:
            pulumi.set(__self__, "cloud_adware_and_pup", cloud_adware_and_pup)
        if cloud_anti_malware is not None:
            pulumi.set(__self__, "cloud_anti_malware", cloud_anti_malware)
        if custom_blocking is not None:
            pulumi.set(__self__, "custom_blocking", custom_blocking)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detect_on_write is not None:
            pulumi.set(__self__, "detect_on_write", detect_on_write)
        if empyre_backdoor is not None:
            pulumi.set(__self__, "empyre_backdoor", empyre_backdoor)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hash_collector is not None:
            pulumi.set(__self__, "hash_collector", hash_collector)
        if intelligence_sourced_threats is not None:
            pulumi.set(__self__, "intelligence_sourced_threats", intelligence_sourced_threats)
        if kc_password_decoded is not None:
            pulumi.set(__self__, "kc_password_decoded", kc_password_decoded)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_end_users is not None:
            pulumi.set(__self__, "notify_end_users", notify_end_users)
        if prevent_suspicious_processes is not None:
            pulumi.set(__self__, "prevent_suspicious_processes", prevent_suspicious_processes)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_on_write is not None:
            pulumi.set(__self__, "quarantine_on_write", quarantine_on_write)
        if script_based_execution_monitoring is not None:
            pulumi.set(__self__, "script_based_execution_monitoring", script_based_execution_monitoring)
        if sensor_adware_and_pup is not None:
            pulumi.set(__self__, "sensor_adware_and_pup", sensor_adware_and_pup)
        if sensor_anti_malware is not None:
            pulumi.set(__self__, "sensor_anti_malware", sensor_anti_malware)
        if sensor_tampering_protection is not None:
            pulumi.set(__self__, "sensor_tampering_protection", sensor_tampering_protection)
        if upload_unknown_detection_related_executables is not None:
            pulumi.set(__self__, "upload_unknown_detection_related_executables", upload_unknown_detection_related_executables)
        if upload_unknown_executables is not None:
            pulumi.set(__self__, "upload_unknown_executables", upload_unknown_executables)
        if xpcom_shell is not None:
            pulumi.set(__self__, "xpcom_shell", xpcom_shell)

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        Host Group ids to attach to the prevention policy.
        """
        return pulumi.get(self, "host_groups")

    @host_groups.setter
    def host_groups(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "host_groups", value)

    @property
    @pulumi.getter(name="ioaRuleGroups")
    def ioa_rule_groups(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        IOA Rule Group to attach to the prevention policy.
        """
        return pulumi.get(self, "ioa_rule_groups")

    @ioa_rule_groups.setter
    def ioa_rule_groups(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ioa_rule_groups", value)

    @property
    @pulumi.getter(name="chopperWebshell")
    def chopper_webshell(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        """
        return pulumi.get(self, "chopper_webshell")

    @chopper_webshell.setter
    def chopper_webshell(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "chopper_webshell", value)

    @property
    @pulumi.getter(name="cloudAdwareAndPup")
    def cloud_adware_and_pup(self) -> Optional[pulumi.Input['PreventionPolicyMacCloudAdwareAndPupArgs']]:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        """
        return pulumi.get(self, "cloud_adware_and_pup")

    @cloud_adware_and_pup.setter
    def cloud_adware_and_pup(self, value: Optional[pulumi.Input['PreventionPolicyMacCloudAdwareAndPupArgs']]):
        pulumi.set(self, "cloud_adware_and_pup", value)

    @property
    @pulumi.getter(name="cloudAntiMalware")
    def cloud_anti_malware(self) -> Optional[pulumi.Input['PreventionPolicyMacCloudAntiMalwareArgs']]:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        """
        return pulumi.get(self, "cloud_anti_malware")

    @cloud_anti_malware.setter
    def cloud_anti_malware(self, value: Optional[pulumi.Input['PreventionPolicyMacCloudAntiMalwareArgs']]):
        pulumi.set(self, "cloud_anti_malware", value)

    @property
    @pulumi.getter(name="customBlocking")
    def custom_blocking(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        """
        return pulumi.get(self, "custom_blocking")

    @custom_blocking.setter
    def custom_blocking(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "custom_blocking", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of the prevention policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="detectOnWrite")
    def detect_on_write(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        """
        return pulumi.get(self, "detect_on_write")

    @detect_on_write.setter
    def detect_on_write(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "detect_on_write", value)

    @property
    @pulumi.getter(name="empyreBackdoor")
    def empyre_backdoor(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
        """
        return pulumi.get(self, "empyre_backdoor")

    @empyre_backdoor.setter
    def empyre_backdoor(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "empyre_backdoor", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable the prevention policy.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="hashCollector")
    def hash_collector(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
        """
        return pulumi.get(self, "hash_collector")

    @hash_collector.setter
    def hash_collector(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "hash_collector", value)

    @property
    @pulumi.getter(name="intelligenceSourcedThreats")
    def intelligence_sourced_threats(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        """
        return pulumi.get(self, "intelligence_sourced_threats")

    @intelligence_sourced_threats.setter
    def intelligence_sourced_threats(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "intelligence_sourced_threats", value)

    @property
    @pulumi.getter(name="kcPasswordDecoded")
    def kc_password_decoded(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
        """
        return pulumi.get(self, "kc_password_decoded")

    @kc_password_decoded.setter
    def kc_password_decoded(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "kc_password_decoded", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the prevention policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyEndUsers")
    def notify_end_users(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
        """
        return pulumi.get(self, "notify_end_users")

    @notify_end_users.setter
    def notify_end_users(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "notify_end_users", value)

    @property
    @pulumi.getter(name="preventSuspiciousProcesses")
    def prevent_suspicious_processes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        """
        return pulumi.get(self, "prevent_suspicious_processes")

    @prevent_suspicious_processes.setter
    def prevent_suspicious_processes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "prevent_suspicious_processes", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineOnWrite")
    def quarantine_on_write(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        """
        return pulumi.get(self, "quarantine_on_write")

    @quarantine_on_write.setter
    def quarantine_on_write(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "quarantine_on_write", value)

    @property
    @pulumi.getter(name="scriptBasedExecutionMonitoring")
    def script_based_execution_monitoring(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        """
        return pulumi.get(self, "script_based_execution_monitoring")

    @script_based_execution_monitoring.setter
    def script_based_execution_monitoring(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "script_based_execution_monitoring", value)

    @property
    @pulumi.getter(name="sensorAdwareAndPup")
    def sensor_adware_and_pup(self) -> Optional[pulumi.Input['PreventionPolicyMacSensorAdwareAndPupArgs']]:
        """
        For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
        """
        return pulumi.get(self, "sensor_adware_and_pup")

    @sensor_adware_and_pup.setter
    def sensor_adware_and_pup(self, value: Optional[pulumi.Input['PreventionPolicyMacSensorAdwareAndPupArgs']]):
        pulumi.set(self, "sensor_adware_and_pup", value)

    @property
    @pulumi.getter(name="sensorAntiMalware")
    def sensor_anti_malware(self) -> Optional[pulumi.Input['PreventionPolicyMacSensorAntiMalwareArgs']]:
        """
        For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        """
        return pulumi.get(self, "sensor_anti_malware")

    @sensor_anti_malware.setter
    def sensor_anti_malware(self, value: Optional[pulumi.Input['PreventionPolicyMacSensorAntiMalwareArgs']]):
        pulumi.set(self, "sensor_anti_malware", value)

    @property
    @pulumi.getter(name="sensorTamperingProtection")
    def sensor_tampering_protection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        """
        return pulumi.get(self, "sensor_tampering_protection")

    @sensor_tampering_protection.setter
    def sensor_tampering_protection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sensor_tampering_protection", value)

    @property
    @pulumi.getter(name="uploadUnknownDetectionRelatedExecutables")
    def upload_unknown_detection_related_executables(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_detection_related_executables")

    @upload_unknown_detection_related_executables.setter
    def upload_unknown_detection_related_executables(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upload_unknown_detection_related_executables", value)

    @property
    @pulumi.getter(name="uploadUnknownExecutables")
    def upload_unknown_executables(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_executables")

    @upload_unknown_executables.setter
    def upload_unknown_executables(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upload_unknown_executables", value)

    @property
    @pulumi.getter(name="xpcomShell")
    def xpcom_shell(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. The execution of an XPCOM shell was blocked.
        """
        return pulumi.get(self, "xpcom_shell")

    @xpcom_shell.setter
    def xpcom_shell(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "xpcom_shell", value)


@pulumi.input_type
class _PreventionPolicyMacState:
    def __init__(__self__, *,
                 chopper_webshell: Optional[pulumi.Input[builtins.bool]] = None,
                 cloud_adware_and_pup: Optional[pulumi.Input['PreventionPolicyMacCloudAdwareAndPupArgs']] = None,
                 cloud_anti_malware: Optional[pulumi.Input['PreventionPolicyMacCloudAntiMalwareArgs']] = None,
                 custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 detect_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 empyre_backdoor: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 hash_collector: Optional[pulumi.Input[builtins.bool]] = None,
                 host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 intelligence_sourced_threats: Optional[pulumi.Input[builtins.bool]] = None,
                 ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kc_password_decoded: Optional[pulumi.Input[builtins.bool]] = None,
                 last_updated: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 notify_end_users: Optional[pulumi.Input[builtins.bool]] = None,
                 prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
                 sensor_adware_and_pup: Optional[pulumi.Input['PreventionPolicyMacSensorAdwareAndPupArgs']] = None,
                 sensor_anti_malware: Optional[pulumi.Input['PreventionPolicyMacSensorAntiMalwareArgs']] = None,
                 sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 xpcom_shell: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering PreventionPolicyMac resources.
        :param pulumi.Input[builtins.bool] chopper_webshell: Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        :param pulumi.Input['PreventionPolicyMacCloudAdwareAndPupArgs'] cloud_adware_and_pup: Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        :param pulumi.Input['PreventionPolicyMacCloudAntiMalwareArgs'] cloud_anti_malware: Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        :param pulumi.Input[builtins.bool] custom_blocking: Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        :param pulumi.Input[builtins.str] description: Description of the prevention policy.
        :param pulumi.Input[builtins.bool] detect_on_write: Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] empyre_backdoor: Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
        :param pulumi.Input[builtins.bool] enabled: Enable the prevention policy.
        :param pulumi.Input[builtins.bool] hash_collector: Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] intelligence_sourced_threats: Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] kc_password_decoded: Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
        :param pulumi.Input[builtins.str] name: Name of the prevention policy.
        :param pulumi.Input[builtins.bool] notify_end_users: Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
        :param pulumi.Input[builtins.bool] prevent_suspicious_processes: Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        :param pulumi.Input[builtins.bool] quarantine: Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        :param pulumi.Input[builtins.bool] quarantine_on_write: Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] script_based_execution_monitoring: Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        :param pulumi.Input['PreventionPolicyMacSensorAdwareAndPupArgs'] sensor_adware_and_pup: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
        :param pulumi.Input['PreventionPolicyMacSensorAntiMalwareArgs'] sensor_anti_malware: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        :param pulumi.Input[builtins.bool] sensor_tampering_protection: Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        :param pulumi.Input[builtins.bool] upload_unknown_detection_related_executables: Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] upload_unknown_executables: Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] xpcom_shell: Whether to enable the setting. The execution of an XPCOM shell was blocked.
        """
        if chopper_webshell is not None:
            pulumi.set(__self__, "chopper_webshell", chopper_webshell)
        if cloud_adware_and_pup is not None:
            pulumi.set(__self__, "cloud_adware_and_pup", cloud_adware_and_pup)
        if cloud_anti_malware is not None:
            pulumi.set(__self__, "cloud_anti_malware", cloud_anti_malware)
        if custom_blocking is not None:
            pulumi.set(__self__, "custom_blocking", custom_blocking)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detect_on_write is not None:
            pulumi.set(__self__, "detect_on_write", detect_on_write)
        if empyre_backdoor is not None:
            pulumi.set(__self__, "empyre_backdoor", empyre_backdoor)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hash_collector is not None:
            pulumi.set(__self__, "hash_collector", hash_collector)
        if host_groups is not None:
            pulumi.set(__self__, "host_groups", host_groups)
        if intelligence_sourced_threats is not None:
            pulumi.set(__self__, "intelligence_sourced_threats", intelligence_sourced_threats)
        if ioa_rule_groups is not None:
            pulumi.set(__self__, "ioa_rule_groups", ioa_rule_groups)
        if kc_password_decoded is not None:
            pulumi.set(__self__, "kc_password_decoded", kc_password_decoded)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_end_users is not None:
            pulumi.set(__self__, "notify_end_users", notify_end_users)
        if prevent_suspicious_processes is not None:
            pulumi.set(__self__, "prevent_suspicious_processes", prevent_suspicious_processes)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_on_write is not None:
            pulumi.set(__self__, "quarantine_on_write", quarantine_on_write)
        if script_based_execution_monitoring is not None:
            pulumi.set(__self__, "script_based_execution_monitoring", script_based_execution_monitoring)
        if sensor_adware_and_pup is not None:
            pulumi.set(__self__, "sensor_adware_and_pup", sensor_adware_and_pup)
        if sensor_anti_malware is not None:
            pulumi.set(__self__, "sensor_anti_malware", sensor_anti_malware)
        if sensor_tampering_protection is not None:
            pulumi.set(__self__, "sensor_tampering_protection", sensor_tampering_protection)
        if upload_unknown_detection_related_executables is not None:
            pulumi.set(__self__, "upload_unknown_detection_related_executables", upload_unknown_detection_related_executables)
        if upload_unknown_executables is not None:
            pulumi.set(__self__, "upload_unknown_executables", upload_unknown_executables)
        if xpcom_shell is not None:
            pulumi.set(__self__, "xpcom_shell", xpcom_shell)

    @property
    @pulumi.getter(name="chopperWebshell")
    def chopper_webshell(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        """
        return pulumi.get(self, "chopper_webshell")

    @chopper_webshell.setter
    def chopper_webshell(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "chopper_webshell", value)

    @property
    @pulumi.getter(name="cloudAdwareAndPup")
    def cloud_adware_and_pup(self) -> Optional[pulumi.Input['PreventionPolicyMacCloudAdwareAndPupArgs']]:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        """
        return pulumi.get(self, "cloud_adware_and_pup")

    @cloud_adware_and_pup.setter
    def cloud_adware_and_pup(self, value: Optional[pulumi.Input['PreventionPolicyMacCloudAdwareAndPupArgs']]):
        pulumi.set(self, "cloud_adware_and_pup", value)

    @property
    @pulumi.getter(name="cloudAntiMalware")
    def cloud_anti_malware(self) -> Optional[pulumi.Input['PreventionPolicyMacCloudAntiMalwareArgs']]:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        """
        return pulumi.get(self, "cloud_anti_malware")

    @cloud_anti_malware.setter
    def cloud_anti_malware(self, value: Optional[pulumi.Input['PreventionPolicyMacCloudAntiMalwareArgs']]):
        pulumi.set(self, "cloud_anti_malware", value)

    @property
    @pulumi.getter(name="customBlocking")
    def custom_blocking(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        """
        return pulumi.get(self, "custom_blocking")

    @custom_blocking.setter
    def custom_blocking(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "custom_blocking", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of the prevention policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="detectOnWrite")
    def detect_on_write(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        """
        return pulumi.get(self, "detect_on_write")

    @detect_on_write.setter
    def detect_on_write(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "detect_on_write", value)

    @property
    @pulumi.getter(name="empyreBackdoor")
    def empyre_backdoor(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
        """
        return pulumi.get(self, "empyre_backdoor")

    @empyre_backdoor.setter
    def empyre_backdoor(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "empyre_backdoor", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable the prevention policy.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="hashCollector")
    def hash_collector(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
        """
        return pulumi.get(self, "hash_collector")

    @hash_collector.setter
    def hash_collector(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "hash_collector", value)

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Host Group ids to attach to the prevention policy.
        """
        return pulumi.get(self, "host_groups")

    @host_groups.setter
    def host_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "host_groups", value)

    @property
    @pulumi.getter(name="intelligenceSourcedThreats")
    def intelligence_sourced_threats(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        """
        return pulumi.get(self, "intelligence_sourced_threats")

    @intelligence_sourced_threats.setter
    def intelligence_sourced_threats(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "intelligence_sourced_threats", value)

    @property
    @pulumi.getter(name="ioaRuleGroups")
    def ioa_rule_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        IOA Rule Group to attach to the prevention policy.
        """
        return pulumi.get(self, "ioa_rule_groups")

    @ioa_rule_groups.setter
    def ioa_rule_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ioa_rule_groups", value)

    @property
    @pulumi.getter(name="kcPasswordDecoded")
    def kc_password_decoded(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
        """
        return pulumi.get(self, "kc_password_decoded")

    @kc_password_decoded.setter
    def kc_password_decoded(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "kc_password_decoded", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the prevention policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyEndUsers")
    def notify_end_users(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
        """
        return pulumi.get(self, "notify_end_users")

    @notify_end_users.setter
    def notify_end_users(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "notify_end_users", value)

    @property
    @pulumi.getter(name="preventSuspiciousProcesses")
    def prevent_suspicious_processes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        """
        return pulumi.get(self, "prevent_suspicious_processes")

    @prevent_suspicious_processes.setter
    def prevent_suspicious_processes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "prevent_suspicious_processes", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineOnWrite")
    def quarantine_on_write(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        """
        return pulumi.get(self, "quarantine_on_write")

    @quarantine_on_write.setter
    def quarantine_on_write(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "quarantine_on_write", value)

    @property
    @pulumi.getter(name="scriptBasedExecutionMonitoring")
    def script_based_execution_monitoring(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        """
        return pulumi.get(self, "script_based_execution_monitoring")

    @script_based_execution_monitoring.setter
    def script_based_execution_monitoring(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "script_based_execution_monitoring", value)

    @property
    @pulumi.getter(name="sensorAdwareAndPup")
    def sensor_adware_and_pup(self) -> Optional[pulumi.Input['PreventionPolicyMacSensorAdwareAndPupArgs']]:
        """
        For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
        """
        return pulumi.get(self, "sensor_adware_and_pup")

    @sensor_adware_and_pup.setter
    def sensor_adware_and_pup(self, value: Optional[pulumi.Input['PreventionPolicyMacSensorAdwareAndPupArgs']]):
        pulumi.set(self, "sensor_adware_and_pup", value)

    @property
    @pulumi.getter(name="sensorAntiMalware")
    def sensor_anti_malware(self) -> Optional[pulumi.Input['PreventionPolicyMacSensorAntiMalwareArgs']]:
        """
        For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        """
        return pulumi.get(self, "sensor_anti_malware")

    @sensor_anti_malware.setter
    def sensor_anti_malware(self, value: Optional[pulumi.Input['PreventionPolicyMacSensorAntiMalwareArgs']]):
        pulumi.set(self, "sensor_anti_malware", value)

    @property
    @pulumi.getter(name="sensorTamperingProtection")
    def sensor_tampering_protection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        """
        return pulumi.get(self, "sensor_tampering_protection")

    @sensor_tampering_protection.setter
    def sensor_tampering_protection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sensor_tampering_protection", value)

    @property
    @pulumi.getter(name="uploadUnknownDetectionRelatedExecutables")
    def upload_unknown_detection_related_executables(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_detection_related_executables")

    @upload_unknown_detection_related_executables.setter
    def upload_unknown_detection_related_executables(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upload_unknown_detection_related_executables", value)

    @property
    @pulumi.getter(name="uploadUnknownExecutables")
    def upload_unknown_executables(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_executables")

    @upload_unknown_executables.setter
    def upload_unknown_executables(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upload_unknown_executables", value)

    @property
    @pulumi.getter(name="xpcomShell")
    def xpcom_shell(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. The execution of an XPCOM shell was blocked.
        """
        return pulumi.get(self, "xpcom_shell")

    @xpcom_shell.setter
    def xpcom_shell(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "xpcom_shell", value)


class PreventionPolicyMac(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 chopper_webshell: Optional[pulumi.Input[builtins.bool]] = None,
                 cloud_adware_and_pup: Optional[pulumi.Input[Union['PreventionPolicyMacCloudAdwareAndPupArgs', 'PreventionPolicyMacCloudAdwareAndPupArgsDict']]] = None,
                 cloud_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyMacCloudAntiMalwareArgs', 'PreventionPolicyMacCloudAntiMalwareArgsDict']]] = None,
                 custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 detect_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 empyre_backdoor: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 hash_collector: Optional[pulumi.Input[builtins.bool]] = None,
                 host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 intelligence_sourced_threats: Optional[pulumi.Input[builtins.bool]] = None,
                 ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kc_password_decoded: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 notify_end_users: Optional[pulumi.Input[builtins.bool]] = None,
                 prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
                 sensor_adware_and_pup: Optional[pulumi.Input[Union['PreventionPolicyMacSensorAdwareAndPupArgs', 'PreventionPolicyMacSensorAdwareAndPupArgsDict']]] = None,
                 sensor_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyMacSensorAntiMalwareArgs', 'PreventionPolicyMacSensorAntiMalwareArgsDict']]] = None,
                 sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 xpcom_shell: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        This resource allows you to manage prevention policies for Mac hosts. Prevention policies allow you to manage what activity will trigger detections and preventions on your hosts.

        ## API Scopes

        The following API scopes are required:

        - Prevention policies | Read & Write

        ## Example Usage

        ```python
        import pulumi
        import crowdstrike_pulumi as crowdstrike

        example = crowdstrike.PreventionPolicyMac("example",
            enabled=False,
            description="Made with Pulumi",
            host_groups=[],
            ioa_rule_groups=[],
            cloud_adware_and_pup={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            cloud_anti_malware={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            sensor_anti_malware={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            sensor_adware_and_pup={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            notify_end_users=True,
            custom_blocking=True,
            detect_on_write=True,
            intelligence_sourced_threats=True,
            prevent_suspicious_processes=True,
            quarantine=True,
            quarantine_on_write=True,
            script_based_execution_monitoring=True,
            sensor_tampering_protection=True,
            upload_unknown_executables=True,
            upload_unknown_detection_related_executables=True,
            xpcom_shell=True,
            kc_password_decoded=True,
            hash_collector=True,
            empyre_backdoor=True,
            chopper_webshell=True)
        pulumi.export("preventionPolicyMac", example)
        ```

        ## Import

        prevention policy can be imported by specifying the policy id.

        ```sh
        $ pulumi import crowdstrike:index/preventionPolicyMac:PreventionPolicyMac example 7fb858a949034a0cbca175f660f1e769
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] chopper_webshell: Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        :param pulumi.Input[Union['PreventionPolicyMacCloudAdwareAndPupArgs', 'PreventionPolicyMacCloudAdwareAndPupArgsDict']] cloud_adware_and_pup: Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        :param pulumi.Input[Union['PreventionPolicyMacCloudAntiMalwareArgs', 'PreventionPolicyMacCloudAntiMalwareArgsDict']] cloud_anti_malware: Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        :param pulumi.Input[builtins.bool] custom_blocking: Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        :param pulumi.Input[builtins.str] description: Description of the prevention policy.
        :param pulumi.Input[builtins.bool] detect_on_write: Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] empyre_backdoor: Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
        :param pulumi.Input[builtins.bool] enabled: Enable the prevention policy.
        :param pulumi.Input[builtins.bool] hash_collector: Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] intelligence_sourced_threats: Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] kc_password_decoded: Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
        :param pulumi.Input[builtins.str] name: Name of the prevention policy.
        :param pulumi.Input[builtins.bool] notify_end_users: Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
        :param pulumi.Input[builtins.bool] prevent_suspicious_processes: Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        :param pulumi.Input[builtins.bool] quarantine: Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        :param pulumi.Input[builtins.bool] quarantine_on_write: Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] script_based_execution_monitoring: Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        :param pulumi.Input[Union['PreventionPolicyMacSensorAdwareAndPupArgs', 'PreventionPolicyMacSensorAdwareAndPupArgsDict']] sensor_adware_and_pup: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
        :param pulumi.Input[Union['PreventionPolicyMacSensorAntiMalwareArgs', 'PreventionPolicyMacSensorAntiMalwareArgsDict']] sensor_anti_malware: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        :param pulumi.Input[builtins.bool] sensor_tampering_protection: Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        :param pulumi.Input[builtins.bool] upload_unknown_detection_related_executables: Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] upload_unknown_executables: Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] xpcom_shell: Whether to enable the setting. The execution of an XPCOM shell was blocked.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PreventionPolicyMacArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to manage prevention policies for Mac hosts. Prevention policies allow you to manage what activity will trigger detections and preventions on your hosts.

        ## API Scopes

        The following API scopes are required:

        - Prevention policies | Read & Write

        ## Example Usage

        ```python
        import pulumi
        import crowdstrike_pulumi as crowdstrike

        example = crowdstrike.PreventionPolicyMac("example",
            enabled=False,
            description="Made with Pulumi",
            host_groups=[],
            ioa_rule_groups=[],
            cloud_adware_and_pup={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            cloud_anti_malware={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            sensor_anti_malware={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            sensor_adware_and_pup={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            notify_end_users=True,
            custom_blocking=True,
            detect_on_write=True,
            intelligence_sourced_threats=True,
            prevent_suspicious_processes=True,
            quarantine=True,
            quarantine_on_write=True,
            script_based_execution_monitoring=True,
            sensor_tampering_protection=True,
            upload_unknown_executables=True,
            upload_unknown_detection_related_executables=True,
            xpcom_shell=True,
            kc_password_decoded=True,
            hash_collector=True,
            empyre_backdoor=True,
            chopper_webshell=True)
        pulumi.export("preventionPolicyMac", example)
        ```

        ## Import

        prevention policy can be imported by specifying the policy id.

        ```sh
        $ pulumi import crowdstrike:index/preventionPolicyMac:PreventionPolicyMac example 7fb858a949034a0cbca175f660f1e769
        ```

        :param str resource_name: The name of the resource.
        :param PreventionPolicyMacArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PreventionPolicyMacArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 chopper_webshell: Optional[pulumi.Input[builtins.bool]] = None,
                 cloud_adware_and_pup: Optional[pulumi.Input[Union['PreventionPolicyMacCloudAdwareAndPupArgs', 'PreventionPolicyMacCloudAdwareAndPupArgsDict']]] = None,
                 cloud_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyMacCloudAntiMalwareArgs', 'PreventionPolicyMacCloudAntiMalwareArgsDict']]] = None,
                 custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 detect_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 empyre_backdoor: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 hash_collector: Optional[pulumi.Input[builtins.bool]] = None,
                 host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 intelligence_sourced_threats: Optional[pulumi.Input[builtins.bool]] = None,
                 ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kc_password_decoded: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 notify_end_users: Optional[pulumi.Input[builtins.bool]] = None,
                 prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
                 sensor_adware_and_pup: Optional[pulumi.Input[Union['PreventionPolicyMacSensorAdwareAndPupArgs', 'PreventionPolicyMacSensorAdwareAndPupArgsDict']]] = None,
                 sensor_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyMacSensorAntiMalwareArgs', 'PreventionPolicyMacSensorAntiMalwareArgsDict']]] = None,
                 sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 xpcom_shell: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PreventionPolicyMacArgs.__new__(PreventionPolicyMacArgs)

            __props__.__dict__["chopper_webshell"] = chopper_webshell
            __props__.__dict__["cloud_adware_and_pup"] = cloud_adware_and_pup
            __props__.__dict__["cloud_anti_malware"] = cloud_anti_malware
            __props__.__dict__["custom_blocking"] = custom_blocking
            __props__.__dict__["description"] = description
            __props__.__dict__["detect_on_write"] = detect_on_write
            __props__.__dict__["empyre_backdoor"] = empyre_backdoor
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["hash_collector"] = hash_collector
            if host_groups is None and not opts.urn:
                raise TypeError("Missing required property 'host_groups'")
            __props__.__dict__["host_groups"] = host_groups
            __props__.__dict__["intelligence_sourced_threats"] = intelligence_sourced_threats
            if ioa_rule_groups is None and not opts.urn:
                raise TypeError("Missing required property 'ioa_rule_groups'")
            __props__.__dict__["ioa_rule_groups"] = ioa_rule_groups
            __props__.__dict__["kc_password_decoded"] = kc_password_decoded
            __props__.__dict__["name"] = name
            __props__.__dict__["notify_end_users"] = notify_end_users
            __props__.__dict__["prevent_suspicious_processes"] = prevent_suspicious_processes
            __props__.__dict__["quarantine"] = quarantine
            __props__.__dict__["quarantine_on_write"] = quarantine_on_write
            __props__.__dict__["script_based_execution_monitoring"] = script_based_execution_monitoring
            __props__.__dict__["sensor_adware_and_pup"] = sensor_adware_and_pup
            __props__.__dict__["sensor_anti_malware"] = sensor_anti_malware
            __props__.__dict__["sensor_tampering_protection"] = sensor_tampering_protection
            __props__.__dict__["upload_unknown_detection_related_executables"] = upload_unknown_detection_related_executables
            __props__.__dict__["upload_unknown_executables"] = upload_unknown_executables
            __props__.__dict__["xpcom_shell"] = xpcom_shell
            __props__.__dict__["last_updated"] = None
        super(PreventionPolicyMac, __self__).__init__(
            'crowdstrike:index/preventionPolicyMac:PreventionPolicyMac',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            chopper_webshell: Optional[pulumi.Input[builtins.bool]] = None,
            cloud_adware_and_pup: Optional[pulumi.Input[Union['PreventionPolicyMacCloudAdwareAndPupArgs', 'PreventionPolicyMacCloudAdwareAndPupArgsDict']]] = None,
            cloud_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyMacCloudAntiMalwareArgs', 'PreventionPolicyMacCloudAntiMalwareArgsDict']]] = None,
            custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            detect_on_write: Optional[pulumi.Input[builtins.bool]] = None,
            empyre_backdoor: Optional[pulumi.Input[builtins.bool]] = None,
            enabled: Optional[pulumi.Input[builtins.bool]] = None,
            hash_collector: Optional[pulumi.Input[builtins.bool]] = None,
            host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            intelligence_sourced_threats: Optional[pulumi.Input[builtins.bool]] = None,
            ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            kc_password_decoded: Optional[pulumi.Input[builtins.bool]] = None,
            last_updated: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            notify_end_users: Optional[pulumi.Input[builtins.bool]] = None,
            prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
            quarantine: Optional[pulumi.Input[builtins.bool]] = None,
            quarantine_on_write: Optional[pulumi.Input[builtins.bool]] = None,
            script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
            sensor_adware_and_pup: Optional[pulumi.Input[Union['PreventionPolicyMacSensorAdwareAndPupArgs', 'PreventionPolicyMacSensorAdwareAndPupArgsDict']]] = None,
            sensor_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyMacSensorAntiMalwareArgs', 'PreventionPolicyMacSensorAntiMalwareArgsDict']]] = None,
            sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
            upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
            upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None,
            xpcom_shell: Optional[pulumi.Input[builtins.bool]] = None) -> 'PreventionPolicyMac':
        """
        Get an existing PreventionPolicyMac resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] chopper_webshell: Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        :param pulumi.Input[Union['PreventionPolicyMacCloudAdwareAndPupArgs', 'PreventionPolicyMacCloudAdwareAndPupArgsDict']] cloud_adware_and_pup: Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        :param pulumi.Input[Union['PreventionPolicyMacCloudAntiMalwareArgs', 'PreventionPolicyMacCloudAntiMalwareArgsDict']] cloud_anti_malware: Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        :param pulumi.Input[builtins.bool] custom_blocking: Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        :param pulumi.Input[builtins.str] description: Description of the prevention policy.
        :param pulumi.Input[builtins.bool] detect_on_write: Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] empyre_backdoor: Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
        :param pulumi.Input[builtins.bool] enabled: Enable the prevention policy.
        :param pulumi.Input[builtins.bool] hash_collector: Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] intelligence_sourced_threats: Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] kc_password_decoded: Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
        :param pulumi.Input[builtins.str] name: Name of the prevention policy.
        :param pulumi.Input[builtins.bool] notify_end_users: Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
        :param pulumi.Input[builtins.bool] prevent_suspicious_processes: Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        :param pulumi.Input[builtins.bool] quarantine: Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        :param pulumi.Input[builtins.bool] quarantine_on_write: Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] script_based_execution_monitoring: Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        :param pulumi.Input[Union['PreventionPolicyMacSensorAdwareAndPupArgs', 'PreventionPolicyMacSensorAdwareAndPupArgsDict']] sensor_adware_and_pup: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
        :param pulumi.Input[Union['PreventionPolicyMacSensorAntiMalwareArgs', 'PreventionPolicyMacSensorAntiMalwareArgsDict']] sensor_anti_malware: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        :param pulumi.Input[builtins.bool] sensor_tampering_protection: Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        :param pulumi.Input[builtins.bool] upload_unknown_detection_related_executables: Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] upload_unknown_executables: Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] xpcom_shell: Whether to enable the setting. The execution of an XPCOM shell was blocked.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PreventionPolicyMacState.__new__(_PreventionPolicyMacState)

        __props__.__dict__["chopper_webshell"] = chopper_webshell
        __props__.__dict__["cloud_adware_and_pup"] = cloud_adware_and_pup
        __props__.__dict__["cloud_anti_malware"] = cloud_anti_malware
        __props__.__dict__["custom_blocking"] = custom_blocking
        __props__.__dict__["description"] = description
        __props__.__dict__["detect_on_write"] = detect_on_write
        __props__.__dict__["empyre_backdoor"] = empyre_backdoor
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["hash_collector"] = hash_collector
        __props__.__dict__["host_groups"] = host_groups
        __props__.__dict__["intelligence_sourced_threats"] = intelligence_sourced_threats
        __props__.__dict__["ioa_rule_groups"] = ioa_rule_groups
        __props__.__dict__["kc_password_decoded"] = kc_password_decoded
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["name"] = name
        __props__.__dict__["notify_end_users"] = notify_end_users
        __props__.__dict__["prevent_suspicious_processes"] = prevent_suspicious_processes
        __props__.__dict__["quarantine"] = quarantine
        __props__.__dict__["quarantine_on_write"] = quarantine_on_write
        __props__.__dict__["script_based_execution_monitoring"] = script_based_execution_monitoring
        __props__.__dict__["sensor_adware_and_pup"] = sensor_adware_and_pup
        __props__.__dict__["sensor_anti_malware"] = sensor_anti_malware
        __props__.__dict__["sensor_tampering_protection"] = sensor_tampering_protection
        __props__.__dict__["upload_unknown_detection_related_executables"] = upload_unknown_detection_related_executables
        __props__.__dict__["upload_unknown_executables"] = upload_unknown_executables
        __props__.__dict__["xpcom_shell"] = xpcom_shell
        return PreventionPolicyMac(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="chopperWebshell")
    def chopper_webshell(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        """
        return pulumi.get(self, "chopper_webshell")

    @property
    @pulumi.getter(name="cloudAdwareAndPup")
    def cloud_adware_and_pup(self) -> pulumi.Output['outputs.PreventionPolicyMacCloudAdwareAndPup']:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        """
        return pulumi.get(self, "cloud_adware_and_pup")

    @property
    @pulumi.getter(name="cloudAntiMalware")
    def cloud_anti_malware(self) -> pulumi.Output['outputs.PreventionPolicyMacCloudAntiMalware']:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        """
        return pulumi.get(self, "cloud_anti_malware")

    @property
    @pulumi.getter(name="customBlocking")
    def custom_blocking(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        """
        return pulumi.get(self, "custom_blocking")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Description of the prevention policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detectOnWrite")
    def detect_on_write(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        """
        return pulumi.get(self, "detect_on_write")

    @property
    @pulumi.getter(name="empyreBackdoor")
    def empyre_backdoor(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. A process with behaviors indicative of the Empyre Backdoor was terminated.
        """
        return pulumi.get(self, "empyre_backdoor")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Enable the prevention policy.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hashCollector")
    def hash_collector(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. An attempt to dump a user’s hashed password was blocked.
        """
        return pulumi.get(self, "hash_collector")

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Host Group ids to attach to the prevention policy.
        """
        return pulumi.get(self, "host_groups")

    @property
    @pulumi.getter(name="intelligenceSourcedThreats")
    def intelligence_sourced_threats(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        """
        return pulumi.get(self, "intelligence_sourced_threats")

    @property
    @pulumi.getter(name="ioaRuleGroups")
    def ioa_rule_groups(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        IOA Rule Group to attach to the prevention policy.
        """
        return pulumi.get(self, "ioa_rule_groups")

    @property
    @pulumi.getter(name="kcPasswordDecoded")
    def kc_password_decoded(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. An attempt to recover a plaintext password via the kcpassword file was blocked.
        """
        return pulumi.get(self, "kc_password_decoded")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the prevention policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifyEndUsers")
    def notify_end_users(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. See these messages in Console.app by searching for Process: Falcon Notifications.
        """
        return pulumi.get(self, "notify_end_users")

    @property
    @pulumi.getter(name="preventSuspiciousProcesses")
    def prevent_suspicious_processes(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        """
        return pulumi.get(self, "prevent_suspicious_processes")

    @property
    @pulumi.getter
    def quarantine(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        """
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="quarantineOnWrite")
    def quarantine_on_write(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        """
        return pulumi.get(self, "quarantine_on_write")

    @property
    @pulumi.getter(name="scriptBasedExecutionMonitoring")
    def script_based_execution_monitoring(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        """
        return pulumi.get(self, "script_based_execution_monitoring")

    @property
    @pulumi.getter(name="sensorAdwareAndPup")
    def sensor_adware_and_pup(self) -> pulumi.Output['outputs.PreventionPolicyMacSensorAdwareAndPup']:
        """
        For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent adware and potentially unwanted programs (PUP).
        """
        return pulumi.get(self, "sensor_adware_and_pup")

    @property
    @pulumi.getter(name="sensorAntiMalware")
    def sensor_anti_malware(self) -> pulumi.Output['outputs.PreventionPolicyMacSensorAntiMalware']:
        """
        For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        """
        return pulumi.get(self, "sensor_anti_malware")

    @property
    @pulumi.getter(name="sensorTamperingProtection")
    def sensor_tampering_protection(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        """
        return pulumi.get(self, "sensor_tampering_protection")

    @property
    @pulumi.getter(name="uploadUnknownDetectionRelatedExecutables")
    def upload_unknown_detection_related_executables(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_detection_related_executables")

    @property
    @pulumi.getter(name="uploadUnknownExecutables")
    def upload_unknown_executables(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_executables")

    @property
    @pulumi.getter(name="xpcomShell")
    def xpcom_shell(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. The execution of an XPCOM shell was blocked.
        """
        return pulumi.get(self, "xpcom_shell")

