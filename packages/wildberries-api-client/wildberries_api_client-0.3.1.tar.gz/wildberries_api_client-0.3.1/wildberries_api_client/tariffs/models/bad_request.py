# coding: utf-8

"""
    Tarify

    <div class=\"description_important\">       Uznat bolhe o komissiah i tarifah mohno v <a href=\"https://seller.wildberries.ru/instructions/category/a04560b5-256d-48cb-8f09-60e283b5d493\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Komissii](/openapi/wb-tariffs#tag/Komissii)   2. [Koefficientov skladov](/openapi/wb-tariffs#tag/Koefficienty-skladov)   3. [Tarifov na vozvrat tovarov prodavcu](/openapi/wb-tariffs#tag/Stoimost-vozvrata-prodavcu)    # noqa: E501

    OpenAPI spec version: tariffs
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BadRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'detail': 'str',
        'origin': 'str',
        'request_id': 'str',
        'title': 'str'
    }

    attribute_map = {
        'detail': 'detail',
        'origin': 'origin',
        'request_id': 'requestId',
        'title': 'title'
    }

    def __init__(self, detail=None, origin=None, request_id=None, title=None):  # noqa: E501
        """BadRequest - a model defined in Swagger"""  # noqa: E501
        self._detail = None
        self._origin = None
        self._request_id = None
        self._title = None
        self.discriminator = None
        if detail is not None:
            self.detail = detail
        if origin is not None:
            self.origin = origin
        if request_id is not None:
            self.request_id = request_id
        if title is not None:
            self.title = title

    @property
    def detail(self):
        """Gets the detail of this BadRequest.  # noqa: E501

        Detali ohibki  # noqa: E501

        :return: The detail of this BadRequest.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this BadRequest.

        Detali ohibki  # noqa: E501

        :param detail: The detail of this BadRequest.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def origin(self):
        """Gets the origin of this BadRequest.  # noqa: E501

        ID vnutrennego servisa WB  # noqa: E501

        :return: The origin of this BadRequest.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this BadRequest.

        ID vnutrennego servisa WB  # noqa: E501

        :param origin: The origin of this BadRequest.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def request_id(self):
        """Gets the request_id of this BadRequest.  # noqa: E501

        Unikalnyi ID zaprosa  # noqa: E501

        :return: The request_id of this BadRequest.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this BadRequest.

        Unikalnyi ID zaprosa  # noqa: E501

        :param request_id: The request_id of this BadRequest.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def title(self):
        """Gets the title of this BadRequest.  # noqa: E501

        Zagolovok ohibki  # noqa: E501

        :return: The title of this BadRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BadRequest.

        Zagolovok ohibki  # noqa: E501

        :param title: The title of this BadRequest.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BadRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BadRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
