# coding: utf-8

"""
    Othety

    <div class=\"description_important\">     Uznat bolhe ob othetah mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/5f2162c5-069b-416d-a4e1-48da2a76e6b0\">spravohnom centre</a> </div>  S pomohu etih metodov vy mohete poluhit [osnovnye othety](/openapi/reports#tag/Osnovnye-otchyoty) i othety o:   1. [Ostatkah na skladah](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah)   2. [Tovarah s obazatelnoi markirovkoi](/openapi/reports#tag/Otchyot-o-tovarah-c-obyazatelnoj-markirovkoj)   3. [Uderhaniah](/openapi/reports#tag/Otchyoty-ob-uderzhaniyah)   4. [Platnoi priemke](/openapi/reports#tag/Platnaya-priyomka)   5. [Platnom hranenii](/openapi/reports#tag/Platnoe-hranenie)   6. [Prodahah po regionam](/openapi/reports#tag/Prodazhi-po-regionam)   7. [Dole brenda v prodahah](/openapi/reports#tag/Dolya-brenda-v-prodazhah)   8. [Skrytyh tovarah](/openapi/reports#tag/Skrytye-tovary)   9. [Vozvratah i peremehenii tovarov](/openapi/reports#tag/Otchyot-o-vozvratah-i-peremeshenii-tovarov)   10. [Dinamike oborahivaemosti](/openapi/reports#tag/Dinamika-oborachivaemosti)   # noqa: E501

    OpenAPI spec version: reports
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20013Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brand': 'str',
        'nm_id': 'int',
        'title': 'str',
        'vendor_code': 'str',
        'nm_rating': 'float'
    }

    attribute_map = {
        'brand': 'brand',
        'nm_id': 'nmId',
        'title': 'title',
        'vendor_code': 'vendorCode',
        'nm_rating': 'nmRating'
    }

    def __init__(self, brand=None, nm_id=None, title=None, vendor_code=None, nm_rating=None):  # noqa: E501
        """InlineResponse20013Report - a model defined in Swagger"""  # noqa: E501
        self._brand = None
        self._nm_id = None
        self._title = None
        self._vendor_code = None
        self._nm_rating = None
        self.discriminator = None
        if brand is not None:
            self.brand = brand
        if nm_id is not None:
            self.nm_id = nm_id
        if title is not None:
            self.title = title
        if vendor_code is not None:
            self.vendor_code = vendor_code
        if nm_rating is not None:
            self.nm_rating = nm_rating

    @property
    def brand(self):
        """Gets the brand of this InlineResponse20013Report.  # noqa: E501

        Brend  # noqa: E501

        :return: The brand of this InlineResponse20013Report.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this InlineResponse20013Report.

        Brend  # noqa: E501

        :param brand: The brand of this InlineResponse20013Report.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def nm_id(self):
        """Gets the nm_id of this InlineResponse20013Report.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this InlineResponse20013Report.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this InlineResponse20013Report.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this InlineResponse20013Report.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def title(self):
        """Gets the title of this InlineResponse20013Report.  # noqa: E501

        Naimenovanie tovara  # noqa: E501

        :return: The title of this InlineResponse20013Report.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse20013Report.

        Naimenovanie tovara  # noqa: E501

        :param title: The title of this InlineResponse20013Report.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def vendor_code(self):
        """Gets the vendor_code of this InlineResponse20013Report.  # noqa: E501

        Artikul prodavca  # noqa: E501

        :return: The vendor_code of this InlineResponse20013Report.  # noqa: E501
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code):
        """Sets the vendor_code of this InlineResponse20013Report.

        Artikul prodavca  # noqa: E501

        :param vendor_code: The vendor_code of this InlineResponse20013Report.  # noqa: E501
        :type: str
        """

        self._vendor_code = vendor_code

    @property
    def nm_rating(self):
        """Gets the nm_rating of this InlineResponse20013Report.  # noqa: E501

        Reiting tovara  # noqa: E501

        :return: The nm_rating of this InlineResponse20013Report.  # noqa: E501
        :rtype: float
        """
        return self._nm_rating

    @nm_rating.setter
    def nm_rating(self, nm_rating):
        """Sets the nm_rating of this InlineResponse20013Report.

        Reiting tovara  # noqa: E501

        :param nm_rating: The nm_rating of this InlineResponse20013Report.  # noqa: E501
        :type: float
        """

        self._nm_rating = nm_rating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20013Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20013Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
