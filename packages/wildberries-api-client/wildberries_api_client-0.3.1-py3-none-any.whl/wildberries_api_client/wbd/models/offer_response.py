# coding: utf-8

"""
    Wildberries cifrovoi

    Po voprosam raboty s WBD API, obrahaites v <a href=\"https://digital.wildberries.ru/support\" target=\"_blank\">tehniheskuu podderhku</a>.   # noqa: E501

    OpenAPI spec version: wbd
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OfferResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'description': 'str',
        'section': 'int',
        'catalog_path': 'list[int]',
        'price': 'int',
        'discount_price': 'int',
        'gallery': 'list[str]',
        'meta': 'str',
        'tags': 'list[Tag]',
        'thumbnail': 'list[str]',
        'content': 'list[OfferContent]',
        'created': 'str',
        'updated': 'str',
        'deleted': 'str',
        'status': 'int',
        'view_count': 'int',
        'purchase_count': 'int',
        'adult': 'bool',
        'age_rating': 'str',
        'rating': 'float'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'section': 'section',
        'catalog_path': 'catalog_path',
        'price': 'price',
        'discount_price': 'discount_price',
        'gallery': 'gallery',
        'meta': 'meta',
        'tags': 'tags',
        'thumbnail': 'thumbnail',
        'content': 'content',
        'created': 'created',
        'updated': 'updated',
        'deleted': 'deleted',
        'status': 'status',
        'view_count': 'view_count',
        'purchase_count': 'purchase_count',
        'adult': 'adult',
        'age_rating': 'age_rating',
        'rating': 'rating'
    }

    def __init__(self, id=None, title=None, description=None, section=None, catalog_path=None, price=None, discount_price=None, gallery=None, meta=None, tags=None, thumbnail=None, content=None, created=None, updated=None, deleted=None, status=None, view_count=None, purchase_count=None, adult=None, age_rating=None, rating=None):  # noqa: E501
        """OfferResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._description = None
        self._section = None
        self._catalog_path = None
        self._price = None
        self._discount_price = None
        self._gallery = None
        self._meta = None
        self._tags = None
        self._thumbnail = None
        self._content = None
        self._created = None
        self._updated = None
        self._deleted = None
        self._status = None
        self._view_count = None
        self._purchase_count = None
        self._adult = None
        self._age_rating = None
        self._rating = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if section is not None:
            self.section = section
        if catalog_path is not None:
            self.catalog_path = catalog_path
        if price is not None:
            self.price = price
        if discount_price is not None:
            self.discount_price = discount_price
        if gallery is not None:
            self.gallery = gallery
        if meta is not None:
            self.meta = meta
        if tags is not None:
            self.tags = tags
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if content is not None:
            self.content = content
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if deleted is not None:
            self.deleted = deleted
        if status is not None:
            self.status = status
        if view_count is not None:
            self.view_count = view_count
        if purchase_count is not None:
            self.purchase_count = purchase_count
        if adult is not None:
            self.adult = adult
        if age_rating is not None:
            self.age_rating = age_rating
        if rating is not None:
            self.rating = rating

    @property
    def id(self):
        """Gets the id of this OfferResponse.  # noqa: E501

        ID predlohenia  # noqa: E501

        :return: The id of this OfferResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OfferResponse.

        ID predlohenia  # noqa: E501

        :param id: The id of this OfferResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this OfferResponse.  # noqa: E501

        Nazvanie predlohenia  # noqa: E501

        :return: The title of this OfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OfferResponse.

        Nazvanie predlohenia  # noqa: E501

        :param title: The title of this OfferResponse.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this OfferResponse.  # noqa: E501

        Opisanie predlohenia  # noqa: E501

        :return: The description of this OfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OfferResponse.

        Opisanie predlohenia  # noqa: E501

        :param description: The description of this OfferResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def section(self):
        """Gets the section of this OfferResponse.  # noqa: E501

        ID kategorii tovara: - `1` — Videokontent - `2` — Audiokontent - `3` — Kluhi aktivacii - `4` — Elektronnye knigi - `5` — Audioknigi - `6` — cifrovye tovary - `8` — Uslugi - `12` — Kupony i razvlehenia - `13` — Podarohnye sertifikaty   # noqa: E501

        :return: The section of this OfferResponse.  # noqa: E501
        :rtype: int
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this OfferResponse.

        ID kategorii tovara: - `1` — Videokontent - `2` — Audiokontent - `3` — Kluhi aktivacii - `4` — Elektronnye knigi - `5` — Audioknigi - `6` — cifrovye tovary - `8` — Uslugi - `12` — Kupony i razvlehenia - `13` — Podarohnye sertifikaty   # noqa: E501

        :param section: The section of this OfferResponse.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13]  # noqa: E501
        if section not in allowed_values:
            raise ValueError(
                "Invalid value for `section` ({0}), must be one of {1}"  # noqa: E501
                .format(section, allowed_values)
            )

        self._section = section

    @property
    def catalog_path(self):
        """Gets the catalog_path of this OfferResponse.  # noqa: E501

        Massiv ID podkategorii, v kotorom nahoditsa predlohenie  # noqa: E501

        :return: The catalog_path of this OfferResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._catalog_path

    @catalog_path.setter
    def catalog_path(self, catalog_path):
        """Sets the catalog_path of this OfferResponse.

        Massiv ID podkategorii, v kotorom nahoditsa predlohenie  # noqa: E501

        :param catalog_path: The catalog_path of this OfferResponse.  # noqa: E501
        :type: list[int]
        """

        self._catalog_path = catalog_path

    @property
    def price(self):
        """Gets the price of this OfferResponse.  # noqa: E501

        cena predlohenia v rublah  # noqa: E501

        :return: The price of this OfferResponse.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OfferResponse.

        cena predlohenia v rublah  # noqa: E501

        :param price: The price of this OfferResponse.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def discount_price(self):
        """Gets the discount_price of this OfferResponse.  # noqa: E501

        cena s uhetom skidki v rublah  # noqa: E501

        :return: The discount_price of this OfferResponse.  # noqa: E501
        :rtype: int
        """
        return self._discount_price

    @discount_price.setter
    def discount_price(self, discount_price):
        """Sets the discount_price of this OfferResponse.

        cena s uhetom skidki v rublah  # noqa: E501

        :param discount_price: The discount_price of this OfferResponse.  # noqa: E501
        :type: int
        """

        self._discount_price = discount_price

    @property
    def gallery(self):
        """Gets the gallery of this OfferResponse.  # noqa: E501

        Spisok URL-adresov dopolnitelnyh izobrahenii, a tak he video prevu  # noqa: E501

        :return: The gallery of this OfferResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._gallery

    @gallery.setter
    def gallery(self, gallery):
        """Sets the gallery of this OfferResponse.

        Spisok URL-adresov dopolnitelnyh izobrahenii, a tak he video prevu  # noqa: E501

        :param gallery: The gallery of this OfferResponse.  # noqa: E501
        :type: list[str]
        """

        self._gallery = gallery

    @property
    def meta(self):
        """Gets the meta of this OfferResponse.  # noqa: E501

        Metadannye predlohenia  # noqa: E501

        :return: The meta of this OfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this OfferResponse.

        Metadannye predlohenia  # noqa: E501

        :param meta: The meta of this OfferResponse.  # noqa: E501
        :type: str
        """

        self._meta = meta

    @property
    def tags(self):
        """Gets the tags of this OfferResponse.  # noqa: E501

        Spisok tegov. Tegi nuhny dla gruppirovania, ranhirovania i obleghenia poiska vahego tovara.  # noqa: E501

        :return: The tags of this OfferResponse.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this OfferResponse.

        Spisok tegov. Tegi nuhny dla gruppirovania, ranhirovania i obleghenia poiska vahego tovara.  # noqa: E501

        :param tags: The tags of this OfferResponse.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def thumbnail(self):
        """Gets the thumbnail of this OfferResponse.  # noqa: E501

        Oblohka predlohenia  # noqa: E501

        :return: The thumbnail of this OfferResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this OfferResponse.

        Oblohka predlohenia  # noqa: E501

        :param thumbnail: The thumbnail of this OfferResponse.  # noqa: E501
        :type: list[str]
        """

        self._thumbnail = thumbnail

    @property
    def content(self):
        """Gets the content of this OfferResponse.  # noqa: E501

        Kontent predlohenia  # noqa: E501

        :return: The content of this OfferResponse.  # noqa: E501
        :rtype: list[OfferContent]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this OfferResponse.

        Kontent predlohenia  # noqa: E501

        :param content: The content of this OfferResponse.  # noqa: E501
        :type: list[OfferContent]
        """

        self._content = content

    @property
    def created(self):
        """Gets the created of this OfferResponse.  # noqa: E501

        Data sozdania, UTC +3 (Moskva)  # noqa: E501

        :return: The created of this OfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this OfferResponse.

        Data sozdania, UTC +3 (Moskva)  # noqa: E501

        :param created: The created of this OfferResponse.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this OfferResponse.  # noqa: E501

        Data obnovlenia, UTC +3 (Moskva)  # noqa: E501

        :return: The updated of this OfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this OfferResponse.

        Data obnovlenia, UTC +3 (Moskva)  # noqa: E501

        :param updated: The updated of this OfferResponse.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def deleted(self):
        """Gets the deleted of this OfferResponse.  # noqa: E501

        Data udalenia, UTC +3 (Moskva). 1970-01-01T00:00:00Z — avlaetsa nulevym znahenie.  # noqa: E501

        :return: The deleted of this OfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this OfferResponse.

        Data udalenia, UTC +3 (Moskva). 1970-01-01T00:00:00Z — avlaetsa nulevym znahenie.  # noqa: E501

        :param deleted: The deleted of this OfferResponse.  # noqa: E501
        :type: str
        """

        self._deleted = deleted

    @property
    def status(self):
        """Gets the status of this OfferResponse.  # noqa: E501

        Status vahego predlohenia: - `0` — Dobavit v hernovik - `1` — Opublikovat   # noqa: E501

        :return: The status of this OfferResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OfferResponse.

        Status vahego predlohenia: - `0` — Dobavit v hernovik - `1` — Opublikovat   # noqa: E501

        :param status: The status of this OfferResponse.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def view_count(self):
        """Gets the view_count of this OfferResponse.  # noqa: E501

        Kolihestvo prosmotrov  # noqa: E501

        :return: The view_count of this OfferResponse.  # noqa: E501
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this OfferResponse.

        Kolihestvo prosmotrov  # noqa: E501

        :param view_count: The view_count of this OfferResponse.  # noqa: E501
        :type: int
        """

        self._view_count = view_count

    @property
    def purchase_count(self):
        """Gets the purchase_count of this OfferResponse.  # noqa: E501

        Kolihestvo pokupok  # noqa: E501

        :return: The purchase_count of this OfferResponse.  # noqa: E501
        :rtype: int
        """
        return self._purchase_count

    @purchase_count.setter
    def purchase_count(self, purchase_count):
        """Sets the purchase_count of this OfferResponse.

        Kolihestvo pokupok  # noqa: E501

        :param purchase_count: The purchase_count of this OfferResponse.  # noqa: E501
        :type: int
        """

        self._purchase_count = purchase_count

    @property
    def adult(self):
        """Gets the adult of this OfferResponse.  # noqa: E501

        Flag, kotoryi otvehaet za ogranihenie kontenta dla vzroslyh (blur kontenta)  # noqa: E501

        :return: The adult of this OfferResponse.  # noqa: E501
        :rtype: bool
        """
        return self._adult

    @adult.setter
    def adult(self, adult):
        """Sets the adult of this OfferResponse.

        Flag, kotoryi otvehaet za ogranihenie kontenta dla vzroslyh (blur kontenta)  # noqa: E501

        :param adult: The adult of this OfferResponse.  # noqa: E501
        :type: bool
        """

        self._adult = adult

    @property
    def age_rating(self):
        """Gets the age_rating of this OfferResponse.  # noqa: E501

        Vozrastnoe ogranihenie. Eto sistema, kotoraa ispolzuetsa dla opredelenia, podhodit li vahe predlohenie dla opredelennoi vozrastnoi gruppy.  # noqa: E501

        :return: The age_rating of this OfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._age_rating

    @age_rating.setter
    def age_rating(self, age_rating):
        """Sets the age_rating of this OfferResponse.

        Vozrastnoe ogranihenie. Eto sistema, kotoraa ispolzuetsa dla opredelenia, podhodit li vahe predlohenie dla opredelennoi vozrastnoi gruppy.  # noqa: E501

        :param age_rating: The age_rating of this OfferResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["0+", "6+", "12+", "14+", "16+", "18+"]  # noqa: E501
        if age_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `age_rating` ({0}), must be one of {1}"  # noqa: E501
                .format(age_rating, allowed_values)
            )

        self._age_rating = age_rating

    @property
    def rating(self):
        """Gets the rating of this OfferResponse.  # noqa: E501

        Reĭting predlohenia  # noqa: E501

        :return: The rating of this OfferResponse.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this OfferResponse.

        Reĭting predlohenia  # noqa: E501

        :param rating: The rating of this OfferResponse.  # noqa: E501
        :type: float
        """

        self._rating = rating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OfferResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfferResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
