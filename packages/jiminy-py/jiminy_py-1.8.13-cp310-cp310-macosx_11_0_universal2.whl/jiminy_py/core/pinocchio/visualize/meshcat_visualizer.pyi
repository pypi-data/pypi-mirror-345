from . import BaseVisualizer
from _typeshed import Incomplete

__all__ = ['MeshcatVisualizer']

class MeshcatVisualizer(BaseVisualizer):
    FORCE_SCALE: float
    FRAME_VEL_COLOR: int
    CAMERA_PRESETS: Incomplete
    def getViewerNodeName(self, geometry_object, geometry_type): ...
    viewer: Incomplete
    static_objects: Incomplete
    def initViewer(self, viewer: Incomplete | None = None, open: bool = False, loadModel: bool = False) -> None: ...
    def setBackgroundColor(self, preset_name: str = 'gray') -> None: ...
    def setCameraTarget(self, target) -> None: ...
    def setCameraPosition(self, position) -> None: ...
    def setCameraPreset(self, preset_key) -> None: ...
    def setCameraZoom(self, zoom) -> None: ...
    def setCameraPose(self, pose=...) -> None: ...
    def disableCameraControl(self) -> None: ...
    def enableCameraControl(self) -> None: ...
    def loadMesh(self, geometry_object): ...
    def loadViewerGeometryObject(self, geometry_object, geometry_type, color: Incomplete | None = None): ...
    viewerRootNodeName: Incomplete
    viewerCollisionGroupName: Incomplete
    viewerVisualGroupName: Incomplete
    viewerFramesGroupName: Incomplete
    def loadViewerModel(self, rootNodeName: str = 'pinocchio', color: Incomplete | None = None) -> None: ...
    def reload(self, new_geometry_object, geometry_type: Incomplete | None = None) -> None: ...
    def clean(self) -> None: ...
    def delete(self, geometry_object, geometry_type) -> None: ...
    def display(self, q: Incomplete | None = None) -> None: ...
    def updatePlacements(self, geometry_type) -> None: ...
    def addGeometryObject(self, obj, color: Incomplete | None = None) -> None: ...
    def captureImage(self, w: Incomplete | None = None, h: Incomplete | None = None): ...
    display_collisions: bool
    def displayCollisions(self, visibility) -> None: ...
    display_visuals: bool
    def displayVisuals(self, visibility) -> None: ...
    display_frames: Incomplete
    def displayFrames(self, visibility, frame_ids: Incomplete | None = None, axis_length: float = 0.2, axis_width: int = 2) -> None: ...
    frame_ids: Incomplete
    def initializeFrames(self, frame_ids: Incomplete | None = None, axis_length: float = 0.2, axis_width: int = 2) -> None: ...
    def updateFrames(self) -> None: ...
    def drawFrameVelocities(self, frame_id, v_scale: float = 0.2, color=...) -> None: ...
