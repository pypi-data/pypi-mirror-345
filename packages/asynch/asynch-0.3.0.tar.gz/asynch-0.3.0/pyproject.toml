[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "asynch"
version = "0.3.0"
description = "An asyncio driver for ClickHouse with native TCP support"
authors = [
    {name = "long2ice",email = "long2ice@gmail.com"}
]
license = {file = "LICENSE"}
readme = "README.md"
keywords = ["asyncio", "clickhouse", "python", "driver"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
requires-python = ">=3.9,<4.0"
dependencies = [
    "ciso8601 (>=2.3.2,<3.0.0)",
    "leb128 (>=1.0.8,<2.0.0)",
    "lz4 (>=4.4.3,<5.0.0)",
    "pytz (>=2025.1,<2026.0)",
    "tzlocal (>=5.3.1,<6.0.0)",
    "zstd (>=1.5.6.6,<2.0.0.0)",
]

[project.optional-dependencies]
compression = ["clickhouse-cityhash (>=1.0.2.4,<2.0.0.0)"]

[project.urls]
homepage = "https://github.com/long2ice/asynch"
repository = "https://github.com/long2ice/asynch.git"
documentation = "https://github.com/long2ice/asynch"

[tool.poetry]
package-mode = true
requires-poetry = ">=2.1"
include = ["LICENSE", "README.md"]
packages = [
    { include = "asynch" },
    { include = "asynch/py.typed" }
]

[tool.poetry.group.dev.dependencies]
bandit = "^1.8.3"
uvloop = "^0.21.0"
clickhouse-driver = "^0.2.9"

[tool.poetry.group.lint.dependencies]
mypy = "^1.15.0"
ruff = "^0.9.10"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-asyncio = "^0.25.3"
pytest-random-order = "^1.1.1"
pytest-mock = "^3.14.0"
pytest-xdist = "^3.6.1"

[tool.mypy]
check_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true

[tool.pytest.ini_options]
addopts = [
    "-s",
    "-vvv",
    "--maxfail=1",
    "--random-order"
]
asyncio_mode = "auto"
minversion = "8.3"
testpaths = ["tests"]
xfail_strict = true

[tool.ruff]
indent-width = 4
line-length = 100
target-version = "py39"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
select = [
    "A",  # flake8-builtins
    "ASYNC",  # flake8-async
    # "ANN",  # flake8-annotations
    # "B",  # flake8-bugbear
    "E",  # pycodestyle
    "ERA",  # eradicate
    "F",  # Pyflakes
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "PIE",  # flake8-pie
    "S",  # flake8-bandit
    "T10",  # flake8-debugger
    "T20"  # flake8-print
]
ignore = [
    "E501",  # line too long  # added temporarily, must be resolved later
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = [
    "I"  # isort
]

[tool.ruff.lint.per-file-ignores]
"asynch/proto/settings/types.py" = ["A005"]
"benchmark/main.py" = ["ERA", "S", "T20"]
"tests/*.py" = ["ERA", "S"]
