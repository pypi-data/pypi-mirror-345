import hppfcl
import multiprocessing as mp
import numpy as np
import panda3d_viewer.viewer_app
import pinocchio as pin
from ..geometry import extract_vertices_and_faces_from_geometry as extract_vertices_and_faces_from_geometry
from _typeshed import Incomplete
from contextlib import AbstractContextManager
from panda3d.core import CollisionNode, CollisionRay, DisplayRegion as DisplayRegion, Geom, GraphicsOutput, Lens as Lens, NodePath
from panda3d_viewer.viewer_config import ViewerConfig
from pinocchio.visualize import BaseVisualizer
from typing import Any, Callable, Literal, Sequence

WINDOW_SIZE_DEFAULT: Incomplete
CAMERA_POSE_DEFAULT: Incomplete
SKY_TOP_COLOR: Incomplete
SKY_BOTTOM_COLOR: Incomplete
LEGEND_DPI: int
LEGEND_SCALE_MAX: float
WATERMARK_SCALE_MAX: float
CLOCK_SCALE: float
WIDGET_MARGIN_REL: float
FRAMERATE_MAX: int
REQUEST_TIMEOUT: float
FORCE_TINYDISPLAY_DRIVER: Incomplete
Tuple3FType = tuple[float, float, float] | np.ndarray
Tuple4FType = tuple[float, float, float, float] | np.ndarray
ShapeType: Incomplete
FrameType = tuple[Tuple3FType, Tuple4FType] | np.ndarray

def make_gradient_skybox(sky_color: Tuple4FType, ground_color: Tuple4FType, span: float = 1.0, offset: float = 0.0, subdiv: int = 2) -> NodePath: ...
def make_cone(num_sides: int = 16) -> Geom: ...
def make_pie(theta_start: float = 0.0, theta_end: float = ..., num_segments: int = 16) -> Geom: ...
def make_torus(minor_radius: float = 0.2, num_segments: int = 16) -> Geom: ...
def enable_pbr_shader(node: NodePath) -> None: ...

class Panda3dApp(panda3d_viewer.viewer_app.ViewerApp):
    UserRGBCameraMask: Incomplete
    UserDepthCameraMask: Incomplete
    UserCameraMask = UserRGBCameraMask | UserDepthCameraMask
    buff: GraphicsOutput | None
    clock: Incomplete
    framerate: float | None
    skybox: Incomplete
    shared_render_2d: Incomplete
    offscreen_camera_2d: Incomplete
    offAspect2d: Incomplete
    offA2dTopLeft: Incomplete
    offA2dTopRight: Incomplete
    offA2dBottomLeft: Incomplete
    offA2dBottomCenter: Incomplete
    offA2dBottomRight: Incomplete
    offscreen_graphics_lens: Lens | None
    offscreen_display_region: DisplayRegion | None
    key_map: Incomplete
    zoom_rate: float
    camera_lookat: Incomplete
    longitude_deg: float
    latitude_deg: float
    last_mouse_x: float
    last_mouse_y: float
    picker_ray: CollisionRay | None
    picker_node: CollisionNode | None
    picked_object: tuple[str, str] | None
    click_mouse_x: float
    click_mouse_y: float
    def __init__(self, config: ViewerConfig | None = None) -> None: ...
    def has_gui(self) -> bool: ...
    windowType: str
    picker_traverser: Incomplete
    picker_queue: Incomplete
    def open_window(self) -> None: ...
    def add_camera(self, name: str, is_depthmap: bool, size: tuple[int, int]) -> None: ...
    def remove_camera(self, name: str) -> None: ...
    def getSize(self, win: Any | None = None) -> tuple[int, int]: ...
    def getMousePos(self) -> tuple[float, float]: ...
    def handle_key(self, key: str, value: bool) -> None: ...
    def click_on_node(self) -> None: ...
    def move_orbital_camera_task(self, task: Any | None = None) -> int | None: ...
    def show_floor(self, show: bool) -> None: ...
    def update_floor(self, geom: Geom | None = None, show_vertices: bool = False) -> NodePath: ...
    def append_group(self, root_path: str, remove_if_exists: bool = True, scale: float = 1.0) -> None: ...
    def append_node(self, root_path: str, name: str, node: NodePath, frame: FrameType | None = None) -> None: ...
    def highlight_node(self, root_path: str, name: str, enable: bool) -> None: ...
    def append_frame(self, root_path: str, name: str, frame: FrameType | None = None) -> None: ...
    def append_cone(self, root_path: str, name: str, radius: float, length: float, num_sides: int = 16, frame: FrameType | None = None) -> None: ...
    def append_torus(self, root_path: str, name: str, major_radius: float, minor_radius: float = 0.2, num_sides: int = 12, frame: FrameType | None = None) -> None: ...
    def append_cylinder(self, root_path: str, name: str, radius: float, length: float, theta_start: float = 0.0, theta_end: float = ..., anchor_bottom: bool = False, frame: FrameType | None = None) -> None: ...
    def append_arrow(self, root_path: str, name: str, radius: float, length: float, anchor_top: bool = False, frame: FrameType | None = None) -> None: ...
    def append_mesh(self, root_path: str, name: str, mesh_path: str, scale: Tuple3FType | None = None, frame: FrameType | None = None, no_cache: bool | None = None) -> None: ...
    def set_watermark(self, img_fullpath: str | None = None, width: int | None = None, height: int | None = None) -> None: ...
    def set_legend(self, items: Sequence[tuple[str, tuple[int, int, int, int] | None]] | None = None) -> None: ...
    def set_clock(self, time: float | None = None) -> None: ...
    def set_material(self, root_path: str, name: str, color: Tuple4FType | None = None, texture_path: str = '', disable_material: bool | None = None) -> None: ...
    def set_scale(self, root_path: str, name: str, scale: Tuple3FType) -> None: ...
    def set_scales(self, root_path: str, name_scales_dict: dict[str, Tuple3FType]) -> None: ...
    def move_node(self, root_path: str, name: str, frame: FrameType) -> None: ...
    def remove_node(self, root_path: str, name: str) -> None: ...
    def show_node(self, root_path: str, name: str, show: bool, always_foreground: bool | None = None) -> None: ...
    def get_camera_transform(self) -> tuple[np.ndarray, np.ndarray]: ...
    def set_camera_transform(self, pos: Tuple3FType, quat: np.ndarray, camera_name: str | None = None) -> None: ...
    def get_camera_lookat(self) -> np.ndarray: ...
    def set_camera_lookat(self, pos: Tuple3FType) -> None: ...
    def set_window_size(self, width: int, height: int) -> None: ...
    def set_framerate(self, framerate: float | None = None) -> None: ...
    def get_framerate(self) -> float | None: ...
    def save_screenshot(self, filename: str | None = None) -> bool: ...
    def get_screenshot(self, camera_name: str | None = None) -> np.ndarray | bytes: ...
    def enable_shadow(self, enable: bool) -> None: ...

class Panda3dProxy(mp.Process):
    daemon: bool
    def __init__(self, config: ViewerConfig | None = None) -> None: ...
    def __dir__(self) -> list[str]: ...
    def async_mode(self) -> AbstractContextManager: ...
    def __getattr__(self, name: str) -> Callable[..., Any]: ...
    def run(self) -> None: ...

class Panda3dViewer:
    def __init__(self, window_title: str = 'jiminy', window_type: Literal['onscreen', 'offscreen'] = 'onscreen', config: dict[str, Any] | ViewerConfig | None = None, **kwargs: Any) -> None: ...
    def join(self) -> None: ...
    def stop(self) -> None: ...
    def destroy(self) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def __dir__(self) -> list[str]: ...

def convert_bvh_collision_geometry_to_primitive(geom: hppfcl.CollisionGeometry) -> Geom | None: ...

class Panda3dVisualizer(BaseVisualizer):
    visual_group: str | None
    collision_group: str | None
    display_visuals: bool
    display_collisions: bool
    viewer: Incomplete
    def initViewer(self, viewer: Panda3dViewer | Panda3dApp | None = None, loadModel: bool = False, **kwargs: Any) -> None: ...
    def getViewerNodeName(self, geometry_object: pin.GeometryObject, geometry_type: pin.GeometryType) -> tuple[str, str]: ...
    def loadViewerGeometryObject(self, geometry_object: pin.GeometryObject, geometry_type: pin.GeometryType, color: np.ndarray | None = None) -> None: ...
    root_name: Incomplete
    def loadViewerModel(self, root_node_name: str, color: np.ndarray | None = None) -> None: ...
    def display(self, q: np.ndarray) -> None: ...
    def displayCollisions(self, visibility: bool) -> None: ...
    def displayVisuals(self, visibility: bool) -> None: ...
