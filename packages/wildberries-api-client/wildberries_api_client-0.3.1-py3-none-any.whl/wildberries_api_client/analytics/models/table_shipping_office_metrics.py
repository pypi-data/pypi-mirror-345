# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableShippingOfficeMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stock_count': 'int',
        'stock_sum': 'int',
        'sale_rate': 'TableCommonMetricsSaleRate',
        'to_client_count': 'int',
        'from_client_count': 'int'
    }

    attribute_map = {
        'stock_count': 'stockCount',
        'stock_sum': 'stockSum',
        'sale_rate': 'saleRate',
        'to_client_count': 'toClientCount',
        'from_client_count': 'fromClientCount'
    }

    def __init__(self, stock_count=None, stock_sum=None, sale_rate=None, to_client_count=None, from_client_count=None):  # noqa: E501
        """TableShippingOfficeMetrics - a model defined in Swagger"""  # noqa: E501
        self._stock_count = None
        self._stock_sum = None
        self._sale_rate = None
        self._to_client_count = None
        self._from_client_count = None
        self.discriminator = None
        self.stock_count = stock_count
        self.stock_sum = stock_sum
        self.sale_rate = sale_rate
        self.to_client_count = to_client_count
        self.from_client_count = from_client_count

    @property
    def stock_count(self):
        """Gets the stock_count of this TableShippingOfficeMetrics.  # noqa: E501

        Ostatki na tekuhii den, ht.  # noqa: E501

        :return: The stock_count of this TableShippingOfficeMetrics.  # noqa: E501
        :rtype: int
        """
        return self._stock_count

    @stock_count.setter
    def stock_count(self, stock_count):
        """Sets the stock_count of this TableShippingOfficeMetrics.

        Ostatki na tekuhii den, ht.  # noqa: E501

        :param stock_count: The stock_count of this TableShippingOfficeMetrics.  # noqa: E501
        :type: int
        """
        if stock_count is None:
            raise ValueError("Invalid value for `stock_count`, must not be `None`")  # noqa: E501

        self._stock_count = stock_count

    @property
    def stock_sum(self):
        """Gets the stock_sum of this TableShippingOfficeMetrics.  # noqa: E501

        Ostatki na tekuhii den, summa  # noqa: E501

        :return: The stock_sum of this TableShippingOfficeMetrics.  # noqa: E501
        :rtype: int
        """
        return self._stock_sum

    @stock_sum.setter
    def stock_sum(self, stock_sum):
        """Sets the stock_sum of this TableShippingOfficeMetrics.

        Ostatki na tekuhii den, summa  # noqa: E501

        :param stock_sum: The stock_sum of this TableShippingOfficeMetrics.  # noqa: E501
        :type: int
        """
        if stock_sum is None:
            raise ValueError("Invalid value for `stock_sum`, must not be `None`")  # noqa: E501

        self._stock_sum = stock_sum

    @property
    def sale_rate(self):
        """Gets the sale_rate of this TableShippingOfficeMetrics.  # noqa: E501


        :return: The sale_rate of this TableShippingOfficeMetrics.  # noqa: E501
        :rtype: TableCommonMetricsSaleRate
        """
        return self._sale_rate

    @sale_rate.setter
    def sale_rate(self, sale_rate):
        """Sets the sale_rate of this TableShippingOfficeMetrics.


        :param sale_rate: The sale_rate of this TableShippingOfficeMetrics.  # noqa: E501
        :type: TableCommonMetricsSaleRate
        """
        if sale_rate is None:
            raise ValueError("Invalid value for `sale_rate`, must not be `None`")  # noqa: E501

        self._sale_rate = sale_rate

    @property
    def to_client_count(self):
        """Gets the to_client_count of this TableShippingOfficeMetrics.  # noqa: E501

        V puti k klientu, ht.  # noqa: E501

        :return: The to_client_count of this TableShippingOfficeMetrics.  # noqa: E501
        :rtype: int
        """
        return self._to_client_count

    @to_client_count.setter
    def to_client_count(self, to_client_count):
        """Sets the to_client_count of this TableShippingOfficeMetrics.

        V puti k klientu, ht.  # noqa: E501

        :param to_client_count: The to_client_count of this TableShippingOfficeMetrics.  # noqa: E501
        :type: int
        """
        if to_client_count is None:
            raise ValueError("Invalid value for `to_client_count`, must not be `None`")  # noqa: E501

        self._to_client_count = to_client_count

    @property
    def from_client_count(self):
        """Gets the from_client_count of this TableShippingOfficeMetrics.  # noqa: E501

        V puti ot klienta, ht.  # noqa: E501

        :return: The from_client_count of this TableShippingOfficeMetrics.  # noqa: E501
        :rtype: int
        """
        return self._from_client_count

    @from_client_count.setter
    def from_client_count(self, from_client_count):
        """Sets the from_client_count of this TableShippingOfficeMetrics.

        V puti ot klienta, ht.  # noqa: E501

        :param from_client_count: The from_client_count of this TableShippingOfficeMetrics.  # noqa: E501
        :type: int
        """
        if from_client_count is None:
            raise ValueError("Invalid value for `from_client_count`, must not be `None`")  # noqa: E501

        self._from_client_count = from_client_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableShippingOfficeMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableShippingOfficeMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
