{"content": "\"\"\"\nWe need to check our coal supply first and collect more if needed.\nLet's reorganize our automation with proper resource management.\n\"\"\"\n\n# First check our inventory\nprint(\"Current inventory:\", inspect_inventory())\n\n# Mine some coal if we're low\ndrill = get_entities({Prototype.BurnerMiningDrill})[0]\nchest = get_entities({Prototype.IronChest})[0]\n\n# Extract iron ore from chest to make space\nextract_item(Prototype.IronOre, chest, quantity=5)\n\n# Place and configure inserter from chest to furnace\ninserter2 = place_entity_next_to(\n    Prototype.BurnerInserter,\n    reference_position=chest.position,\n    direction=Direction.RIGHT,\n    spacing=1\n)\nrotate_entity(inserter2, Direction.RIGHT)\n\n# Get coal from inventory if we have it\ninventory = inspect_inventory()\nif 'coal' in inventory and inventory['coal'] > 0:\n    # Add fuel to machines\n    insert_item(Prototype.Coal, inserter2, quantity=min(5, inventory['coal']))\n    \n    furnaces = get_entities({Prototype.StoneFurnace})\n    remaining_coal = inventory['coal'] - 5  # Subtract what we gave to inserter\n    if remaining_coal > 0:\n        for furnace in furnaces:\n            coal_per_furnace = min(5, remaining_coal // len(furnaces))\n            if coal_per_furnace > 0:\n                insert_item(Prototype.Coal, furnace, quantity=coal_per_furnace)\n                remaining_coal -= coal_per_furnace\n\n# Verify setup and inventory status\nprint(\"\\nFinal setup status:\")\nprint(f\"Inventory after setup: {inspect_inventory()}\")\nprint(f\"Entities: {get_entities()}\")", "summary_range": "[1-28]"}