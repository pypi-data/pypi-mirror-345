"""
This type stub file was generated by pyright.
"""

import pyarrow as pa
from functools import cached_property
from typing import Union
from .base import Reranker

class CrossEncoderReranker(Reranker):
    """
    Reranks the results using a cross encoder model. The cross encoder model is
    used to score the query and each result. The results are then sorted by the score.

    Parameters
    ----------
    model_name : str, default "cross-encoder/ms-marco-TinyBERT-L-6"
        The name of the cross encoder model to use. See the sentence transformers
        documentation for a list of available models.
    column : str, default "text"
        The name of the column to use as input to the cross encoder model.
    device : str, default None
        The device to use for the cross encoder model. If None, will use "cuda"
        if available, otherwise "cpu".
    return_score : str, default "relevance"
        options are "relevance" or "all". Only "relevance" is supported for now.
    trust_remote_code : bool, default True
        If True, will trust the remote code to be safe. If False, will not trust
        the remote code and will not run it
    """
    def __init__(self, model_name: str = ..., column: str = ..., device: Union[str, None] = ..., return_score=..., trust_remote_code: bool = ...) -> None:
        ...
    
    @cached_property
    def model(self): # -> Any:
        ...
    
    def rerank_hybrid(self, query: str, vector_results: pa.Table, fts_results: pa.Table):
        ...
    
    def rerank_vector(self, query: str, vector_results: pa.Table):
        ...
    
    def rerank_fts(self, query: str, fts_results: pa.Table):
        ...
    


