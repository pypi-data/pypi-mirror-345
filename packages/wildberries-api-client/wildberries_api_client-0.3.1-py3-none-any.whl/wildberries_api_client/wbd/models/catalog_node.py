# coding: utf-8

"""
    Wildberries cifrovoi

    Po voprosam raboty s WBD API, obrahaites v <a href=\"https://digital.wildberries.ru/support\" target=\"_blank\">tehniheskuu podderhku</a>.   # noqa: E501

    OpenAPI spec version: wbd
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CatalogNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'children': 'list[CatalogNode]',
        'img': 'str',
        'name': 'str',
        'parent_id': 'int',
        'path': 'list[int]',
        'id': 'int',
        'is_section': 'bool',
        'node_order': 'int',
        'section_id': 'int',
        'total': 'int'
    }

    attribute_map = {
        'children': 'children',
        'img': 'img',
        'name': 'name',
        'parent_id': 'parent_id',
        'path': 'path',
        'id': 'id',
        'is_section': 'is_section',
        'node_order': 'node_order',
        'section_id': 'section_id',
        'total': 'total'
    }

    def __init__(self, children=None, img=None, name=None, parent_id=None, path=None, id=None, is_section=None, node_order=None, section_id=None, total=None):  # noqa: E501
        """CatalogNode - a model defined in Swagger"""  # noqa: E501
        self._children = None
        self._img = None
        self._name = None
        self._parent_id = None
        self._path = None
        self._id = None
        self._is_section = None
        self._node_order = None
        self._section_id = None
        self._total = None
        self.discriminator = None
        if children is not None:
            self.children = children
        if img is not None:
            self.img = img
        if name is not None:
            self.name = name
        if parent_id is not None:
            self.parent_id = parent_id
        if path is not None:
            self.path = path
        if id is not None:
            self.id = id
        if is_section is not None:
            self.is_section = is_section
        if node_order is not None:
            self.node_order = node_order
        if section_id is not None:
            self.section_id = section_id
        if total is not None:
            self.total = total

    @property
    def children(self):
        """Gets the children of this CatalogNode.  # noqa: E501

        Spisok dohernih uzlov  # noqa: E501

        :return: The children of this CatalogNode.  # noqa: E501
        :rtype: list[CatalogNode]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this CatalogNode.

        Spisok dohernih uzlov  # noqa: E501

        :param children: The children of this CatalogNode.  # noqa: E501
        :type: list[CatalogNode]
        """

        self._children = children

    @property
    def img(self):
        """Gets the img of this CatalogNode.  # noqa: E501

        URI adres na ikonku kategorii   # noqa: E501

        :return: The img of this CatalogNode.  # noqa: E501
        :rtype: str
        """
        return self._img

    @img.setter
    def img(self, img):
        """Sets the img of this CatalogNode.

        URI adres na ikonku kategorii   # noqa: E501

        :param img: The img of this CatalogNode.  # noqa: E501
        :type: str
        """

        self._img = img

    @property
    def name(self):
        """Gets the name of this CatalogNode.  # noqa: E501

        Nazvanie uzla  # noqa: E501

        :return: The name of this CatalogNode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogNode.

        Nazvanie uzla  # noqa: E501

        :param name: The name of this CatalogNode.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this CatalogNode.  # noqa: E501

        Ukazyvaet na id roditela podkategorii.   # noqa: E501

        :return: The parent_id of this CatalogNode.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CatalogNode.

        Ukazyvaet na id roditela podkategorii.   # noqa: E501

        :param parent_id: The parent_id of this CatalogNode.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def path(self):
        """Gets the path of this CatalogNode.  # noqa: E501

        Spisok `id` (ID uzla). Put do elementa kataloga.   # noqa: E501

        :return: The path of this CatalogNode.  # noqa: E501
        :rtype: list[int]
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CatalogNode.

        Spisok `id` (ID uzla). Put do elementa kataloga.   # noqa: E501

        :param path: The path of this CatalogNode.  # noqa: E501
        :type: list[int]
        """

        self._path = path

    @property
    def id(self):
        """Gets the id of this CatalogNode.  # noqa: E501

        ID uzla.   Esli `is_section` = `true`, to `id` avlaetsa ID katagorii(`section`).   Esli `is_section` = `false`, to `id` avlaetsa ID podkateogrii(`is_path`).   # noqa: E501

        :return: The id of this CatalogNode.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogNode.

        ID uzla.   Esli `is_section` = `true`, to `id` avlaetsa ID katagorii(`section`).   Esli `is_section` = `false`, to `id` avlaetsa ID podkateogrii(`is_path`).   # noqa: E501

        :param id: The id of this CatalogNode.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_section(self):
        """Gets the is_section of this CatalogNode.  # noqa: E501

        Priznak, avlaetsa li uzel kategoriei(`section`)  # noqa: E501

        :return: The is_section of this CatalogNode.  # noqa: E501
        :rtype: bool
        """
        return self._is_section

    @is_section.setter
    def is_section(self, is_section):
        """Sets the is_section of this CatalogNode.

        Priznak, avlaetsa li uzel kategoriei(`section`)  # noqa: E501

        :param is_section: The is_section of this CatalogNode.  # noqa: E501
        :type: bool
        """

        self._is_section = is_section

    @property
    def node_order(self):
        """Gets the node_order of this CatalogNode.  # noqa: E501

        Poradok elementov podkategorii, kotorye nahodatsa na odnom urovne   # noqa: E501

        :return: The node_order of this CatalogNode.  # noqa: E501
        :rtype: int
        """
        return self._node_order

    @node_order.setter
    def node_order(self, node_order):
        """Sets the node_order of this CatalogNode.

        Poradok elementov podkategorii, kotorye nahodatsa na odnom urovne   # noqa: E501

        :param node_order: The node_order of this CatalogNode.  # noqa: E501
        :type: int
        """

        self._node_order = node_order

    @property
    def section_id(self):
        """Gets the section_id of this CatalogNode.  # noqa: E501

        ID kategorii (`section`). Esli `is_section` = `false`, to `section_id` ukazyvaet na roditelskuu kategoriu.  # noqa: E501

        :return: The section_id of this CatalogNode.  # noqa: E501
        :rtype: int
        """
        return self._section_id

    @section_id.setter
    def section_id(self, section_id):
        """Sets the section_id of this CatalogNode.

        ID kategorii (`section`). Esli `is_section` = `false`, to `section_id` ukazyvaet na roditelskuu kategoriu.  # noqa: E501

        :param section_id: The section_id of this CatalogNode.  # noqa: E501
        :type: int
        """

        self._section_id = section_id

    @property
    def total(self):
        """Gets the total of this CatalogNode.  # noqa: E501

        Obhee kolihestvo predlohenii v etoi kategorii. Pole zapolnaetsa tolko u kategorii (`section`).  # noqa: E501

        :return: The total of this CatalogNode.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CatalogNode.

        Obhee kolihestvo predlohenii v etoi kategorii. Pole zapolnaetsa tolko u kategorii (`section`).  # noqa: E501

        :param total: The total of this CatalogNode.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CatalogNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
