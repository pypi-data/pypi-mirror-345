# coding: utf-8

"""
    Othety

    <div class=\"description_important\">     Uznat bolhe ob othetah mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/5f2162c5-069b-416d-a4e1-48da2a76e6b0\">spravohnom centre</a> </div>  S pomohu etih metodov vy mohete poluhit [osnovnye othety](/openapi/reports#tag/Osnovnye-otchyoty) i othety o:   1. [Ostatkah na skladah](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah)   2. [Tovarah s obazatelnoi markirovkoi](/openapi/reports#tag/Otchyot-o-tovarah-c-obyazatelnoj-markirovkoj)   3. [Uderhaniah](/openapi/reports#tag/Otchyoty-ob-uderzhaniyah)   4. [Platnoi priemke](/openapi/reports#tag/Platnaya-priyomka)   5. [Platnom hranenii](/openapi/reports#tag/Platnoe-hranenie)   6. [Prodahah po regionam](/openapi/reports#tag/Prodazhi-po-regionam)   7. [Dole brenda v prodahah](/openapi/reports#tag/Dolya-brenda-v-prodazhah)   8. [Skrytyh tovarah](/openapi/reports#tag/Skrytye-tovary)   9. [Vozvratah i peremehenii tovarov](/openapi/reports#tag/Otchyot-o-vozvratah-i-peremeshenii-tovarov)   10. [Dinamike oborahivaemosti](/openapi/reports#tag/Dinamika-oborachivaemosti)   # noqa: E501

    OpenAPI spec version: reports
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.reports.api_client import ApiClient


class OsnovnyeOthetyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_supplier_incomes_get(self, date_from, **kwargs):  # noqa: E501
        """Postavki  # noqa: E501

        Metod predostavlaet kolihestvo postavok tovarov dla hranenia na skladah WB.<br>Dannye obnovlautsa raz v 30 minut. <br><br> Dla odnogo otveta v sisteme ustanovleno uslovnoe ogranihenie 100000 strok. Poetomu, htoby poluhit vse postavki, mohet potrebovatsa bolee, hem odin zapros. Vo vtorom i dalee zaprose v parametre <code>dateFrom</code> ispolzuite polnoe znahenie pola <code>lastChangeDate</code> iz poslednei stroki otveta na predyduhii zapros.<br> Esli v otvete otdaetsa pustoi massiv <code>[]</code>, vse postavki uhe vygruheny.          <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_supplier_incomes_get(date_from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_from: Data i vrema poslednego izmenenia po postavke. <br> Data v formate RFC3339. Mohno peredat datu ili datu so vremenem.  Vrema mohno ukazyvat s tohnostu do <a href='./api-information#tag/Vvedenie/Limity-zaprosov'>sekund</a> ili millisekund. <br> Vrema peredaetsa v hasovom poase Msk (UTC+3). <br>Primery: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>  (required)
        :return: list[IncomesItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_supplier_incomes_get_with_http_info(date_from, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_supplier_incomes_get_with_http_info(date_from, **kwargs)  # noqa: E501
            return data

    def api_v1_supplier_incomes_get_with_http_info(self, date_from, **kwargs):  # noqa: E501
        """Postavki  # noqa: E501

        Metod predostavlaet kolihestvo postavok tovarov dla hranenia na skladah WB.<br>Dannye obnovlautsa raz v 30 minut. <br><br> Dla odnogo otveta v sisteme ustanovleno uslovnoe ogranihenie 100000 strok. Poetomu, htoby poluhit vse postavki, mohet potrebovatsa bolee, hem odin zapros. Vo vtorom i dalee zaprose v parametre <code>dateFrom</code> ispolzuite polnoe znahenie pola <code>lastChangeDate</code> iz poslednei stroki otveta na predyduhii zapros.<br> Esli v otvete otdaetsa pustoi massiv <code>[]</code>, vse postavki uhe vygruheny.          <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_supplier_incomes_get_with_http_info(date_from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_from: Data i vrema poslednego izmenenia po postavke. <br> Data v formate RFC3339. Mohno peredat datu ili datu so vremenem.  Vrema mohno ukazyvat s tohnostu do <a href='./api-information#tag/Vvedenie/Limity-zaprosov'>sekund</a> ili millisekund. <br> Vrema peredaetsa v hasovom poase Msk (UTC+3). <br>Primery: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>  (required)
        :return: list[IncomesItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_from']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_supplier_incomes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'date_from' is set
        if ('date_from' not in params or
                params['date_from'] is None):
            raise ValueError("Missing the required parameter `date_from` when calling `api_v1_supplier_incomes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/supplier/incomes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IncomesItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_supplier_orders_get(self, date_from, **kwargs):  # noqa: E501
        """Zakazy  # noqa: E501

        Metod predostavlaet informaciu obo vseh zakazah.<br>Dannye obnovlautsa raz v 30 minut.<br><br>  1 stroka = 1 zakaz = 1 cborohnoe zadanie = 1 edinica tovara.<br>Dla opredelenia zakaza rekomenduem ispolzovat pole `srid`.<br><br>  Informacia o zakaze hranitsa 90 dnei s momenta oformlenia.<br><br>  Dla odnogo otveta na zapros s <code>flag=0</code> ili bez <code>flag</code> v sisteme ustanovleno uslovnoe ogranihenie 80000 strok. Poetomu, htoby poluhit vse zakazy, mohet potrebovatsa bolee, hem odin zapros. Vo vtorom i dalee zaprose v parametre <code>dateFrom</code> ispolzuite polnoe znahenie pola <code>lastChangeDate</code> iz poslednei stroki otveta na predyduhii zapros.<br> Esli v otvete otdaetsa pustoi massiv <code>[]</code>, vse zakazy uhe vygruheny.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_supplier_orders_get(date_from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_from: Data i vrema poslednego izmenenia po zakazu. <br> Data v formate RFC3339. Mohno peredat datu ili datu so vremenem.  Vrema mohno ukazyvat s tohnostu do <a href='./api-information#tag/Vvedenie/Limity-zaprosov'>sekund</a> ili millisekund. <br> Vrema peredaetsa v hasovom poase Msk (UTC+3). <br>Primery: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>  (required)
        :param int flag: Esli parametr `flag=0` (ili ne ukazan v stroke zaprosa), pri vyzove API vozvrahautsa dannye,  u kotoryh znahenie pola `lastChangeDate` (data vrema obnovlenia informacii v servise) bolhe ili ravno peredannomu  znaheniu parametra `dateFrom`.  Pri etom kolihestvo vozvrahennyh strok dannyh variruetsa v intervale ot 0 do primerno 100 000. <br> Esli parametr `flag=1`, to budet vygruhena informacia obo vseh zakazah ili prodahah s datoi,  ravnoi peredannomu parametru `dateFrom` (v dannom sluhae vrema v date znahenia ne imeet).  Pri etom kolihestvo vozvrahennyh strok dannyh budet ravno kolihestvu vseh zakazov ili prodah,  sdelannyh v ukazannuu datu, peredannuu v parametre `dateFrom`. 
        :return: list[OrdersItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_supplier_orders_get_with_http_info(date_from, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_supplier_orders_get_with_http_info(date_from, **kwargs)  # noqa: E501
            return data

    def api_v1_supplier_orders_get_with_http_info(self, date_from, **kwargs):  # noqa: E501
        """Zakazy  # noqa: E501

        Metod predostavlaet informaciu obo vseh zakazah.<br>Dannye obnovlautsa raz v 30 minut.<br><br>  1 stroka = 1 zakaz = 1 cborohnoe zadanie = 1 edinica tovara.<br>Dla opredelenia zakaza rekomenduem ispolzovat pole `srid`.<br><br>  Informacia o zakaze hranitsa 90 dnei s momenta oformlenia.<br><br>  Dla odnogo otveta na zapros s <code>flag=0</code> ili bez <code>flag</code> v sisteme ustanovleno uslovnoe ogranihenie 80000 strok. Poetomu, htoby poluhit vse zakazy, mohet potrebovatsa bolee, hem odin zapros. Vo vtorom i dalee zaprose v parametre <code>dateFrom</code> ispolzuite polnoe znahenie pola <code>lastChangeDate</code> iz poslednei stroki otveta na predyduhii zapros.<br> Esli v otvete otdaetsa pustoi massiv <code>[]</code>, vse zakazy uhe vygruheny.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_supplier_orders_get_with_http_info(date_from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_from: Data i vrema poslednego izmenenia po zakazu. <br> Data v formate RFC3339. Mohno peredat datu ili datu so vremenem.  Vrema mohno ukazyvat s tohnostu do <a href='./api-information#tag/Vvedenie/Limity-zaprosov'>sekund</a> ili millisekund. <br> Vrema peredaetsa v hasovom poase Msk (UTC+3). <br>Primery: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>  (required)
        :param int flag: Esli parametr `flag=0` (ili ne ukazan v stroke zaprosa), pri vyzove API vozvrahautsa dannye,  u kotoryh znahenie pola `lastChangeDate` (data vrema obnovlenia informacii v servise) bolhe ili ravno peredannomu  znaheniu parametra `dateFrom`.  Pri etom kolihestvo vozvrahennyh strok dannyh variruetsa v intervale ot 0 do primerno 100 000. <br> Esli parametr `flag=1`, to budet vygruhena informacia obo vseh zakazah ili prodahah s datoi,  ravnoi peredannomu parametru `dateFrom` (v dannom sluhae vrema v date znahenia ne imeet).  Pri etom kolihestvo vozvrahennyh strok dannyh budet ravno kolihestvu vseh zakazov ili prodah,  sdelannyh v ukazannuu datu, peredannuu v parametre `dateFrom`. 
        :return: list[OrdersItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_from', 'flag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_supplier_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'date_from' is set
        if ('date_from' not in params or
                params['date_from'] is None):
            raise ValueError("Missing the required parameter `date_from` when calling `api_v1_supplier_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'flag' in params:
            query_params.append(('flag', params['flag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/supplier/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrdersItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_supplier_sales_get(self, date_from, **kwargs):  # noqa: E501
        """Prodahi  # noqa: E501

        Metod predostavlaet informaciu o prodahah i vozvratah.<br>Dannye obnovlautsa raz v 30 minut.<br><br>  1 stroka = 1 zakaz = 1 cborohnoe zadanie = 1 edinica tovara.<br>Dla opredelenia zakaza rekomenduem ispolzovat pole `srid`.<br><br>  Informacia o zakaze hranitsa 90 dnei s momenta oformlenia.<br><br>  Dla odnogo otveta na zapros s <code>flag=0</code> ili bez <code>flag</code> v sisteme ustanovleno uslovnoe ogranihenie 80000 strok. Poetomu, htoby poluhit vse prodahi i vozvraty, mohet potrebovatsa bolee, hem odin zapros. Vo vtorom i dalee zaprose v parametre <code>dateFrom</code> ispolzuite polnoe znahenie pola <code>lastChangeDate</code> iz poslednei stroki otveta na predyduhii zapros.<br> Esli v otvete otdaetsa pustoi massiv <code>[]</code>, vse prodahi i vozvraty uhe vygruheny.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_supplier_sales_get(date_from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_from: Data i vrema poslednego izmenenia po prodahe/vozvratu. <br> Data v formate RFC3339. Mohno peredat datu ili datu so vremenem.  Vrema mohno ukazyvat s tohnostu do <a href='./api-information#tag/Vvedenie/Limity-zaprosov'>sekund</a> ili millisekund. <br> Vrema peredaetsa v hasovom poase Msk (UTC+3). <br>Primery: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>  (required)
        :param int flag: Esli parametr `flag=0` (ili ne ukazan v stroke zaprosa), pri vyzove API vozvrahautsa dannye,  u kotoryh znahenie pola `lastChangeDate` (data vrema obnovlenia informacii v servise) bolhe ili ravno peredannomu  znaheniu parametra `dateFrom`.  Pri etom kolihestvo vozvrahennyh strok dannyh variruetsa v intervale ot 0 do primerno 100 000. <br> Esli parametr `flag=1`, to budet vygruhena informacia obo vseh zakazah ili prodahah s datoi,  ravnoi peredannomu parametru `dateFrom` (v dannom sluhae vrema v date znahenia ne imeet).  Pri etom kolihestvo vozvrahennyh strok dannyh budet ravno kolihestvu vseh zakazov ili prodah,  sdelannyh v ukazannuu datu, peredannuu v parametre `dateFrom`. 
        :return: list[SalesItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_supplier_sales_get_with_http_info(date_from, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_supplier_sales_get_with_http_info(date_from, **kwargs)  # noqa: E501
            return data

    def api_v1_supplier_sales_get_with_http_info(self, date_from, **kwargs):  # noqa: E501
        """Prodahi  # noqa: E501

        Metod predostavlaet informaciu o prodahah i vozvratah.<br>Dannye obnovlautsa raz v 30 minut.<br><br>  1 stroka = 1 zakaz = 1 cborohnoe zadanie = 1 edinica tovara.<br>Dla opredelenia zakaza rekomenduem ispolzovat pole `srid`.<br><br>  Informacia o zakaze hranitsa 90 dnei s momenta oformlenia.<br><br>  Dla odnogo otveta na zapros s <code>flag=0</code> ili bez <code>flag</code> v sisteme ustanovleno uslovnoe ogranihenie 80000 strok. Poetomu, htoby poluhit vse prodahi i vozvraty, mohet potrebovatsa bolee, hem odin zapros. Vo vtorom i dalee zaprose v parametre <code>dateFrom</code> ispolzuite polnoe znahenie pola <code>lastChangeDate</code> iz poslednei stroki otveta na predyduhii zapros.<br> Esli v otvete otdaetsa pustoi massiv <code>[]</code>, vse prodahi i vozvraty uhe vygruheny.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_supplier_sales_get_with_http_info(date_from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_from: Data i vrema poslednego izmenenia po prodahe/vozvratu. <br> Data v formate RFC3339. Mohno peredat datu ili datu so vremenem.  Vrema mohno ukazyvat s tohnostu do <a href='./api-information#tag/Vvedenie/Limity-zaprosov'>sekund</a> ili millisekund. <br> Vrema peredaetsa v hasovom poase Msk (UTC+3). <br>Primery: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>  (required)
        :param int flag: Esli parametr `flag=0` (ili ne ukazan v stroke zaprosa), pri vyzove API vozvrahautsa dannye,  u kotoryh znahenie pola `lastChangeDate` (data vrema obnovlenia informacii v servise) bolhe ili ravno peredannomu  znaheniu parametra `dateFrom`.  Pri etom kolihestvo vozvrahennyh strok dannyh variruetsa v intervale ot 0 do primerno 100 000. <br> Esli parametr `flag=1`, to budet vygruhena informacia obo vseh zakazah ili prodahah s datoi,  ravnoi peredannomu parametru `dateFrom` (v dannom sluhae vrema v date znahenia ne imeet).  Pri etom kolihestvo vozvrahennyh strok dannyh budet ravno kolihestvu vseh zakazov ili prodah,  sdelannyh v ukazannuu datu, peredannuu v parametre `dateFrom`. 
        :return: list[SalesItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_from', 'flag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_supplier_sales_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'date_from' is set
        if ('date_from' not in params or
                params['date_from'] is None):
            raise ValueError("Missing the required parameter `date_from` when calling `api_v1_supplier_sales_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'flag' in params:
            query_params.append(('flag', params['flag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/supplier/sales', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SalesItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_supplier_stocks_get(self, date_from, **kwargs):  # noqa: E501
        """Sklady  # noqa: E501

        Metod predostavlaet kolihestvo ostatkov tovarov na skladah WB.<br>Dannye obnovlautsa raz v 30 minut. <br><br> Dla odnogo otveta v sisteme ustanovleno uslovnoe ogranihenie 60000 strok. Poetomu, htoby poluhit vse ostatki, mohet potrebovatsa bolee, hem odin zapros. Vo vtorom i dalee zaprose v parametre <code>dateFrom</code> ispolzuite polnoe znahenie pola <code>lastChangeDate</code> iz poslednei stroki otveta na predyduhii zapros.<br> Esli v otvete otdaetsa pustoi massiv <code>[]</code>, vse ostatki uhe vygruheny.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_supplier_stocks_get(date_from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_from: Data i vrema poslednego izmenenia po tovaru. <br> Dla poluhenia polnogo ostatka sleduet ukazyvat maksimalno rannee znahenie. <br> Naprimer, `2019-06-20` <br> Data v formate RFC3339. Mohno peredat datu ili datu so vremenem.  Vrema mohno ukazyvat s tohnostu do <a href='./api-information#tag/Vvedenie/Limity-zaprosov'>sekund</a> ili millisekund. <br> Vrema peredaetsa v hasovom poase Msk (UTC+3). <br>Primery: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>  (required)
        :return: list[StocksItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_supplier_stocks_get_with_http_info(date_from, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_supplier_stocks_get_with_http_info(date_from, **kwargs)  # noqa: E501
            return data

    def api_v1_supplier_stocks_get_with_http_info(self, date_from, **kwargs):  # noqa: E501
        """Sklady  # noqa: E501

        Metod predostavlaet kolihestvo ostatkov tovarov na skladah WB.<br>Dannye obnovlautsa raz v 30 minut. <br><br> Dla odnogo otveta v sisteme ustanovleno uslovnoe ogranihenie 60000 strok. Poetomu, htoby poluhit vse ostatki, mohet potrebovatsa bolee, hem odin zapros. Vo vtorom i dalee zaprose v parametre <code>dateFrom</code> ispolzuite polnoe znahenie pola <code>lastChangeDate</code> iz poslednei stroki otveta na predyduhii zapros.<br> Esli v otvete otdaetsa pustoi massiv <code>[]</code>, vse ostatki uhe vygruheny.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_supplier_stocks_get_with_http_info(date_from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_from: Data i vrema poslednego izmenenia po tovaru. <br> Dla poluhenia polnogo ostatka sleduet ukazyvat maksimalno rannee znahenie. <br> Naprimer, `2019-06-20` <br> Data v formate RFC3339. Mohno peredat datu ili datu so vremenem.  Vrema mohno ukazyvat s tohnostu do <a href='./api-information#tag/Vvedenie/Limity-zaprosov'>sekund</a> ili millisekund. <br> Vrema peredaetsa v hasovom poase Msk (UTC+3). <br>Primery: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>  (required)
        :return: list[StocksItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_from']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_supplier_stocks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'date_from' is set
        if ('date_from' not in params or
                params['date_from'] is None):
            raise ValueError("Missing the required parameter `date_from` when calling `api_v1_supplier_stocks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/supplier/stocks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StocksItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
