{#
 # Creates a package repository definition from the system.
 #}
 {%- macro repo_create(pkg_manager, repositories) -%}
    {% for repo in repositories %}
repos/{{ repo.filename }} \
    {% endfor %}
    /etc/yum.repos.d/
{%- endmacro -%}

{#
 # Removes packages using specified package manager.
 #}
{%- macro pkg_remove(pkg_manager, pkg_manager_flags, packages) -%}
{{ pkg_manager }} {{ helper.package_manager_flags(pkg_manager, pkg_manager_flags) }} {{ helper.package_manager_remove(pkg_manager) }} {%- for package in packages %} {{ package }}{% endfor %} \
{%- endmacro -%}

{#
 # Installs packages using specified package manager.
 #}
{%- macro pkg_install(pkg_manager, pkg_manager_flags, packages) -%}
{{ pkg_manager }} {{ helper.package_manager_flags(pkg_manager, pkg_manager_flags) }} {{ helper.package_manager_install(pkg_manager) }} {%- for package in packages %} {{ package }}{% endfor %} \
            && {{ helper.package_manager_query(pkg_manager) }}{% for package in packages %} {{ package.split('=')[0] }}{% endfor %} \
{%- endmacro -%}

{#
 # Reinstalls packages using specified package manager.
 #}
{%- macro pkg_reinstall(pkg_manager, pkg_manager_flags, packages) -%}
{{ pkg_manager }} {{ helper.package_manager_flags(pkg_manager, pkg_manager_flags) }} {{ helper.package_manager_reinstall(pkg_manager) }} {%- for package in packages %} {{ package }}{% endfor %} \
            && {{ helper.package_manager_query(pkg_manager) }}{% for package in packages %} {{ package.split('=')[0] }}{% endfor %} \
{%- endmacro -%}


{#
 # Cleans up package manager.
 #}
{%- macro pkg_cleanup(pkg_manager) -%}
    {{ helper.package_manager_clean(pkg_manager) }} \
{%- endmacro -%}

{#
 # Handle processing ARGS
 #}
{%- macro process_args(module) -%}
{% if module.args|count > 0 %}
    {% for arg in module.args|sort(attribute='name') %}
    {% if 'value' in arg %}
        ARG {{ arg.name }}="{{ arg.value }}"
    {% else %}
        ARG {{ arg.name }}
    {% endif -%}
    {% endfor %}

{% endif %}
{%- endmacro -%}


{#
 # Macro for processing content of a module (or image).
 #
 # 1. Copies any defined general artifacts
 # 2. Copies any defined stage artifacts (built in previous stages as part of multi-stage builds)
 # 3. Copies module content (if a module is processed, skipped on image)
 # 4. Installs any defined packages
 # 5. Add ARG variables
 # 6. Sets environment variables
 # 7. Sets labels
 # 8. Exposes ports
 # 9. Executes any defined scripts
 # 10. Exposes any defined volumes
 #}
{%- macro process_module(module, parent_image=None) %}
{% set module_type = 'module' %}
{% if not parent_image %}
{% set module_type = 'image' %}
{% set parent_image = module %}
{% endif %}
###### START {{ module_type }} '{{ module.name }}:{{ module.version }}'
###### \
        {% if module.artifacts|rejectattr("image")|list|length > 0 %}
        {% for dest, artifacts in module.artifacts|rejectattr("image")|list|groupby("dest") %}
        # Copy '{{ module.name }}' {{ module_type }} general artifacts to '{{ dest }}' destination
        COPY \
            {% for artifact in artifacts %}
            {{ artifact['target'] }} \
            {% endfor %}
            {{ dest }}
            {% endfor %}
        {% endif -%}

        {% if module.artifacts|selectattr("image")|list|length > 0 %}
        # Copy '{{ module.name }}' {{ module_type }} stage artifacts
        {% for artifact in module.artifacts|selectattr("image")|list %}
        COPY --from={{ artifact['image'] }} {{ artifact['path'] }} {{ artifact['dest'] }}{{ artifact['target'] }}
        {% endfor %}
        {% endif -%}

        {% if module.execute %}
        {% if module_type == 'module' %}
        # Copy '{{ module.name }}' {{ module_type }} content
        COPY modules/{{ module.name }} /tmp/scripts/{{ module.name }}
        {% endif -%}
        {% endif -%}

        {% if module.packages and module.packages.remove or module.packages.install or module.packages.reinstall %}
        # Switch to 'root' user for package management for '{{ module.name }}' {{ module_type }} defined packages
        USER root
        {#
         # Ideally we would use heredoc but its not available in all versions so use continuation lines.
         #}
        RUN : \
        {% if module.packages and module.packages.remove %}
        # Remove packages defined in the '{{ module.name }}' {{ module_type }}
        && {{ pkg_remove(parent_image.packages.manager, parent_image.packages.manager_flags, module.packages.remove) }}
        {% endif -%}
        {% if module.packages and module.packages.install %}
        # Install packages defined in the '{{ module.name }}' {{ module_type }}
        && {{ pkg_install(parent_image.packages.manager, parent_image.packages.manager_flags, module.packages.install) }}
        {% endif -%}
        {% if module.packages and module.packages.reinstall %}
        # Reinstall packages defined in the '{{ module.name }}' {{ module_type }}
        && {{ pkg_reinstall(parent_image.packages.manager, parent_image.packages.manager_flags, module.packages.reinstall) }}
        {% endif -%}
        {#
         # Only if we're not using CEKit squashing do we clear the metadata here.
         #}
        {% if no_squash %}
        {% if helper.package_manager_cleanup(image) %}
        # Clear package manager metadata
        && {{ pkg_cleanup(parent_image.packages.manager) }}
        && rm -rf "/var/cache/yum" "/var/lib/dnf" "/var/cache/apt" "/var/cache/dnf" \
        {% endif -%}
        {% endif -%}
        {#
         # The : noop is only to complete any prior continuation lines.
         #}
        && :

        {% endif -%}
        {% if module_type == 'module' %}
        {{- process_args(module) -}}
        {% endif -%}
        {% if module.envs|selectattr("value")|list|length > 0 %}
        # Set '{{ module.name }}' {{ module_type }} defined environment variables
        ENV \
            {% for env in module.envs|sort(attribute='name')|selectattr("value")|list %}
            {{ env.name }}="{{ env.value }}"{% if loop.index < loop.length %} \{% endif %}

            {% endfor %}
        {% endif -%}

        {% if module.labels|count > 0 %}
        # Set '{{ module.name }}' {{ module_type }} defined labels
        LABEL \
            {% for label in module.labels|sort(attribute='name') %}
            {{ label.name }}="{{ label.value }}"{% if loop.index < loop.length %} \{% endif %}

            {% endfor %}
        {% endif -%}

        {% if helper.ports(module.ports)|length > 0 %}
        # Exposed ports in '{{ module.name }}' {{ module_type }}
        EXPOSE {%- for port in helper.ports(module.ports) %} {{ port }}{% endfor %}

        {% endif -%}

        {% if module.execute %}
        # Custom scripts from '{{ module.name }}' {{ module_type }}
        {% for exec in module.execute %}
        USER {{ exec.user }}
        RUN [ "sh", "-x", "/tmp/scripts/{{ exec.directory }}/{{ exec.script }}" ]
        {% endfor %}
        {% endif -%}

        {% if module.volumes|length > 0 %}
        # Volumes defined in the '{{ module.name }}' {{ module_type }}
        {% for volume in module.volumes %}
        VOLUME ["{{ volume['path'] }}"]
        {% endfor %}
        {% endif -%}
###### /
###### END {{ module_type }} '{{ module.name }}:{{ module.version }}'
{% endmacro -%}

{#
 # Macro for main image generation.
 #
 # 1. Sets user to 'root'
 # 2. Adds any custom repositories
 #}
{%- macro process_image(animage) %}
    {% if animage.from != 'scratch' %}
    USER root
    {% endif -%}

    {#
     # Add Cachito support
     #}
    {%if helper.cachito(animage) %}

    COPY $REMOTE_SOURCE $REMOTE_SOURCE_DIR
    WORKDIR $REMOTE_SOURCE_DIR/app
    {% endif %}
    {% if animage.packages.repositories_injected %}

    # Add custom repo files
    COPY {{ repo_create(animage.packages.manager, animage.packages.repositories_injected) }}
    {% endif %}
    {% if animage.packages.repositories %}
    {% for repo in animage.packages.repositories %}
    {% if repo.rpm %}

    {#
     # Installs a repository RPM using specified package manager.
     #}
    RUN {{ animage.packages.manager }} {{ helper.package_manager_flags(animage.packages.manager, animage.packages.manager_flags) }} install -y {{ repo.rpm }}
    {% endif %}
    {% endfor %}
    {% endif %}

    {{- process_args(animage) }}
    {% for to_install in animage.modules.install %}
{{ process_module(helper.module(to_install), animage) }}
    {% endfor %}
{{ process_module(animage) }}
    {%if helper.cachito(animage) %}
    RUN rm -rf $REMOTE_SOURCE_DIR
    {% endif %}
{%- endmacro -%}


{#
 # Main Dockerfile rendering now...
 #}

# This is a Dockerfile for the {{ name }}:{{ version }} image.

{% for builder_image in builders %}
## START builder image {{ builder_image.name }}:{{ builder_image.version }}
## \
    FROM {{ builder_image.from }} AS {{ builder_image.name }}
{{ process_image(builder_image) }}
## /
## END builder image
{% endfor %}

## START target image {{ image.name }}:{{ image.version }}
## \
    FROM {{ image.from }}

    {%if helper.extra_dir_target(image) %}
    COPY {{ helper.extra_dir(image) }} {{ helper.extra_dir_target(image) }}
    {% endif %}

{{ process_image(image) }}

    {% if image.from != 'scratch' %}
    # Switch to 'root' user and remove artifacts and modules
    USER root
    RUN rm -rf "/tmp/scripts" "/tmp/artifacts"
    {% endif -%}

    {#
     # Clears repository cache.
     #}
    {% if not no_squash %}
    {% if helper.package_manager_cleanup(image) %}
    # Clear package manager metadata
    RUN {{ pkg_cleanup(image.packages.manager) }}
    && rm -rf "/var/cache/yum" "/var/lib/dnf" "/var/cache/apt" "/var/cache/dnf"
    {% endif -%}
    {% endif -%}

    {#
     # Removes specified package repository from the system.
     #}
    {% if image.packages.repositories_injected %}
    # Remove custom repo files
    RUN rm{% for repo in image.packages.repositories.injected %} /etc/yum.repos.d/{{ repo.filename }}{% endfor %}
    {% endif -%}

    {% if 'user' in run and image.from != 'scratch' %}
    # Define the user
    USER {{ run['user'] }}
    {% endif -%}

    {% if 'workdir' in run %}
    # Define the working directory
    WORKDIR {{ run['workdir'] }}
    {% endif -%}

    {% if 'entrypoint' in run %}
    # Define entrypoint
    ENTRYPOINT {{ helper.cmd(run['entrypoint']) }}
    {% endif -%}

    {% if 'cmd' in run %}
    # Define run cmd
    CMD {{ helper.cmd(run['cmd']) }}
    {% endif -%}
## /
## END target image
