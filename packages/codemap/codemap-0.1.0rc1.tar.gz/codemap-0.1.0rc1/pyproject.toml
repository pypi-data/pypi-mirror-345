[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "codemap"
version = "0.1.0-rc.1"
description = "CLI tool that generates optimized markdown docs and streamline Git workflows"
readme = "README.md"
source = "https://github.com/SarthakMishra/codemap"
changelog = "CHANGELOG.md"
authors = [
    { name="Sarthak Mishra", email="hi@sarthakmishra.com" },
]
license = { text = "MIT" }
keywords = ["cli", "markdown", "git", "documentation", "codebase"]
requires-python = ">=3.12,<3.13"
dependencies = [
    "litellm>=1.67.0",
    "numpy>=2.2.5",
    "pygments>=2.19.1",
    "python-dotenv>=1.1.0",
    "pyyaml>=6.0.2",
    "questionary>=2.1.0",
    "requests>=2.32.3",
    "rich>=14.0.0",
    "typer>=0.15.2",
    "typing-extensions>=4.13.2",
    "sentence-transformers>=4.1.0",
    "watchdog>=6.0.0",
    "tree-sitter>=0.24.0",
    "tree-sitter-language-pack>=0.7.2",
    "lancedb>=0.21.2",
    "pandas>=2.2.3",
    "multilspy>=0.0.15",
    "pytest-mock>=3.14.0",
    "python-daemon>=3.1.2",
    "lockfile>=0.12.2",
    "fastapi>=0.110.0",
    "uvicorn>=0.29.0",
    "pydantic>=2.7.0",
    "pyxdg>=0.28",
    "packaging>=24.2",
    "requests-unixsocket>=0.4.1",
    "pathspec>=0.12.1",
]

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "docformatter>=1.7.5",
    "interrogate>=1.7.0",
    "isort>=6.0.1",
    "pre-commit>=4.2.0",
    "pylint>=3.3.6",
    "pyright>=1.1.400",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.0",
    "pytest-sugar>=1.0.0",
    "pytest-xdist[psutil]>=3.6.1",
    "python-semantic-release>=9.3.1",
    "radon>=6.0.1",
    "ruff>=0.11.6",
    "twine>=6.1.0",
]
model2vec = [
    "matplotlib[pyplot]>=3.10.1",
    "model2vec[distill]>=0.4.1",
    "psutil>=7.0.0",
    "sentence-transformers>=4.1.0",
    "transformers>=4.51.1",
]

[tool.pyright]
# Define included and excluded directories
include = ["src", "tests"]
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "vendor"
]
# Basic type checking mode - more lenient than strict
typeCheckingMode = "standard"
# Analyze unannotated functions
analyzeUnannotatedFunctions = true
# Configuration to enable good type checking but not be too strict
reportMissingImports = "error"
reportMissingTypeStubs = "warning"
reportUnusedImport = "warning"
reportUnusedVariable = "warning"
reportGeneralTypeIssues = "error"
# Useful for catching common errors
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
# Enable Python 3.12 features
pythonVersion = "3.12"
# Use library code for types when type stubs are missing
useLibraryCodeForTypes = true
# Virtual environment configuration
venvPath = "."
venv = ".venv"
# Extra paths to search for imported modules
extraPaths = ["src"]

[project.scripts]
codemap = "codemap.cli:main"
cm = "codemap.cli:main"

[tool.pytest]
testpaths = ["tests"]
pythonpath = ["src"]

[tool.ruff]
line-length = 120
target-version = "py312"

# Exclude files/directories
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "vendor"
]

[tool.ruff.lint]
# Enable all rules by default, then selectively disable
select = ["ALL"]
ignore = [
    # Rules that conflict with other tools/preferences
    "D203",  # one-blank-line-before-class
    "D212",  # multi-line-summary-first-line
    "FBT001",  # Boolean positional arg in function definition (required for typer)
    "FBT002",  # Boolean default value in function definition (required for typer)
    "C901",  # function too complex
    "PLR0911",  # too many return statements
    "PLR0912",  # too many branches
    "PLR0913",  # too many arguments in function definition
    "PLR0915",  # too many statements
    "TRY300",  # Consider moving this statement to an `else` block
    "COM812",  # Use a constant for the message in a raise statement
    "TC001",  # Move application import into a type-checking block
    "ERA001", # Found commented-out code
    "G004", # Logging statement uses f-string
    # Disable rules that conflict with tab indentation
    "E101",  # Indentation contains mixed spaces and tabs
    "W191",  # indentation contains tabs
    "D206",  # indent with spaces, not tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "PLR2004", "ANN002", "ANN003", "SLF001", "S108", "S105", "PT019", "ANN001", "D102"]
"models/*" = ["S101", "PLR2004", "ANN002", "ANN003", "SLF001", "S108", "S105"]
"models/qodo_embed_m2v/*" = ["ANN001", "ANN201", "ANN202", "ANN401", "G003", "BLE001"]
"src/codemap/cli/main.py" = ["ARG001"]  # Allow unused arguments in CLI functions (for API compatibility)
"src/codemap/utils/pr_strategies.py" = ["ARG002"]  # Allow unused arguments in strategy interface methods

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-statements = 50

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "tab"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.docformatter]
recursive = true
wrap-summaries = 120
pre-summary-newline = true
blank = true

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip_glob = [
    ".git",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "vendor"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_first_party = ["codemap"]
known_third_party = ["litellm", "numpy", "pygments", "dotenv", "yaml", "questionary", 
                    "requests", "rich", "typer", "typing_extensions", "sentence_transformers", 
                    "watchdog", "tree_sitter", "lancedb", "pandas", "multilspy"]

[tool.semantic_release]
version_variables = [
    "src/codemap/__init__.py:__version__"
]
version_toml = [
    "pyproject.toml:project.version:nf"
]
major_on_zero = false
vcs_release = true

[tool.semantic_release.changelog.default_templates]
mask_initial_release = true

# Main branch - stable production releases
[tool.semantic_release.branches.main]
match = "^main$"
prerelease = false

# Development branch - integration branch for upcoming features
[tool.semantic_release.branches.dev]
match = "^dev$"
prerelease = true
prerelease_token = "rc"

# Commit message parsing configuration
[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "refactor",
    "style",
    "test"
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
