# coding: utf-8

"""
    Rabota s tovarami

    <div class=\"description_ref\">     Uznat, kak ispolzovat metody v biznes-keisah, mohno v <a href=\"https://dev.wildberries.ru/news/101\">instrukcii po rabote s tovarami</a> </div>  Rabota s tovarami vkluhaet v seba:   1. [Sozdanie](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) i [redaktirovanie](/openapi/work-with-products#tag/Kartochki-tovarov) kartohek tovarov: v tom hisle, poluhenie [kategorii, predmetov i harakteristik tovarov](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) i zagruzku [mediafailov](/openapi/work-with-products#tag/Mediafajly).   2. Nastroiku [arlykov](/openapi/work-with-products#tag/Yarlyki) dla udobnogo poiska tovarov.   3. Ustanovku [cen i skidok](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Upravlenie [ostatkami tovarov](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) i [skladami](/openapi/work-with-products#tag/Sklady-prodavca), esli vy rabotaete po modeli prodah so sklada prodavca.   # noqa: E501

    OpenAPI spec version: products
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.products.api_client import ApiClient


class MediafailyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def content_v3_media_file_post(self, uploadfile, x_nm_id, x_photo_number, **kwargs):  # noqa: E501
        """Zagruzit mediafail  # noqa: E501

        Metod zagruhaet i dobavlaet odin mediafail k kartohke tovara.  Trebovania k izobraheniam:   * maksimum izobrahenii dla odnoi kartohki tovara — 30   * minimalnoe razrehenie — 700x900 px   * maksimalnyi razmer — 32 Mb   * minimalnoe kahestvo — 65%   * formaty — JPG, PNG, BMP, GIF (statihnye), WebP  Trebovania k video:   * maksimum odno video dla odnoi kartohki tovara   * maksimalnyi razmer — 50 Mb   * formaty — MOV, MP4  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v3_media_file_post(uploadfile, x_nm_id, x_photo_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uploadfile: (required)
        :param str x_nm_id: Artikul WB (required)
        :param int x_photo_number: Nomer mediafaila na zagruzku, nahinaetsa s `1`. Pri zagruzke video vsegda ukazyvaite `1`.  htoby dobavit izobrahenie k uhe zagruhennym, nomer mediafaila dolhen byt bolhe kolihestva uhe zagruhennyh mediafailov.  (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v3_media_file_post_with_http_info(uploadfile, x_nm_id, x_photo_number, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v3_media_file_post_with_http_info(uploadfile, x_nm_id, x_photo_number, **kwargs)  # noqa: E501
            return data

    def content_v3_media_file_post_with_http_info(self, uploadfile, x_nm_id, x_photo_number, **kwargs):  # noqa: E501
        """Zagruzit mediafail  # noqa: E501

        Metod zagruhaet i dobavlaet odin mediafail k kartohke tovara.  Trebovania k izobraheniam:   * maksimum izobrahenii dla odnoi kartohki tovara — 30   * minimalnoe razrehenie — 700x900 px   * maksimalnyi razmer — 32 Mb   * minimalnoe kahestvo — 65%   * formaty — JPG, PNG, BMP, GIF (statihnye), WebP  Trebovania k video:   * maksimum odno video dla odnoi kartohki tovara   * maksimalnyi razmer — 50 Mb   * formaty — MOV, MP4  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v3_media_file_post_with_http_info(uploadfile, x_nm_id, x_photo_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uploadfile: (required)
        :param str x_nm_id: Artikul WB (required)
        :param int x_photo_number: Nomer mediafaila na zagruzku, nahinaetsa s `1`. Pri zagruzke video vsegda ukazyvaite `1`.  htoby dobavit izobrahenie k uhe zagruhennym, nomer mediafaila dolhen byt bolhe kolihestva uhe zagruhennyh mediafailov.  (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uploadfile', 'x_nm_id', 'x_photo_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v3_media_file_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uploadfile' is set
        if ('uploadfile' not in params or
                params['uploadfile'] is None):
            raise ValueError("Missing the required parameter `uploadfile` when calling `content_v3_media_file_post`")  # noqa: E501
        # verify the required parameter 'x_nm_id' is set
        if ('x_nm_id' not in params or
                params['x_nm_id'] is None):
            raise ValueError("Missing the required parameter `x_nm_id` when calling `content_v3_media_file_post`")  # noqa: E501
        # verify the required parameter 'x_photo_number' is set
        if ('x_photo_number' not in params or
                params['x_photo_number'] is None):
            raise ValueError("Missing the required parameter `x_photo_number` when calling `content_v3_media_file_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_nm_id' in params:
            header_params['X-Nm-Id'] = params['x_nm_id']  # noqa: E501
        if 'x_photo_number' in params:
            header_params['X-Photo-Number'] = params['x_photo_number']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'uploadfile' in params:
            local_var_files['uploadfile'] = params['uploadfile']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'plain/text'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v3/media/file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v3_media_save_post(self, body, **kwargs):  # noqa: E501
        """Zagruzit mediafaily po ssylkam  # noqa: E501

        Metod zagruhaet nabor mediafailov v kartohku tovara herez ukazanie ssylok v zaprose.  <div class=\"description_important\">   Novye mediafaily polnostu zamenaut starye. htoby dobavit novye mediafaily, ukahite v zaprose ssylki odnovremenno na novye i starye mediafaily. </div>  Trebovania k izobraheniam:   * maksimum izobrahenii dla odnoi kartohki tovara — 30   * minimalnoe razrehenie — 700×900 px   * maksimalnyi razmer — 32 Mb   * minimalnoe kahestvo — 65%   * formaty — JPG, PNG, BMP, GIF (statihnye), WebP  Trebovania k video:   * maksimum odno video dla odnoi kartohki tovara   * maksimalnyi razmer — 50 Mb   * formaty — MOV, MP4  Esli video ili hota by odno izobrahenie v zaprose ne sootvetstvuet trebovaniam, to dahe pri uspehnom otvete ni odno izobrahenie/video ne zagruzitsa.  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v3_media_save_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MediaSaveBody body: (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v3_media_save_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v3_media_save_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v3_media_save_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Zagruzit mediafaily po ssylkam  # noqa: E501

        Metod zagruhaet nabor mediafailov v kartohku tovara herez ukazanie ssylok v zaprose.  <div class=\"description_important\">   Novye mediafaily polnostu zamenaut starye. htoby dobavit novye mediafaily, ukahite v zaprose ssylki odnovremenno na novye i starye mediafaily. </div>  Trebovania k izobraheniam:   * maksimum izobrahenii dla odnoi kartohki tovara — 30   * minimalnoe razrehenie — 700×900 px   * maksimalnyi razmer — 32 Mb   * minimalnoe kahestvo — 65%   * formaty — JPG, PNG, BMP, GIF (statihnye), WebP  Trebovania k video:   * maksimum odno video dla odnoi kartohki tovara   * maksimalnyi razmer — 50 Mb   * formaty — MOV, MP4  Esli video ili hota by odno izobrahenie v zaprose ne sootvetstvuet trebovaniam, to dahe pri uspehnom otvete ni odno izobrahenie/video ne zagruzitsa.  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v3_media_save_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MediaSaveBody body: (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v3_media_save_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v3_media_save_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v3/media/save', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
