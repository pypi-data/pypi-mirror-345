Metadata-Version: 2.4
Name: mcp_voice_salute
Version: 0.1.0
Summary: MCP сервер для работы с голосовыми API SaluteSpeech от Сбера
Author-email: Sergei Trashchenkov <trashchenkov@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/trashchenkov/mcp_voice_salute
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: httpx>=0.28.1
Requires-Dist: mcp[cli]>=1.6.0
Requires-Dist: pyaudio>=0.2.14
Requires-Dist: speechrecognition>=3.14.2
Requires-Dist: sounddevice>=0.5.1
Requires-Dist: numpy>=1.26.0
Requires-Dist: uv>=0.7.2

# MCP SaluteSpeech

[![GitHub](https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&logo=github&logoColor=white)](https://github.com/Sergej/mcp_voice_salute)

MCP SaluteSpeech - это реализация MCP (Model Context Protocol) сервера, предоставляющего инструменты для работы с голосовыми API SaluteSpeech от Сбера. Позволяет AI ассистентам записывать речь пользователя с микрофона, распознавать её с помощью и синтезировать речь из текста.

Сервер предоставляет доступ агентам на основе LLM к голосовому интерфейсу, значительно расширяя возможности взаимодействия с пользователем.

## Из чего состоит MCP SaluteSpeech?

MCP SaluteSpeech предоставляет два основных инструмента:

1. **sber_stt_record_and_recognize** - записывает аудио с микрофона до появления 3-секундной паузы, отправляет запись на API распознавания речи SaluteSpeech и возвращает распознанный текст.

2. **synthesize_speech** - синтезирует речь из текста с помощью API SaluteSpeech и воспроизводит её через аудиоустройство компьютера.

Эти инструменты особенно полезны для:
- Создания голосовых интерфейсов для AI ассистентов
- Разработки приложений с поддержкой голосового управления
- Интеграции голосовых возможностей в агентные системы на базе LLM

## Возможности

- Реализация голосовых инструментов для MCP (Model Context Protocol)
- Полная интеграция с API SaluteSpeech от Сбера
- Готовность к работе с такими ассистетами как Cursor, Windsurf и другими
- Поддержка распознавания и синтеза русской речи


## Настройка MCP сервера

Добавьте этот MCP сервер к вашему агенту.

```json
"mcpServers": {
    "mcp-salutespeech": {
        "command": "uvx",
        "args": ["mcp-salutespeech"],
        "enabled": true,
        "env": {
            "SALUTE_SPEECH": "ВАШ_ТОКЕН_SALUTESPEECH"
        }
    }
}
```

## Описание инструментов

### sber_stt_record_and_recognize

Записывает аудио с микрофона до появления 3-секундной паузы, затем отправляет запись на API распознавания речи SaluteSpeech и возвращает распознанный текст.

**Вход**: Не требует параметров
**Поведение**: Выполняет запись с микрофона, распознавание и возвращает текст
**Выход**: Строка с распознанным текстом

### synthesize_speech

Синтезирует речь из текста с помощью API SaluteSpeech и воспроизводит её через аудиоустройство компьютера.

**Вход**:
- `text` (string) — Текст для преобразования в речь
- `format` (string, опционально) — Формат аудио (по умолчанию "wav16")
- `voice` (string, опционально) — Голос для синтеза (по умолчанию "Bys_24000")

**Поведение**: Преобразует текст в речь и воспроизводит через динамики
**Выход**: Подтверждение успешного воспроизведения

## Пример использования с Claude

```python
# Пример вызова инструмента распознавания речи:
text = await mcp_mcp_salutespeech_sber_stt_record_and_recognize(random_string="")
print(f"Распознанный текст: {text}")

# Пример вызова инструмента синтеза речи:
await mcp_mcp_salutespeech_synthesize_speech(text="Привет! Как дела?", voice="Bys_24000")
```

## Как добавить этот MCP сервер в Cursor

Есть два способа добавить MCP сервер в Cursor:

1. **Глобально** - добавить сервер в файл `~/.cursor/mcp.json`
2. **Для проекта** - добавить сервер в файл `.cursor/mcp.json` в вашем проекте

### Добавление MCP сервера глобально

Перейдите в Cursor Settings > MCP и нажмите "Add new global MCP server". Затем добавьте следующую конфигурацию:

```json
{
    "mcpServers": {
        "mcp-salutespeech": {
            "command": "uvx",
            "args": ["mcp-salutespeech"],
            "enabled": true,
            "env": {
                "SALUTE_SPEECH": "ВАШ_ТОКЕН_SALUTESPEECH"
            }
        }
    }
}
```

### Требования к окружению

Для работы с API требуется установить переменную окружения:

```
SALUTE_SPEECH - токен Basic авторизации для доступа к API SaluteSpeech
```

## Лицензия

[MIT License](LICENSE)
