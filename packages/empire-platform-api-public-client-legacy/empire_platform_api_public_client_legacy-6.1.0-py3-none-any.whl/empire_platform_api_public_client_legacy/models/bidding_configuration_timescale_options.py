# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from empire_platform_api_public_client_legacy.models.bidding_configuration_per_direction import BiddingConfigurationPerDirection

class BiddingConfigurationTimescaleOptions(BaseModel):
    """
    BiddingConfigurationTimescaleOptions
    """
    long_term: BiddingConfigurationPerDirection = Field(default=..., alias="longTerm")
    day_ahead: BiddingConfigurationPerDirection = Field(default=..., alias="dayAhead")
    intra_day: BiddingConfigurationPerDirection = Field(default=..., alias="intraDay")
    __properties = ["longTerm", "dayAhead", "intraDay"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BiddingConfigurationTimescaleOptions:
        """Create an instance of BiddingConfigurationTimescaleOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of long_term
        if self.long_term:
            _dict['longTerm'] = self.long_term.to_dict()
        # override the default output from pydantic by calling `to_dict()` of day_ahead
        if self.day_ahead:
            _dict['dayAhead'] = self.day_ahead.to_dict()
        # override the default output from pydantic by calling `to_dict()` of intra_day
        if self.intra_day:
            _dict['intraDay'] = self.intra_day.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BiddingConfigurationTimescaleOptions:
        """Create an instance of BiddingConfigurationTimescaleOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BiddingConfigurationTimescaleOptions.parse_obj(obj)

        _obj = BiddingConfigurationTimescaleOptions.parse_obj({
            "long_term": BiddingConfigurationPerDirection.from_dict(obj.get("longTerm")) if obj.get("longTerm") is not None else None,
            "day_ahead": BiddingConfigurationPerDirection.from_dict(obj.get("dayAhead")) if obj.get("dayAhead") is not None else None,
            "intra_day": BiddingConfigurationPerDirection.from_dict(obj.get("intraDay")) if obj.get("intraDay") is not None else None
        })
        return _obj


