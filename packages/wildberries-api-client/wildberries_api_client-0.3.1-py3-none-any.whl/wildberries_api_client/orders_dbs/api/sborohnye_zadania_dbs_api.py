# coding: utf-8

"""
    Zakazy DBS

    <div class=\"description_important\">       Uznat bolhe o zakazah DBS mohno v <a href=\"https://seller.wildberries.ru/instructions/category/6572e024-7428-4db1-86a8-a4c7dbebbfcf?goBackOption=prevRoute&categoryId=5a8e1202-0865-45b7-acae-5d0afc7add56\">spravohnom centre</a> </div>  Upravlenie [sborohnymi zadaniami](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) i [metadannymi](/openapi/orders-dbs#tag/Metadannye-DBS) zakazov DBS (Delivery by Seller).   # noqa: E501

    OpenAPI spec version: order
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.orders_dbs.api_client import ApiClient


class SborohnyeZadaniaDBSApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v3_dbs_orders_client_post(self, body, **kwargs):  # noqa: E501
        """Informacia o pokupatele  # noqa: E501

        Metod predostavlaet informaciu o pokupatele po ID sborohnogo zadania.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_client_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersRequestAPI body: (required)
        :return: DbsOnlyClientInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_dbs_orders_client_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_dbs_orders_client_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v3_dbs_orders_client_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Informacia o pokupatele  # noqa: E501

        Metod predostavlaet informaciu o pokupatele po ID sborohnogo zadania.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_client_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersRequestAPI body: (required)
        :return: DbsOnlyClientInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_dbs_orders_client_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v3_dbs_orders_client_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/dbs/orders/client', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DbsOnlyClientInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_dbs_orders_delivery_date_post(self, body, **kwargs):  # noqa: E501
        """Data i vrema dostavki  # noqa: E501

        Metod predostavlaet informaciu o vybrannyh pokupatelem date i vremeni dostavki sborohnyh zadanii. <br>  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca </div>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_delivery_date_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeliveryDatesRequest body: (required)
        :return: DeliveryDatesInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_dbs_orders_delivery_date_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_dbs_orders_delivery_date_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v3_dbs_orders_delivery_date_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Data i vrema dostavki  # noqa: E501

        Metod predostavlaet informaciu o vybrannyh pokupatelem date i vremeni dostavki sborohnyh zadanii. <br>  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca </div>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_delivery_date_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeliveryDatesRequest body: (required)
        :return: DeliveryDatesInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_dbs_orders_delivery_date_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v3_dbs_orders_delivery_date_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/dbs/orders/delivery-date', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeliveryDatesInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_dbs_orders_get(self, limit, next, date_from, date_to, **kwargs):  # noqa: E501
        """Poluhit informaciu o zaverhennyh sborohnyh zadaniah  # noqa: E501

        Metod predostavlaet informaciu o zaverhennyh [sborohnyh zadaniah](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) posle prodahi ili otmeny zakaza. <br><br> Mohno poluhit dannye za zadannyi period, maksimum 30 kalendarnyh dnei.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_get(limit, next, date_from, date_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Parametr paginacii. Ustanavlivaet predelnoe kolihestvo vozvrahaemyh dannyh. (required)
        :param int next: Parametr paginacii. Ustanavlivaet znahenie, s kotorogo nado poluhit sleduuhii paket dannyh. Dla poluhenia polnogo spiska dannyh dolhen byt raven 0 v pervom zaprose. Dla sleduuhih zaprosov neobhodimo brat znahenia iz odnoimennogo pola v otvete. (required)
        :param int date_from: Data nahala perioda v formate Unix timestamp  (required)
        :param int date_to: Data konca perioda v formate Unix timestamp (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_dbs_orders_get_with_http_info(limit, next, date_from, date_to, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_dbs_orders_get_with_http_info(limit, next, date_from, date_to, **kwargs)  # noqa: E501
            return data

    def api_v3_dbs_orders_get_with_http_info(self, limit, next, date_from, date_to, **kwargs):  # noqa: E501
        """Poluhit informaciu o zaverhennyh sborohnyh zadaniah  # noqa: E501

        Metod predostavlaet informaciu o zaverhennyh [sborohnyh zadaniah](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) posle prodahi ili otmeny zakaza. <br><br> Mohno poluhit dannye za zadannyi period, maksimum 30 kalendarnyh dnei.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_get_with_http_info(limit, next, date_from, date_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Parametr paginacii. Ustanavlivaet predelnoe kolihestvo vozvrahaemyh dannyh. (required)
        :param int next: Parametr paginacii. Ustanavlivaet znahenie, s kotorogo nado poluhit sleduuhii paket dannyh. Dla poluhenia polnogo spiska dannyh dolhen byt raven 0 v pervom zaprose. Dla sleduuhih zaprosov neobhodimo brat znahenia iz odnoimennogo pola v otvete. (required)
        :param int date_from: Data nahala perioda v formate Unix timestamp  (required)
        :param int date_to: Data konca perioda v formate Unix timestamp (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'next', 'date_from', 'date_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_dbs_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `api_v3_dbs_orders_get`")  # noqa: E501
        # verify the required parameter 'next' is set
        if ('next' not in params or
                params['next'] is None):
            raise ValueError("Missing the required parameter `next` when calling `api_v3_dbs_orders_get`")  # noqa: E501
        # verify the required parameter 'date_from' is set
        if ('date_from' not in params or
                params['date_from'] is None):
            raise ValueError("Missing the required parameter `date_from` when calling `api_v3_dbs_orders_get`")  # noqa: E501
        # verify the required parameter 'date_to' is set
        if ('date_to' not in params or
                params['date_to'] is None):
            raise ValueError("Missing the required parameter `date_to` when calling `api_v3_dbs_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'next' in params:
            query_params.append(('next', params['next']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/dbs/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_dbs_orders_new_get(self, **kwargs):  # noqa: E501
        """Poluhit spisok novyh sborohnyh zadanii  # noqa: E501

        Metod predostavlaet spisok vseh novyh [sborohnyh zadanii](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS), kotorye est u prodavca na moment zaprosa.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_new_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_dbs_orders_new_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_dbs_orders_new_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v3_dbs_orders_new_get_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit spisok novyh sborohnyh zadanii  # noqa: E501

        Metod predostavlaet spisok vseh novyh [sborohnyh zadanii](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS), kotorye est u prodavca na moment zaprosa.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_new_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_dbs_orders_new_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/dbs/orders/new', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_dbs_orders_order_id_cancel_patch(self, order_id, **kwargs):  # noqa: E501
        """Otmenit sborohnoe zadanie  # noqa: E501

        Metod otmenaet [sborohnoe zadanie](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) i perevodit v [status](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1status/post) `cancel` — otmeneno prodavcom.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_order_id_cancel_patch(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_dbs_orders_order_id_cancel_patch_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_dbs_orders_order_id_cancel_patch_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_dbs_orders_order_id_cancel_patch_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Otmenit sborohnoe zadanie  # noqa: E501

        Metod otmenaet [sborohnoe zadanie](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) i perevodit v [status](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1status/post) `cancel` — otmeneno prodavcom.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_order_id_cancel_patch_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_dbs_orders_order_id_cancel_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_dbs_orders_order_id_cancel_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/dbs/orders/{orderId}/cancel', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_dbs_orders_order_id_confirm_patch(self, order_id, **kwargs):  # noqa: E501
        """Perevesti na sborku  # noqa: E501

        Metod perevodit [sborohnoe zadanie](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) v [status](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1status/post) `confirm` — na sborke.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_order_id_confirm_patch(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_dbs_orders_order_id_confirm_patch_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_dbs_orders_order_id_confirm_patch_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_dbs_orders_order_id_confirm_patch_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Perevesti na sborku  # noqa: E501

        Metod perevodit [sborohnoe zadanie](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) v [status](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1status/post) `confirm` — na sborke.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_order_id_confirm_patch_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_dbs_orders_order_id_confirm_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_dbs_orders_order_id_confirm_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/dbs/orders/{orderId}/confirm', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_dbs_orders_order_id_deliver_patch(self, order_id, **kwargs):  # noqa: E501
        """Perevesti v dostavku  # noqa: E501

        Metod perevodit [sborohnoe zadanie](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) v [status](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1status/post) `deliver` — v dostavke.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_order_id_deliver_patch(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_dbs_orders_order_id_deliver_patch_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_dbs_orders_order_id_deliver_patch_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_dbs_orders_order_id_deliver_patch_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Perevesti v dostavku  # noqa: E501

        Metod perevodit [sborohnoe zadanie](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) v [status](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1status/post) `deliver` — v dostavke.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_order_id_deliver_patch_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_dbs_orders_order_id_deliver_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_dbs_orders_order_id_deliver_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/dbs/orders/{orderId}/deliver', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_dbs_orders_order_id_receive_patch(self, body, order_id, **kwargs):  # noqa: E501
        """Soobhit, hto zakaz prinat pokupatelem  # noqa: E501

        Metod perevodit [sborohnoe zadanie](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) v [status](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1status/post) `receive` — poluheno pokupatelem.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_order_id_receive_patch(body, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Code body: (required)
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_dbs_orders_order_id_receive_patch_with_http_info(body, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_dbs_orders_order_id_receive_patch_with_http_info(body, order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_dbs_orders_order_id_receive_patch_with_http_info(self, body, order_id, **kwargs):  # noqa: E501
        """Soobhit, hto zakaz prinat pokupatelem  # noqa: E501

        Metod perevodit [sborohnoe zadanie](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) v [status](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1status/post) `receive` — poluheno pokupatelem.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_order_id_receive_patch_with_http_info(body, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Code body: (required)
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_dbs_orders_order_id_receive_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v3_dbs_orders_order_id_receive_patch`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_dbs_orders_order_id_receive_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/dbs/orders/{orderId}/receive', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_dbs_orders_order_id_reject_patch(self, body, order_id, **kwargs):  # noqa: E501
        """Soobhit, hto pokupatel otkazalsa ot zakaza  # noqa: E501

        Metod perevodit [sborohnoe zadanie](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) v [status](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1status/post) `reject` — otkaz pri poluhenii.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_order_id_reject_patch(body, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Code body: (required)
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_dbs_orders_order_id_reject_patch_with_http_info(body, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_dbs_orders_order_id_reject_patch_with_http_info(body, order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_dbs_orders_order_id_reject_patch_with_http_info(self, body, order_id, **kwargs):  # noqa: E501
        """Soobhit, hto pokupatel otkazalsa ot zakaza  # noqa: E501

        Metod perevodit [sborohnoe zadanie](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) v [status](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1status/post) `reject` — otkaz pri poluhenii.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_order_id_reject_patch_with_http_info(body, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Code body: (required)
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_dbs_orders_order_id_reject_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v3_dbs_orders_order_id_reject_patch`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_dbs_orders_order_id_reject_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/dbs/orders/{orderId}/reject', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_dbs_orders_status_post(self, **kwargs):  # noqa: E501
        """Poluhit statusy sborohnyh zadanii  # noqa: E501

        Metod predostavlaet statusy sborohnyh zadanii po ih ID. <br><br> `supplierStatus` — status sborohnogo zadania. Trigger ego izmenenia — sam prodavec.  Vozmohnye znahenia `supplierStatus`: | Status   | Opisanie            | Kak perevesti sborohnoe zadanie v dannyi status | | -------  | ---------           | --------------------------------------| | new      | <b>Novoe sborohnoe zadanie</b> | | | confirm  | <b>Na sborke</b>      |  <a href=\"/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1{orderId}~1confirm/patch\">Perevesti sborohnoe zadanie na sborku</a> | deliver  | **V dostavke**<br>    | <a href=\"/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1{orderId}~1deliver/patch\">Perevesti sborohnoe zadanie v dostavku</a> | receive  | **Poluheno pokupatelem**<br>       | <a href=\"/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1{orderId}~1receive/patch\">Soobhit, hto sborohnoe zadanie prinato pokupatelem</a> <br>  | reject   | **Otkaz pokupatela pri poluhenii**<br>           |  <a href=\"/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1{orderId}~1reject/patch\">Soobhit, hto pokupatel otkazalsa ot sborohnogo zadania</a>  | cancel   | <b>Otmeneno prodavcom</b>   |  <a href=\"/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1{orderId}~1cancel/patch\">Otmenit sborohnoe zadanie</a> | cancel_missed_call | <b>Otmena zakaza po prihine nedozvona.</b><br> | Status menaetsa avtomatiheski |  <br><br> `wbStatus` — status sborohnogo zadania v sisteme WB.  Vozmohnye znahenia `wbStatus`: - **waiting** - sborohnoe zadanie v rabote - **sorted** - sborohnoe zadanie otsortirovano - **sold** - sborohnoe zadanie poluheno pokupatelem - **canceled** - otmena sborohnogo zadania - **canceled_by_client** - pokupatel otmenil zakaz pri poluhenii - **declined_by_client** - pokupatel otmenil zakaz v pervyi hac  <br> Otmena dostupna pokupatelu v pervyi has s momenta zakaza, esli zakaz ne pereveden na sborku - **defect** - otmena sborohnogo zadania po prihine braka - **ready_for_pickup** - sborohnoe zadanie pribylo na PVZ - **canceled_by_missed_call** - otmena zakaza po prihine nedozvona  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_status_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersStatusBody body:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_dbs_orders_status_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_dbs_orders_status_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v3_dbs_orders_status_post_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit statusy sborohnyh zadanii  # noqa: E501

        Metod predostavlaet statusy sborohnyh zadanii po ih ID. <br><br> `supplierStatus` — status sborohnogo zadania. Trigger ego izmenenia — sam prodavec.  Vozmohnye znahenia `supplierStatus`: | Status   | Opisanie            | Kak perevesti sborohnoe zadanie v dannyi status | | -------  | ---------           | --------------------------------------| | new      | <b>Novoe sborohnoe zadanie</b> | | | confirm  | <b>Na sborke</b>      |  <a href=\"/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1{orderId}~1confirm/patch\">Perevesti sborohnoe zadanie na sborku</a> | deliver  | **V dostavke**<br>    | <a href=\"/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1{orderId}~1deliver/patch\">Perevesti sborohnoe zadanie v dostavku</a> | receive  | **Poluheno pokupatelem**<br>       | <a href=\"/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1{orderId}~1receive/patch\">Soobhit, hto sborohnoe zadanie prinato pokupatelem</a> <br>  | reject   | **Otkaz pokupatela pri poluhenii**<br>           |  <a href=\"/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1{orderId}~1reject/patch\">Soobhit, hto pokupatel otkazalsa ot sborohnogo zadania</a>  | cancel   | <b>Otmeneno prodavcom</b>   |  <a href=\"/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS/paths/~1api~1v3~1dbs~1orders~1{orderId}~1cancel/patch\">Otmenit sborohnoe zadanie</a> | cancel_missed_call | <b>Otmena zakaza po prihine nedozvona.</b><br> | Status menaetsa avtomatiheski |  <br><br> `wbStatus` — status sborohnogo zadania v sisteme WB.  Vozmohnye znahenia `wbStatus`: - **waiting** - sborohnoe zadanie v rabote - **sorted** - sborohnoe zadanie otsortirovano - **sold** - sborohnoe zadanie poluheno pokupatelem - **canceled** - otmena sborohnogo zadania - **canceled_by_client** - pokupatel otmenil zakaz pri poluhenii - **declined_by_client** - pokupatel otmenil zakaz v pervyi hac  <br> Otmena dostupna pokupatelu v pervyi has s momenta zakaza, esli zakaz ne pereveden na sborku - **defect** - otmena sborohnogo zadania po prihine braka - **ready_for_pickup** - sborohnoe zadanie pribylo na PVZ - **canceled_by_missed_call** - otmena zakaza po prihine nedozvona  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_dbs_orders_status_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersStatusBody body:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_dbs_orders_status_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/dbs/orders/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
