"""
Analysis of MCP Proxy configuration generated by the adapter.

This script loads and analyzes the MCP Proxy configuration file
that was created by MCPProxyAdapter, and outputs structured
information about routes and tools.

Usage:
    python examples/analyze_config.py
"""
import os
import json
import sys
from typing import Dict, Any, List


def load_config_file(config_path: str) -> Dict[str, Any]:
    """
    Loads MCP Proxy configuration file.
    
    Args:
        config_path (str): Path to configuration file
        
    Returns:
        Dict[str, Any]: Loaded configuration
        
    Raises:
        FileNotFoundError: If file is not found
        json.JSONDecodeError: If file is not valid JSON
    """
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"Error: Configuration file not found: {config_path}")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"Error: File is not valid JSON: {e}")
        sys.exit(1)


def print_routes(config: Dict[str, Any]) -> None:
    """
    Prints route information from configuration.
    
    Args:
        config (Dict[str, Any]): MCP Proxy configuration
    """
    if "routes" not in config:
        print("No routes in configuration")
        return
    
    routes = config["routes"]
    print(f"=== Routes ({len(routes)}) ===")
    
    for i, route in enumerate(routes, 1):
        print(f"\n{i}. Route:")
        print(f"   Endpoint: {route.get('endpoint', 'Not specified')}")
        print(f"   Method: {route.get('method', 'Not specified')}")
        
        if "json_rpc" in route:
            print("   Type: JSON-RPC")
            if "params" in route["json_rpc"]:
                print(f"   Parameters: {route['json_rpc'].get('params', 'Not specified')}")
        else:
            print("   Type: Regular HTTP")


def print_tools(config: Dict[str, Any]) -> None:
    """
    Prints tool information from configuration.
    
    Args:
        config (Dict[str, Any]): MCP Proxy configuration
    """
    if "tools" not in config:
        print("No tools in configuration")
        return
    
    tools = config["tools"]
    print(f"\n=== Tools ({len(tools)}) ===")
    
    for i, tool in enumerate(tools, 1):
        print(f"\n{i}. Tool:")
        print(f"   Name: {tool.get('name', 'Not specified')}")
        print(f"   Description: {tool.get('description', 'Not specified')}")
        
        if "parameters" in tool:
            params = tool["parameters"]
            required_params = params.get("required", [])
            properties = params.get("properties", {})
            
            print(f"   Parameters ({len(properties)}):") 
            for param_name, param_info in properties.items():
                required = "Required" if param_name in required_params else "Optional"
                param_type = param_info.get("type", "Not specified")
                description = param_info.get("description", "Not specified")
                
                print(f"     - {param_name} ({param_type}, {required}):")
                print(f"       {description}")


def analyze_config(config_path: str) -> None:
    """
    Analyzes MCP Proxy configuration.
    
    Args:
        config_path (str): Path to configuration file
    """
    config = load_config_file(config_path)
    
    print("\n=== MCP Proxy Configuration Analysis ===")
    print(f"File: {config_path}")
    print(f"Version: {config.get('version', 'Not specified')}")
    
    print_routes(config)
    print_tools(config)
    
    print("\n=== Summary ===")
    num_routes = len(config.get("routes", []))
    num_tools = len(config.get("tools", []))
    
    print(f"Configuration contains {num_routes} routes and {num_tools} tools.")
    
    if num_tools > 0 and num_routes > 0:
        print("MCP Proxy is configured correctly and ready to use.")
    else:
        print("WARNING: Configuration may be incomplete or incorrect.")


def main():
    """Main script function."""
    # Define path to configuration file
    config_path = os.path.join(os.path.dirname(__file__), "mcp_proxy_config.json")
    
    # Analyze configuration
    analyze_config(config_path)


if __name__ == "__main__":
    main() 