"""
This type stub file was generated by pyright.
"""

from contextlib import asynccontextmanager
from typing import AsyncIterator, Iterable
from multilspy.multilspy_logger import MultilspyLogger
from multilspy.language_server import LanguageServer
from multilspy.multilspy_config import MultilspyConfig

"""
Provides C# specific instantiation of the LanguageServer class. Contains various configurations and settings specific to C#.
"""
def breadth_first_file_scan(root) -> Iterable[str]:
    """
    This function was obtained from https://stackoverflow.com/questions/49654234/is-there-a-breadth-first-search-option-available-in-os-walk-or-equivalent-py
    It traverses the directory tree in breadth first order.
    """
    ...

def find_least_depth_sln_file(root_dir) -> str:
    ...

class OmniSharp(LanguageServer):
    """
    Provides C# specific instantiation of the LanguageServer class. Contains various configurations and settings specific to C#.
    """
    def __init__(self, config: MultilspyConfig, logger: MultilspyLogger, repository_root_path: str) -> None:
        """
        Creates an OmniSharp instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.
        """
        ...
    
    def setupRuntimeDependencies(self, logger: MultilspyLogger, config: MultilspyConfig) -> tuple[str, str]:
        """
        Setup runtime dependencies for OmniSharp.
        """
        ...
    
    @asynccontextmanager
    async def start_server(self) -> AsyncIterator[OmniSharp]:
        """
        Starts the Omnisharp Language Server, waits for the server to be ready and yields the LanguageServer instance.

        Usage:
        ```
        async with lsp.start_server():
            # LanguageServer has been initialized and ready to serve requests
            await lsp.request_definition(...)
            await lsp.request_references(...)
            # Shutdown the LanguageServer on exit from scope
        # LanguageServer has been shutdown
        """
        ...
    


