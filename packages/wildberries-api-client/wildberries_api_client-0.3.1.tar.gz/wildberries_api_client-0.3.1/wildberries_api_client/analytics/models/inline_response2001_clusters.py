# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001Clusters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster': 'str',
        'count': 'int',
        'keywords': 'list[str]'
    }

    attribute_map = {
        'cluster': 'cluster',
        'count': 'count',
        'keywords': 'keywords'
    }

    def __init__(self, cluster=None, count=None, keywords=None):  # noqa: E501
        """InlineResponse2001Clusters - a model defined in Swagger"""  # noqa: E501
        self._cluster = None
        self._count = None
        self._keywords = None
        self.discriminator = None
        if cluster is not None:
            self.cluster = cluster
        if count is not None:
            self.count = count
        if keywords is not None:
            self.keywords = keywords

    @property
    def cluster(self):
        """Gets the cluster of this InlineResponse2001Clusters.  # noqa: E501

        Klaster — nabor pohohih kluhevyh fraz  # noqa: E501

        :return: The cluster of this InlineResponse2001Clusters.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this InlineResponse2001Clusters.

        Klaster — nabor pohohih kluhevyh fraz  # noqa: E501

        :param cluster: The cluster of this InlineResponse2001Clusters.  # noqa: E501
        :type: str
        """

        self._cluster = cluster

    @property
    def count(self):
        """Gets the count of this InlineResponse2001Clusters.  # noqa: E501

        Skolko raz tovary pokazyvalis po vsem frazam iz klastera  # noqa: E501

        :return: The count of this InlineResponse2001Clusters.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this InlineResponse2001Clusters.

        Skolko raz tovary pokazyvalis po vsem frazam iz klastera  # noqa: E501

        :param count: The count of this InlineResponse2001Clusters.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def keywords(self):
        """Gets the keywords of this InlineResponse2001Clusters.  # noqa: E501

        Kluhevye frazy iz klastera, po kotorym tovary pokazyvalis hota by odin raz  # noqa: E501

        :return: The keywords of this InlineResponse2001Clusters.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this InlineResponse2001Clusters.

        Kluhevye frazy iz klastera, po kotorym tovary pokazyvalis hota by odin raz  # noqa: E501

        :param keywords: The keywords of this InlineResponse2001Clusters.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001Clusters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001Clusters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
