# coding: utf-8

"""
    Othety

    <div class=\"description_important\">     Uznat bolhe ob othetah mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/5f2162c5-069b-416d-a4e1-48da2a76e6b0\">spravohnom centre</a> </div>  S pomohu etih metodov vy mohete poluhit [osnovnye othety](/openapi/reports#tag/Osnovnye-otchyoty) i othety o:   1. [Ostatkah na skladah](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah)   2. [Tovarah s obazatelnoi markirovkoi](/openapi/reports#tag/Otchyot-o-tovarah-c-obyazatelnoj-markirovkoj)   3. [Uderhaniah](/openapi/reports#tag/Otchyoty-ob-uderzhaniyah)   4. [Platnoi priemke](/openapi/reports#tag/Platnaya-priyomka)   5. [Platnom hranenii](/openapi/reports#tag/Platnoe-hranenie)   6. [Prodahah po regionam](/openapi/reports#tag/Prodazhi-po-regionam)   7. [Dole brenda v prodahah](/openapi/reports#tag/Dolya-brenda-v-prodazhah)   8. [Skrytyh tovarah](/openapi/reports#tag/Skrytye-tovary)   9. [Vozvratah i peremehenii tovarov](/openapi/reports#tag/Otchyot-o-vozvratah-i-peremeshenii-tovarov)   10. [Dinamike oborahivaemosti](/openapi/reports#tag/Dinamika-oborachivaemosti)   # noqa: E501

    OpenAPI spec version: reports
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2008Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city_name': 'str',
        'country_name': 'str',
        'fo_name': 'str',
        'nm_id': 'int',
        'region_name': 'str',
        'sa': 'str',
        'sale_invoice_cost_price': 'float',
        'sale_invoice_cost_price_perc': 'float',
        'sale_item_invoice_qty': 'int'
    }

    attribute_map = {
        'city_name': 'cityName',
        'country_name': 'countryName',
        'fo_name': 'foName',
        'nm_id': 'nmID',
        'region_name': 'regionName',
        'sa': 'sa',
        'sale_invoice_cost_price': 'saleInvoiceCostPrice',
        'sale_invoice_cost_price_perc': 'saleInvoiceCostPricePerc',
        'sale_item_invoice_qty': 'saleItemInvoiceQty'
    }

    def __init__(self, city_name=None, country_name=None, fo_name=None, nm_id=None, region_name=None, sa=None, sale_invoice_cost_price=None, sale_invoice_cost_price_perc=None, sale_item_invoice_qty=None):  # noqa: E501
        """InlineResponse2008Report - a model defined in Swagger"""  # noqa: E501
        self._city_name = None
        self._country_name = None
        self._fo_name = None
        self._nm_id = None
        self._region_name = None
        self._sa = None
        self._sale_invoice_cost_price = None
        self._sale_invoice_cost_price_perc = None
        self._sale_item_invoice_qty = None
        self.discriminator = None
        if city_name is not None:
            self.city_name = city_name
        if country_name is not None:
            self.country_name = country_name
        if fo_name is not None:
            self.fo_name = fo_name
        if nm_id is not None:
            self.nm_id = nm_id
        if region_name is not None:
            self.region_name = region_name
        if sa is not None:
            self.sa = sa
        if sale_invoice_cost_price is not None:
            self.sale_invoice_cost_price = sale_invoice_cost_price
        if sale_invoice_cost_price_perc is not None:
            self.sale_invoice_cost_price_perc = sale_invoice_cost_price_perc
        if sale_item_invoice_qty is not None:
            self.sale_item_invoice_qty = sale_item_invoice_qty

    @property
    def city_name(self):
        """Gets the city_name of this InlineResponse2008Report.  # noqa: E501

        Naselennyi punkt  # noqa: E501

        :return: The city_name of this InlineResponse2008Report.  # noqa: E501
        :rtype: str
        """
        return self._city_name

    @city_name.setter
    def city_name(self, city_name):
        """Sets the city_name of this InlineResponse2008Report.

        Naselennyi punkt  # noqa: E501

        :param city_name: The city_name of this InlineResponse2008Report.  # noqa: E501
        :type: str
        """

        self._city_name = city_name

    @property
    def country_name(self):
        """Gets the country_name of this InlineResponse2008Report.  # noqa: E501

        Strana  # noqa: E501

        :return: The country_name of this InlineResponse2008Report.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this InlineResponse2008Report.

        Strana  # noqa: E501

        :param country_name: The country_name of this InlineResponse2008Report.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def fo_name(self):
        """Gets the fo_name of this InlineResponse2008Report.  # noqa: E501

        Federalnyi okrug  # noqa: E501

        :return: The fo_name of this InlineResponse2008Report.  # noqa: E501
        :rtype: str
        """
        return self._fo_name

    @fo_name.setter
    def fo_name(self, fo_name):
        """Sets the fo_name of this InlineResponse2008Report.

        Federalnyi okrug  # noqa: E501

        :param fo_name: The fo_name of this InlineResponse2008Report.  # noqa: E501
        :type: str
        """

        self._fo_name = fo_name

    @property
    def nm_id(self):
        """Gets the nm_id of this InlineResponse2008Report.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this InlineResponse2008Report.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this InlineResponse2008Report.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this InlineResponse2008Report.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def region_name(self):
        """Gets the region_name of this InlineResponse2008Report.  # noqa: E501

        Region  # noqa: E501

        :return: The region_name of this InlineResponse2008Report.  # noqa: E501
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this InlineResponse2008Report.

        Region  # noqa: E501

        :param region_name: The region_name of this InlineResponse2008Report.  # noqa: E501
        :type: str
        """

        self._region_name = region_name

    @property
    def sa(self):
        """Gets the sa of this InlineResponse2008Report.  # noqa: E501

        Artikul prodavca  # noqa: E501

        :return: The sa of this InlineResponse2008Report.  # noqa: E501
        :rtype: str
        """
        return self._sa

    @sa.setter
    def sa(self, sa):
        """Sets the sa of this InlineResponse2008Report.

        Artikul prodavca  # noqa: E501

        :param sa: The sa of this InlineResponse2008Report.  # noqa: E501
        :type: str
        """

        self._sa = sa

    @property
    def sale_invoice_cost_price(self):
        """Gets the sale_invoice_cost_price of this InlineResponse2008Report.  # noqa: E501

        K perehisleniu za tovar, ₽  # noqa: E501

        :return: The sale_invoice_cost_price of this InlineResponse2008Report.  # noqa: E501
        :rtype: float
        """
        return self._sale_invoice_cost_price

    @sale_invoice_cost_price.setter
    def sale_invoice_cost_price(self, sale_invoice_cost_price):
        """Sets the sale_invoice_cost_price of this InlineResponse2008Report.

        K perehisleniu za tovar, ₽  # noqa: E501

        :param sale_invoice_cost_price: The sale_invoice_cost_price of this InlineResponse2008Report.  # noqa: E501
        :type: float
        """

        self._sale_invoice_cost_price = sale_invoice_cost_price

    @property
    def sale_invoice_cost_price_perc(self):
        """Gets the sale_invoice_cost_price_perc of this InlineResponse2008Report.  # noqa: E501

        Dola, %  # noqa: E501

        :return: The sale_invoice_cost_price_perc of this InlineResponse2008Report.  # noqa: E501
        :rtype: float
        """
        return self._sale_invoice_cost_price_perc

    @sale_invoice_cost_price_perc.setter
    def sale_invoice_cost_price_perc(self, sale_invoice_cost_price_perc):
        """Sets the sale_invoice_cost_price_perc of this InlineResponse2008Report.

        Dola, %  # noqa: E501

        :param sale_invoice_cost_price_perc: The sale_invoice_cost_price_perc of this InlineResponse2008Report.  # noqa: E501
        :type: float
        """

        self._sale_invoice_cost_price_perc = sale_invoice_cost_price_perc

    @property
    def sale_item_invoice_qty(self):
        """Gets the sale_item_invoice_qty of this InlineResponse2008Report.  # noqa: E501

        Vykupili, ht.  # noqa: E501

        :return: The sale_item_invoice_qty of this InlineResponse2008Report.  # noqa: E501
        :rtype: int
        """
        return self._sale_item_invoice_qty

    @sale_item_invoice_qty.setter
    def sale_item_invoice_qty(self, sale_item_invoice_qty):
        """Sets the sale_item_invoice_qty of this InlineResponse2008Report.

        Vykupili, ht.  # noqa: E501

        :param sale_item_invoice_qty: The sale_item_invoice_qty of this InlineResponse2008Report.  # noqa: E501
        :type: int
        """

        self._sale_item_invoice_qty = sale_item_invoice_qty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
