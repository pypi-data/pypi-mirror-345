
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    
    server_name _; 

    # --- Optional: Redirect HTTP to HTTPS ---
    # --- Uncomment this section AFTER setting up the 443 block below ---
    # if ($scheme != "https") {
    #    return 301 https://$host$request_uri;
    # }
    # --- End Redirect Section ---

    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;



    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot|json)$ {
        root /usr/share/nginx/html/frontend;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
 
    location /api/ {
        # Forward all requests with /api/ prefix to the backend
        proxy_pass http://backend:5000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;      
        proxy_cookie_path / /;
    }
    
    # Serve specific frontend routes
    location = / {
        alias /usr/share/nginx/html/frontend/;
        index index.html;
        try_files $uri $uri/ /index.html;
    }
    

    location /honey/login {
        alias /usr/share/nginx/html/frontend/;
        index index.html;
        try_files $uri $uri/ /index.html;
    }

    location /honey/dashboard {
        alias /usr/share/nginx/html/frontend/;
        index index.html;
        try_files $uri $uri/ /index.html;
    }
    
    # Forward all other requests to backend
    location / {
        proxy_pass http://backend:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}


# --- HTTPS Server Block (Commented Out By Default) ---
# --- Uncomment and configure AFTER obtaining SSL certificates, or proxy with cloudfare, cloudfront, redirect.pizza etc.---
#
# server {
#    listen 443 ssl http2 default_server;
#    listen [::]:443 ssl http2 default_server; # Uncomment for IPv6
#
#    # Replace with your actual domain name(s)
#    server_name yourdomain.com www.yourdomain.com;
#
#    # --- SSL Certificate Paths ---
#    # --- Update these paths based on where Certbot (or your CA) places them ---
#    # --- Ensure these files are MOUNTED into the Nginx container (see docker-compose.yml) ---
#    ssl_certificate /etc/nginx/certs/live/yourdomain.com/fullchain.pem;
#    ssl_certificate_key /etc/nginx/certs/live/yourdomain.com/privkey.pem;
#
#    # --- SSL Configuration ---
#    # --- Use strong parameters. Generate using Mozilla SSL Config Generator: https://ssl-config.mozilla.org/ ---
#    # ssl_protocols TLSv1.2 TLSv1.3;
#    # ssl_prefer_server_ciphers off;
#    # ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
#    # ssl_session_timeout 1d;
#    # ssl_session_cache shared:SSL:10m;  # about 40000 sessions
#    # ssl_session_tickets off;
#    # ssl_stapling on;
#    # ssl_stapling_verify on;
#    # Add the resolver directive if needed for OCSP Stapling
#    # resolver 8.8.8.8 8.8.4.4 valid=300s;
#    # resolver_timeout 5s;
#    # Optionally load DH parameters
#    # ssl_dhparam /etc/nginx/certs/dhparam.pem;
#
#    # Logs (optional)
#    # access_log /var/log/nginx/honeypot.ssl.access.log main;
#    # error_log /var/log/nginx/honeypot.ssl.error.log warn;
#
#    # --- All the location blocks from the HTTP server block should be repeated here ---
#    # --- OR use includes to avoid duplication ---
#
#    # Proxy requests to the backend API
#    location /api {
#        proxy_pass http://backend:5000;
#        # ... other proxy headers ...
#    }
#    location = /api/health { # Health check
#        proxy_pass http://backend:5000/health;
#        # ... other proxy headers ...
#        access_log off;
#    }
#    location / { # Frontend static files
#        root /usr/share/nginx/html/frontend;
#        index index.html index.htm;
#        try_files $uri $uri/ /index.html;
#        # ... security headers ...
#    }
#    location ~* \.(?:css|js|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot|json|webmanifest)$ { # Static assets
#        root /usr/share/nginx/html/frontend;
#        expires 1y;
#        add_header Cache-Control "public, immutable";
#        access_log off;
#    }
#    location ~ /\. { # Deny hidden files
#        deny all;
#    }
# }
