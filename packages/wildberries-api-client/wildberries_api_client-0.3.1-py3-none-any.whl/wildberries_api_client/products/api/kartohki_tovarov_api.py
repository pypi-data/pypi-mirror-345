# coding: utf-8

"""
    Rabota s tovarami

    <div class=\"description_ref\">     Uznat, kak ispolzovat metody v biznes-keisah, mohno v <a href=\"https://dev.wildberries.ru/news/101\">instrukcii po rabote s tovarami</a> </div>  Rabota s tovarami vkluhaet v seba:   1. [Sozdanie](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) i [redaktirovanie](/openapi/work-with-products#tag/Kartochki-tovarov) kartohek tovarov: v tom hisle, poluhenie [kategorii, predmetov i harakteristik tovarov](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) i zagruzku [mediafailov](/openapi/work-with-products#tag/Mediafajly).   2. Nastroiku [arlykov](/openapi/work-with-products#tag/Yarlyki) dla udobnogo poiska tovarov.   3. Ustanovku [cen i skidok](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Upravlenie [ostatkami tovarov](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) i [skladami](/openapi/work-with-products#tag/Sklady-prodavca), esli vy rabotaete po modeli prodah so sklada prodavca.   # noqa: E501

    OpenAPI spec version: products
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.products.api_client import ApiClient


class KartohkiTovarovApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def content_v2_cards_delete_trash_post(self, body, **kwargs):  # noqa: E501
        """Perenos kartohek tovarov v korzinu  # noqa: E501

        Metod perenosit [kartohki tovarov v korzinu](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1get~1cards~1trash/post). Pri etom kartohki tovarov ne udalautsa, ih mohno [vosstanovit](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1cards~1recover/post).  <div class=\"description_important\">   Posle perenosa v korzinu kartohke tovara prisvaivaetsa novyi <code>imtID</code>. </div>  Kartohki tovarov udalautsa avtomatiheski, esli lehat v korzine bolhe 30 dnei. Ohistka korziny proishodit kahduu noh po moskovskomu vremeni.<br> Kartohki tovarov mohno udalit v luboe vrema v [lihnom kabinete](https://seller.wildberries.ru/new-goods/basket-cards).  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_delete_trash_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteTrashBody body: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_cards_delete_trash_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_cards_delete_trash_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v2_cards_delete_trash_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Perenos kartohek tovarov v korzinu  # noqa: E501

        Metod perenosit [kartohki tovarov v korzinu](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1get~1cards~1trash/post). Pri etom kartohki tovarov ne udalautsa, ih mohno [vosstanovit](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1cards~1recover/post).  <div class=\"description_important\">   Posle perenosa v korzinu kartohke tovara prisvaivaetsa novyi <code>imtID</code>. </div>  Kartohki tovarov udalautsa avtomatiheski, esli lehat v korzine bolhe 30 dnei. Ohistka korziny proishodit kahduu noh po moskovskomu vremeni.<br> Kartohki tovarov mohno udalit v luboe vrema v [lihnom kabinete](https://seller.wildberries.ru/new-goods/basket-cards).  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_delete_trash_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeleteTrashBody body: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_cards_delete_trash_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v2_cards_delete_trash_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/cards/delete/trash', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_cards_error_list_get(self, **kwargs):  # noqa: E501
        """Spisok nesozdannyh kartohek tovarov s ohibkami  # noqa: E501

        Metod predostavlaet spisok kartohek tovarov, pri sozdanii ili redaktirovanii kotoryh proizohli ohibki, s opisaniem etih ohibok.  <div class=\"description_important\">   htoby ubrat kartohku tovara iz spiska, nuhno povtorno sdelat zapros na <a href=\"/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov/paths/~1content~1v2~1cards~1upload/post\">sozdanie</a> ili redaktirovanie kartohki tovara s ispravlennymi ohibkami. </div>  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_error_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: Parametr vybora azyka znahenii polei otveta (dla kotoryh predusmotrena multiazyhnost).  Ne ispolzuetsa v pesohnice. 
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_cards_error_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_cards_error_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_v2_cards_error_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """Spisok nesozdannyh kartohek tovarov s ohibkami  # noqa: E501

        Metod predostavlaet spisok kartohek tovarov, pri sozdanii ili redaktirovanii kotoryh proizohli ohibki, s opisaniem etih ohibok.  <div class=\"description_important\">   htoby ubrat kartohku tovara iz spiska, nuhno povtorno sdelat zapros na <a href=\"/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov/paths/~1content~1v2~1cards~1upload/post\">sozdanie</a> ili redaktirovanie kartohki tovara s ispravlennymi ohibkami. </div>  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_error_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: Parametr vybora azyka znahenii polei otveta (dla kotoryh predusmotrena multiazyhnost).  Ne ispolzuetsa v pesohnice. 
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_cards_error_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/cards/error/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_cards_move_nm_post(self, **kwargs):  # noqa: E501
        """Obedinenie i razedinenie kartohek tovarov  # noqa: E501

        Metod obedinaet i razedinaet kartohki tovarov. Kartohki tovarov shitautsa obedinennymi, esli u nih odinakovyi <code>imtID</code>. <br><br> Dla obedinenia kartohek tovarov sdelaite zapros **s ukazaniem** `imtID`. Mohno obedinat ne bolee 30 kartohek tovarov.<br> Dla razedinenia kartohek tovarov sdelaite zapros **bez ukazania** `imtID`. Dla razedinennyh kartohek budut sgenerirovany novye `imtID`. <br><br> Esli vy razedinite odnovremenno neskolko kartohek tovarov, eti kartohki obedinatsa v odnu i poluhat novyi `imtID`.<br> htoby prisvoit kahdoi kartohke tovara unikalnyi `imtID`, neobhodimo peredavat po odnoi kartohke tovara za zapros.<br> <br> Maksimalnyi razmer zaprosa 10 Mb.  <div class=\"description_important\">   Obedinit mohno tolko kartohki tovarov s odinakovymi predmetami. </div>  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_move_nm_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardsMoveNmBody body:
        :return: ResponseCardCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_cards_move_nm_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_cards_move_nm_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_v2_cards_move_nm_post_with_http_info(self, **kwargs):  # noqa: E501
        """Obedinenie i razedinenie kartohek tovarov  # noqa: E501

        Metod obedinaet i razedinaet kartohki tovarov. Kartohki tovarov shitautsa obedinennymi, esli u nih odinakovyi <code>imtID</code>. <br><br> Dla obedinenia kartohek tovarov sdelaite zapros **s ukazaniem** `imtID`. Mohno obedinat ne bolee 30 kartohek tovarov.<br> Dla razedinenia kartohek tovarov sdelaite zapros **bez ukazania** `imtID`. Dla razedinennyh kartohek budut sgenerirovany novye `imtID`. <br><br> Esli vy razedinite odnovremenno neskolko kartohek tovarov, eti kartohki obedinatsa v odnu i poluhat novyi `imtID`.<br> htoby prisvoit kahdoi kartohke tovara unikalnyi `imtID`, neobhodimo peredavat po odnoi kartohke tovara za zapros.<br> <br> Maksimalnyi razmer zaprosa 10 Mb.  <div class=\"description_important\">   Obedinit mohno tolko kartohki tovarov s odinakovymi predmetami. </div>  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_move_nm_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardsMoveNmBody body:
        :return: ResponseCardCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_cards_move_nm_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/cards/moveNm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseCardCreate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_cards_recover_post(self, body, **kwargs):  # noqa: E501
        """Vosstanovlenie kartohek tovarov iz korziny  # noqa: E501

        Metod vosstanavlivaet [kartohki tovarov iz korziny](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1get~1cards~1trash/post).  <div class=\"description_important\">   Kartohka tovara sohranaet tot he <code>imtID</code>, hto byl prisvoen ei pri <a href=\"/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1cards~1delete~1trash/post\">peremehenii v korzinu</a>. </div>  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_recover_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardsRecoverBody body: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_cards_recover_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_cards_recover_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v2_cards_recover_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Vosstanovlenie kartohek tovarov iz korziny  # noqa: E501

        Metod vosstanavlivaet [kartohki tovarov iz korziny](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1get~1cards~1trash/post).  <div class=\"description_important\">   Kartohka tovara sohranaet tot he <code>imtID</code>, hto byl prisvoen ei pri <a href=\"/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1cards~1delete~1trash/post\">peremehenii v korzinu</a>. </div>  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_recover_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardsRecoverBody body: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_cards_recover_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v2_cards_recover_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/cards/recover', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_cards_update_post(self, **kwargs):  # noqa: E501
        """Redaktirovanie kartohek tovarov  # noqa: E501

        Metod obnovlaet kartohki tovarov. Dannye dla obnovlenia mohno poluhit herez [spisok kartohek tovarov](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1get~1cards~1list/post) i [spisok kartohek tovarov v korzine](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1get~1cards~1trash/post).  <div class=\"description_important\">   Kartohka tovara perezapisyvaetsa pri obnovlenii. Poetomu v zaprose nuhno peredat <strong>vse</strong> parametry kartohki, v tom hisle te, kotorye vy ne sobiraetes obnovlat. </div>  Nelza redaktirovat ili udalat barkody, no mohno dobavit dopolnitelnyi barkod k kartohke tovara. Parametry `photos`, `video` i `tags` redaktirovat ili udalat herez dannyi metod nelza.<br> Gabarity tovarov mohno ukazat tolko v `santimetrah`, ves tovara s upakovkoi — v `kilogrammah`. <br><br> V odnom zaprose mohno otredaktirovat maksimum 3000 kartohek tovarov (`nmID`). Maksimalnyi razmer zaprosa 10 Mb.<br> Esli otvet `Uspehno` (`200`), no kakie-to kartohki ne obnovilis, poluhite [spisok nesozdannyh kartohek tovarov](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1cards~1error~1list/get).  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_update_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CardsUpdateBody] body:
        :return: ResponseCardCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_cards_update_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_cards_update_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_v2_cards_update_post_with_http_info(self, **kwargs):  # noqa: E501
        """Redaktirovanie kartohek tovarov  # noqa: E501

        Metod obnovlaet kartohki tovarov. Dannye dla obnovlenia mohno poluhit herez [spisok kartohek tovarov](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1get~1cards~1list/post) i [spisok kartohek tovarov v korzine](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1get~1cards~1trash/post).  <div class=\"description_important\">   Kartohka tovara perezapisyvaetsa pri obnovlenii. Poetomu v zaprose nuhno peredat <strong>vse</strong> parametry kartohki, v tom hisle te, kotorye vy ne sobiraetes obnovlat. </div>  Nelza redaktirovat ili udalat barkody, no mohno dobavit dopolnitelnyi barkod k kartohke tovara. Parametry `photos`, `video` i `tags` redaktirovat ili udalat herez dannyi metod nelza.<br> Gabarity tovarov mohno ukazat tolko v `santimetrah`, ves tovara s upakovkoi — v `kilogrammah`. <br><br> V odnom zaprose mohno otredaktirovat maksimum 3000 kartohek tovarov (`nmID`). Maksimalnyi razmer zaprosa 10 Mb.<br> Esli otvet `Uspehno` (`200`), no kakie-to kartohki ne obnovilis, poluhite [spisok nesozdannyh kartohek tovarov](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1cards~1error~1list/get).  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_update_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CardsUpdateBody] body:
        :return: ResponseCardCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_cards_update_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/cards/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseCardCreate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_get_cards_list_post(self, body, **kwargs):  # noqa: E501
        """Spisok kartohek tovarov  # noqa: E501

        <div class=\"description_auth\">     Metod dostupen po <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">tokenu</a> s kategoriei <strong>Kontent</strong> ili <strong>Prodvihenie</strong> </div>  Metod predostavlaet spisok sozdannyh kartohek tovarov.  <div class=\"description_important\">   V otvete metoda ne budet kartohek, nahodahihsa v korzine. Poluhit takie kartohki mohno herez <a href=\"/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1get~1cards~1trash/post\">otdelnyi metod</a>. </div>      htoby poluhit **bolhe 100** kartohek tovarov, vospolzuites paginaciei:    <ol>     <li>Sdelaite pervyi zapros: <br>       <pre style=\"background-color: rgb(38 50 56 / 5%); color: #e53935\">         {           \"settings\": {                                   \"cursor\": {               \"limit\": 100             },             \"filter\": {               \"withPhoto\": -1             }           }         }</pre>                                    </li>     <li>Proidite v konec poluhennogo spiska kartohek tovarov.</li>     <li>Skopiruite iz <code>cursor</code> dve stroki:       <ul>         <li><code>\"updatedAt\": \"***\"</code></li>         <li><code>\"nmID\": ***</code></li>       </ul></li>     <li>Vstavte skopirovannye stroki v parametr zaprosa <code>cursor</code>.</li>     <li>Povtorite zapros. </li>     <li>Povtoraite punkty so <b>2</b> po <b>5</b>, poka pole <code>total</code> v otvete ne stanet menhe hem parametr <code>limit</code> v zaprose. Eto budet oznahat, hto vy poluhili vse kartohki.   </ol>  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_get_cards_list_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardsListBody body: (required)
        :param str locale: azyk polei otveta `name`, `value` i `object`:     - `ru` — russkii   - `en` — angliiskii   - `zh` — kitaiskii  Ne ispolzuetsa v pesohnice.   
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_get_cards_list_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_get_cards_list_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v2_get_cards_list_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Spisok kartohek tovarov  # noqa: E501

        <div class=\"description_auth\">     Metod dostupen po <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">tokenu</a> s kategoriei <strong>Kontent</strong> ili <strong>Prodvihenie</strong> </div>  Metod predostavlaet spisok sozdannyh kartohek tovarov.  <div class=\"description_important\">   V otvete metoda ne budet kartohek, nahodahihsa v korzine. Poluhit takie kartohki mohno herez <a href=\"/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1get~1cards~1trash/post\">otdelnyi metod</a>. </div>      htoby poluhit **bolhe 100** kartohek tovarov, vospolzuites paginaciei:    <ol>     <li>Sdelaite pervyi zapros: <br>       <pre style=\"background-color: rgb(38 50 56 / 5%); color: #e53935\">         {           \"settings\": {                                   \"cursor\": {               \"limit\": 100             },             \"filter\": {               \"withPhoto\": -1             }           }         }</pre>                                    </li>     <li>Proidite v konec poluhennogo spiska kartohek tovarov.</li>     <li>Skopiruite iz <code>cursor</code> dve stroki:       <ul>         <li><code>\"updatedAt\": \"***\"</code></li>         <li><code>\"nmID\": ***</code></li>       </ul></li>     <li>Vstavte skopirovannye stroki v parametr zaprosa <code>cursor</code>.</li>     <li>Povtorite zapros. </li>     <li>Povtoraite punkty so <b>2</b> po <b>5</b>, poka pole <code>total</code> v otvete ne stanet menhe hem parametr <code>limit</code> v zaprose. Eto budet oznahat, hto vy poluhili vse kartohki.   </ol>  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_get_cards_list_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardsListBody body: (required)
        :param str locale: azyk polei otveta `name`, `value` i `object`:     - `ru` — russkii   - `en` — angliiskii   - `zh` — kitaiskii  Ne ispolzuetsa v pesohnice.   
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_get_cards_list_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v2_get_cards_list_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'plain/text'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/get/cards/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_get_cards_trash_post(self, body, **kwargs):  # noqa: E501
        """Spisok kartohek tovarov v korzine  # noqa: E501

        <div class=\"description_auth\">     Metod dostupen po <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">tokenu</a> s kategoriei <strong>Kontent</strong> ili <strong>Prodvihenie</strong> </div>  Metod predostavlaet spisok kartohek tovarov v korzine.<br><br>  htoby poluhit **bolhe 100** kartohek tovarov, vospolzuites paginaciei:    <ol>     <li>Sdelaite pervyi zapros: <br>       <pre style=\"background-color: rgb(38 50 56 / 5%); color: #e53935\">         {           \"settings\": {                                   \"cursor\": {               \"limit\": 100             },             \"filter\": {               \"withPhoto\": -1             }           }         }</pre>                                    </li>     <li>Proidite v konec poluhennogo spiska kartohek tovarov.</li>     <li>Skopiruite iz <code>cursor</code> dve stroki:       <ul>         <li><code>\"trashedAt\": \"***\"</code></li>         <li><code>\"nmID\": ***</code></li>       </ul></li>     <li>Vstavte skopirovannye stroki v parametr zaprosa <code>cursor</code>.</li>     <li>Povtorite zapros. </li>     <li>Povtoraite punkty so <b>2</b> po <b>5</b>, poka pole <code>total</code> v otvete ne stanet menhe hem parametr <code>limit</code> v zaprose. Eto budet oznahat, hto vy poluhili vse kartohki.   </ol>    <div class=\"description_limit\">     Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca   </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_get_cards_trash_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardsTrashBody body: (required)
        :param str locale: azyk polei otveta `name`, `value` i `object`: `ru`, `en`, `zh`.  Ne ispolzuetsa v pesohnice 
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_get_cards_trash_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_get_cards_trash_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v2_get_cards_trash_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Spisok kartohek tovarov v korzine  # noqa: E501

        <div class=\"description_auth\">     Metod dostupen po <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">tokenu</a> s kategoriei <strong>Kontent</strong> ili <strong>Prodvihenie</strong> </div>  Metod predostavlaet spisok kartohek tovarov v korzine.<br><br>  htoby poluhit **bolhe 100** kartohek tovarov, vospolzuites paginaciei:    <ol>     <li>Sdelaite pervyi zapros: <br>       <pre style=\"background-color: rgb(38 50 56 / 5%); color: #e53935\">         {           \"settings\": {                                   \"cursor\": {               \"limit\": 100             },             \"filter\": {               \"withPhoto\": -1             }           }         }</pre>                                    </li>     <li>Proidite v konec poluhennogo spiska kartohek tovarov.</li>     <li>Skopiruite iz <code>cursor</code> dve stroki:       <ul>         <li><code>\"trashedAt\": \"***\"</code></li>         <li><code>\"nmID\": ***</code></li>       </ul></li>     <li>Vstavte skopirovannye stroki v parametr zaprosa <code>cursor</code>.</li>     <li>Povtorite zapros. </li>     <li>Povtoraite punkty so <b>2</b> po <b>5</b>, poka pole <code>total</code> v otvete ne stanet menhe hem parametr <code>limit</code> v zaprose. Eto budet oznahat, hto vy poluhili vse kartohki.   </ol>    <div class=\"description_limit\">     Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca   </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_get_cards_trash_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardsTrashBody body: (required)
        :param str locale: azyk polei otveta `name`, `value` i `object`: `ru`, `en`, `zh`.  Ne ispolzuetsa v pesohnice 
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_get_cards_trash_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v2_get_cards_trash_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'plain/text'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/get/cards/trash', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
