# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date

from pydantic import BaseModel, Field

class DatePeriod(BaseModel):
    """
    Period of calendar days, interpreted in **System Time**  - both ends of the period are inclusive - should be interpreted on the timeline as from _start date 00:00_ until _end date 24:00_   # noqa: E501
    """
    start: date = Field(default=..., description="One single calendar day, interpreted in **System Time**  - ISO 8601 compliant string in `yyyy-mm-dd` format ")
    end: date = Field(default=..., description="One single calendar day, interpreted in **System Time**  - ISO 8601 compliant string in `yyyy-mm-dd` format ")
    __properties = ["start", "end"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DatePeriod:
        """Create an instance of DatePeriod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DatePeriod:
        """Create an instance of DatePeriod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DatePeriod.parse_obj(obj)

        _obj = DatePeriod.parse_obj({
            "start": obj.get("start"),
            "end": obj.get("end")
        })
        return _obj


