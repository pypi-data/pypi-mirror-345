# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'CloudAwsAccountAssetInventoryArgs',
    'CloudAwsAccountAssetInventoryArgsDict',
    'CloudAwsAccountDspmArgs',
    'CloudAwsAccountDspmArgsDict',
    'CloudAwsAccountIdpArgs',
    'CloudAwsAccountIdpArgsDict',
    'CloudAwsAccountRealtimeVisibilityArgs',
    'CloudAwsAccountRealtimeVisibilityArgsDict',
    'CloudAwsAccountSensorManagementArgs',
    'CloudAwsAccountSensorManagementArgsDict',
    'DefaultPreventionPolicyLinuxCloudAntiMalwareArgs',
    'DefaultPreventionPolicyLinuxCloudAntiMalwareArgsDict',
    'DefaultPreventionPolicyLinuxSensorAntiMalwareArgs',
    'DefaultPreventionPolicyLinuxSensorAntiMalwareArgsDict',
    'DefaultPreventionPolicyMacCloudAdwareAndPupArgs',
    'DefaultPreventionPolicyMacCloudAdwareAndPupArgsDict',
    'DefaultPreventionPolicyMacCloudAntiMalwareArgs',
    'DefaultPreventionPolicyMacCloudAntiMalwareArgsDict',
    'DefaultPreventionPolicyMacSensorAdwareAndPupArgs',
    'DefaultPreventionPolicyMacSensorAdwareAndPupArgsDict',
    'DefaultPreventionPolicyMacSensorAntiMalwareArgs',
    'DefaultPreventionPolicyMacSensorAntiMalwareArgsDict',
    'DefaultPreventionPolicyWindowsAdwareAndPupArgs',
    'DefaultPreventionPolicyWindowsAdwareAndPupArgsDict',
    'DefaultPreventionPolicyWindowsCloudAntiMalwareArgs',
    'DefaultPreventionPolicyWindowsCloudAntiMalwareArgsDict',
    'DefaultPreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs',
    'DefaultPreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgsDict',
    'DefaultPreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs',
    'DefaultPreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgsDict',
    'DefaultPreventionPolicyWindowsExtendedUserModeDataArgs',
    'DefaultPreventionPolicyWindowsExtendedUserModeDataArgsDict',
    'DefaultPreventionPolicyWindowsSensorAntiMalwareArgs',
    'DefaultPreventionPolicyWindowsSensorAntiMalwareArgsDict',
    'DefaultPreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs',
    'DefaultPreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgsDict',
    'DefaultSensorUpdatePolicyScheduleArgs',
    'DefaultSensorUpdatePolicyScheduleArgsDict',
    'DefaultSensorUpdatePolicyScheduleTimeBlockArgs',
    'DefaultSensorUpdatePolicyScheduleTimeBlockArgsDict',
    'FilevantagePolicyScheduledExclusionArgs',
    'FilevantagePolicyScheduledExclusionArgsDict',
    'FilevantagePolicyScheduledExclusionRepeatedArgs',
    'FilevantagePolicyScheduledExclusionRepeatedArgsDict',
    'FilevantageRuleGroupRuleArgs',
    'FilevantageRuleGroupRuleArgsDict',
    'PreventionPolicyLinuxCloudAntiMalwareArgs',
    'PreventionPolicyLinuxCloudAntiMalwareArgsDict',
    'PreventionPolicyLinuxSensorAntiMalwareArgs',
    'PreventionPolicyLinuxSensorAntiMalwareArgsDict',
    'PreventionPolicyMacCloudAdwareAndPupArgs',
    'PreventionPolicyMacCloudAdwareAndPupArgsDict',
    'PreventionPolicyMacCloudAntiMalwareArgs',
    'PreventionPolicyMacCloudAntiMalwareArgsDict',
    'PreventionPolicyMacSensorAdwareAndPupArgs',
    'PreventionPolicyMacSensorAdwareAndPupArgsDict',
    'PreventionPolicyMacSensorAntiMalwareArgs',
    'PreventionPolicyMacSensorAntiMalwareArgsDict',
    'PreventionPolicyWindowsAdwareAndPupArgs',
    'PreventionPolicyWindowsAdwareAndPupArgsDict',
    'PreventionPolicyWindowsCloudAntiMalwareArgs',
    'PreventionPolicyWindowsCloudAntiMalwareArgsDict',
    'PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs',
    'PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgsDict',
    'PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs',
    'PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgsDict',
    'PreventionPolicyWindowsExtendedUserModeDataArgs',
    'PreventionPolicyWindowsExtendedUserModeDataArgsDict',
    'PreventionPolicyWindowsSensorAntiMalwareArgs',
    'PreventionPolicyWindowsSensorAntiMalwareArgsDict',
    'PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs',
    'PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgsDict',
    'SensorUpdatePolicyScheduleArgs',
    'SensorUpdatePolicyScheduleArgsDict',
    'SensorUpdatePolicyScheduleTimeBlockArgs',
    'SensorUpdatePolicyScheduleTimeBlockArgsDict',
]

MYPY = False

if not MYPY:
    class CloudAwsAccountAssetInventoryArgsDict(TypedDict):
        enabled: pulumi.Input[builtins.bool]
        """
        Enable asset inventory
        """
        role_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Custom AWS IAM role name
        """
elif False:
    CloudAwsAccountAssetInventoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAwsAccountAssetInventoryArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 role_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] enabled: Enable asset inventory
        :param pulumi.Input[builtins.str] role_name: Custom AWS IAM role name
        """
        pulumi.set(__self__, "enabled", enabled)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Enable asset inventory
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Custom AWS IAM role name
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "role_name", value)


if not MYPY:
    class CloudAwsAccountDspmArgsDict(TypedDict):
        enabled: pulumi.Input[builtins.bool]
        """
        Enable Data Security Posture Management
        """
        role_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Custom AWS IAM role name for Data Security Posture Management
        """
elif False:
    CloudAwsAccountDspmArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAwsAccountDspmArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 role_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] enabled: Enable Data Security Posture Management
        :param pulumi.Input[builtins.str] role_name: Custom AWS IAM role name for Data Security Posture Management
        """
        pulumi.set(__self__, "enabled", enabled)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Enable Data Security Posture Management
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Custom AWS IAM role name for Data Security Posture Management
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "role_name", value)


if not MYPY:
    class CloudAwsAccountIdpArgsDict(TypedDict):
        enabled: pulumi.Input[builtins.bool]
        """
        Enable Identity Protection
        """
        status: NotRequired[pulumi.Input[builtins.str]]
        """
        Current status of the Identity Protection integration
        """
elif False:
    CloudAwsAccountIdpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAwsAccountIdpArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 status: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] enabled: Enable Identity Protection
        :param pulumi.Input[builtins.str] status: Current status of the Identity Protection integration
        """
        pulumi.set(__self__, "enabled", enabled)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Enable Identity Protection
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Current status of the Identity Protection integration
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class CloudAwsAccountRealtimeVisibilityArgsDict(TypedDict):
        cloudtrail_region: pulumi.Input[builtins.str]
        """
        The AWS region of the CloudTrail bucket
        """
        enabled: pulumi.Input[builtins.bool]
        """
        Enable real-time visibility and detection
        """
        use_existing_cloudtrail: NotRequired[pulumi.Input[builtins.bool]]
        """
        Set to true if a CloudTrail already exists
        """
elif False:
    CloudAwsAccountRealtimeVisibilityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAwsAccountRealtimeVisibilityArgs:
    def __init__(__self__, *,
                 cloudtrail_region: pulumi.Input[builtins.str],
                 enabled: pulumi.Input[builtins.bool],
                 use_existing_cloudtrail: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] cloudtrail_region: The AWS region of the CloudTrail bucket
        :param pulumi.Input[builtins.bool] enabled: Enable real-time visibility and detection
        :param pulumi.Input[builtins.bool] use_existing_cloudtrail: Set to true if a CloudTrail already exists
        """
        pulumi.set(__self__, "cloudtrail_region", cloudtrail_region)
        pulumi.set(__self__, "enabled", enabled)
        if use_existing_cloudtrail is not None:
            pulumi.set(__self__, "use_existing_cloudtrail", use_existing_cloudtrail)

    @property
    @pulumi.getter(name="cloudtrailRegion")
    def cloudtrail_region(self) -> pulumi.Input[builtins.str]:
        """
        The AWS region of the CloudTrail bucket
        """
        return pulumi.get(self, "cloudtrail_region")

    @cloudtrail_region.setter
    def cloudtrail_region(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "cloudtrail_region", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Enable real-time visibility and detection
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="useExistingCloudtrail")
    def use_existing_cloudtrail(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Set to true if a CloudTrail already exists
        """
        return pulumi.get(self, "use_existing_cloudtrail")

    @use_existing_cloudtrail.setter
    def use_existing_cloudtrail(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "use_existing_cloudtrail", value)


if not MYPY:
    class CloudAwsAccountSensorManagementArgsDict(TypedDict):
        enabled: pulumi.Input[builtins.bool]
        """
        Enable 1-click sensor deployment
        """
elif False:
    CloudAwsAccountSensorManagementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudAwsAccountSensorManagementArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool]):
        """
        :param pulumi.Input[builtins.bool] enabled: Enable 1-click sensor deployment
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Enable 1-click sensor deployment
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class DefaultPreventionPolicyLinuxCloudAntiMalwareArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    DefaultPreventionPolicyLinuxCloudAntiMalwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultPreventionPolicyLinuxCloudAntiMalwareArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class DefaultPreventionPolicyLinuxSensorAntiMalwareArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    DefaultPreventionPolicyLinuxSensorAntiMalwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultPreventionPolicyLinuxSensorAntiMalwareArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class DefaultPreventionPolicyMacCloudAdwareAndPupArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    DefaultPreventionPolicyMacCloudAdwareAndPupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultPreventionPolicyMacCloudAdwareAndPupArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class DefaultPreventionPolicyMacCloudAntiMalwareArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    DefaultPreventionPolicyMacCloudAntiMalwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultPreventionPolicyMacCloudAntiMalwareArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class DefaultPreventionPolicyMacSensorAdwareAndPupArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    DefaultPreventionPolicyMacSensorAdwareAndPupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultPreventionPolicyMacSensorAdwareAndPupArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class DefaultPreventionPolicyMacSensorAntiMalwareArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    DefaultPreventionPolicyMacSensorAntiMalwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultPreventionPolicyMacSensorAntiMalwareArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class DefaultPreventionPolicyWindowsAdwareAndPupArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    DefaultPreventionPolicyWindowsAdwareAndPupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultPreventionPolicyWindowsAdwareAndPupArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class DefaultPreventionPolicyWindowsCloudAntiMalwareArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    DefaultPreventionPolicyWindowsCloudAntiMalwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultPreventionPolicyWindowsCloudAntiMalwareArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class DefaultPreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    DefaultPreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultPreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class DefaultPreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    DefaultPreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultPreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class DefaultPreventionPolicyWindowsExtendedUserModeDataArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
elif False:
    DefaultPreventionPolicyWindowsExtendedUserModeDataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultPreventionPolicyWindowsExtendedUserModeDataArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        """
        pulumi.set(__self__, "detection", detection)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)


if not MYPY:
    class DefaultPreventionPolicyWindowsSensorAntiMalwareArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    DefaultPreventionPolicyWindowsSensorAntiMalwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultPreventionPolicyWindowsSensorAntiMalwareArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class DefaultPreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    DefaultPreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultPreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class DefaultSensorUpdatePolicyScheduleArgsDict(TypedDict):
        enabled: pulumi.Input[builtins.bool]
        """
        Enable the scheduler for sensor update policy.
        """
        time_blocks: NotRequired[pulumi.Input[Sequence[pulumi.Input['DefaultSensorUpdatePolicyScheduleTimeBlockArgsDict']]]]
        """
        The time block to prevent sensor updates. Only set when enabled is true.
        """
        timezone: NotRequired[pulumi.Input[builtins.str]]
        """
        The time zones that will be used for the time blocks. Only set when enabled is true.
        """
elif False:
    DefaultSensorUpdatePolicyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultSensorUpdatePolicyScheduleArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 time_blocks: Optional[pulumi.Input[Sequence[pulumi.Input['DefaultSensorUpdatePolicyScheduleTimeBlockArgs']]]] = None,
                 timezone: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] enabled: Enable the scheduler for sensor update policy.
        :param pulumi.Input[Sequence[pulumi.Input['DefaultSensorUpdatePolicyScheduleTimeBlockArgs']]] time_blocks: The time block to prevent sensor updates. Only set when enabled is true.
        :param pulumi.Input[builtins.str] timezone: The time zones that will be used for the time blocks. Only set when enabled is true.
        """
        pulumi.set(__self__, "enabled", enabled)
        if time_blocks is not None:
            pulumi.set(__self__, "time_blocks", time_blocks)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Enable the scheduler for sensor update policy.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="timeBlocks")
    def time_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DefaultSensorUpdatePolicyScheduleTimeBlockArgs']]]]:
        """
        The time block to prevent sensor updates. Only set when enabled is true.
        """
        return pulumi.get(self, "time_blocks")

    @time_blocks.setter
    def time_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DefaultSensorUpdatePolicyScheduleTimeBlockArgs']]]]):
        pulumi.set(self, "time_blocks", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The time zones that will be used for the time blocks. Only set when enabled is true.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class DefaultSensorUpdatePolicyScheduleTimeBlockArgsDict(TypedDict):
        days: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        The days of the week the time block should be active.
        """
        end_time: pulumi.Input[builtins.str]
        """
        The end time for the time block in 24HR format. Must be atleast 1 hour more than start_time.
        """
        start_time: pulumi.Input[builtins.str]
        """
        The start time for the time block in 24HR format. Must be atleast 1 hour before end_time.
        """
elif False:
    DefaultSensorUpdatePolicyScheduleTimeBlockArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DefaultSensorUpdatePolicyScheduleTimeBlockArgs:
    def __init__(__self__, *,
                 days: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 end_time: pulumi.Input[builtins.str],
                 start_time: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] days: The days of the week the time block should be active.
        :param pulumi.Input[builtins.str] end_time: The end time for the time block in 24HR format. Must be atleast 1 hour more than start_time.
        :param pulumi.Input[builtins.str] start_time: The start time for the time block in 24HR format. Must be atleast 1 hour before end_time.
        """
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def days(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        The days of the week the time block should be active.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[builtins.str]:
        """
        The end time for the time block in 24HR format. Must be atleast 1 hour more than start_time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[builtins.str]:
        """
        The start time for the time block in 24HR format. Must be atleast 1 hour before end_time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "start_time", value)


if not MYPY:
    class FilevantagePolicyScheduledExclusionArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        Name of the scheduled exclusion.
        """
        start_date: pulumi.Input[builtins.str]
        """
        The start date of the scheduled exclusion. Format: YYYY-MM-DD
        """
        start_time: pulumi.Input[builtins.str]
        """
        The start time of the scheduled exclusion in 24 hour format. Format: HH:MM
        """
        timezone: pulumi.Input[builtins.str]
        """
        The timezone to use for the time fields. See https://en.wikipedia.org/wiki/List*of*tz*database*time_zones.
        """
        description: NotRequired[pulumi.Input[builtins.str]]
        """
        Description of the scheduled exclusion.
        """
        end_date: NotRequired[pulumi.Input[builtins.str]]
        """
        The end date of the scheduled exclusion. Format: YYYY-MM-DD
        """
        end_time: NotRequired[pulumi.Input[builtins.str]]
        """
        The end time of the scheduled exclusion in 24 hour format. Format: HH:MM
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        """
        Identifier for the scheduled exclusion.
        """
        processes: NotRequired[pulumi.Input[builtins.str]]
        """
        A comma separated list of processes to exclude changes from. Example: **/run*me.sh excludes changes made by run*me.sh in any location
        """
        repeated: NotRequired[pulumi.Input['FilevantagePolicyScheduledExclusionRepeatedArgsDict']]
        """
        Repeated scheduled exclusion
        """
        users: NotRequired[pulumi.Input[builtins.str]]
        """
        A comma separated list of users to exclude changes from. Example: user1,user2,admin* excludes changes made by user1, user2, and any user starting with admin
        """
elif False:
    FilevantagePolicyScheduledExclusionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilevantagePolicyScheduledExclusionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 start_date: pulumi.Input[builtins.str],
                 start_time: pulumi.Input[builtins.str],
                 timezone: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 end_date: Optional[pulumi.Input[builtins.str]] = None,
                 end_time: Optional[pulumi.Input[builtins.str]] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 processes: Optional[pulumi.Input[builtins.str]] = None,
                 repeated: Optional[pulumi.Input['FilevantagePolicyScheduledExclusionRepeatedArgs']] = None,
                 users: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] name: Name of the scheduled exclusion.
        :param pulumi.Input[builtins.str] start_date: The start date of the scheduled exclusion. Format: YYYY-MM-DD
        :param pulumi.Input[builtins.str] start_time: The start time of the scheduled exclusion in 24 hour format. Format: HH:MM
        :param pulumi.Input[builtins.str] timezone: The timezone to use for the time fields. See https://en.wikipedia.org/wiki/List*of*tz*database*time_zones.
        :param pulumi.Input[builtins.str] description: Description of the scheduled exclusion.
        :param pulumi.Input[builtins.str] end_date: The end date of the scheduled exclusion. Format: YYYY-MM-DD
        :param pulumi.Input[builtins.str] end_time: The end time of the scheduled exclusion in 24 hour format. Format: HH:MM
        :param pulumi.Input[builtins.str] id: Identifier for the scheduled exclusion.
        :param pulumi.Input[builtins.str] processes: A comma separated list of processes to exclude changes from. Example: **/run*me.sh excludes changes made by run*me.sh in any location
        :param pulumi.Input['FilevantagePolicyScheduledExclusionRepeatedArgs'] repeated: Repeated scheduled exclusion
        :param pulumi.Input[builtins.str] users: A comma separated list of users to exclude changes from. Example: user1,user2,admin* excludes changes made by user1, user2, and any user starting with admin
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "timezone", timezone)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if processes is not None:
            pulumi.set(__self__, "processes", processes)
        if repeated is not None:
            pulumi.set(__self__, "repeated", repeated)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the scheduled exclusion.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[builtins.str]:
        """
        The start date of the scheduled exclusion. Format: YYYY-MM-DD
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[builtins.str]:
        """
        The start time of the scheduled exclusion in 24 hour format. Format: HH:MM
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Input[builtins.str]:
        """
        The timezone to use for the time fields. See https://en.wikipedia.org/wiki/List*of*tz*database*time_zones.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of the scheduled exclusion.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The end date of the scheduled exclusion. Format: YYYY-MM-DD
        """
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The end time of the scheduled exclusion in 24 hour format. Format: HH:MM
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifier for the scheduled exclusion.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def processes(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A comma separated list of processes to exclude changes from. Example: **/run*me.sh excludes changes made by run*me.sh in any location
        """
        return pulumi.get(self, "processes")

    @processes.setter
    def processes(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "processes", value)

    @property
    @pulumi.getter
    def repeated(self) -> Optional[pulumi.Input['FilevantagePolicyScheduledExclusionRepeatedArgs']]:
        """
        Repeated scheduled exclusion
        """
        return pulumi.get(self, "repeated")

    @repeated.setter
    def repeated(self, value: Optional[pulumi.Input['FilevantagePolicyScheduledExclusionRepeatedArgs']]):
        pulumi.set(self, "repeated", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A comma separated list of users to exclude changes from. Example: user1,user2,admin* excludes changes made by user1, user2, and any user starting with admin
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class FilevantagePolicyScheduledExclusionRepeatedArgsDict(TypedDict):
        all_day: pulumi.Input[builtins.bool]
        """
        If the exclusion is all day.
        """
        frequency: pulumi.Input[builtins.str]
        """
        The frequency of the exclusion. Options: daily, weekly, monthly
        """
        days_of_months: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]
        """
        The days of the month to allow the exclusion. Required if frequency is set to monthly and monthly_occurrence is set to days. Options: 1-31
        """
        days_of_weeks: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The days of the week to allow the exclusion. Required if frequency is set to weekly or set to monthly and monthly_occurrence is set to a week. Options: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday
        """
        end_time: NotRequired[pulumi.Input[builtins.str]]
        """
        The end time to end the scheduled exclusion in 24 hour format. Format: HH:MM required if all_day is false
        """
        monthly_occurrence: NotRequired[pulumi.Input[builtins.str]]
        """
        The monthly occurrence of the exclusion. Either specify a week (first, second, third, fourth) or set to days to specify days of the month. Options: first, second, third, fourth, days. Required if frequency is set to monthly
        """
        start_time: NotRequired[pulumi.Input[builtins.str]]
        """
        The start time to allow the scheduled exclusion in 24 hour format. Format: HH:MM required if all_day is false
        """
elif False:
    FilevantagePolicyScheduledExclusionRepeatedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilevantagePolicyScheduledExclusionRepeatedArgs:
    def __init__(__self__, *,
                 all_day: pulumi.Input[builtins.bool],
                 frequency: pulumi.Input[builtins.str],
                 days_of_months: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 days_of_weeks: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 end_time: Optional[pulumi.Input[builtins.str]] = None,
                 monthly_occurrence: Optional[pulumi.Input[builtins.str]] = None,
                 start_time: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] all_day: If the exclusion is all day.
        :param pulumi.Input[builtins.str] frequency: The frequency of the exclusion. Options: daily, weekly, monthly
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] days_of_months: The days of the month to allow the exclusion. Required if frequency is set to monthly and monthly_occurrence is set to days. Options: 1-31
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] days_of_weeks: The days of the week to allow the exclusion. Required if frequency is set to weekly or set to monthly and monthly_occurrence is set to a week. Options: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday
        :param pulumi.Input[builtins.str] end_time: The end time to end the scheduled exclusion in 24 hour format. Format: HH:MM required if all_day is false
        :param pulumi.Input[builtins.str] monthly_occurrence: The monthly occurrence of the exclusion. Either specify a week (first, second, third, fourth) or set to days to specify days of the month. Options: first, second, third, fourth, days. Required if frequency is set to monthly
        :param pulumi.Input[builtins.str] start_time: The start time to allow the scheduled exclusion in 24 hour format. Format: HH:MM required if all_day is false
        """
        pulumi.set(__self__, "all_day", all_day)
        pulumi.set(__self__, "frequency", frequency)
        if days_of_months is not None:
            pulumi.set(__self__, "days_of_months", days_of_months)
        if days_of_weeks is not None:
            pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if monthly_occurrence is not None:
            pulumi.set(__self__, "monthly_occurrence", monthly_occurrence)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="allDay")
    def all_day(self) -> pulumi.Input[builtins.bool]:
        """
        If the exclusion is all day.
        """
        return pulumi.get(self, "all_day")

    @all_day.setter
    def all_day(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "all_day", value)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[builtins.str]:
        """
        The frequency of the exclusion. Options: daily, weekly, monthly
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="daysOfMonths")
    def days_of_months(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        The days of the month to allow the exclusion. Required if frequency is set to monthly and monthly_occurrence is set to days. Options: 1-31
        """
        return pulumi.get(self, "days_of_months")

    @days_of_months.setter
    def days_of_months(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "days_of_months", value)

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The days of the week to allow the exclusion. Required if frequency is set to weekly or set to monthly and monthly_occurrence is set to a week. Options: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday
        """
        return pulumi.get(self, "days_of_weeks")

    @days_of_weeks.setter
    def days_of_weeks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "days_of_weeks", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The end time to end the scheduled exclusion in 24 hour format. Format: HH:MM required if all_day is false
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="monthlyOccurrence")
    def monthly_occurrence(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The monthly occurrence of the exclusion. Either specify a week (first, second, third, fourth) or set to days to specify days of the month. Options: first, second, third, fourth, days. Required if frequency is set to monthly
        """
        return pulumi.get(self, "monthly_occurrence")

    @monthly_occurrence.setter
    def monthly_occurrence(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "monthly_occurrence", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The start time to allow the scheduled exclusion in 24 hour format. Format: HH:MM required if all_day is false
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "start_time", value)


if not MYPY:
    class FilevantageRuleGroupRuleArgsDict(TypedDict):
        description: pulumi.Input[builtins.str]
        """
        Description of the filevantage rule.
        """
        path: pulumi.Input[builtins.str]
        """
        Representing the file system or registry path to monitor. All paths must end with the path separator, e.g. c:\\windows\\ for windows and /usr/bin/ for linux/mac.
        """
        severity: pulumi.Input[builtins.str]
        """
        Severity to categorize change events produced by this rule.
        """
        depth: NotRequired[pulumi.Input[builtins.str]]
        """
        Depth below the base path to monitor.
        """
        enable_content_capture: NotRequired[pulumi.Input[builtins.bool]]
        """
        Enable content capture for the rule. Requires watch*file*write*changes or watch*key*value*set_changes to be enabled.
        """
        exclude: NotRequired[pulumi.Input[builtins.str]]
        """
        Represents the files, directories, registry keys, or registry values that will be excluded from monitoring.
        """
        exclude_processes: NotRequired[pulumi.Input[builtins.str]]
        """
        Represents the changes performed by specific processes that will be excluded from monitoring.
        """
        exclude_users: NotRequired[pulumi.Input[builtins.str]]
        """
        Represents the changes performed by specific users that will be excluded from monitoring.
        """
        file_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        List of file names whose content will be monitored. Listed files must match the file include pattern and not match the file exclude pattern.
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        """
        Identifier for the filevantage rule.
        """
        include: NotRequired[pulumi.Input[builtins.str]]
        """
        Represents the files, directories, registry keys, or registry values that will be monitored. Defaults to all (*)
        """
        include_processes: NotRequired[pulumi.Input[builtins.str]]
        """
        Represents the changes performed by specific processes that will be monitored.
        """
        include_users: NotRequired[pulumi.Input[builtins.str]]
        """
        Represents the changes performed by specific users that will be monitored.
        """
        precedence: NotRequired[pulumi.Input[builtins.int]]
        """
        Precedence of the rule in the rule group.
        """
        registry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        List of registry values whose content will be monitored. Listed registry values must match the registry include pattern and not match the registry exclude pattern.
        """
        watch_directory_attribute_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor directory attribute change events.
        """
        watch_directory_create_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor directory creation events.
        """
        watch_directory_delete_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor directory deletion events.
        """
        watch_directory_permission_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor directory permission change events.
        """
        watch_directory_rename_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor directory rename events.
        """
        watch_file_attribute_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor file attribute change events.
        """
        watch_file_create_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor file creation events.
        """
        watch_file_delete_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor file deletion events.
        """
        watch_file_permission_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor file permission change events.
        """
        watch_file_rename_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor file rename events.
        """
        watch_file_write_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor file write events.
        """
        watch_key_create_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor registry key creation events.
        """
        watch_key_delete_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor registry key deletion events.
        """
        watch_key_permissions_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor registry key permission change events.
        """
        watch_key_rename_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor registry key rename events.
        """
        watch_key_value_delete_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor registry value deletion events.
        """
        watch_key_value_set_changes: NotRequired[pulumi.Input[builtins.bool]]
        """
        Monitor registry value set events.
        """
elif False:
    FilevantageRuleGroupRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FilevantageRuleGroupRuleArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[builtins.str],
                 path: pulumi.Input[builtins.str],
                 severity: pulumi.Input[builtins.str],
                 depth: Optional[pulumi.Input[builtins.str]] = None,
                 enable_content_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 exclude: Optional[pulumi.Input[builtins.str]] = None,
                 exclude_processes: Optional[pulumi.Input[builtins.str]] = None,
                 exclude_users: Optional[pulumi.Input[builtins.str]] = None,
                 file_names: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 include: Optional[pulumi.Input[builtins.str]] = None,
                 include_processes: Optional[pulumi.Input[builtins.str]] = None,
                 include_users: Optional[pulumi.Input[builtins.str]] = None,
                 precedence: Optional[pulumi.Input[builtins.int]] = None,
                 registry_values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 watch_directory_attribute_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_directory_create_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_directory_delete_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_directory_permission_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_directory_rename_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_file_attribute_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_file_create_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_file_delete_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_file_permission_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_file_rename_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_file_write_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_key_create_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_key_delete_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_key_permissions_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_key_rename_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_key_value_delete_changes: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_key_value_set_changes: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] description: Description of the filevantage rule.
        :param pulumi.Input[builtins.str] path: Representing the file system or registry path to monitor. All paths must end with the path separator, e.g. c:\\windows\\ for windows and /usr/bin/ for linux/mac.
        :param pulumi.Input[builtins.str] severity: Severity to categorize change events produced by this rule.
        :param pulumi.Input[builtins.str] depth: Depth below the base path to monitor.
        :param pulumi.Input[builtins.bool] enable_content_capture: Enable content capture for the rule. Requires watch*file*write*changes or watch*key*value*set_changes to be enabled.
        :param pulumi.Input[builtins.str] exclude: Represents the files, directories, registry keys, or registry values that will be excluded from monitoring.
        :param pulumi.Input[builtins.str] exclude_processes: Represents the changes performed by specific processes that will be excluded from monitoring.
        :param pulumi.Input[builtins.str] exclude_users: Represents the changes performed by specific users that will be excluded from monitoring.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] file_names: List of file names whose content will be monitored. Listed files must match the file include pattern and not match the file exclude pattern.
        :param pulumi.Input[builtins.str] id: Identifier for the filevantage rule.
        :param pulumi.Input[builtins.str] include: Represents the files, directories, registry keys, or registry values that will be monitored. Defaults to all (*)
        :param pulumi.Input[builtins.str] include_processes: Represents the changes performed by specific processes that will be monitored.
        :param pulumi.Input[builtins.str] include_users: Represents the changes performed by specific users that will be monitored.
        :param pulumi.Input[builtins.int] precedence: Precedence of the rule in the rule group.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] registry_values: List of registry values whose content will be monitored. Listed registry values must match the registry include pattern and not match the registry exclude pattern.
        :param pulumi.Input[builtins.bool] watch_directory_attribute_changes: Monitor directory attribute change events.
        :param pulumi.Input[builtins.bool] watch_directory_create_changes: Monitor directory creation events.
        :param pulumi.Input[builtins.bool] watch_directory_delete_changes: Monitor directory deletion events.
        :param pulumi.Input[builtins.bool] watch_directory_permission_changes: Monitor directory permission change events.
        :param pulumi.Input[builtins.bool] watch_directory_rename_changes: Monitor directory rename events.
        :param pulumi.Input[builtins.bool] watch_file_attribute_changes: Monitor file attribute change events.
        :param pulumi.Input[builtins.bool] watch_file_create_changes: Monitor file creation events.
        :param pulumi.Input[builtins.bool] watch_file_delete_changes: Monitor file deletion events.
        :param pulumi.Input[builtins.bool] watch_file_permission_changes: Monitor file permission change events.
        :param pulumi.Input[builtins.bool] watch_file_rename_changes: Monitor file rename events.
        :param pulumi.Input[builtins.bool] watch_file_write_changes: Monitor file write events.
        :param pulumi.Input[builtins.bool] watch_key_create_changes: Monitor registry key creation events.
        :param pulumi.Input[builtins.bool] watch_key_delete_changes: Monitor registry key deletion events.
        :param pulumi.Input[builtins.bool] watch_key_permissions_changes: Monitor registry key permission change events.
        :param pulumi.Input[builtins.bool] watch_key_rename_changes: Monitor registry key rename events.
        :param pulumi.Input[builtins.bool] watch_key_value_delete_changes: Monitor registry value deletion events.
        :param pulumi.Input[builtins.bool] watch_key_value_set_changes: Monitor registry value set events.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "severity", severity)
        if depth is not None:
            pulumi.set(__self__, "depth", depth)
        if enable_content_capture is not None:
            pulumi.set(__self__, "enable_content_capture", enable_content_capture)
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if exclude_processes is not None:
            pulumi.set(__self__, "exclude_processes", exclude_processes)
        if exclude_users is not None:
            pulumi.set(__self__, "exclude_users", exclude_users)
        if file_names is not None:
            pulumi.set(__self__, "file_names", file_names)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if include_processes is not None:
            pulumi.set(__self__, "include_processes", include_processes)
        if include_users is not None:
            pulumi.set(__self__, "include_users", include_users)
        if precedence is not None:
            pulumi.set(__self__, "precedence", precedence)
        if registry_values is not None:
            pulumi.set(__self__, "registry_values", registry_values)
        if watch_directory_attribute_changes is not None:
            pulumi.set(__self__, "watch_directory_attribute_changes", watch_directory_attribute_changes)
        if watch_directory_create_changes is not None:
            pulumi.set(__self__, "watch_directory_create_changes", watch_directory_create_changes)
        if watch_directory_delete_changes is not None:
            pulumi.set(__self__, "watch_directory_delete_changes", watch_directory_delete_changes)
        if watch_directory_permission_changes is not None:
            pulumi.set(__self__, "watch_directory_permission_changes", watch_directory_permission_changes)
        if watch_directory_rename_changes is not None:
            pulumi.set(__self__, "watch_directory_rename_changes", watch_directory_rename_changes)
        if watch_file_attribute_changes is not None:
            pulumi.set(__self__, "watch_file_attribute_changes", watch_file_attribute_changes)
        if watch_file_create_changes is not None:
            pulumi.set(__self__, "watch_file_create_changes", watch_file_create_changes)
        if watch_file_delete_changes is not None:
            pulumi.set(__self__, "watch_file_delete_changes", watch_file_delete_changes)
        if watch_file_permission_changes is not None:
            pulumi.set(__self__, "watch_file_permission_changes", watch_file_permission_changes)
        if watch_file_rename_changes is not None:
            pulumi.set(__self__, "watch_file_rename_changes", watch_file_rename_changes)
        if watch_file_write_changes is not None:
            pulumi.set(__self__, "watch_file_write_changes", watch_file_write_changes)
        if watch_key_create_changes is not None:
            pulumi.set(__self__, "watch_key_create_changes", watch_key_create_changes)
        if watch_key_delete_changes is not None:
            pulumi.set(__self__, "watch_key_delete_changes", watch_key_delete_changes)
        if watch_key_permissions_changes is not None:
            pulumi.set(__self__, "watch_key_permissions_changes", watch_key_permissions_changes)
        if watch_key_rename_changes is not None:
            pulumi.set(__self__, "watch_key_rename_changes", watch_key_rename_changes)
        if watch_key_value_delete_changes is not None:
            pulumi.set(__self__, "watch_key_value_delete_changes", watch_key_value_delete_changes)
        if watch_key_value_set_changes is not None:
            pulumi.set(__self__, "watch_key_value_set_changes", watch_key_value_set_changes)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[builtins.str]:
        """
        Description of the filevantage rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[builtins.str]:
        """
        Representing the file system or registry path to monitor. All paths must end with the path separator, e.g. c:\\windows\\ for windows and /usr/bin/ for linux/mac.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Input[builtins.str]:
        """
        Severity to categorize change events produced by this rule.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def depth(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Depth below the base path to monitor.
        """
        return pulumi.get(self, "depth")

    @depth.setter
    def depth(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "depth", value)

    @property
    @pulumi.getter(name="enableContentCapture")
    def enable_content_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable content capture for the rule. Requires watch*file*write*changes or watch*key*value*set_changes to be enabled.
        """
        return pulumi.get(self, "enable_content_capture")

    @enable_content_capture.setter
    def enable_content_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_content_capture", value)

    @property
    @pulumi.getter
    def exclude(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Represents the files, directories, registry keys, or registry values that will be excluded from monitoring.
        """
        return pulumi.get(self, "exclude")

    @exclude.setter
    def exclude(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "exclude", value)

    @property
    @pulumi.getter(name="excludeProcesses")
    def exclude_processes(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Represents the changes performed by specific processes that will be excluded from monitoring.
        """
        return pulumi.get(self, "exclude_processes")

    @exclude_processes.setter
    def exclude_processes(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "exclude_processes", value)

    @property
    @pulumi.getter(name="excludeUsers")
    def exclude_users(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Represents the changes performed by specific users that will be excluded from monitoring.
        """
        return pulumi.get(self, "exclude_users")

    @exclude_users.setter
    def exclude_users(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "exclude_users", value)

    @property
    @pulumi.getter(name="fileNames")
    def file_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of file names whose content will be monitored. Listed files must match the file include pattern and not match the file exclude pattern.
        """
        return pulumi.get(self, "file_names")

    @file_names.setter
    def file_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "file_names", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifier for the filevantage rule.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def include(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Represents the files, directories, registry keys, or registry values that will be monitored. Defaults to all (*)
        """
        return pulumi.get(self, "include")

    @include.setter
    def include(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "include", value)

    @property
    @pulumi.getter(name="includeProcesses")
    def include_processes(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Represents the changes performed by specific processes that will be monitored.
        """
        return pulumi.get(self, "include_processes")

    @include_processes.setter
    def include_processes(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "include_processes", value)

    @property
    @pulumi.getter(name="includeUsers")
    def include_users(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Represents the changes performed by specific users that will be monitored.
        """
        return pulumi.get(self, "include_users")

    @include_users.setter
    def include_users(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "include_users", value)

    @property
    @pulumi.getter
    def precedence(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Precedence of the rule in the rule group.
        """
        return pulumi.get(self, "precedence")

    @precedence.setter
    def precedence(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "precedence", value)

    @property
    @pulumi.getter(name="registryValues")
    def registry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of registry values whose content will be monitored. Listed registry values must match the registry include pattern and not match the registry exclude pattern.
        """
        return pulumi.get(self, "registry_values")

    @registry_values.setter
    def registry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "registry_values", value)

    @property
    @pulumi.getter(name="watchDirectoryAttributeChanges")
    def watch_directory_attribute_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor directory attribute change events.
        """
        return pulumi.get(self, "watch_directory_attribute_changes")

    @watch_directory_attribute_changes.setter
    def watch_directory_attribute_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_directory_attribute_changes", value)

    @property
    @pulumi.getter(name="watchDirectoryCreateChanges")
    def watch_directory_create_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor directory creation events.
        """
        return pulumi.get(self, "watch_directory_create_changes")

    @watch_directory_create_changes.setter
    def watch_directory_create_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_directory_create_changes", value)

    @property
    @pulumi.getter(name="watchDirectoryDeleteChanges")
    def watch_directory_delete_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor directory deletion events.
        """
        return pulumi.get(self, "watch_directory_delete_changes")

    @watch_directory_delete_changes.setter
    def watch_directory_delete_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_directory_delete_changes", value)

    @property
    @pulumi.getter(name="watchDirectoryPermissionChanges")
    def watch_directory_permission_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor directory permission change events.
        """
        return pulumi.get(self, "watch_directory_permission_changes")

    @watch_directory_permission_changes.setter
    def watch_directory_permission_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_directory_permission_changes", value)

    @property
    @pulumi.getter(name="watchDirectoryRenameChanges")
    def watch_directory_rename_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor directory rename events.
        """
        return pulumi.get(self, "watch_directory_rename_changes")

    @watch_directory_rename_changes.setter
    def watch_directory_rename_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_directory_rename_changes", value)

    @property
    @pulumi.getter(name="watchFileAttributeChanges")
    def watch_file_attribute_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor file attribute change events.
        """
        return pulumi.get(self, "watch_file_attribute_changes")

    @watch_file_attribute_changes.setter
    def watch_file_attribute_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_file_attribute_changes", value)

    @property
    @pulumi.getter(name="watchFileCreateChanges")
    def watch_file_create_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor file creation events.
        """
        return pulumi.get(self, "watch_file_create_changes")

    @watch_file_create_changes.setter
    def watch_file_create_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_file_create_changes", value)

    @property
    @pulumi.getter(name="watchFileDeleteChanges")
    def watch_file_delete_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor file deletion events.
        """
        return pulumi.get(self, "watch_file_delete_changes")

    @watch_file_delete_changes.setter
    def watch_file_delete_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_file_delete_changes", value)

    @property
    @pulumi.getter(name="watchFilePermissionChanges")
    def watch_file_permission_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor file permission change events.
        """
        return pulumi.get(self, "watch_file_permission_changes")

    @watch_file_permission_changes.setter
    def watch_file_permission_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_file_permission_changes", value)

    @property
    @pulumi.getter(name="watchFileRenameChanges")
    def watch_file_rename_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor file rename events.
        """
        return pulumi.get(self, "watch_file_rename_changes")

    @watch_file_rename_changes.setter
    def watch_file_rename_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_file_rename_changes", value)

    @property
    @pulumi.getter(name="watchFileWriteChanges")
    def watch_file_write_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor file write events.
        """
        return pulumi.get(self, "watch_file_write_changes")

    @watch_file_write_changes.setter
    def watch_file_write_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_file_write_changes", value)

    @property
    @pulumi.getter(name="watchKeyCreateChanges")
    def watch_key_create_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor registry key creation events.
        """
        return pulumi.get(self, "watch_key_create_changes")

    @watch_key_create_changes.setter
    def watch_key_create_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_key_create_changes", value)

    @property
    @pulumi.getter(name="watchKeyDeleteChanges")
    def watch_key_delete_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor registry key deletion events.
        """
        return pulumi.get(self, "watch_key_delete_changes")

    @watch_key_delete_changes.setter
    def watch_key_delete_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_key_delete_changes", value)

    @property
    @pulumi.getter(name="watchKeyPermissionsChanges")
    def watch_key_permissions_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor registry key permission change events.
        """
        return pulumi.get(self, "watch_key_permissions_changes")

    @watch_key_permissions_changes.setter
    def watch_key_permissions_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_key_permissions_changes", value)

    @property
    @pulumi.getter(name="watchKeyRenameChanges")
    def watch_key_rename_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor registry key rename events.
        """
        return pulumi.get(self, "watch_key_rename_changes")

    @watch_key_rename_changes.setter
    def watch_key_rename_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_key_rename_changes", value)

    @property
    @pulumi.getter(name="watchKeyValueDeleteChanges")
    def watch_key_value_delete_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor registry value deletion events.
        """
        return pulumi.get(self, "watch_key_value_delete_changes")

    @watch_key_value_delete_changes.setter
    def watch_key_value_delete_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_key_value_delete_changes", value)

    @property
    @pulumi.getter(name="watchKeyValueSetChanges")
    def watch_key_value_set_changes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Monitor registry value set events.
        """
        return pulumi.get(self, "watch_key_value_set_changes")

    @watch_key_value_set_changes.setter
    def watch_key_value_set_changes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "watch_key_value_set_changes", value)


if not MYPY:
    class PreventionPolicyLinuxCloudAntiMalwareArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    PreventionPolicyLinuxCloudAntiMalwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreventionPolicyLinuxCloudAntiMalwareArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class PreventionPolicyLinuxSensorAntiMalwareArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    PreventionPolicyLinuxSensorAntiMalwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreventionPolicyLinuxSensorAntiMalwareArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class PreventionPolicyMacCloudAdwareAndPupArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    PreventionPolicyMacCloudAdwareAndPupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreventionPolicyMacCloudAdwareAndPupArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class PreventionPolicyMacCloudAntiMalwareArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    PreventionPolicyMacCloudAntiMalwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreventionPolicyMacCloudAntiMalwareArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class PreventionPolicyMacSensorAdwareAndPupArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    PreventionPolicyMacSensorAdwareAndPupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreventionPolicyMacSensorAdwareAndPupArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class PreventionPolicyMacSensorAntiMalwareArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    PreventionPolicyMacSensorAntiMalwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreventionPolicyMacSensorAntiMalwareArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class PreventionPolicyWindowsAdwareAndPupArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    PreventionPolicyWindowsAdwareAndPupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreventionPolicyWindowsAdwareAndPupArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class PreventionPolicyWindowsCloudAntiMalwareArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    PreventionPolicyWindowsCloudAntiMalwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreventionPolicyWindowsCloudAntiMalwareArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class PreventionPolicyWindowsExtendedUserModeDataArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
elif False:
    PreventionPolicyWindowsExtendedUserModeDataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreventionPolicyWindowsExtendedUserModeDataArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        """
        pulumi.set(__self__, "detection", detection)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)


if not MYPY:
    class PreventionPolicyWindowsSensorAntiMalwareArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    PreventionPolicyWindowsSensorAntiMalwareArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreventionPolicyWindowsSensorAntiMalwareArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgsDict(TypedDict):
        detection: pulumi.Input[builtins.str]
        """
        Machine learning level for detection.
        """
        prevention: pulumi.Input[builtins.str]
        """
        Machine learning level for prevention.
        """
elif False:
    PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs:
    def __init__(__self__, *,
                 detection: pulumi.Input[builtins.str],
                 prevention: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] detection: Machine learning level for detection.
        :param pulumi.Input[builtins.str] prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @detection.setter
    def detection(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "detection", value)

    @property
    @pulumi.getter
    def prevention(self) -> pulumi.Input[builtins.str]:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")

    @prevention.setter
    def prevention(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prevention", value)


if not MYPY:
    class SensorUpdatePolicyScheduleArgsDict(TypedDict):
        enabled: pulumi.Input[builtins.bool]
        """
        Enable the scheduler for sensor update policy.
        """
        time_blocks: NotRequired[pulumi.Input[Sequence[pulumi.Input['SensorUpdatePolicyScheduleTimeBlockArgsDict']]]]
        """
        The time block to prevent sensor updates. Only set when enabled is true.
        """
        timezone: NotRequired[pulumi.Input[builtins.str]]
        """
        The time zones that will be used for the time blocks. Only set when enabled is true.
        """
elif False:
    SensorUpdatePolicyScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SensorUpdatePolicyScheduleArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 time_blocks: Optional[pulumi.Input[Sequence[pulumi.Input['SensorUpdatePolicyScheduleTimeBlockArgs']]]] = None,
                 timezone: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.bool] enabled: Enable the scheduler for sensor update policy.
        :param pulumi.Input[Sequence[pulumi.Input['SensorUpdatePolicyScheduleTimeBlockArgs']]] time_blocks: The time block to prevent sensor updates. Only set when enabled is true.
        :param pulumi.Input[builtins.str] timezone: The time zones that will be used for the time blocks. Only set when enabled is true.
        """
        pulumi.set(__self__, "enabled", enabled)
        if time_blocks is not None:
            pulumi.set(__self__, "time_blocks", time_blocks)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        Enable the scheduler for sensor update policy.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="timeBlocks")
    def time_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SensorUpdatePolicyScheduleTimeBlockArgs']]]]:
        """
        The time block to prevent sensor updates. Only set when enabled is true.
        """
        return pulumi.get(self, "time_blocks")

    @time_blocks.setter
    def time_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SensorUpdatePolicyScheduleTimeBlockArgs']]]]):
        pulumi.set(self, "time_blocks", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The time zones that will be used for the time blocks. Only set when enabled is true.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class SensorUpdatePolicyScheduleTimeBlockArgsDict(TypedDict):
        days: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        The days of the week the time block should be active.
        """
        end_time: pulumi.Input[builtins.str]
        """
        The end time for the time block in 24HR format. Must be atleast 1 hour more than start_time.
        """
        start_time: pulumi.Input[builtins.str]
        """
        The start time for the time block in 24HR format. Must be atleast 1 hour before end_time.
        """
elif False:
    SensorUpdatePolicyScheduleTimeBlockArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SensorUpdatePolicyScheduleTimeBlockArgs:
    def __init__(__self__, *,
                 days: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 end_time: pulumi.Input[builtins.str],
                 start_time: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] days: The days of the week the time block should be active.
        :param pulumi.Input[builtins.str] end_time: The end time for the time block in 24HR format. Must be atleast 1 hour more than start_time.
        :param pulumi.Input[builtins.str] start_time: The start time for the time block in 24HR format. Must be atleast 1 hour before end_time.
        """
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def days(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        The days of the week the time block should be active.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[builtins.str]:
        """
        The end time for the time block in 24HR format. Must be atleast 1 hour more than start_time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[builtins.str]:
        """
        The start time for the time block in 24HR format. Must be atleast 1 hour before end_time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "start_time", value)


