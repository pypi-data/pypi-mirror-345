name: Installation Test

on:
  push:
    branches: [main]
    paths:
      - 'pyproject.toml'
      - 'mvat/**'
      - '.github/workflows/installation.yml'
  pull_request:
    paths:
      - 'pyproject.toml'
      - 'mvat/**'
  workflow_dispatch:

jobs:
  test-install:
    name: Install on ${{ matrix.os }} / ${{ matrix.python-version }} / ${{ matrix.install-method }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13"]
        install-method: ["pip", "uv"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv (for uv method)
        if: matrix.install-method == 'uv'
        uses: astral-sh/setup-uv@v2
        with:
          version: 0.6.14

      - name: Create virtual environment (for uv method)
        if: matrix.install-method == 'uv'
        run: uv venv

      - name: Build package
        run: python -m pip install build && python -m build

      - name: Verify wheel file exists
        run: |
          python -c "import glob, sys; wheels = glob.glob('dist/*.whl'); print(f'Found {len(wheels)} wheel files: {wheels}'); sys.exit(0 if wheels else 1)"

      - name: Find wheel file path
        id: find-wheel
        shell: python
        run: |
          import glob, os
          wheels = glob.glob('dist/*.whl')
          if wheels:
              wheel_path = wheels[0]
              # Convert to posix path format for consistent usage across platforms
              wheel_path = wheel_path.replace('\\', '/')
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"wheel_path={wheel_path}\n")
          else:
              print("::error::No wheel files found in dist directory")
              exit(1)

      - name: Install with pip
        if: matrix.install-method == 'pip'
        run: python -m pip install "${{ steps.find-wheel.outputs.wheel_path }}"

      - name: Install with uv
        if: matrix.install-method == 'uv'
        run: uv pip install "${{ steps.find-wheel.outputs.wheel_path }}"

      - name: Verify installation
        run: |
          python -c "from mvat.foo import foo; print(foo('Installation test successful'))"
