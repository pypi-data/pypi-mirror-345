# coding: utf-8

"""
    Obhenie s pokupatelami

    <div class=\"description_important\">       Uznat bolhe ob obhenii s pokupatelami mohno v <a href=\"https://seller.wildberries.ru/instructions/category/f7f6c465-dd12-422d-80a0-a6d9562115d5?goBackOption=prevRoute&categoryId=30817062-14cc-4a82-bc78-3600c2b0685b\">spravohnom centre</a> </div>  herez metody obhenia s pokupatelem vy mohete rabotat s:   1. [Voprosami](/openapi/user-communication#tag/Voprosy) i [otzyvami](/openapi/user-communication#tag/Otzyvy) pokupatelei   2. [hablonami otvetov](/openapi/user-communication#tag/Shablony-otvetov) na voprosy i otzyvy   3. [hatami s pokupatelami](/openapi/user-communication#tag/Chat-s-pokupatelyami)   4. [Zaavkami pokupatelei na vozvrat](/openapi/user-communication#tag/Vozvraty-pokupatelyami)   # noqa: E501

    OpenAPI spec version: communication
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Chat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chat_id': 'str',
        'reply_sign': 'str',
        'client_id': 'str',
        'client_name': 'str'
    }

    attribute_map = {
        'chat_id': 'chatID',
        'reply_sign': 'replySign',
        'client_id': 'clientID',
        'client_name': 'clientName'
    }

    def __init__(self, chat_id=None, reply_sign=None, client_id=None, client_name=None):  # noqa: E501
        """Chat - a model defined in Swagger"""  # noqa: E501
        self._chat_id = None
        self._reply_sign = None
        self._client_id = None
        self._client_name = None
        self.discriminator = None
        if chat_id is not None:
            self.chat_id = chat_id
        if reply_sign is not None:
            self.reply_sign = reply_sign
        if client_id is not None:
            self.client_id = client_id
        if client_name is not None:
            self.client_name = client_name

    @property
    def chat_id(self):
        """Gets the chat_id of this Chat.  # noqa: E501

        ID hata  # noqa: E501

        :return: The chat_id of this Chat.  # noqa: E501
        :rtype: str
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this Chat.

        ID hata  # noqa: E501

        :param chat_id: The chat_id of this Chat.  # noqa: E501
        :type: str
        """

        self._chat_id = chat_id

    @property
    def reply_sign(self):
        """Gets the reply_sign of this Chat.  # noqa: E501

        Podpis hata. Trebuetsa pri [otpravke soobhenia](./user-communication#tag/Chat-s-pokupatelyami/paths/~1api~1v1~1seller~1message/post)   # noqa: E501

        :return: The reply_sign of this Chat.  # noqa: E501
        :rtype: str
        """
        return self._reply_sign

    @reply_sign.setter
    def reply_sign(self, reply_sign):
        """Sets the reply_sign of this Chat.

        Podpis hata. Trebuetsa pri [otpravke soobhenia](./user-communication#tag/Chat-s-pokupatelyami/paths/~1api~1v1~1seller~1message/post)   # noqa: E501

        :param reply_sign: The reply_sign of this Chat.  # noqa: E501
        :type: str
        """

        self._reply_sign = reply_sign

    @property
    def client_id(self):
        """Gets the client_id of this Chat.  # noqa: E501

        ID pokupatela  # noqa: E501

        :return: The client_id of this Chat.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Chat.

        ID pokupatela  # noqa: E501

        :param client_id: The client_id of this Chat.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this Chat.  # noqa: E501

        Ima pokupatela  # noqa: E501

        :return: The client_name of this Chat.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this Chat.

        Ima pokupatela  # noqa: E501

        :param client_name: The client_name of this Chat.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Chat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Chat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
