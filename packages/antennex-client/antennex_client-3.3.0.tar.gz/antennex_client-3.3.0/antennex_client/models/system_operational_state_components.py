# coding: utf-8

"""
    ANTENNEX Reverberation Chamber API

    HTTP API for ANTENNEX The Wireless Connector(tm)

    The version of the OpenAPI document: 3.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from antennex_client.models.component_operational_state import ComponentOperationalState
from typing import Optional, Set
from typing_extensions import Self

class SystemOperationalStateComponents(BaseModel):
    """
    Overview of health status of individual components. The components include \"calibrationModule\", \"controlModule\", \"factoryConfiguration\", \"stirrer0\", \"stirrer1\".
    """ # noqa: E501
    calibration_module: Optional[ComponentOperationalState] = Field(default=None, alias="calibrationModule")
    control_module: Optional[ComponentOperationalState] = Field(default=None, alias="controlModule")
    factory_configuration: Optional[ComponentOperationalState] = Field(default=None, alias="factoryConfiguration")
    stirrer0: Optional[ComponentOperationalState] = None
    stirrer1: Optional[ComponentOperationalState] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["calibrationModule", "controlModule", "factoryConfiguration", "stirrer0", "stirrer1"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SystemOperationalStateComponents from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of calibration_module
        if self.calibration_module:
            _dict['calibrationModule'] = self.calibration_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of control_module
        if self.control_module:
            _dict['controlModule'] = self.control_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of factory_configuration
        if self.factory_configuration:
            _dict['factoryConfiguration'] = self.factory_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stirrer0
        if self.stirrer0:
            _dict['stirrer0'] = self.stirrer0.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stirrer1
        if self.stirrer1:
            _dict['stirrer1'] = self.stirrer1.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SystemOperationalStateComponents from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calibrationModule": ComponentOperationalState.from_dict(obj["calibrationModule"]) if obj.get("calibrationModule") is not None else None,
            "controlModule": ComponentOperationalState.from_dict(obj["controlModule"]) if obj.get("controlModule") is not None else None,
            "factoryConfiguration": ComponentOperationalState.from_dict(obj["factoryConfiguration"]) if obj.get("factoryConfiguration") is not None else None,
            "stirrer0": ComponentOperationalState.from_dict(obj["stirrer0"]) if obj.get("stirrer0") is not None else None,
            "stirrer1": ComponentOperationalState.from_dict(obj["stirrer1"]) if obj.get("stirrer1") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


