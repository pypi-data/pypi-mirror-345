[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pytams"
version = "0.0.5"
authors = [
    { name = "Lucas Esclapez", email = "l.esclapez@esciencecenter.nl" }
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
description = "An implementation of the trajectory-adaptive multilevel splitting (TAMS) method."
keywords = ["Rare events", "Stochastic systems", "Multilevel splitting"]
license = {file = "LICENSE"}
readme = {file = "README.md", content-type = "text/markdown"}
urls = {Repository = "https://github.com/esciencecenter/pyTAMS", Documentation = "https://pytams.readthedocs.io/en/latest/", Issues = "https://github.com/esciencecenter/pyTAMS/issues"}
requires-python = ">=3.10"
dependencies = [
  "toml",
  "numpy",
  "matplotlib",
  "netCDF4",
  "dask",
  "dask [distributed]",
  "dask-jobqueue",
  "SQLAlchemy",
]

[project.optional-dependencies]
dev = [
    "build",  # build is not only used in publishing (below), but also in the template's test suite
    "bump-my-version",
    "coverage [toml]",
    "pytest",
    "pytest-cov",
    "pytest-dependency",
    "ruff",
    "mypy",
    "sphinx",
    "furo",
    "sphinx-autoapi",
    "tox",
    "myst_parser",
]
docs = [
    "sphinx",
    "furo",
    "sphinx-autoapi",
    "myst_parser",
]
publishing = [
    "build",
    "twine",
    "wheel",
]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["pytams"]
command_line = "-m pytest"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py310,py311,py312,py313
skip_missing_interpreters = true
[testenv]
commands = pytest
extras = dev
"""

[tool.ruff]
line-length = 120
output-format = "concise"
extend-exclude = ["docs", "examples", "tests"]

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Enable Pyflakes `E` and `F` codes by default.
select = ["ALL"]
ignore = [
    "ANN204", # Missing return type annotation for special (dunder) method
    "FBT",    # Using boolean function arguments
    "TD",     # TODOs
    "FIX001", # Resolve FIXMEs
    "FIX002", # Resolve TODOs
    "B028",   # No explicit `stacklevel` keyword argument found in warning
    "S603",   # Use subprocess without check
    # No docstrings required in the following cases
    "D100", # Missing module docstring
    "D104", # Missing public package docstring
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    "S314", # Use of the XML lib"
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "B027", # Empty default in ABC.
    "COM812", # Trailing comma missing
]
pydocstyle.convention = "google"
fixable = ["A", "B", "C", "D", "E", "F", "I"]

[tool.ruff.lint.per-file-ignores]
# Tests can ignore a few extra rules
"tests/**.py" = [
    "ANN201",  # Missing return type annotation for public function
    "PLR2004", # Magic value used in comparison
    "PT011",   # Missing `match` parameter in `pytest.raises()`
    "S101",    # Use of assert is detected
]

[tool.ruff.lint.isort]
known-first-party = ["pytams"]
force-single-line = true
no-lines-before = ["future","standard-library","third-party","first-party","local-folder"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_untyped_calls = false
warn_redundant_casts = true
exclude = ["tests", "examples", "docs", "build"]

[[tool.mypy.overrides]]
module = ["toml","dask_jobqueue","cloudpickle"]
ignore_missing_imports = true

[tool.setuptools.package-data]
pytams = ["py.typed"]

[tool.bumpversion]
current_version = "0.0.5"

[[tool.bumpversion.files]]
filename = "pytams/__init__.py"

[[tool.bumpversion.files]]
filename = "pyproject.toml"

[[tool.bumpversion.files]]
filename = "CITATION.cff"

[[tool.bumpversion.files]]
filename = "docs/conf.py"
