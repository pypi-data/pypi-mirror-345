rule Map_On_Assembly:
    input:
        pairs_R1 = rules.Extract_Unmapped_bact_Reads.output.pairs_R1,
        pairs_R2 = rules.Extract_Unmapped_bact_Reads.output.pairs_R2,
        WI = rules.Extract_Unmapped_bact_Reads.output.WI,
        CONTIGS = rules.Merge_Mega_cap_contigs.output.final_assembly,
        INDEX = rules.Index_Assembly.output.index
    output:
        raw = f"{output_directory}/03_mapping_on_assembly/01_mapping/raw_{{smp}}_on_{{RUN}}.bam",
        raw_wi = f"{output_directory}/03_mapping_on_assembly/01_mapping/raw_wi_{{smp}}_on_{{RUN}}.bam",
        rmdup=f"{output_directory}/03_mapping_on_assembly/01_mapping/rmdup_{{smp}}_on_{{RUN}}.bam",
        rmdup_wi=f"{output_directory}/03_mapping_on_assembly/01_mapping/rmdup_wi_{{smp}}_on_{{RUN}}.bam",
        merged=f"{output_directory}/03_mapping_on_assembly/01_mapping/{{smp}}_on_{{RUN}}.bam",
        mergedraw=f"{output_directory}/03_mapping_on_assembly/01_mapping/{{smp}}_raw_on_{{RUN}}.bam",
        logs_pair=f"{output_directory}/logs/03_mapping_on_assembly/01_mapping/{{smp}}_duplicates_pairs_{{RUN}}.txt",
        logs_wi=f"{output_directory}/logs/03_mapping_on_assembly/01_mapping/{{smp}}_duplicates_wi_{{RUN}}.txt",
        logs=f"{output_directory}/logs/03_mapping_on_assembly/01_mapping/{{smp}}_{{RUN}}_stats_mapping_assembly.txt"
    envmodules: config['module_file']
    threads: threads_Map_On_Assembly
    shell:
        """
        if [ -s {input.pairs_R1} ]
        then
            bwa mem -t {threads} {input.CONTIGS} {input.pairs_R1} {input.pairs_R2}| samtools fixmate -@ {threads} -m - -| samtools sort -O BAM -|  tee {output.raw} | samtools markdup -@ {threads} -r - -f {output.logs_pair} {output.rmdup}
        else
            touch {output.raw} {output.rmdup}
        fi
        if [ -s {input.WI} ]
        then
            bwa mem -t {threads} {input.CONTIGS} {input.WI}| samtools fixmate -@ {threads} -m - -| samtools sort -O BAM |  tee {output.raw_wi} | samtools markdup -@ {threads} -r - -f {output.logs_wi}  {output.rmdup_wi}
        else
            touch {output.raw_wi} {output.rmdup_wi}
        fi
        samtools merge -@ {threads} {output.merged} {output.rmdup} {output.rmdup_wi}
        samtools merge -@ {threads} {output.mergedraw} {output.raw} {output.raw_wi}
        samtools flagstat {output.merged} > {output.logs}
        """

rule get_insert_size_metric:
    input:
        bam = rules.Map_On_Assembly.output.raw
    output:
        metrics = f"{output_directory}/logs/03_mapping_on_assembly/{{smp}}_insert_size_metrics_{{RUN}}.txt"
    params:
        histo = f"{output_directory}/logs/03_mapping_on_assembly/{{smp}}_insert_size_histo_{{RUN}}.pdf"
    envmodules: config['module_file']
    shell:
        """
        touch {output.metrics}
        picard  CollectInsertSizeMetrics -M 0.0 -I {input.bam}  -O {output.metrics} -H {params.histo}
        """

rule Quantify_contigs_coverage_raw:
    input:
        bam = rules.Map_On_Assembly.output.mergedraw
    output:
        mapped =  f"{output_directory}/03_mapping_on_assembly/02_CountsMapping_raw/{{smp}}_raw_counts_contigs_{{RUN}}.mat",
        Unmapped =  f"{output_directory}/03_mapping_on_assembly/02_CountsMapping_raw/{{smp}}_raw_counts_unmapped_{{RUN}}.mat"
    envmodules: config['module_file']
    shell:
        """
        echo "qseqid "$(basename {input.bam} _raw_on_{RUN}.bam)> {output.mapped}
        samtools view -F 2308 {input.bam}| cut -f 3 | sort | uniq -c - | awk -F' ' '{{print $NF,$(NF-1)}}' >> {output.mapped};
        echo "qseqid "$(basename {input.bam} _raw_on_{RUN}.bam)> {output.Unmapped}
        samtools view -f 0x4 {input.bam}| cut -f 1 | sort | uniq -c - | awk -F' ' '{{print $NF,$(NF-1)}}' >> {output.Unmapped};
        """
        
rule Quantify_contigs_coverage_rmdup:
    input:
        bam = rules.Map_On_Assembly.output.merged
    output:
        mapped =  f"{output_directory}/03_mapping_on_assembly/03_CountsMapping/{{smp}}_counts_contigs_{{RUN}}.mat",
        Unmapped = f"{output_directory}/03_mapping_on_assembly/03_CountsMapping/{{smp}}_counts_unmapped_{{RUN}}.mat"
    envmodules: config['module_file']
    shell:
        """
        echo "qseqid "$(basename {input} _on_{RUN}.bam)> {output.mapped}
        samtools view -F 2308 {input}| cut -f 3 | sort | uniq -c - | awk -F' ' '{{print $NF,$(NF-1)}}' >> {output.mapped};
        echo "qseqid "$(basename {input} _on_{RUN}.bam)> {output.Unmapped}
        samtools view -f 0x4 {input}| cut -f 1 | sort | uniq -c - | awk -F' ' '{{print $NF,$(NF-1)}}' >> {output.Unmapped};
        """

rule log_Quantify_contigs_coverage:
    input:
        mapped = rules.Quantify_contigs_coverage_rmdup.output.mapped,
        Unmapped = rules.Quantify_contigs_coverage_rmdup.output.Unmapped
    output:
        log = f"{output_directory}/logs/03_mapping_on_assembly/03_CountsMapping/{{smp}}_coverage_{{RUN}}.txt"
    envmodules: config['module_file']
    shell:
        """
        awk '{{ sum+=$2 }} END {{print "Mapped:" sum }}' {input.mapped} >> {output.log}
        wc -l {input.mapped}  >> {output.log}
        awk '{{ sum+=$2 }}END {{print "UnMapped:" sum }}' {input.Unmapped} >> {output.log}
        wc -l {input.Unmapped}  >> {output.log}
        """
