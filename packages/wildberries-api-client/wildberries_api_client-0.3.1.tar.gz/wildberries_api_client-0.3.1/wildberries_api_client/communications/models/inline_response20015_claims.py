# coding: utf-8

"""
    Obhenie s pokupatelami

    <div class=\"description_important\">       Uznat bolhe ob obhenii s pokupatelami mohno v <a href=\"https://seller.wildberries.ru/instructions/category/f7f6c465-dd12-422d-80a0-a6d9562115d5?goBackOption=prevRoute&categoryId=30817062-14cc-4a82-bc78-3600c2b0685b\">spravohnom centre</a> </div>  herez metody obhenia s pokupatelem vy mohete rabotat s:   1. [Voprosami](/openapi/user-communication#tag/Voprosy) i [otzyvami](/openapi/user-communication#tag/Otzyvy) pokupatelei   2. [hablonami otvetov](/openapi/user-communication#tag/Shablony-otvetov) na voprosy i otzyvy   3. [hatami s pokupatelami](/openapi/user-communication#tag/Chat-s-pokupatelyami)   4. [Zaavkami pokupatelei na vozvrat](/openapi/user-communication#tag/Vozvraty-pokupatelyami)   # noqa: E501

    OpenAPI spec version: communication
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20015Claims(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'claim_type': 'int',
        'status': 'int',
        'status_ex': 'int',
        'nm_id': 'int',
        'user_comment': 'str',
        'wb_comment': 'str',
        'dt': 'datetime',
        'imt_name': 'str',
        'order_dt': 'datetime',
        'dt_update': 'datetime',
        'photos': 'list[str]',
        'video_paths': 'list[str]',
        'actions': 'list[str]',
        'price': 'float',
        'currency_code': 'str',
        'srid': 'str'
    }

    attribute_map = {
        'id': 'id',
        'claim_type': 'claim_type',
        'status': 'status',
        'status_ex': 'status_ex',
        'nm_id': 'nm_id',
        'user_comment': 'user_comment',
        'wb_comment': 'wb_comment',
        'dt': 'dt',
        'imt_name': 'imt_name',
        'order_dt': 'order_dt',
        'dt_update': 'dt_update',
        'photos': 'photos',
        'video_paths': 'video_paths',
        'actions': 'actions',
        'price': 'price',
        'currency_code': 'currency_code',
        'srid': 'srid'
    }

    def __init__(self, id=None, claim_type=None, status=None, status_ex=None, nm_id=None, user_comment=None, wb_comment=None, dt=None, imt_name=None, order_dt=None, dt_update=None, photos=None, video_paths=None, actions=None, price=None, currency_code=None, srid=None):  # noqa: E501
        """InlineResponse20015Claims - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._claim_type = None
        self._status = None
        self._status_ex = None
        self._nm_id = None
        self._user_comment = None
        self._wb_comment = None
        self._dt = None
        self._imt_name = None
        self._order_dt = None
        self._dt_update = None
        self._photos = None
        self._video_paths = None
        self._actions = None
        self._price = None
        self._currency_code = None
        self._srid = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if claim_type is not None:
            self.claim_type = claim_type
        if status is not None:
            self.status = status
        if status_ex is not None:
            self.status_ex = status_ex
        if nm_id is not None:
            self.nm_id = nm_id
        if user_comment is not None:
            self.user_comment = user_comment
        if wb_comment is not None:
            self.wb_comment = wb_comment
        if dt is not None:
            self.dt = dt
        if imt_name is not None:
            self.imt_name = imt_name
        if order_dt is not None:
            self.order_dt = order_dt
        if dt_update is not None:
            self.dt_update = dt_update
        if photos is not None:
            self.photos = photos
        if video_paths is not None:
            self.video_paths = video_paths
        if actions is not None:
            self.actions = actions
        if price is not None:
            self.price = price
        if currency_code is not None:
            self.currency_code = currency_code
        if srid is not None:
            self.srid = srid

    @property
    def id(self):
        """Gets the id of this InlineResponse20015Claims.  # noqa: E501

        ID zaavki  # noqa: E501

        :return: The id of this InlineResponse20015Claims.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20015Claims.

        ID zaavki  # noqa: E501

        :param id: The id of this InlineResponse20015Claims.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def claim_type(self):
        """Gets the claim_type of this InlineResponse20015Claims.  # noqa: E501

        Istohnik zaavki:   * `1` — portal pokupatelei   * `3` — hat   # noqa: E501

        :return: The claim_type of this InlineResponse20015Claims.  # noqa: E501
        :rtype: int
        """
        return self._claim_type

    @claim_type.setter
    def claim_type(self, claim_type):
        """Sets the claim_type of this InlineResponse20015Claims.

        Istohnik zaavki:   * `1` — portal pokupatelei   * `3` — hat   # noqa: E501

        :param claim_type: The claim_type of this InlineResponse20015Claims.  # noqa: E501
        :type: int
        """

        self._claim_type = claim_type

    @property
    def status(self):
        """Gets the status of this InlineResponse20015Claims.  # noqa: E501

        Rehenie po vozvratu pokupatelu:   * `0` — na rassmotrenii   * `1` — otkaz   * `2` — odobreno   # noqa: E501

        :return: The status of this InlineResponse20015Claims.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20015Claims.

        Rehenie po vozvratu pokupatelu:   * `0` — na rassmotrenii   * `1` — otkaz   * `2` — odobreno   # noqa: E501

        :param status: The status of this InlineResponse20015Claims.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def status_ex(self):
        """Gets the status_ex of this InlineResponse20015Claims.  # noqa: E501

        Status tovara:   * `0` — zaavka na rassmotrenii   * `1` — tovar ostaetsa u pokupatela (Zaavka otklonena)   * `2` — pokupatel sdaet tovar na WB, tovar otpravlaetsa v util                              * `5` — tovar ostaetsa u pokupatela (Zaavka odobrena)   * `8` — tovar budet vozvrahen v realizaciu posle proverki WB    * `10` — tovar vozvrahaetsa prodavcu    # noqa: E501

        :return: The status_ex of this InlineResponse20015Claims.  # noqa: E501
        :rtype: int
        """
        return self._status_ex

    @status_ex.setter
    def status_ex(self, status_ex):
        """Sets the status_ex of this InlineResponse20015Claims.

        Status tovara:   * `0` — zaavka na rassmotrenii   * `1` — tovar ostaetsa u pokupatela (Zaavka otklonena)   * `2` — pokupatel sdaet tovar na WB, tovar otpravlaetsa v util                              * `5` — tovar ostaetsa u pokupatela (Zaavka odobrena)   * `8` — tovar budet vozvrahen v realizaciu posle proverki WB    * `10` — tovar vozvrahaetsa prodavcu    # noqa: E501

        :param status_ex: The status_ex of this InlineResponse20015Claims.  # noqa: E501
        :type: int
        """

        self._status_ex = status_ex

    @property
    def nm_id(self):
        """Gets the nm_id of this InlineResponse20015Claims.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this InlineResponse20015Claims.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this InlineResponse20015Claims.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this InlineResponse20015Claims.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def user_comment(self):
        """Gets the user_comment of this InlineResponse20015Claims.  # noqa: E501

        Kommentarii pokupatela  # noqa: E501

        :return: The user_comment of this InlineResponse20015Claims.  # noqa: E501
        :rtype: str
        """
        return self._user_comment

    @user_comment.setter
    def user_comment(self, user_comment):
        """Sets the user_comment of this InlineResponse20015Claims.

        Kommentarii pokupatela  # noqa: E501

        :param user_comment: The user_comment of this InlineResponse20015Claims.  # noqa: E501
        :type: str
        """

        self._user_comment = user_comment

    @property
    def wb_comment(self):
        """Gets the wb_comment of this InlineResponse20015Claims.  # noqa: E501

        Otvet pokupatelu  # noqa: E501

        :return: The wb_comment of this InlineResponse20015Claims.  # noqa: E501
        :rtype: str
        """
        return self._wb_comment

    @wb_comment.setter
    def wb_comment(self, wb_comment):
        """Sets the wb_comment of this InlineResponse20015Claims.

        Otvet pokupatelu  # noqa: E501

        :param wb_comment: The wb_comment of this InlineResponse20015Claims.  # noqa: E501
        :type: str
        """

        self._wb_comment = wb_comment

    @property
    def dt(self):
        """Gets the dt of this InlineResponse20015Claims.  # noqa: E501

        Data i vrema oformlenia zaavki pokupatelem  # noqa: E501

        :return: The dt of this InlineResponse20015Claims.  # noqa: E501
        :rtype: datetime
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this InlineResponse20015Claims.

        Data i vrema oformlenia zaavki pokupatelem  # noqa: E501

        :param dt: The dt of this InlineResponse20015Claims.  # noqa: E501
        :type: datetime
        """

        self._dt = dt

    @property
    def imt_name(self):
        """Gets the imt_name of this InlineResponse20015Claims.  # noqa: E501

        Nazvanie tovara  # noqa: E501

        :return: The imt_name of this InlineResponse20015Claims.  # noqa: E501
        :rtype: str
        """
        return self._imt_name

    @imt_name.setter
    def imt_name(self, imt_name):
        """Sets the imt_name of this InlineResponse20015Claims.

        Nazvanie tovara  # noqa: E501

        :param imt_name: The imt_name of this InlineResponse20015Claims.  # noqa: E501
        :type: str
        """

        self._imt_name = imt_name

    @property
    def order_dt(self):
        """Gets the order_dt of this InlineResponse20015Claims.  # noqa: E501

        Data i vrema zakaza  # noqa: E501

        :return: The order_dt of this InlineResponse20015Claims.  # noqa: E501
        :rtype: datetime
        """
        return self._order_dt

    @order_dt.setter
    def order_dt(self, order_dt):
        """Sets the order_dt of this InlineResponse20015Claims.

        Data i vrema zakaza  # noqa: E501

        :param order_dt: The order_dt of this InlineResponse20015Claims.  # noqa: E501
        :type: datetime
        """

        self._order_dt = order_dt

    @property
    def dt_update(self):
        """Gets the dt_update of this InlineResponse20015Claims.  # noqa: E501

        Data i vrema rassmotrenia zaavki. Dla nerassmotrennoi zaavki — data i vrema oformlenia  # noqa: E501

        :return: The dt_update of this InlineResponse20015Claims.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_update

    @dt_update.setter
    def dt_update(self, dt_update):
        """Sets the dt_update of this InlineResponse20015Claims.

        Data i vrema rassmotrenia zaavki. Dla nerassmotrennoi zaavki — data i vrema oformlenia  # noqa: E501

        :param dt_update: The dt_update of this InlineResponse20015Claims.  # noqa: E501
        :type: datetime
        """

        self._dt_update = dt_update

    @property
    def photos(self):
        """Gets the photos of this InlineResponse20015Claims.  # noqa: E501

        Fotografii iz zaavki pokupatela  # noqa: E501

        :return: The photos of this InlineResponse20015Claims.  # noqa: E501
        :rtype: list[str]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this InlineResponse20015Claims.

        Fotografii iz zaavki pokupatela  # noqa: E501

        :param photos: The photos of this InlineResponse20015Claims.  # noqa: E501
        :type: list[str]
        """

        self._photos = photos

    @property
    def video_paths(self):
        """Gets the video_paths of this InlineResponse20015Claims.  # noqa: E501

        Video iz zaavki pokupatela  # noqa: E501

        :return: The video_paths of this InlineResponse20015Claims.  # noqa: E501
        :rtype: list[str]
        """
        return self._video_paths

    @video_paths.setter
    def video_paths(self, video_paths):
        """Sets the video_paths of this InlineResponse20015Claims.

        Video iz zaavki pokupatela  # noqa: E501

        :param video_paths: The video_paths of this InlineResponse20015Claims.  # noqa: E501
        :type: list[str]
        """

        self._video_paths = video_paths

    @property
    def actions(self):
        """Gets the actions of this InlineResponse20015Claims.  # noqa: E501

        Varianty [otveta prodavca na zaavku](./user-communication#tag/Vozvraty-pokupatelyami/paths/~1api~1v1~1claim/patch).<br>Otklonennye zaavki mohno peresmotret. Esli massiv pust, s zaavkoi rabotat nelza.   * `approve1` — odobrit s proverkoi braka.<br>Dengi vernutsa pokupatelu posle vozvrata tovara. Tovar budet proveren na sklade. Pri podtverhdenii braka/ohibki vlohenia tovar budet otpravlen prodavcu. Esli brak/ohibka vlohenia ne podtverdatsa, tovar budet vozvrahen v prodahu.<br>Neprimenimo pri sheme <strong>[Samovyvoz](./in-store-pickup)</strong>.    * `approve2` — odobrit i zabrat tovar.<br> Dengi vernutsa pokupatelu posle vozvrata tovara. Tovar budet otpravlen prodavcu.<br>Neprimenimo pri sheme <strong>[Samovyvoz](./in-store-pickup)</strong>.   * `autorefund1` — odobrit bez vozvrata tovara.<br> Tovar ostanetsa u pokupatela. Dengi za nego budut vozvraheny pokupatelu bez vozvrata tovara.   * `reject1` — otklonit s hablonom otveta: <details><summary><strong>Brak ne obnaruhen</strong></summary>Zdravstvuite!<br>Prodavec rassmotrel i otklonil vahu zaavku: on ne nahel brak, kotoryi vy opisali, na foto ili video.<br>Esli brak proizvodstvennyi, mohete: — poprobovat rehit vopros napramuu v hate s prodavcom — v razdele «Pokupki» nahmite na tri tohki vozle tovara i vyberite «Zadat vopros prodavcu», — obratitsa v servisnyi centr ili nezavisimuu ekspertizu, htoby poluhit zakluhenie o brake. Posle ekspertizy otpravte skan zakluhenia, sozdav novuu zaavku na proverku tovara.<br>Esli defekt neproizvodstvennyi, to mohno osporit rehenie prodavca, dla etogo otkroite v prilohenii razdel «Vozvrat tovara po braku» ili na saite razdel «Brak ili drugaa problema», vyberite zaavku, nahmite knopku «Osporit rehenie» i napihite, pohemu vy ne soglasny. My vse proverim i napihem vam.</details>   * `reject2` — otklonit s hablonom otveta: <details><summary><strong>Dobavit foto/video</strong></summary>Zdravstvuite!<br>K sohaleniu, prodavec ne smog podtverdit brak, povrehdenie ili nesootvetstvie opisaniu. Otpravte novuu zaavku i proverte, hto defekt viden na foto i video, a sami oni horohego kahestva. Napomnim, hto nuhno prikrepit k zaavke:<br>1. Foto tovara celikom.<br>2. Foto i video braka.<br>3. Foto s birkoi ili drugoi markirovkoi tovara.<br>4. Foto upakovki so htrih-kodom, esli ona ostalas.<br>5. Kommentarii, v kotorom podrobno opisano, hto slomano i kak vy eto vyasnili.</details>   * `reject3` — otklonit s hablonom otveta: <details><summary><strong>Napravit v servisnyi centr</strong></summary>Zdravstvuite!<br>My vnimatelno prohitali zaavku, proverili foto i video. K sohaleniu, my ne nahli brak, povrehdenie ili nesootvetstvie opisaniu v vahem tovare.<br>Obratites napramuu v servisnyi centr — ego adres i kontakty est na saite proizvoditela ili na garantiinom talone. Tam provedut okonhatelnuu proverku tovara i vydadut vam akt. Esli centr nahel brak, to otpravte etot akt v hat na nahem saite.</details>   * `rejectcustom` — otklonit s kommentariem.<br>Kommentarii peredaetsa v parametre `comment`.   * `approvecc1` — odobrit zaavku s vozvratom tovara v magazin prodavca.<br>Mohno peredat kommentarii (naprimer, telefon dla svazi ili vrema raboty svoego otdela vozvratov) v parametre `comment`. Po itogu vozvrata neobhodimo otvetit na zaavku s `\"action\":\"confirmreturngoodcc1\"` ili `\"action\":\"rejectcustom\"`.<br>Primenimo tolko pri sheme <strong>[Samovyvoz](./in-store-pickup)</strong>.    * `confirmreturngoodcc1` — podtverdit priemku tovara ot pokupatela.<br>Primenimo tolko pri sheme <strong>[Samovyvoz](./in-store-pickup)</strong>.   # noqa: E501

        :return: The actions of this InlineResponse20015Claims.  # noqa: E501
        :rtype: list[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this InlineResponse20015Claims.

        Varianty [otveta prodavca na zaavku](./user-communication#tag/Vozvraty-pokupatelyami/paths/~1api~1v1~1claim/patch).<br>Otklonennye zaavki mohno peresmotret. Esli massiv pust, s zaavkoi rabotat nelza.   * `approve1` — odobrit s proverkoi braka.<br>Dengi vernutsa pokupatelu posle vozvrata tovara. Tovar budet proveren na sklade. Pri podtverhdenii braka/ohibki vlohenia tovar budet otpravlen prodavcu. Esli brak/ohibka vlohenia ne podtverdatsa, tovar budet vozvrahen v prodahu.<br>Neprimenimo pri sheme <strong>[Samovyvoz](./in-store-pickup)</strong>.    * `approve2` — odobrit i zabrat tovar.<br> Dengi vernutsa pokupatelu posle vozvrata tovara. Tovar budet otpravlen prodavcu.<br>Neprimenimo pri sheme <strong>[Samovyvoz](./in-store-pickup)</strong>.   * `autorefund1` — odobrit bez vozvrata tovara.<br> Tovar ostanetsa u pokupatela. Dengi za nego budut vozvraheny pokupatelu bez vozvrata tovara.   * `reject1` — otklonit s hablonom otveta: <details><summary><strong>Brak ne obnaruhen</strong></summary>Zdravstvuite!<br>Prodavec rassmotrel i otklonil vahu zaavku: on ne nahel brak, kotoryi vy opisali, na foto ili video.<br>Esli brak proizvodstvennyi, mohete: — poprobovat rehit vopros napramuu v hate s prodavcom — v razdele «Pokupki» nahmite na tri tohki vozle tovara i vyberite «Zadat vopros prodavcu», — obratitsa v servisnyi centr ili nezavisimuu ekspertizu, htoby poluhit zakluhenie o brake. Posle ekspertizy otpravte skan zakluhenia, sozdav novuu zaavku na proverku tovara.<br>Esli defekt neproizvodstvennyi, to mohno osporit rehenie prodavca, dla etogo otkroite v prilohenii razdel «Vozvrat tovara po braku» ili na saite razdel «Brak ili drugaa problema», vyberite zaavku, nahmite knopku «Osporit rehenie» i napihite, pohemu vy ne soglasny. My vse proverim i napihem vam.</details>   * `reject2` — otklonit s hablonom otveta: <details><summary><strong>Dobavit foto/video</strong></summary>Zdravstvuite!<br>K sohaleniu, prodavec ne smog podtverdit brak, povrehdenie ili nesootvetstvie opisaniu. Otpravte novuu zaavku i proverte, hto defekt viden na foto i video, a sami oni horohego kahestva. Napomnim, hto nuhno prikrepit k zaavke:<br>1. Foto tovara celikom.<br>2. Foto i video braka.<br>3. Foto s birkoi ili drugoi markirovkoi tovara.<br>4. Foto upakovki so htrih-kodom, esli ona ostalas.<br>5. Kommentarii, v kotorom podrobno opisano, hto slomano i kak vy eto vyasnili.</details>   * `reject3` — otklonit s hablonom otveta: <details><summary><strong>Napravit v servisnyi centr</strong></summary>Zdravstvuite!<br>My vnimatelno prohitali zaavku, proverili foto i video. K sohaleniu, my ne nahli brak, povrehdenie ili nesootvetstvie opisaniu v vahem tovare.<br>Obratites napramuu v servisnyi centr — ego adres i kontakty est na saite proizvoditela ili na garantiinom talone. Tam provedut okonhatelnuu proverku tovara i vydadut vam akt. Esli centr nahel brak, to otpravte etot akt v hat na nahem saite.</details>   * `rejectcustom` — otklonit s kommentariem.<br>Kommentarii peredaetsa v parametre `comment`.   * `approvecc1` — odobrit zaavku s vozvratom tovara v magazin prodavca.<br>Mohno peredat kommentarii (naprimer, telefon dla svazi ili vrema raboty svoego otdela vozvratov) v parametre `comment`. Po itogu vozvrata neobhodimo otvetit na zaavku s `\"action\":\"confirmreturngoodcc1\"` ili `\"action\":\"rejectcustom\"`.<br>Primenimo tolko pri sheme <strong>[Samovyvoz](./in-store-pickup)</strong>.    * `confirmreturngoodcc1` — podtverdit priemku tovara ot pokupatela.<br>Primenimo tolko pri sheme <strong>[Samovyvoz](./in-store-pickup)</strong>.   # noqa: E501

        :param actions: The actions of this InlineResponse20015Claims.  # noqa: E501
        :type: list[str]
        """

        self._actions = actions

    @property
    def price(self):
        """Gets the price of this InlineResponse20015Claims.  # noqa: E501

        Faktiheskaa cena s uhetom vseh skidok. Vzimaetsa s pokupatela  # noqa: E501

        :return: The price of this InlineResponse20015Claims.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this InlineResponse20015Claims.

        Faktiheskaa cena s uhetom vseh skidok. Vzimaetsa s pokupatela  # noqa: E501

        :param price: The price of this InlineResponse20015Claims.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def currency_code(self):
        """Gets the currency_code of this InlineResponse20015Claims.  # noqa: E501

        Kod valuty ceny  # noqa: E501

        :return: The currency_code of this InlineResponse20015Claims.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this InlineResponse20015Claims.

        Kod valuty ceny  # noqa: E501

        :param currency_code: The currency_code of this InlineResponse20015Claims.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def srid(self):
        """Gets the srid of this InlineResponse20015Claims.  # noqa: E501

        Unikalnyi ID zakaza, po tovaru kotorogo sozdana zaavka  # noqa: E501

        :return: The srid of this InlineResponse20015Claims.  # noqa: E501
        :rtype: str
        """
        return self._srid

    @srid.setter
    def srid(self, srid):
        """Sets the srid of this InlineResponse20015Claims.

        Unikalnyi ID zakaza, po tovaru kotorogo sozdana zaavka  # noqa: E501

        :param srid: The srid of this InlineResponse20015Claims.  # noqa: E501
        :type: str
        """

        self._srid = srid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20015Claims, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20015Claims):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
