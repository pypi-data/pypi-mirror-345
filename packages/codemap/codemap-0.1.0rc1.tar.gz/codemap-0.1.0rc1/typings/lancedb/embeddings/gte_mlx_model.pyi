"""
This type stub file was generated by pyright.
"""

import mlx.core as mx
import mlx.nn as nn
from typing import List, Optional
from pydantic import BaseModel

def average_pool(last_hidden_state: mx.array, attention_mask: mx.array) -> mx.array:
    ...

class ModelConfig(BaseModel):
    dim: int = ...
    num_attention_heads: int = ...
    num_hidden_layers: int = ...
    vocab_size: int = ...
    attention_probs_dropout_prob: float = ...
    hidden_dropout_prob: float = ...
    layer_norm_eps: float = ...
    max_position_embeddings: int = ...


class TransformerEncoderLayer(nn.Module):
    """
    A transformer encoder layer with (the original BERT) post-normalization.
    """
    def __init__(self, dims: int, num_heads: int, mlp_dims: Optional[int] = ..., layer_norm_eps: float = ...) -> None:
        ...
    
    def __call__(self, x, mask):
        ...
    


class TransformerEncoder(nn.Module):
    def __init__(self, num_layers: int, dims: int, num_heads: int, mlp_dims: Optional[int] = ...) -> None:
        ...
    
    def __call__(self, x, mask):
        ...
    


class BertEmbeddings(nn.Module):
    def __init__(self, config: ModelConfig) -> None:
        ...
    
    def __call__(self, input_ids: mx.array, token_type_ids: mx.array) -> mx.array:
        ...
    


class Bert(nn.Module):
    def __init__(self, config: ModelConfig) -> None:
        ...
    
    def __call__(self, input_ids: mx.array, token_type_ids: mx.array, attention_mask: mx.array = ...) -> tuple[mx.array, mx.array]:
        ...
    


class Model:
    def __init__(self) -> None:
        ...
    
    def run(self, input_text: List[str]) -> mx.array:
        ...
    


