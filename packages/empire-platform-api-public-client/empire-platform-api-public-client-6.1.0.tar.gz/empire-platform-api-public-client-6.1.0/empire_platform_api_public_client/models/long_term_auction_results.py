# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from empire_platform_api_public_client.models.auction_result_congestion_rent import AuctionResultCongestionRent
from empire_platform_api_public_client.models.long_term_auction_results_allocated_capacity import LongTermAuctionResultsAllocatedCapacity
from empire_platform_api_public_client.models.long_term_auction_results_bids import LongTermAuctionResultsBids
from typing import Optional, Set
from typing_extensions import Self

class LongTermAuctionResults(BaseModel):
    """
    LongTermAuctionResults
    """ # noqa: E501
    congestion_rent: Optional[AuctionResultCongestionRent] = Field(default=None, alias="congestionRent")
    bids: List[LongTermAuctionResultsBids]
    total_requested_capacity: StrictInt = Field(description="Capacity value in kilowatts (kW) - the required system precision allows for handling capacity values as integers", alias="totalRequestedCapacity")
    total_allocated_capacity: StrictInt = Field(description="Capacity value in kilowatts (kW) - the required system precision allows for handling capacity values as integers", alias="totalAllocatedCapacity")
    allocated_capacity: List[LongTermAuctionResultsAllocatedCapacity] = Field(alias="allocatedCapacity")
    marginal_price: Union[Annotated[float, Field(multiple_of=0.01, strict=True)], Annotated[int, Field(strict=True)]] = Field(description="Currency value in Euros (€), accepted with a precision of maximum 2 decimal places", alias="marginalPrice")
    reserve_price: Optional[Union[Annotated[float, Field(multiple_of=0.01, strict=True)], Annotated[int, Field(strict=True)]]] = Field(default=None, description="Currency value in Euros (€), accepted with a precision of maximum 2 decimal places", alias="reservePrice")
    __properties: ClassVar[List[str]] = ["congestionRent", "bids", "totalRequestedCapacity", "totalAllocatedCapacity", "allocatedCapacity", "marginalPrice", "reservePrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LongTermAuctionResults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of congestion_rent
        if self.congestion_rent:
            _dict['congestionRent'] = self.congestion_rent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in bids (list)
        _items = []
        if self.bids:
            for _item_bids in self.bids:
                if _item_bids:
                    _items.append(_item_bids.to_dict())
            _dict['bids'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in allocated_capacity (list)
        _items = []
        if self.allocated_capacity:
            for _item_allocated_capacity in self.allocated_capacity:
                if _item_allocated_capacity:
                    _items.append(_item_allocated_capacity.to_dict())
            _dict['allocatedCapacity'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LongTermAuctionResults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "congestionRent": AuctionResultCongestionRent.from_dict(obj["congestionRent"]) if obj.get("congestionRent") is not None else None,
            "bids": [LongTermAuctionResultsBids.from_dict(_item) for _item in obj["bids"]] if obj.get("bids") is not None else None,
            "totalRequestedCapacity": obj.get("totalRequestedCapacity"),
            "totalAllocatedCapacity": obj.get("totalAllocatedCapacity"),
            "allocatedCapacity": [LongTermAuctionResultsAllocatedCapacity.from_dict(_item) for _item in obj["allocatedCapacity"]] if obj.get("allocatedCapacity") is not None else None,
            "marginalPrice": obj.get("marginalPrice"),
            "reservePrice": obj.get("reservePrice")
        })
        return _obj


