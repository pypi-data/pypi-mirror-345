name: Generate Release and publish to PyPI + Doc Generation

on:
  push:
    branches:
      - main
      - beta
  workflow_dispatch:

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    environment:
      name: Semver
    outputs:
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install hatchling twine

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          DEBUG: semantic-release:*

      - name: Show version
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_major_version }}
          echo ${{ steps.semantic.outputs.new_release_minor_version }}
          echo ${{ steps.semantic.outputs.new_release_patch_version }}

      - name: Build package
        if: steps.semantic.outputs.new_release_published == 'true'
        run: python -m hatchling build
        env:
          PYPROJECT_VERSION: ${{ steps.semantic.outputs.new_release_version }}

      - name: Publish to PyPI
        if: steps.semantic.outputs.new_release_published == 'true'
        run: twine upload dist/* --skip-existing -u __token__ -p "${{ secrets.PYPI_TOKEN }}"

  deploy-docs:
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new_release_published == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set the PYPROJECT_VERSION environment variable
        run: echo "PYPROJECT_VERSION=${{ needs.release.outputs.new_release_version }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install mkdocs mkdocstrings[python] mkdocs-material
          pip install -e .

      - name: Build documentation
        run: mkdocs build --strict #--verbose

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site