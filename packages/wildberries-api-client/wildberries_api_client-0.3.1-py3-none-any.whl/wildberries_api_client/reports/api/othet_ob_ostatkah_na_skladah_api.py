# coding: utf-8

"""
    Othety

    <div class=\"description_important\">     Uznat bolhe ob othetah mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/5f2162c5-069b-416d-a4e1-48da2a76e6b0\">spravohnom centre</a> </div>  S pomohu etih metodov vy mohete poluhit [osnovnye othety](/openapi/reports#tag/Osnovnye-otchyoty) i othety o:   1. [Ostatkah na skladah](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah)   2. [Tovarah s obazatelnoi markirovkoi](/openapi/reports#tag/Otchyot-o-tovarah-c-obyazatelnoj-markirovkoj)   3. [Uderhaniah](/openapi/reports#tag/Otchyoty-ob-uderzhaniyah)   4. [Platnoi priemke](/openapi/reports#tag/Platnaya-priyomka)   5. [Platnom hranenii](/openapi/reports#tag/Platnoe-hranenie)   6. [Prodahah po regionam](/openapi/reports#tag/Prodazhi-po-regionam)   7. [Dole brenda v prodahah](/openapi/reports#tag/Dolya-brenda-v-prodazhah)   8. [Skrytyh tovarah](/openapi/reports#tag/Skrytye-tovary)   9. [Vozvratah i peremehenii tovarov](/openapi/reports#tag/Otchyot-o-vozvratah-i-peremeshenii-tovarov)   10. [Dinamike oborahivaemosti](/openapi/reports#tag/Dinamika-oborachivaemosti)   # noqa: E501

    OpenAPI spec version: reports
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.reports.api_client import ApiClient


class OthetObOstatkahNaSkladahApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_warehouse_remains_get(self, **kwargs):  # noqa: E501
        """Sozdat othet  # noqa: E501

        Metod sozdaet [zadanie na generaciu](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah/paths/~1api~1v1~1warehouse_remains~1tasks~1%7Btask_id%7D~1status/get) otheta ob [ostatkah na skladah WB](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah/paths/~1api~1v1~1warehouse_remains~1tasks~1%7Btask_id%7D~1download/get).<br><br>  Parametry `groupBy` i `filter` (gruppirovki i filtry) mohno zadat v luboi kombinacii — analogihno [versii](https://seller.wildberries.ru/analytics-reports/warehouse-remains) v lihnom kabinete.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_warehouse_remains_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: azyk polei otveta `subjectName` i `warehouseName`:     - `ru` — russkii   - `en` — angliiskii   - `zh` — kitaiskii. Znahenia `warehouseName` na angliiskom 
        :param bool group_by_brand: Razbivka po brendam
        :param bool group_by_subject: Razbivka po predmetam
        :param bool group_by_sa: Razbivka po artikulam prodavca
        :param bool group_by_nm: Razbivka po artikulam WB. Esli `groupByNm=true`, v otvete budet pole `volume`
        :param bool group_by_barcode: Razbivka po barkodam
        :param bool group_by_size: Razbivka po razmeram
        :param int filter_pics: Filtr po foto:   - `-1` — bez foto   - `0` — ne primenat filtr   - `1` — s foto 
        :param int filter_volume: Filtr po obemu:   - `-1` — bez gabaritov   - `0` — ne primenat filtr   - `3` — svyhe treh litrov 
        :return: CreateTaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_warehouse_remains_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_warehouse_remains_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_warehouse_remains_get_with_http_info(self, **kwargs):  # noqa: E501
        """Sozdat othet  # noqa: E501

        Metod sozdaet [zadanie na generaciu](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah/paths/~1api~1v1~1warehouse_remains~1tasks~1%7Btask_id%7D~1status/get) otheta ob [ostatkah na skladah WB](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah/paths/~1api~1v1~1warehouse_remains~1tasks~1%7Btask_id%7D~1download/get).<br><br>  Parametry `groupBy` i `filter` (gruppirovki i filtry) mohno zadat v luboi kombinacii — analogihno [versii](https://seller.wildberries.ru/analytics-reports/warehouse-remains) v lihnom kabinete.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_warehouse_remains_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: azyk polei otveta `subjectName` i `warehouseName`:     - `ru` — russkii   - `en` — angliiskii   - `zh` — kitaiskii. Znahenia `warehouseName` na angliiskom 
        :param bool group_by_brand: Razbivka po brendam
        :param bool group_by_subject: Razbivka po predmetam
        :param bool group_by_sa: Razbivka po artikulam prodavca
        :param bool group_by_nm: Razbivka po artikulam WB. Esli `groupByNm=true`, v otvete budet pole `volume`
        :param bool group_by_barcode: Razbivka po barkodam
        :param bool group_by_size: Razbivka po razmeram
        :param int filter_pics: Filtr po foto:   - `-1` — bez foto   - `0` — ne primenat filtr   - `1` — s foto 
        :param int filter_volume: Filtr po obemu:   - `-1` — bez gabaritov   - `0` — ne primenat filtr   - `3` — svyhe treh litrov 
        :return: CreateTaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale', 'group_by_brand', 'group_by_subject', 'group_by_sa', 'group_by_nm', 'group_by_barcode', 'group_by_size', 'filter_pics', 'filter_volume']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_warehouse_remains_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'group_by_brand' in params:
            query_params.append(('groupByBrand', params['group_by_brand']))  # noqa: E501
        if 'group_by_subject' in params:
            query_params.append(('groupBySubject', params['group_by_subject']))  # noqa: E501
        if 'group_by_sa' in params:
            query_params.append(('groupBySa', params['group_by_sa']))  # noqa: E501
        if 'group_by_nm' in params:
            query_params.append(('groupByNm', params['group_by_nm']))  # noqa: E501
        if 'group_by_barcode' in params:
            query_params.append(('groupByBarcode', params['group_by_barcode']))  # noqa: E501
        if 'group_by_size' in params:
            query_params.append(('groupBySize', params['group_by_size']))  # noqa: E501
        if 'filter_pics' in params:
            query_params.append(('filterPics', params['filter_pics']))  # noqa: E501
        if 'filter_volume' in params:
            query_params.append(('filterVolume', params['filter_volume']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/warehouse_remains', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateTaskResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_warehouse_remains_tasks_task_id_download_get(self, task_id, **kwargs):  # noqa: E501
        """Poluhit othet  # noqa: E501

        Metod predostavlaet othet ob [ostatkah na skladah WB](https://seller.wildberries.ru/analytics-reports/warehouse-remains) po ID [zadania na generaciu](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah/paths/~1api~1v1~1warehouse_remains/get).  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_warehouse_remains_tasks_task_id_download_get(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: ID zadania na generaciu  (required)
        :return: list[InlineResponse200]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_warehouse_remains_tasks_task_id_download_get_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_warehouse_remains_tasks_task_id_download_get_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def api_v1_warehouse_remains_tasks_task_id_download_get_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Poluhit othet  # noqa: E501

        Metod predostavlaet othet ob [ostatkah na skladah WB](https://seller.wildberries.ru/analytics-reports/warehouse-remains) po ID [zadania na generaciu](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah/paths/~1api~1v1~1warehouse_remains/get).  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_warehouse_remains_tasks_task_id_download_get_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: ID zadania na generaciu  (required)
        :return: list[InlineResponse200]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_warehouse_remains_tasks_task_id_download_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `api_v1_warehouse_remains_tasks_task_id_download_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/warehouse_remains/tasks/{task_id}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_warehouse_remains_tasks_task_id_status_get(self, task_id, **kwargs):  # noqa: E501
        """Proverit status  # noqa: E501

        Metod predostavlaet status [zadania na generaciu](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah/paths/~1api~1v1~1warehouse_remains/get) otheta ob [ostatkah na skladah WB](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah/paths/~1api~1v1~1warehouse_remains~1tasks~1%7Btask_id%7D~1download/get).  <div class=\"description_limit\">     Maksimum 1 zapros v 5 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_warehouse_remains_tasks_task_id_status_get(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: ID zadania na generaciu  (required)
        :return: GetTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_warehouse_remains_tasks_task_id_status_get_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_warehouse_remains_tasks_task_id_status_get_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def api_v1_warehouse_remains_tasks_task_id_status_get_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Proverit status  # noqa: E501

        Metod predostavlaet status [zadania na generaciu](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah/paths/~1api~1v1~1warehouse_remains/get) otheta ob [ostatkah na skladah WB](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah/paths/~1api~1v1~1warehouse_remains~1tasks~1%7Btask_id%7D~1download/get).  <div class=\"description_limit\">     Maksimum 1 zapros v 5 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_warehouse_remains_tasks_task_id_status_get_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: ID zadania na generaciu  (required)
        :return: GetTasksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_warehouse_remains_tasks_task_id_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `api_v1_warehouse_remains_tasks_task_id_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/warehouse_remains/tasks/{task_id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTasksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
