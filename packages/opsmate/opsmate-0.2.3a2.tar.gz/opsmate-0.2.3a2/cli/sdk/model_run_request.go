/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opsmatesdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunRequest{}

// RunRequest struct for RunRequest
type RunRequest struct {
	Model string `json:"model"`
	Instruction string `json:"instruction"`
	Context *string `json:"context,omitempty"`
	Ask *bool `json:"ask,omitempty"`
}

type _RunRequest RunRequest

// NewRunRequest instantiates a new RunRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunRequest(model string, instruction string) *RunRequest {
	this := RunRequest{}
	this.Model = model
	this.Instruction = instruction
	var context string = "cli"
	this.Context = &context
	var ask bool = false
	this.Ask = &ask
	return &this
}

// NewRunRequestWithDefaults instantiates a new RunRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunRequestWithDefaults() *RunRequest {
	this := RunRequest{}
	var context string = "cli"
	this.Context = &context
	var ask bool = false
	this.Ask = &ask
	return &this
}

// GetModel returns the Model field value
func (o *RunRequest) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *RunRequest) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *RunRequest) SetModel(v string) {
	o.Model = v
}

// GetInstruction returns the Instruction field value
func (o *RunRequest) GetInstruction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Instruction
}

// GetInstructionOk returns a tuple with the Instruction field value
// and a boolean to check if the value has been set.
func (o *RunRequest) GetInstructionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instruction, true
}

// SetInstruction sets field value
func (o *RunRequest) SetInstruction(v string) {
	o.Instruction = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *RunRequest) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunRequest) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *RunRequest) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *RunRequest) SetContext(v string) {
	o.Context = &v
}

// GetAsk returns the Ask field value if set, zero value otherwise.
func (o *RunRequest) GetAsk() bool {
	if o == nil || IsNil(o.Ask) {
		var ret bool
		return ret
	}
	return *o.Ask
}

// GetAskOk returns a tuple with the Ask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunRequest) GetAskOk() (*bool, bool) {
	if o == nil || IsNil(o.Ask) {
		return nil, false
	}
	return o.Ask, true
}

// HasAsk returns a boolean if a field has been set.
func (o *RunRequest) HasAsk() bool {
	if o != nil && !IsNil(o.Ask) {
		return true
	}

	return false
}

// SetAsk gets a reference to the given bool and assigns it to the Ask field.
func (o *RunRequest) SetAsk(v bool) {
	o.Ask = &v
}

func (o RunRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["model"] = o.Model
	toSerialize["instruction"] = o.Instruction
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Ask) {
		toSerialize["ask"] = o.Ask
	}
	return toSerialize, nil
}

func (o *RunRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"model",
		"instruction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunRequest := _RunRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunRequest)

	if err != nil {
		return err
	}

	*o = RunRequest(varRunRequest)

	return err
}

type NullableRunRequest struct {
	value *RunRequest
	isSet bool
}

func (v NullableRunRequest) Get() *RunRequest {
	return v.value
}

func (v *NullableRunRequest) Set(val *RunRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRunRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRunRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunRequest(val *RunRequest) *NullableRunRequest {
	return &NullableRunRequest{value: val, isSet: true}
}

func (v NullableRunRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


