# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from empire_platform_api_public_client_legacy.models.bidding_configuration import BiddingConfiguration  # noqa: E501

class TestBiddingConfiguration(unittest.TestCase):
    """BiddingConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BiddingConfiguration:
        """Test BiddingConfiguration
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BiddingConfiguration`
        """
        model = BiddingConfiguration()  # noqa: E501
        if include_optional:
            return BiddingConfiguration(
                values = [
                    empire_platform_api_public_client_legacy.models.bidding_configuration_values.BiddingConfiguration_values(
                        direction = 'GB_NL', 
                        configuration = empire_platform_api_public_client_legacy.models.bidding_configuration_timescale_options.BiddingConfigurationTimescaleOptions(
                            long_term = empire_platform_api_public_client_legacy.models.bidding_configuration_per_direction.BiddingConfigurationPerDirection(
                                maximum_bid_capacity = 56, 
                                warning_bid_price = 1.337, 
                                maximum_bid_price = 1.337, ), 
                            day_ahead = empire_platform_api_public_client_legacy.models.bidding_configuration_per_direction.BiddingConfigurationPerDirection(), 
                            intra_day = , ), )
                    ],
                secondary_market_notices = empire_platform_api_public_client_legacy.models.bidding_configuration_secondary_market_notices.BiddingConfiguration_secondaryMarketNotices(
                    long_term = True, 
                    day_ahead = True, 
                    intra_day = True, )
            )
        else:
            return BiddingConfiguration(
                values = [
                    empire_platform_api_public_client_legacy.models.bidding_configuration_values.BiddingConfiguration_values(
                        direction = 'GB_NL', 
                        configuration = empire_platform_api_public_client_legacy.models.bidding_configuration_timescale_options.BiddingConfigurationTimescaleOptions(
                            long_term = empire_platform_api_public_client_legacy.models.bidding_configuration_per_direction.BiddingConfigurationPerDirection(
                                maximum_bid_capacity = 56, 
                                warning_bid_price = 1.337, 
                                maximum_bid_price = 1.337, ), 
                            day_ahead = empire_platform_api_public_client_legacy.models.bidding_configuration_per_direction.BiddingConfigurationPerDirection(), 
                            intra_day = , ), )
                    ],
                secondary_market_notices = empire_platform_api_public_client_legacy.models.bidding_configuration_secondary_market_notices.BiddingConfiguration_secondaryMarketNotices(
                    long_term = True, 
                    day_ahead = True, 
                    intra_day = True, ),
        )
        """

    def testBiddingConfiguration(self):
        """Test BiddingConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
