/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opsmatesdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunResponse{}

// RunResponse struct for RunResponse
type RunResponse struct {
	ToolOutputs string `json:"tool_outputs"`
	Observation string `json:"observation"`
}

type _RunResponse RunResponse

// NewRunResponse instantiates a new RunResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunResponse(toolOutputs string, observation string) *RunResponse {
	this := RunResponse{}
	this.ToolOutputs = toolOutputs
	this.Observation = observation
	return &this
}

// NewRunResponseWithDefaults instantiates a new RunResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunResponseWithDefaults() *RunResponse {
	this := RunResponse{}
	return &this
}

// GetToolOutputs returns the ToolOutputs field value
func (o *RunResponse) GetToolOutputs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToolOutputs
}

// GetToolOutputsOk returns a tuple with the ToolOutputs field value
// and a boolean to check if the value has been set.
func (o *RunResponse) GetToolOutputsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolOutputs, true
}

// SetToolOutputs sets field value
func (o *RunResponse) SetToolOutputs(v string) {
	o.ToolOutputs = v
}

// GetObservation returns the Observation field value
func (o *RunResponse) GetObservation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Observation
}

// GetObservationOk returns a tuple with the Observation field value
// and a boolean to check if the value has been set.
func (o *RunResponse) GetObservationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Observation, true
}

// SetObservation sets field value
func (o *RunResponse) SetObservation(v string) {
	o.Observation = v
}

func (o RunResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tool_outputs"] = o.ToolOutputs
	toSerialize["observation"] = o.Observation
	return toSerialize, nil
}

func (o *RunResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tool_outputs",
		"observation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunResponse := _RunResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunResponse)

	if err != nil {
		return err
	}

	*o = RunResponse(varRunResponse)

	return err
}

type NullableRunResponse struct {
	value *RunResponse
	isSet bool
}

func (v NullableRunResponse) Get() *RunResponse {
	return v.value
}

func (v *NullableRunResponse) Set(val *RunResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRunResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRunResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunResponse(val *RunResponse) *NullableRunResponse {
	return &NullableRunResponse{value: val, isSet: true}
}

func (v NullableRunResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


