# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from empire_platform_api_public_client_legacy.models.border_direction import BorderDirection
from empire_platform_api_public_client_legacy.models.ntc_overview_mtu_data import NtcOverviewMtuData

class ParticipantDashboardInterconnectorCapacityDataMtusValues(BaseModel):
    """
    ParticipantDashboardInterconnectorCapacityDataMtusValues
    """
    direction: BorderDirection = Field(...)
    data: NtcOverviewMtuData = Field(...)
    __properties = ["direction", "data"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ParticipantDashboardInterconnectorCapacityDataMtusValues:
        """Create an instance of ParticipantDashboardInterconnectorCapacityDataMtusValues from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ParticipantDashboardInterconnectorCapacityDataMtusValues:
        """Create an instance of ParticipantDashboardInterconnectorCapacityDataMtusValues from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ParticipantDashboardInterconnectorCapacityDataMtusValues.parse_obj(obj)

        _obj = ParticipantDashboardInterconnectorCapacityDataMtusValues.parse_obj({
            "direction": obj.get("direction"),
            "data": NtcOverviewMtuData.from_dict(obj.get("data")) if obj.get("data") is not None else None
        })
        return _obj


