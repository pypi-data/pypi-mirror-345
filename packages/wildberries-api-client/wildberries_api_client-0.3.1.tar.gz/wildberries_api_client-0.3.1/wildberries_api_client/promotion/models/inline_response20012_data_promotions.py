# coding: utf-8

"""
    Marketing i prodvihenie

    <div class=\"description_important\">       Uznat bolhe o marketinge i prodvihenii mohno v <a href=\"https://seller.wildberries.ru/instructions/category/59d92bd3-6ea0-40f2-b762-ca8835d7d42e?goBackOption=prevRoute&categoryId=479385c6-de01-4b4d-ad4e-ed941e65582e\">spravohnom centre</a> </div>    Metody marketinga i prodvihenia pozvolaut:   1. Poluhat informaciu o [reklamnyh kampaniah](/openapi/promotion#tag/Kampanii) i [mediakampaniah](/openapi/promotion#tag/Media).   2. [Sozdavat](/openapi/promotion#tag/Sozdanie-kampanij) i [upravlat](/openapi/promotion#tag/Upravlenie-kampaniyami) kampaniami.   3. Nastraivat [parametry kampanii](/openapi/promotion#tag/Parametry-kampanij) — klastery fraz, prodvigaemye tovary i tak dalee.   4. Upravlat [finansami kampanii](/openapi/promotion#tag/Finansy).   5. Rabotat s [kalendarem akcii](/openapi/promotion#tag/Kalendar-akcij).  Dannye sinhroniziruutsa s bazoi raz v 3 minuty. Statusy kampanii menautsa raz v minutu. Stavki kampanii menautsa raz v 30 sekund.   # noqa: E501

    OpenAPI spec version: promotion
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20012DataPromotions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'start_date_time': 'str',
        'end_date_time': 'str',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'start_date_time': 'startDateTime',
        'end_date_time': 'endDateTime',
        'type': 'type'
    }

    def __init__(self, id=None, name=None, start_date_time=None, end_date_time=None, type=None):  # noqa: E501
        """InlineResponse20012DataPromotions - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._start_date_time = None
        self._end_date_time = None
        self._type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this InlineResponse20012DataPromotions.  # noqa: E501

        ID akcii  # noqa: E501

        :return: The id of this InlineResponse20012DataPromotions.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20012DataPromotions.

        ID akcii  # noqa: E501

        :param id: The id of this InlineResponse20012DataPromotions.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20012DataPromotions.  # noqa: E501

        Nazvanie akcii  # noqa: E501

        :return: The name of this InlineResponse20012DataPromotions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20012DataPromotions.

        Nazvanie akcii  # noqa: E501

        :param name: The name of this InlineResponse20012DataPromotions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_date_time(self):
        """Gets the start_date_time of this InlineResponse20012DataPromotions.  # noqa: E501

        Nahalo akcii  # noqa: E501

        :return: The start_date_time of this InlineResponse20012DataPromotions.  # noqa: E501
        :rtype: str
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this InlineResponse20012DataPromotions.

        Nahalo akcii  # noqa: E501

        :param start_date_time: The start_date_time of this InlineResponse20012DataPromotions.  # noqa: E501
        :type: str
        """

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this InlineResponse20012DataPromotions.  # noqa: E501

        Konec akcii  # noqa: E501

        :return: The end_date_time of this InlineResponse20012DataPromotions.  # noqa: E501
        :rtype: str
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this InlineResponse20012DataPromotions.

        Konec akcii  # noqa: E501

        :param end_date_time: The end_date_time of this InlineResponse20012DataPromotions.  # noqa: E501
        :type: str
        """

        self._end_date_time = end_date_time

    @property
    def type(self):
        """Gets the type of this InlineResponse20012DataPromotions.  # noqa: E501

        Tip akcii:   - `regular` — akcia   - `auto` — avtoakcia   # noqa: E501

        :return: The type of this InlineResponse20012DataPromotions.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20012DataPromotions.

        Tip akcii:   - `regular` — akcia   - `auto` — avtoakcia   # noqa: E501

        :param type: The type of this InlineResponse20012DataPromotions.  # noqa: E501
        :type: str
        """
        allowed_values = ["regular", "auto"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20012DataPromotions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012DataPromotions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
