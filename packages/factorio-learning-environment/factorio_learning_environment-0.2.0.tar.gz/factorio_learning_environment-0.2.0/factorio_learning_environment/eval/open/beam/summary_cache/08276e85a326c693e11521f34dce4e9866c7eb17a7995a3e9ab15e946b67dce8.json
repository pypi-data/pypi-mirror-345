{"content": "\"\"\"\nI notice we're still having issues with distance. Let's try a different approach by breaking \nthis into very small segments and confirming our position at each step.\n\"\"\"\n\n# First get resources and craft\nmove_to(nearest(Resource.IronOre))\nharvest_resource(nearest(Resource.IronOre), quantity=100)\n\nmove_to(nearest(Resource.Coal))\nharvest_resource(nearest(Resource.Coal), quantity=50)\n\n# Smelt iron plates\nprint(\"Smelting iron plates...\")\nmove_to(furnace1.position)\ninsert_item(Prototype.IronOre, furnace1, quantity=50)\ninsert_item(Prototype.Coal, furnace1, quantity=10)\nsleep(15)\nextract_item(Prototype.IronPlate, furnace1.position, quantity=50)\n\n# Craft components\nprint(\"Crafting components...\")\ncraft_item(Prototype.IronGearWheel, quantity=5)\ncraft_item(Prototype.TransportBelt, quantity=40)  # More belts for safety\ncraft_item(Prototype.BurnerInserter, quantity=2)\n\n# Get positions and print them for debugging\ndrill_pos = drill.drop_position\nfurnace_pos = furnace1.position\nprint(f\"Drill position: {drill_pos}\")\nprint(f\"Furnace position: {furnace_pos}\")\n\ndef place_belt_segment(start_pos, direction, count):\n    \"\"\"Place a small segment of belts\"\"\"\n    current = start_pos\n    move_to(current)  # Ensure we're in range\n    print(f\"Placing belt segment from {current} going {direction}\")\n    \n    for i in range(count):\n        if direction == \"right\":\n            next_pos = Position(x=current.x + 1, y=current.y)\n            belt_direction = Direction.RIGHT\n        elif direction == \"down\":\n            next_pos = Position(x=current.x, y=current.y - 1)\n            belt_direction = Direction.DOWN\n        elif direction == \"left\":\n            next_pos = Position(x=current.x - 1, y=current.y)\n            belt_direction = Direction.LEFT\n            \n        belt = place_entity(\n            Prototype.TransportBelt,\n            position=next_pos,\n            direction=belt_direction\n        )\n        if not belt:\n            print(f\"Failed to place belt at {next_pos}\")\n            return current\n        current = next_pos\n        \n        # Move every few belts to stay in range\n        if i % 3 == 2:\n            move_to(current)\n            \n    return current\n\n# Start from drill\nprint(\"Moving to drill...\")\nmove_to(drill_pos)\n\n# Place first belt segment from drill\ncurrent_pos = drill_pos\nprint(\"Starting belt placement...\")\n\n# Go right first (in small segments)\nfor i in range(3):  # Break into 3 segments\n    current_pos = place_belt_segment(current_pos, \"right\", 5)\n    move_to(current_pos)  # Ensure we're in position for next segment\n\n# Go down (in small segments)\nfor i in range(2):  # Break into 2 segments\n    current_pos = place_belt_segment(current_pos, \"down\", 5)\n    move_to(current_pos)\n\n# Final approach to furnace\nmove_to(current_pos)\nfinal_pos = Position(x=furnace_pos.x - 1, y=furnace_pos.y)\nprint(f\"Placing final segment to {final_pos}\")\n\n# Place inserter near furnace\nprint(\"Placing inserter...\")\nmove_to(furnace_pos)\nfurnace_inserter = place_entity(\n    Prototype.BurnerInserter,\n    position=Position(x=furnace_pos.x - 1, y=furnace_pos.y),\n    direction=Direction.RIGHT\n)\nassert furnace_inserter, \"Failed to place furnace inserter\"\n\n# Fuel everything\nprint(\"Adding fuel to entities...\")\nmove_to(drill.position)\ninsert_item(Prototype.Coal, drill, quantity=5)\n\nmove_to(furnace_inserter.position", "summary_range": "[1-78]"}