"""
This type stub file was generated by pyright.
"""

import pyarrow as pa
import tantivy
from typing import List, Optional, Tuple
from .table import LanceTable

"""Full text search index using tantivy-py"""
def create_index(index_path: str, text_fields: List[str], ordering_fields: Optional[List[str]] = ..., tokenizer_name: str = ...) -> tantivy.Index:
    """
    Create a new Index (not populated)

    Parameters
    ----------
    index_path : str
        Path to the index directory
    text_fields : List[str]
        List of text fields to index
    ordering_fields: List[str]
        List of unsigned type fields to order by at search time
    tokenizer_name : str, default "default"
        The tokenizer to use

    Returns
    -------
    index : tantivy.Index
        The index object (not yet populated)
    """
    ...

def populate_index(index: tantivy.Index, table: LanceTable, fields: List[str], writer_heap_size: Optional[int] = ..., ordering_fields: Optional[List[str]] = ...) -> int:
    """
    Populate an index with data from a LanceTable

    Parameters
    ----------
    index : tantivy.Index
        The index object
    table : LanceTable
        The table to index
    fields : List[str]
        List of fields to index
    writer_heap_size : int
        The writer heap size in bytes, defaults to 1GB

    Returns
    -------
    int
        The number of rows indexed
    """
    ...

def resolve_path(schema, field_name: str) -> pa.Field:
    """
    Resolve a nested field path to a list of field names

    Parameters
    ----------
    field_name : str
        The field name to resolve

    Returns
    -------
    List[str]
        The resolved path
    """
    ...

def search_index(index: tantivy.Index, query: str, limit: int = ..., ordering_field=...) -> Tuple[Tuple[int], Tuple[float]]:
    """
    Search an index for a query

    Parameters
    ----------
    index : tantivy.Index
        The index object
    query : str
        The query string
    limit : int
        The maximum number of results to return

    Returns
    -------
    ids_and_score: list[tuple[int], tuple[float]]
        A tuple of two tuples, the first containing the document ids
        and the second containing the scores
    """
    ...

