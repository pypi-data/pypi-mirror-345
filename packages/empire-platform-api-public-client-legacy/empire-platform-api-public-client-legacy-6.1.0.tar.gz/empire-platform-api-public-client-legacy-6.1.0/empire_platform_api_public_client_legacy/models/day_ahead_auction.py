# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from empire_platform_api_public_client_legacy.models.auction_allocation_resolution import AuctionAllocationResolution
from empire_platform_api_public_client_legacy.models.auction_bidding_configuration import AuctionBiddingConfiguration
from empire_platform_api_public_client_legacy.models.auction_process_steps_absolute import AuctionProcessStepsAbsolute
from empire_platform_api_public_client_legacy.models.auction_product_type import AuctionProductType
from empire_platform_api_public_client_legacy.models.auction_status import AuctionStatus
from empire_platform_api_public_client_legacy.models.border_direction import BorderDirection
from empire_platform_api_public_client_legacy.models.day_ahead_or_intra_day_auction_mtu import DayAheadOrIntraDayAuctionMtu
from empire_platform_api_public_client_legacy.models.mtu_period import MtuPeriod
from empire_platform_api_public_client_legacy.models.mtu_size import MtuSize
from empire_platform_api_public_client_legacy.models.offered_capacity_setup import OfferedCapacitySetup

class DayAheadAuction(BaseModel):
    """
    DayAheadAuction
    """
    id: StrictStr = Field(default=..., description="Unique identifier for the record in UUID4 format")
    name: StrictStr = Field(default=..., description="Human readable name")
    display_id: StrictStr = Field(default=..., alias="displayId", description="Generated display identifier")
    product_type: AuctionProductType = Field(default=..., alias="productType")
    border_direction: BorderDirection = Field(default=..., alias="borderDirection")
    status: AuctionStatus = Field(...)
    processing: StrictBool = Field(...)
    delivery_period: MtuPeriod = Field(default=..., alias="deliveryPeriod")
    allocation_mtu_size: MtuSize = Field(default=..., alias="allocationMtuSize")
    allocation_resolution: AuctionAllocationResolution = Field(default=..., alias="allocationResolution")
    bidding_configuration: AuctionBiddingConfiguration = Field(default=..., alias="biddingConfiguration")
    process_steps: AuctionProcessStepsAbsolute = Field(default=..., alias="processSteps")
    offered_capacity_setup: OfferedCapacitySetup = Field(default=..., alias="offeredCapacitySetup")
    offered_capacity_manually_updated: StrictBool = Field(default=..., alias="offeredCapacityManuallyUpdated")
    mtus: Optional[conlist(DayAheadOrIntraDayAuctionMtu)] = None
    previous_auction_id: Optional[StrictStr] = Field(default=None, alias="previousAuctionId", description="Unique identifier for the record in UUID4 format")
    next_auction_id: Optional[StrictStr] = Field(default=None, alias="nextAuctionId", description="Unique identifier for the record in UUID4 format")
    __properties = ["id", "name", "displayId", "productType", "borderDirection", "status", "processing", "deliveryPeriod", "allocationMtuSize", "allocationResolution", "biddingConfiguration", "processSteps", "offeredCapacitySetup", "offeredCapacityManuallyUpdated", "mtus", "previousAuctionId", "nextAuctionId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DayAheadAuction:
        """Create an instance of DayAheadAuction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of delivery_period
        if self.delivery_period:
            _dict['deliveryPeriod'] = self.delivery_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bidding_configuration
        if self.bidding_configuration:
            _dict['biddingConfiguration'] = self.bidding_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of process_steps
        if self.process_steps:
            _dict['processSteps'] = self.process_steps.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mtus (list)
        _items = []
        if self.mtus:
            for _item in self.mtus:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mtus'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DayAheadAuction:
        """Create an instance of DayAheadAuction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DayAheadAuction.parse_obj(obj)

        _obj = DayAheadAuction.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "display_id": obj.get("displayId"),
            "product_type": obj.get("productType"),
            "border_direction": obj.get("borderDirection"),
            "status": obj.get("status"),
            "processing": obj.get("processing"),
            "delivery_period": MtuPeriod.from_dict(obj.get("deliveryPeriod")) if obj.get("deliveryPeriod") is not None else None,
            "allocation_mtu_size": obj.get("allocationMtuSize"),
            "allocation_resolution": obj.get("allocationResolution"),
            "bidding_configuration": AuctionBiddingConfiguration.from_dict(obj.get("biddingConfiguration")) if obj.get("biddingConfiguration") is not None else None,
            "process_steps": AuctionProcessStepsAbsolute.from_dict(obj.get("processSteps")) if obj.get("processSteps") is not None else None,
            "offered_capacity_setup": obj.get("offeredCapacitySetup"),
            "offered_capacity_manually_updated": obj.get("offeredCapacityManuallyUpdated"),
            "mtus": [DayAheadOrIntraDayAuctionMtu.from_dict(_item) for _item in obj.get("mtus")] if obj.get("mtus") is not None else None,
            "previous_auction_id": obj.get("previousAuctionId"),
            "next_auction_id": obj.get("nextAuctionId")
        })
        return _obj


