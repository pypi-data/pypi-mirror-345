
** Preamble :noexport:

#+BEGIN_SRC python :exports none :results none :tangle performance.py :cache yes :noweb no :session *Python-Org*
import tidypolars4sci as tp
from tidypolars4sci.data import mtcars
import matplotlib.pyplot as plt
import seaborn as sns
import polars as pl
import pandas as pd
import numpy as np
import time

pl.Config(
    tbl_formatting='UTF8_BORDERS_ONLY',
    tbl_cell_numeric_alignment='RIGHT',
    set_tbl_column_data_type_inline=False,
    set_tbl_hide_dtype_separator=True,
    set_tbl_rows=6,
    set_tbl_width_chars=250,
    thousands_separator=',',
    decimal_separator='.',
    float_precision=2,
    fmt_str_lengths=5,
    set_tbl_cols=12,
    set_trim_decimal_zeros=True,
)


def plot_compare(pan, pol, tid):
    fig, ax = plt.subplots(nrows=2, ncols=2, figsize=[10, 6], tight_layout=True)
    #
    ax[0][0].scatter (range(len(pol)), pan/pol, color='gray', alpha=.2)
    ax[0][0].hlines (y=(pan/pol).mean(), xmin=0, xmax=len(pol), color='black', linewidth=3)
    ax[0][0].text (y=(pan/pol).mean(), x=0, s=f"Average: {(pan/pol).mean():.2}", color='black', size=12, va='bottom', weight='bold')
    ax[0][0].set_ylabel('Ratio time elapsed:\nPandas/Polars')
    ax[0][0].set_xlabel('Iteration')
    
    ax[0][1].scatter (range(len(pol)), tid/pol, color='gray', alpha=.2)
    ax[0][1].hlines (y=(tid/pol).mean(), xmin=0, xmax=len(pol), color='black' ,linewidth=3)
    ax[0][1].text (y=(tid/pol).mean(), x=0, s=f"Average: {(tid/pol).mean():.2}", color='black', size=12, va='bottom', weight='bold')
    ax[0][1].set_ylabel('Ratio time elapsed:\nTidyPolars$^{4sci}$/Polars')
    ax[0][1].set_xlabel('Iteration')
    
    sns.histplot(pan/pol, kde=True, ax=ax[1][0], edgecolor='white', color='black')
    ax[1][0].set_xlabel('Time ratio (in seconds)\nPandas/Polars')
    sns.histplot(tid/pol, kde=True, ax=ax[1][1], edgecolor='white', color='gray')
    ax[1][1].set_xlabel('Time ratio (in seconds)\nTidyPolars$^{4sci}$/Polars')
    
    for i in range(2):
        ax[0][i].hlines(y=1, xmin=0, xmax=len(pol), color='red', linestyle='--')
        ax[0][i].set_ylim(np.min([(pan/pol).min(), (tid/pol).min()]),
                          np.max([(pan/pol).max(), (tid/pol).max()]))
        ax[1][i].set_xlim(np.min([(pan/pol).min(), (tid/pol).min()]),
                          np.max([(pan/pol).max(), (tid/pol).max()]))
    return ax



#+END_SRC

# functions
#+BEGIN_SRC python :exports none :results none :tangle performance.py :cache yes :noweb no :session *Python-Org*
def pivot_wide_with_pandas(df):
    start_time = time.time()
    col = 'name'

    tab=(df
         .filter(['name', "am"])
         .pivot_table(index=None, values=col, columns="am",
                      aggfunc=lambda col: "; ".join(sorted(col))
                      )
         )

    elapsed = time.time() - start_time
    return {'tab':tab, 'elapsed':elapsed}

def pivot_wide_with_polars(df):
    start_time = time.time()
    col = 'name'

    tab = (df
           .select([col, "am"])
           .with_columns(idx=0)
           .pivot(index='idx', on="am", values=col,
                  aggregate_function=pl.element().sort().str.concat("; ")
                  )
           )

    elapsed = time.time() - start_time
    return {'tab':tab, 'elapsed':elapsed}

def pivot_wide_with_tidypolars4sci(df):
    start_time = time.time()
    col = 'name'
    tab = (df
           .select(col, 'am')
           .pivot_wider(values_from=col, names_from='am',
                        values_fn=pl.element().sort().str.concat("; "))
           )
    elapsed = time.time() - start_time
    return {'tab':tab, 'elapsed':elapsed}

#+END_SRC


** Performance

Let us use the data set ~mtcars~ to create a table in wide format using ~pivot_wide~. Here are the variables

#+BEGIN_SRC python :exports both :results output code :tangle performance.py :cache yes :noweb no :session *Python-Org*
import tidypolars4sci as tp
from tidypolars4sci.data import mtcars

mtcars.glimpse()
#+END_SRC

#+RESULTS[7ce40d2bb4a40c21753b37861903360eb843f876]:
#+begin_src python
Columns matching pattern '.':
 Var Type     Uniq Miss (%) Head                                                       
name <object>   32    0 0% ['Mazda RX4' 'Mazda RX4 Wag' 'Datsun 710' 'Hornet 4 Drive'
...
 mpg <float64>  25    0 0% [21.  21.  22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16....
 cyl <int64>     3    0 0% [6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 ...
disp <float64>  27    0 0% [160.  160.  108.  258.  360.  225.  360.  146.7 140.8 167....
  hp <int64>    22    0 0% [110 110  93 110 175 105 245  62  95 123 123 180 180 180 20...
drat <float64>  22    0 0% [3.9  3.9  3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 3.92 3.0...
  wt <float64>  29    0 0% [2.62  2.875 2.32  3.215 3.44  3.46  3.57  3.19  3.15  3.44...
qsec <float64>  30    0 0% [16.46 17.02 18.61 19.44 17.02 20.22 15.84 20.   22.9  18.3...
  vs <int64>     2    0 0% [0 0 1 1 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 ...
  am <int64>     2    0 0% [1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 ...
gear <int64>     3    0 0% [4 4 4 3 3 3 3 4 4 4 4 3 3 3 3 3 3 4 4 4 3 3 3 3 3 4 5 5 5 ...
carb <int64>     6    0 0% [4 4 1 1 2 1 4 2 2 4 4 3 3 3 4 4 4 1 2 1 1 2 2 4 2 1 2 2 4 ...

[Rows: 32; Columns 12]
#+end_src

A simple pivot wide operation:

#+BEGIN_SRC python :exports both :results output code :tangle pivot-wide.py :cache yes :noweb no :session *Python-Org*
from tidypolars4sci.data import mtcars

tab = (mtcars
       .select('name', 'am')
       .pivot_wider(values_from='name', names_from='am')
       )
print(tab)
#+END_SRC

#+RESULTS[c48e65282ce631f5150f1ffce0a5999c193a1f80]:
#+begin_src python
shape: (1, 2)
┌─────────────────┐
│ 1        0      │
│ str      str    │
╞═════════════════╡
│ Mazda…   Horne… │
└─────────────────┘
#+end_src


Table below shows summary after 1,000 repetitions comparing the same operation in Pandas, Polars, and tidypolars4sci:

#+BEGIN_SRC python :exports results :results output code :tangle performance.py :cache yes :noweb no :session *Python-Org*

pivot_wide_with_pandas(mtcars.to_pandas())
pivot_wide_with_polars(mtcars.to_polars())
pivot_wide_with_tidypolars4sci(mtcars)
# 
pan, pol, tid = [],[],[]
for i in range(1_000):
    pan += [pivot_wide_with_pandas(mtcars.to_pandas())['elapsed']]
    pol += [pivot_wide_with_polars(mtcars.to_polars())['elapsed']]
    tid += [pivot_wide_with_tidypolars4sci(mtcars)['elapsed']]
pan = np.array(pan) 
pol = np.array(pol)
tid = np.array(tid)

df = tp.tibble({
    'Mpdule':['Pandas', "Polars", "TidyPolars4sci"],
    'Mean (sec)' :[pan.mean(), pol.mean(), tid.mean()],
    'SD (sec)' :[pan.std(), pol.std(), tid.std()],
    'Min (sec)' :[pan.min(), pol.min(), tid.min()],
    'Max (sec)' :[pan.max(), pol.max(), tid.max()],
    "How much slower than polars?":[f"{pan.mean()/pol.mean():.2}x",
                                    f"{pol.mean()/pol.mean():.2}x (baseline)",
                                    f"{tid.mean()/pol.mean():.2}x",
                                    ]
    })
df.arrange("Mean (sec)").print(digits=5)
                           
#+END_SRC

#+RESULTS[d27b915fa087fc5f3808506936b94a38740eca35]:
#+begin_src python
shape: (3, 6)
┌───────────────────────────────────────────────────────────────────────────────────────────────┐
│ Mpdule           Mean (sec)   SD (sec)   Min (sec)   Max (sec)   How much slower than polars? │
│ str                     f64        f64         f64         f64   str                          │
╞═══════════════════════════════════════════════════════════════════════════════════════════════╡
│ Polars              0.00042    0.00010     0.00026     0.00099   1.0x (baseline)              │
│ TidyPolars4sci      0.00079    0.00022     0.00049     0.00199   1.9x                         │
│ Pandas              0.00227    0.00065     0.00147     0.00544   5.4x                         │
└───────────────────────────────────────────────────────────────────────────────────────────────┘
#+end_src


Here is the summary of the performance:

#+BEGIN_SRC python :exports results :file "./tables-and-figures/fig-pivot-wide.png" :results output raw  :cache yes :noweb no :session "Python-Org" 
plot_compare(pan, pol, tid)
# # Save figures
fns = ["./tables-and-figures/" + f'fig-pivot-wide.png']
[plt.savefig(fn) for fn in fns]

print(
    # "#+begin_src org \n"# # # 
    # "#+ATTR_ORG: :width 200/250/300/400/500/600\n"
    # "#+ATTR_LATEX: :width 1\\textwidth :placement [ht!]\n"
    # "#+CAPTION: Comparing performance for pivot_wide()\n"
    # "#+Name: fig-pivot-wide\n"
    "[[./tables-and-figures/fig-pivot-wide.png]]\n"
    # "#+end_src\n"# # # 
)
#+END_SRC

#+RESULTS[70efdff32da9d6f56aaf0b6cb434b7c7e85e4ea8]:
[[./tables-and-figures/fig-pivot-wide.png]]


** Sintax comparison

#+BEGIN_EXPORT md
=== "tidypolars4sci"
    ```python
    tab = (df
           .select(col, 'am')
           .pivot_wider(values_from=col, names_from='am',
                        values_fn=tp.element().sort().str.concat("; "))
           )
    ``` 
=== "Pandas"
    ```python
    tab=(df
         .filter(['name', "am"])
         .pivot_table(index=None, values=col, columns="am",
                      aggfunc=lambda col: "; ".join(sorted(col))
                      )
         )
    ``` 
=== "Polars"
    ```python
    tab = (df
           .select([col, "am"])
           .with_columns(idx=0)
           .pivot(index='idx', on="am", values=col,
                  aggregate_function=pl.element().sort().str.concat("; ")
                  )
           )
    ``` 
#+END_EXPORT

