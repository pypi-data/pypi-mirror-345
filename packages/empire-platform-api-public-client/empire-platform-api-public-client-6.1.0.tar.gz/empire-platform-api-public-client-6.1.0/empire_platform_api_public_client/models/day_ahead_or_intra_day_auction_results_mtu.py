# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DayAheadOrIntraDayAuctionResultsMtu(BaseModel):
    """
    * `requestedCapacity` - Sum of ALL bids for the given MTU in kilowatts * `allocatedTrs` - The SUM AC for the given MTU for the Auction in kilowatts * `marginalPrice` - Calculated marginal price for the MTU (lowest successful or partially successful bid price) * `participantCount` - Number of Participants submitting bids for the given MTU * `successfulParticipantCount` - Number of Participants that have received AC for the given MTU * `bidCount` - Number of bids received for the given MTU 
    """ # noqa: E501
    mtu: datetime = Field(description="The first moment (inclusive) of an MTU period  - theoretically can be sent and received with any zone offset (until it marks the desired **absolute MTU start point** on the timeline) - in practice it is advised to transfer it in UTC timezone (with Z offset, \"Zulu time\") - ISO 8601 compliant string in `yyyy-mm-ddThh:mm:ss.SSSZ` format - only with `XX:00:00`, `XX:15:00`, `XX:30:00` and `XX:45:00` time parts are valid values (depending on MTU size) ")
    requested_capacity: StrictInt = Field(description="Capacity value in kilowatts (kW) - the required system precision allows for handling capacity values as integers", alias="requestedCapacity")
    allocated_trs: StrictInt = Field(description="Capacity value in kilowatts (kW) - the required system precision allows for handling capacity values as integers", alias="allocatedTrs")
    marginal_price: Union[Annotated[float, Field(multiple_of=0.01, strict=True)], Annotated[int, Field(strict=True)]] = Field(description="Currency value in Euros (â‚¬), accepted with a precision of maximum 2 decimal places", alias="marginalPrice")
    participant_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Natural numbers {0, 1, 2, 3, ...} used for counting elements", alias="participantCount")
    successful_participant_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Natural numbers {0, 1, 2, 3, ...} used for counting elements", alias="successfulParticipantCount")
    bid_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Natural numbers {0, 1, 2, 3, ...} used for counting elements", alias="bidCount")
    __properties: ClassVar[List[str]] = ["mtu", "requestedCapacity", "allocatedTrs", "marginalPrice", "participantCount", "successfulParticipantCount", "bidCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DayAheadOrIntraDayAuctionResultsMtu from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DayAheadOrIntraDayAuctionResultsMtu from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mtu": obj.get("mtu"),
            "requestedCapacity": obj.get("requestedCapacity"),
            "allocatedTrs": obj.get("allocatedTrs"),
            "marginalPrice": obj.get("marginalPrice"),
            "participantCount": obj.get("participantCount"),
            "successfulParticipantCount": obj.get("successfulParticipantCount"),
            "bidCount": obj.get("bidCount")
        })
        return _obj


