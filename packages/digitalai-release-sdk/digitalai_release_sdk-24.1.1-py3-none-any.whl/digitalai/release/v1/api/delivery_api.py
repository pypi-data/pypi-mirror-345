"""
    Digital.ai Release API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from digitalai.release.v1.api_client import ApiClient, Endpoint as _Endpoint
from digitalai.release.v1.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from digitalai.release.v1.model.complete_transition import CompleteTransition
from digitalai.release.v1.model.delivery import Delivery
from digitalai.release.v1.model.delivery_filters import DeliveryFilters
from digitalai.release.v1.model.delivery_flow_release_info import DeliveryFlowReleaseInfo
from digitalai.release.v1.model.delivery_timeline import DeliveryTimeline
from digitalai.release.v1.model.stage import Stage
from digitalai.release.v1.model.tracked_item import TrackedItem
from digitalai.release.v1.model.transition import Transition


class DeliveryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.complete_stage_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{stageId}/complete',
                'operation_id': 'complete_stage',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'stage_id',
                ],
                'required': [
                    'stage_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'stage_id',
                ]
            },
            root_map={
                'validations': {
                    ('stage_id',): {

                        'regex': {
                            'pattern': r'.*Stage[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'stage_id':
                        (str,),
                },
                'attribute_map': {
                    'stage_id': 'stageId',
                },
                'location_map': {
                    'stage_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.complete_tracked_item_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{stageId}/{itemId}/complete',
                'operation_id': 'complete_tracked_item',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_id',
                    'stage_id',
                ],
                'required': [
                    'item_id',
                    'stage_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'item_id',
                    'stage_id',
                ]
            },
            root_map={
                'validations': {
                    ('item_id',): {

                        'regex': {
                            'pattern': r'.*TrackedItem[^\/]*',  # noqa: E501
                        },
                    },
                    ('stage_id',): {

                        'regex': {
                            'pattern': r'.*Stage[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_id':
                        (str,),
                    'stage_id':
                        (str,),
                },
                'attribute_map': {
                    'item_id': 'itemId',
                    'stage_id': 'stageId',
                },
                'location_map': {
                    'item_id': 'path',
                    'stage_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.complete_transition_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{transitionId}/complete',
                'operation_id': 'complete_transition',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transition_id',
                    'complete_transition',
                ],
                'required': [
                    'transition_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'transition_id',
                ]
            },
            root_map={
                'validations': {
                    ('transition_id',): {

                        'regex': {
                            'pattern': r'.*Transition[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transition_id':
                        (str,),
                    'complete_transition':
                        (CompleteTransition,),
                },
                'attribute_map': {
                    'transition_id': 'transitionId',
                },
                'location_map': {
                    'transition_id': 'path',
                    'complete_transition': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_tracked_item_in_delivery_endpoint = _Endpoint(
            settings={
                'response_type': (TrackedItem,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{deliveryId}/tracked-items',
                'operation_id': 'create_tracked_item_in_delivery',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'delivery_id',
                    'tracked_item',
                ],
                'required': [
                    'delivery_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'delivery_id',
                ]
            },
            root_map={
                'validations': {
                    ('delivery_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delivery_id':
                        (str,),
                    'tracked_item':
                        (TrackedItem,),
                },
                'attribute_map': {
                    'delivery_id': 'deliveryId',
                },
                'location_map': {
                    'delivery_id': 'path',
                    'tracked_item': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_delivery_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{deliveryId}',
                'operation_id': 'delete_delivery',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'delivery_id',
                ],
                'required': [
                    'delivery_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'delivery_id',
                ]
            },
            root_map={
                'validations': {
                    ('delivery_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delivery_id':
                        (str,),
                },
                'attribute_map': {
                    'delivery_id': 'deliveryId',
                },
                'location_map': {
                    'delivery_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_tracked_item_delivery_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{itemId}',
                'operation_id': 'delete_tracked_item_delivery',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_id',
                ],
                'required': [
                    'item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'item_id',
                ]
            },
            root_map={
                'validations': {
                    ('item_id',): {

                        'regex': {
                            'pattern': r'.*TrackedItem[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_id':
                        (str,),
                },
                'attribute_map': {
                    'item_id': 'itemId',
                },
                'location_map': {
                    'item_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.descope_tracked_item_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{itemId}/descope',
                'operation_id': 'descope_tracked_item',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_id',
                ],
                'required': [
                    'item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'item_id',
                ]
            },
            root_map={
                'validations': {
                    ('item_id',): {

                        'regex': {
                            'pattern': r'.*TrackedItem[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_id':
                        (str,),
                },
                'attribute_map': {
                    'item_id': 'itemId',
                },
                'location_map': {
                    'item_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_delivery_endpoint = _Endpoint(
            settings={
                'response_type': (Delivery,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{deliveryId}',
                'operation_id': 'get_delivery',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'delivery_id',
                ],
                'required': [
                    'delivery_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'delivery_id',
                ]
            },
            root_map={
                'validations': {
                    ('delivery_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delivery_id':
                        (str,),
                },
                'attribute_map': {
                    'delivery_id': 'deliveryId',
                },
                'location_map': {
                    'delivery_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_delivery_timeline_endpoint = _Endpoint(
            settings={
                'response_type': (DeliveryTimeline,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{deliveryId}/timeline',
                'operation_id': 'get_delivery_timeline',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'delivery_id',
                ],
                'required': [
                    'delivery_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'delivery_id',
                ]
            },
            root_map={
                'validations': {
                    ('delivery_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delivery_id':
                        (str,),
                },
                'attribute_map': {
                    'delivery_id': 'deliveryId',
                },
                'location_map': {
                    'delivery_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_releases_for_delivery_endpoint = _Endpoint(
            settings={
                'response_type': ([DeliveryFlowReleaseInfo],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{deliveryId}/releases',
                'operation_id': 'get_releases_for_delivery',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'delivery_id',
                ],
                'required': [
                    'delivery_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'delivery_id',
                ]
            },
            root_map={
                'validations': {
                    ('delivery_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delivery_id':
                        (str,),
                },
                'attribute_map': {
                    'delivery_id': 'deliveryId',
                },
                'location_map': {
                    'delivery_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_stages_in_delivery_endpoint = _Endpoint(
            settings={
                'response_type': ([Stage],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{deliveryId}/stages',
                'operation_id': 'get_stages_in_delivery',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'delivery_id',
                ],
                'required': [
                    'delivery_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'delivery_id',
                ]
            },
            root_map={
                'validations': {
                    ('delivery_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delivery_id':
                        (str,),
                },
                'attribute_map': {
                    'delivery_id': 'deliveryId',
                },
                'location_map': {
                    'delivery_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_tracked_itemsin_delivery_endpoint = _Endpoint(
            settings={
                'response_type': ([TrackedItem],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{deliveryId}/tracked-items',
                'operation_id': 'get_tracked_itemsin_delivery',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'delivery_id',
                ],
                'required': [
                    'delivery_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'delivery_id',
                ]
            },
            root_map={
                'validations': {
                    ('delivery_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delivery_id':
                        (str,),
                },
                'attribute_map': {
                    'delivery_id': 'deliveryId',
                },
                'location_map': {
                    'delivery_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.reopen_stage_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{stageId}/reopen',
                'operation_id': 'reopen_stage',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'stage_id',
                ],
                'required': [
                    'stage_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'stage_id',
                ]
            },
            root_map={
                'validations': {
                    ('stage_id',): {

                        'regex': {
                            'pattern': r'.*Stage[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'stage_id':
                        (str,),
                },
                'attribute_map': {
                    'stage_id': 'stageId',
                },
                'location_map': {
                    'stage_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.rescope_tracked_item_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{itemId}/rescope',
                'operation_id': 'rescope_tracked_item',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_id',
                ],
                'required': [
                    'item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'item_id',
                ]
            },
            root_map={
                'validations': {
                    ('item_id',): {

                        'regex': {
                            'pattern': r'.*TrackedItem[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_id':
                        (str,),
                },
                'attribute_map': {
                    'item_id': 'itemId',
                },
                'location_map': {
                    'item_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.reset_tracked_item_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{stageId}/{itemId}/reset',
                'operation_id': 'reset_tracked_item',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_id',
                    'stage_id',
                ],
                'required': [
                    'item_id',
                    'stage_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'item_id',
                    'stage_id',
                ]
            },
            root_map={
                'validations': {
                    ('item_id',): {

                        'regex': {
                            'pattern': r'.*TrackedItem[^\/]*',  # noqa: E501
                        },
                    },
                    ('stage_id',): {

                        'regex': {
                            'pattern': r'.*Stage[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_id':
                        (str,),
                    'stage_id':
                        (str,),
                },
                'attribute_map': {
                    'item_id': 'itemId',
                    'stage_id': 'stageId',
                },
                'location_map': {
                    'item_id': 'path',
                    'stage_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_deliveries_endpoint = _Endpoint(
            settings={
                'response_type': ([Delivery],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/search',
                'operation_id': 'search_deliveries',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'order_by',
                    'page',
                    'results_per_page',
                    'delivery_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order_by':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'page':
                        (int,),
                    'results_per_page':
                        (int,),
                    'delivery_filters':
                        (DeliveryFilters,),
                },
                'attribute_map': {
                    'order_by': 'orderBy',
                    'page': 'page',
                    'results_per_page': 'resultsPerPage',
                },
                'location_map': {
                    'order_by': 'query',
                    'page': 'query',
                    'results_per_page': 'query',
                    'delivery_filters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.skip_tracked_item_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{stageId}/{itemId}/skip',
                'operation_id': 'skip_tracked_item',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_id',
                    'stage_id',
                ],
                'required': [
                    'item_id',
                    'stage_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'item_id',
                    'stage_id',
                ]
            },
            root_map={
                'validations': {
                    ('item_id',): {

                        'regex': {
                            'pattern': r'.*TrackedItem[^\/]*',  # noqa: E501
                        },
                    },
                    ('stage_id',): {

                        'regex': {
                            'pattern': r'.*Stage[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_id':
                        (str,),
                    'stage_id':
                        (str,),
                },
                'attribute_map': {
                    'item_id': 'itemId',
                    'stage_id': 'stageId',
                },
                'location_map': {
                    'item_id': 'path',
                    'stage_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_delivery_endpoint = _Endpoint(
            settings={
                'response_type': (Delivery,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{deliveryId}',
                'operation_id': 'update_delivery',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'delivery_id',
                    'delivery',
                ],
                'required': [
                    'delivery_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'delivery_id',
                ]
            },
            root_map={
                'validations': {
                    ('delivery_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delivery_id':
                        (str,),
                    'delivery':
                        (Delivery,),
                },
                'attribute_map': {
                    'delivery_id': 'deliveryId',
                },
                'location_map': {
                    'delivery_id': 'path',
                    'delivery': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_stage_in_delivery_endpoint = _Endpoint(
            settings={
                'response_type': (Stage,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{stageId}',
                'operation_id': 'update_stage_in_delivery',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'stage_id',
                    'stage',
                ],
                'required': [
                    'stage_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'stage_id',
                ]
            },
            root_map={
                'validations': {
                    ('stage_id',): {

                        'regex': {
                            'pattern': r'.*Stage[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'stage_id':
                        (str,),
                    'stage':
                        (Stage,),
                },
                'attribute_map': {
                    'stage_id': 'stageId',
                },
                'location_map': {
                    'stage_id': 'path',
                    'stage': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_tracked_item_in_delivery_endpoint = _Endpoint(
            settings={
                'response_type': (TrackedItem,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{itemId}',
                'operation_id': 'update_tracked_item_in_delivery',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_id',
                    'tracked_item',
                ],
                'required': [
                    'item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'item_id',
                ]
            },
            root_map={
                'validations': {
                    ('item_id',): {

                        'regex': {
                            'pattern': r'.*TrackedItem[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_id':
                        (str,),
                    'tracked_item':
                        (TrackedItem,),
                },
                'attribute_map': {
                    'item_id': 'itemId',
                },
                'location_map': {
                    'item_id': 'path',
                    'tracked_item': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_transition_in_delivery_endpoint = _Endpoint(
            settings={
                'response_type': (Transition,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/deliveries/{transitionId}',
                'operation_id': 'update_transition_in_delivery',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'transition_id',
                    'transition',
                ],
                'required': [
                    'transition_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'transition_id',
                ]
            },
            root_map={
                'validations': {
                    ('transition_id',): {

                        'regex': {
                            'pattern': r'.*Transition[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transition_id':
                        (str,),
                    'transition':
                        (Transition,),
                },
                'attribute_map': {
                    'transition_id': 'transitionId',
                },
                'location_map': {
                    'transition_id': 'path',
                    'transition': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def complete_stage(
        self,
        stage_id,
        **kwargs
    ):
        """complete_stage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.complete_stage(stage_id, async_req=True)
        >>> result = thread.get()

        Args:
            stage_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['stage_id'] = \
            stage_id
        return self.complete_stage_endpoint.call_with_http_info(**kwargs)

    def complete_tracked_item(
        self,
        item_id,
        stage_id,
        **kwargs
    ):
        """complete_tracked_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.complete_tracked_item(item_id, stage_id, async_req=True)
        >>> result = thread.get()

        Args:
            item_id (str):
            stage_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_id'] = \
            item_id
        kwargs['stage_id'] = \
            stage_id
        return self.complete_tracked_item_endpoint.call_with_http_info(**kwargs)

    def complete_transition(
        self,
        transition_id,
        **kwargs
    ):
        """complete_transition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.complete_transition(transition_id, async_req=True)
        >>> result = thread.get()

        Args:
            transition_id (str):

        Keyword Args:
            complete_transition (CompleteTransition): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transition_id'] = \
            transition_id
        return self.complete_transition_endpoint.call_with_http_info(**kwargs)

    def create_tracked_item_in_delivery(
        self,
        delivery_id,
        **kwargs
    ):
        """create_tracked_item_in_delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_tracked_item_in_delivery(delivery_id, async_req=True)
        >>> result = thread.get()

        Args:
            delivery_id (str):

        Keyword Args:
            tracked_item (TrackedItem): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TrackedItem
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['delivery_id'] = \
            delivery_id
        return self.create_tracked_item_in_delivery_endpoint.call_with_http_info(**kwargs)

    def delete_delivery(
        self,
        delivery_id,
        **kwargs
    ):
        """delete_delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_delivery(delivery_id, async_req=True)
        >>> result = thread.get()

        Args:
            delivery_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['delivery_id'] = \
            delivery_id
        return self.delete_delivery_endpoint.call_with_http_info(**kwargs)

    def delete_tracked_item_delivery(
        self,
        item_id,
        **kwargs
    ):
        """delete_tracked_item_delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_tracked_item_delivery(item_id, async_req=True)
        >>> result = thread.get()

        Args:
            item_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_id'] = \
            item_id
        return self.delete_tracked_item_delivery_endpoint.call_with_http_info(**kwargs)

    def descope_tracked_item(
        self,
        item_id,
        **kwargs
    ):
        """descope_tracked_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.descope_tracked_item(item_id, async_req=True)
        >>> result = thread.get()

        Args:
            item_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_id'] = \
            item_id
        return self.descope_tracked_item_endpoint.call_with_http_info(**kwargs)

    def get_delivery(
        self,
        delivery_id,
        **kwargs
    ):
        """get_delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_delivery(delivery_id, async_req=True)
        >>> result = thread.get()

        Args:
            delivery_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Delivery
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['delivery_id'] = \
            delivery_id
        return self.get_delivery_endpoint.call_with_http_info(**kwargs)

    def get_delivery_timeline(
        self,
        delivery_id,
        **kwargs
    ):
        """get_delivery_timeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_delivery_timeline(delivery_id, async_req=True)
        >>> result = thread.get()

        Args:
            delivery_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeliveryTimeline
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['delivery_id'] = \
            delivery_id
        return self.get_delivery_timeline_endpoint.call_with_http_info(**kwargs)

    def get_releases_for_delivery(
        self,
        delivery_id,
        **kwargs
    ):
        """get_releases_for_delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_releases_for_delivery(delivery_id, async_req=True)
        >>> result = thread.get()

        Args:
            delivery_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [DeliveryFlowReleaseInfo]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['delivery_id'] = \
            delivery_id
        return self.get_releases_for_delivery_endpoint.call_with_http_info(**kwargs)

    def get_stages_in_delivery(
        self,
        delivery_id,
        **kwargs
    ):
        """get_stages_in_delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_stages_in_delivery(delivery_id, async_req=True)
        >>> result = thread.get()

        Args:
            delivery_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Stage]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['delivery_id'] = \
            delivery_id
        return self.get_stages_in_delivery_endpoint.call_with_http_info(**kwargs)

    def get_tracked_itemsin_delivery(
        self,
        delivery_id,
        **kwargs
    ):
        """get_tracked_itemsin_delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tracked_itemsin_delivery(delivery_id, async_req=True)
        >>> result = thread.get()

        Args:
            delivery_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [TrackedItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['delivery_id'] = \
            delivery_id
        return self.get_tracked_itemsin_delivery_endpoint.call_with_http_info(**kwargs)

    def reopen_stage(
        self,
        stage_id,
        **kwargs
    ):
        """reopen_stage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reopen_stage(stage_id, async_req=True)
        >>> result = thread.get()

        Args:
            stage_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['stage_id'] = \
            stage_id
        return self.reopen_stage_endpoint.call_with_http_info(**kwargs)

    def rescope_tracked_item(
        self,
        item_id,
        **kwargs
    ):
        """rescope_tracked_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.rescope_tracked_item(item_id, async_req=True)
        >>> result = thread.get()

        Args:
            item_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_id'] = \
            item_id
        return self.rescope_tracked_item_endpoint.call_with_http_info(**kwargs)

    def reset_tracked_item(
        self,
        item_id,
        stage_id,
        **kwargs
    ):
        """reset_tracked_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reset_tracked_item(item_id, stage_id, async_req=True)
        >>> result = thread.get()

        Args:
            item_id (str):
            stage_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_id'] = \
            item_id
        kwargs['stage_id'] = \
            stage_id
        return self.reset_tracked_item_endpoint.call_with_http_info(**kwargs)

    def search_deliveries(
        self,
        **kwargs
    ):
        """search_deliveries  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_deliveries(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            order_by (bool, date, datetime, dict, float, int, list, str, none_type): [optional]
            page (int): [optional] if omitted the server will use the default value of 0
            results_per_page (int): [optional] if omitted the server will use the default value of 100
            delivery_filters (DeliveryFilters): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Delivery]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.search_deliveries_endpoint.call_with_http_info(**kwargs)

    def skip_tracked_item(
        self,
        item_id,
        stage_id,
        **kwargs
    ):
        """skip_tracked_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.skip_tracked_item(item_id, stage_id, async_req=True)
        >>> result = thread.get()

        Args:
            item_id (str):
            stage_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_id'] = \
            item_id
        kwargs['stage_id'] = \
            stage_id
        return self.skip_tracked_item_endpoint.call_with_http_info(**kwargs)

    def update_delivery(
        self,
        delivery_id,
        **kwargs
    ):
        """update_delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_delivery(delivery_id, async_req=True)
        >>> result = thread.get()

        Args:
            delivery_id (str):

        Keyword Args:
            delivery (Delivery): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Delivery
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['delivery_id'] = \
            delivery_id
        return self.update_delivery_endpoint.call_with_http_info(**kwargs)

    def update_stage_in_delivery(
        self,
        stage_id,
        **kwargs
    ):
        """update_stage_in_delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_stage_in_delivery(stage_id, async_req=True)
        >>> result = thread.get()

        Args:
            stage_id (str):

        Keyword Args:
            stage (Stage): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Stage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['stage_id'] = \
            stage_id
        return self.update_stage_in_delivery_endpoint.call_with_http_info(**kwargs)

    def update_tracked_item_in_delivery(
        self,
        item_id,
        **kwargs
    ):
        """update_tracked_item_in_delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_tracked_item_in_delivery(item_id, async_req=True)
        >>> result = thread.get()

        Args:
            item_id (str):

        Keyword Args:
            tracked_item (TrackedItem): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TrackedItem
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_id'] = \
            item_id
        return self.update_tracked_item_in_delivery_endpoint.call_with_http_info(**kwargs)

    def update_transition_in_delivery(
        self,
        transition_id,
        **kwargs
    ):
        """update_transition_in_delivery  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_transition_in_delivery(transition_id, async_req=True)
        >>> result = thread.get()

        Args:
            transition_id (str):

        Keyword Args:
            transition (Transition): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Transition
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transition_id'] = \
            transition_id
        return self.update_transition_in_delivery_endpoint.call_with_http_info(**kwargs)

