# coding: utf-8

"""
    Postavki FBW

    <div class=\"description_important\">       Uznat bolhe o postavkah FBW mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/5a8e1202-0865-45b7-acae-5d0afc7add56?goBackOption=prevRoute&categoryId=479385c6-de01-4b4d-ad4e-ed941e65582e\">spravohnom centre</a> </div>  Upravlenie informaciei dla formirovania postavok, skladskimi dannymi i statusami   # noqa: E501

    OpenAPI spec version: ordersfbw
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelsOptionsResultModelWarehouses(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'warehouse_id': 'int',
        'can_box': 'bool',
        'can_monopallet': 'bool',
        'can_supersafe': 'bool'
    }

    attribute_map = {
        'warehouse_id': 'warehouseID',
        'can_box': 'canBox',
        'can_monopallet': 'canMonopallet',
        'can_supersafe': 'canSupersafe'
    }

    def __init__(self, warehouse_id=None, can_box=None, can_monopallet=None, can_supersafe=None):  # noqa: E501
        """ModelsOptionsResultModelWarehouses - a model defined in Swagger"""  # noqa: E501
        self._warehouse_id = None
        self._can_box = None
        self._can_monopallet = None
        self._can_supersafe = None
        self.discriminator = None
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if can_box is not None:
            self.can_box = can_box
        if can_monopallet is not None:
            self.can_monopallet = can_monopallet
        if can_supersafe is not None:
            self.can_supersafe = can_supersafe

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ModelsOptionsResultModelWarehouses.  # noqa: E501

        ID sklada. Po nemu mohno poluhit [informaciu o sklade](./orders-fbw#tag/Postavki/paths/~1api~1v1~1warehouses/get)  # noqa: E501

        :return: The warehouse_id of this ModelsOptionsResultModelWarehouses.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ModelsOptionsResultModelWarehouses.

        ID sklada. Po nemu mohno poluhit [informaciu o sklade](./orders-fbw#tag/Postavki/paths/~1api~1v1~1warehouses/get)  # noqa: E501

        :param warehouse_id: The warehouse_id of this ModelsOptionsResultModelWarehouses.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    @property
    def can_box(self):
        """Gets the can_box of this ModelsOptionsResultModelWarehouses.  # noqa: E501

        Tip upakovki **Korob**:   - `true` — dostupen   - `false` — nedostupen   # noqa: E501

        :return: The can_box of this ModelsOptionsResultModelWarehouses.  # noqa: E501
        :rtype: bool
        """
        return self._can_box

    @can_box.setter
    def can_box(self, can_box):
        """Sets the can_box of this ModelsOptionsResultModelWarehouses.

        Tip upakovki **Korob**:   - `true` — dostupen   - `false` — nedostupen   # noqa: E501

        :param can_box: The can_box of this ModelsOptionsResultModelWarehouses.  # noqa: E501
        :type: bool
        """

        self._can_box = can_box

    @property
    def can_monopallet(self):
        """Gets the can_monopallet of this ModelsOptionsResultModelWarehouses.  # noqa: E501

        Tip upakovki **Monopalleta**:   - `true` — dostupen   - `false` — nedostupen   # noqa: E501

        :return: The can_monopallet of this ModelsOptionsResultModelWarehouses.  # noqa: E501
        :rtype: bool
        """
        return self._can_monopallet

    @can_monopallet.setter
    def can_monopallet(self, can_monopallet):
        """Sets the can_monopallet of this ModelsOptionsResultModelWarehouses.

        Tip upakovki **Monopalleta**:   - `true` — dostupen   - `false` — nedostupen   # noqa: E501

        :param can_monopallet: The can_monopallet of this ModelsOptionsResultModelWarehouses.  # noqa: E501
        :type: bool
        """

        self._can_monopallet = can_monopallet

    @property
    def can_supersafe(self):
        """Gets the can_supersafe of this ModelsOptionsResultModelWarehouses.  # noqa: E501

        Tip upakovki **Superseif**:   - `true` — dostupen   - `false` — nedostupen   # noqa: E501

        :return: The can_supersafe of this ModelsOptionsResultModelWarehouses.  # noqa: E501
        :rtype: bool
        """
        return self._can_supersafe

    @can_supersafe.setter
    def can_supersafe(self, can_supersafe):
        """Sets the can_supersafe of this ModelsOptionsResultModelWarehouses.

        Tip upakovki **Superseif**:   - `true` — dostupen   - `false` — nedostupen   # noqa: E501

        :param can_supersafe: The can_supersafe of this ModelsOptionsResultModelWarehouses.  # noqa: E501
        :type: bool
        """

        self._can_supersafe = can_supersafe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsOptionsResultModelWarehouses, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsOptionsResultModelWarehouses):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
