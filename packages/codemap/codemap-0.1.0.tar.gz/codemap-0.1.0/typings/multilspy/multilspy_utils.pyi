"""
This type stub file was generated by pyright.
"""

from typing import Tuple, Union
from enum import Enum
from multilspy.multilspy_logger import MultilspyLogger

"""
This file contains various utility functions like I/O operations, handling paths, etc.
"""
class TextUtils:
    """
    Utilities for text operations.
    """
    @staticmethod
    def get_line_col_from_index(text: str, index: int) -> Tuple[int, int]:
        """
        Returns the zero-indexed line and column number of the given index in the given text
        """
        ...
    
    @staticmethod
    def get_index_from_line_col(text: str, line: int, col: int) -> int:
        """
        Returns the index of the given zero-indexed line and column number in the given text
        """
        ...
    
    @staticmethod
    def get_updated_position_from_line_and_column_and_edit(l: int, c: int, text_to_be_inserted: str) -> Tuple[int, int]:
        """
        Utility function to get the position of the cursor after inserting text at a given line and column.
        """
        ...
    


class PathUtils:
    """
    Utilities for platform-agnostic path operations.
    """
    @staticmethod
    def uri_to_path(uri: str) -> str:
        """
        Converts a URI to a file path. Works on both Linux and Windows.

        This method was obtained from https://stackoverflow.com/a/61922504
        """
        ...
    
    @staticmethod
    def get_relative_path(path: str, base_path: str) -> Union[str, None]:
        """
        Gets relative path if it's possible (paths should be on the same drive),
        returns `None` otherwise.
        """
        ...
    


class FileUtils:
    """
    Utility functions for file operations.
    """
    @staticmethod
    def read_file(logger: MultilspyLogger, file_path: str) -> str:
        """
        Reads the file at the given path and returns the contents as a string.
        """
        ...
    
    @staticmethod
    def download_file(logger: MultilspyLogger, url: str, target_path: str) -> None:
        """
        Downloads the file from the given URL to the given {target_path}
        """
        ...
    
    @staticmethod
    def download_and_extract_archive(logger: MultilspyLogger, url: str, target_path: str, archive_type: str) -> None:
        """
        Downloads the archive from the given URL having format {archive_type} and extracts it to the given {target_path}
        """
        ...
    


class PlatformId(str, Enum):
    """
    multilspy supported platforms
    """
    WIN_x86 = ...
    WIN_x64 = ...
    WIN_arm64 = ...
    OSX = ...
    OSX_x64 = ...
    OSX_arm64 = ...
    LINUX_x86 = ...
    LINUX_x64 = ...
    LINUX_arm64 = ...
    LINUX_MUSL_x64 = ...
    LINUX_MUSL_arm64 = ...


class DotnetVersion(str, Enum):
    """
    multilspy supported dotnet versions
    """
    V4 = ...
    V6 = ...
    V7 = ...
    V8 = ...
    VMONO = ...


class PlatformUtils:
    """
    This class provides utilities for platform detection and identification.
    """
    @staticmethod
    def get_platform_id() -> PlatformId:
        """
        Returns the platform id for the current system
        """
        ...
    
    @staticmethod
    def get_dotnet_version() -> DotnetVersion:
        """
        Returns the dotnet version for the current system
        """
        ...
    


