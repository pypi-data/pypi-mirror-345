{% if is_lifecycle %}
#include <algorithm>
{% endif %}
{% if has_timer %}
#include <chrono>
{% endif %}
#include <functional>
{% if has_action_server %}
#include <thread>
{% endif %}

#include <{{ package_name }}/{{ node_name }}.hpp>
{% if is_component %}

#include <rclcpp_components/register_node_macro.hpp>
RCLCPP_COMPONENTS_REGISTER_NODE({{ package_name }}::{{ node_class_name }})
{% endif %}


namespace {{ package_name }} {


{% if is_lifecycle and is_component %}
{{ node_class_name }}::{{ node_class_name }}(const rclcpp::NodeOptions& options) : rclcpp_lifecycle::LifecycleNode("{{ node_name }}", options) {
{% elif is_lifecycle %}
{{ node_class_name }}::{{ node_class_name }}() : rclcpp_lifecycle::LifecycleNode("{{ node_name }}") {
{% elif is_component %}
{{ node_class_name }}::{{ node_class_name }}(const rclcpp::NodeOptions& options) : Node("{{ node_name }}", options) {
{% else %}
{{ node_class_name }}::{{ node_class_name }}() : Node("{{ node_name }}") {
{% endif %}

{% if is_lifecycle %}
  int startup_state = lifecycle_msgs::msg::State::PRIMARY_STATE_ACTIVE;
  this->declareAndLoadParameter("startup_state", startup_state, "Initial lifecycle state", false, false, false);
  if (startup_state > lifecycle_msgs::msg::State::PRIMARY_STATE_UNCONFIGURED)
    this->trigger_transition(lifecycle_msgs::msg::Transition::TRANSITION_CONFIGURE);
  if (startup_state > lifecycle_msgs::msg::State::PRIMARY_STATE_INACTIVE)
    this->trigger_transition(lifecycle_msgs::msg::Transition::TRANSITION_ACTIVATE);
{% else %}
{% if has_params %}
  this->declareAndLoadParameter("param", param_, "TODO", true, false, false, 0.0, 10.0, 1.0);
{% endif %}
  this->setup();
{% endif %}
}
{% if has_params or is_lifecycle %}


template <typename T>
void {{ node_class_name }}::declareAndLoadParameter(const std::string& name,
                                                         T& param,
                                                         const std::string& description,
                                                         const bool add_to_auto_reconfigurable_params,
                                                         const bool is_required,
                                                         const bool read_only,
                                                         const std::optional<double>& from_value,
                                                         const std::optional<double>& to_value,
                                                         const std::optional<double>& step_value,
                                                         const std::string& additional_constraints) {

  rcl_interfaces::msg::ParameterDescriptor param_desc;
  param_desc.description = description;
  param_desc.additional_constraints = additional_constraints;
  param_desc.read_only = read_only;

  auto type = rclcpp::ParameterValue(param).get_type();

  if (from_value.has_value() && to_value.has_value()) {
    if constexpr(std::is_integral_v<T>) {
      rcl_interfaces::msg::IntegerRange range;
      T step = static_cast<T>(step_value.has_value() ? step_value.value() : 1);
      range.set__from_value(static_cast<T>(from_value.value())).set__to_value(static_cast<T>(to_value.value())).set__step(step);
      param_desc.integer_range = {range};
    } else if constexpr(std::is_floating_point_v<T>) {
      rcl_interfaces::msg::FloatingPointRange range;
      T step = static_cast<T>(step_value.has_value() ? step_value.value() : 1.0);
      range.set__from_value(static_cast<T>(from_value.value())).set__to_value(static_cast<T>(to_value.value())).set__step(step);
      param_desc.floating_point_range = {range};
    } else {
      RCLCPP_WARN(this->get_logger(), "Parameter type of parameter '%s' does not support specifying a range", name.c_str());
    }
  }

  this->declare_parameter(name, type, param_desc);

  try {
    param = this->get_parameter(name).get_value<T>();
    std::stringstream ss;
    ss << "Loaded parameter '" << name << "': ";
    if constexpr(is_vector_v<T>) {
      ss << "[";
      for (const auto& element : param) ss << element << (&element != &param.back() ? ", " : "");
      ss << "]";
    } else {
      ss << param;
    }
    RCLCPP_INFO_STREAM(this->get_logger(), ss.str());
  } catch (rclcpp::exceptions::ParameterUninitializedException&) {
    if (is_required) {
      RCLCPP_FATAL_STREAM(this->get_logger(), "Missing required parameter '" << name << "', exiting");
      exit(EXIT_FAILURE);
    } else {
      std::stringstream ss;
      ss << "Missing parameter '" << name << "', using default value: ";
      if constexpr(is_vector_v<T>) {
        ss << "[";
        for (const auto& element : param) ss << element << (&element != &param.back() ? ", " : "");
        ss << "]";
      } else {
        ss << param;
      }
      RCLCPP_WARN_STREAM(this->get_logger(), ss.str());
      this->set_parameters({rclcpp::Parameter(name, rclcpp::ParameterValue(param))});
    }
  }

  if (add_to_auto_reconfigurable_params) {
    std::function<void(const rclcpp::Parameter&)> setter = [&param](const rclcpp::Parameter& p) {
      param = p.get_value<T>();
    };
    auto_reconfigurable_params_.push_back(std::make_tuple(name, setter));
  }
}
{% endif %}
{% if has_params %}


rcl_interfaces::msg::SetParametersResult {{ node_class_name }}::parametersCallback(const std::vector<rclcpp::Parameter>& parameters) {

  for (const auto& param : parameters) {
    for (auto& auto_reconfigurable_param : auto_reconfigurable_params_) {
      if (param.get_name() == std::get<0>(auto_reconfigurable_param)) {
        std::get<1>(auto_reconfigurable_param)(param);
        RCLCPP_INFO(this->get_logger(), "Reconfigured parameter '%s'", param.get_name().c_str());
        break;
      }
    }
  }

  rcl_interfaces::msg::SetParametersResult result;
  result.successful = true;

  return result;
}
{% endif %}


void {{ node_class_name }}::setup() {
{% if has_params %}

  // callback for dynamic parameter configuration
  parameters_callback_ = this->add_on_set_parameters_callback(std::bind(&{{ node_class_name }}::parametersCallback, this, std::placeholders::_1));
{% endif %}
{% if has_subscriber %}

  // subscriber for handling incoming messages
  subscriber_ = this->create_subscription<std_msgs::msg::Int32>("~/input", 10, std::bind(&{{ node_class_name }}::topicCallback, this, std::placeholders::_1));
  RCLCPP_INFO(this->get_logger(), "Subscribed to '%s'", subscriber_->get_topic_name());
{% endif %}
{% if has_publisher %}

  // publisher for publishing outgoing messages
  publisher_ = this->create_publisher<std_msgs::msg::Int32>("~/output", 10);
  RCLCPP_INFO(this->get_logger(), "Publishing to '%s'", publisher_->get_topic_name());
{% endif %}
{% if has_service_server %}

  // service server for handling service calls
  service_server_ = this->create_service<std_srvs::srv::SetBool>("~/service", std::bind(&{{ node_class_name }}::serviceCallback, this, std::placeholders::_1, std::placeholders::_2));
{% endif %}
{% if has_action_server %}

  // action server for handling action goal requests
  action_server_ = rclcpp_action::create_server<{{ package_name }}_interfaces::action::Fibonacci>(
    this,
    "~/action",
    std::bind(&{{ node_class_name }}::actionHandleGoal, this, std::placeholders::_1, std::placeholders::_2),
    std::bind(&{{ node_class_name }}::actionHandleCancel, this, std::placeholders::_1),
    std::bind(&{{ node_class_name }}::actionHandleAccepted, this, std::placeholders::_1)
  );
{% endif %}
{% if has_timer and not is_lifecycle %}

  // timer for repeatedly invoking a callback
  timer_ = this->create_wall_timer(std::chrono::duration<double>(1.0), std::bind(&{{ node_class_name }}::timerCallback, this));
{% endif %}
{% if auto_shutdown and not is_lifecycle %}

  auto_shutdown_timer_ = this->create_wall_timer(std::chrono::duration<double>(3.0), std::bind(&{{ node_class_name }}::autoShutdownTimerCallback, this));
{% endif %}
}
{% if has_subscriber %}


void {{ node_class_name }}::topicCallback(const std_msgs::msg::Int32::ConstSharedPtr& msg) {

  RCLCPP_INFO(this->get_logger(), "Message received: '%d'", msg->data);

  // publish message
{% if is_component %}
  std_msgs::msg::Int32::UniquePtr out_msg = std::make_unique<std_msgs::msg::Int32>();
  out_msg->data = msg->data;
  publisher_->publish(std::move(out_msg));
  RCLCPP_INFO(this->get_logger(), "Message published: '%d'", out_msg->data);
{% else %}
  std_msgs::msg::Int32 out_msg;
  out_msg.data = msg->data;
  publisher_->publish(out_msg);
  RCLCPP_INFO(this->get_logger(), "Message published: '%d'", out_msg.data);
{% endif %}
}
{% endif %}
{% if has_service_server %}


void {{ node_class_name }}::serviceCallback(const std_srvs::srv::SetBool::Request::SharedPtr request, std_srvs::srv::SetBool::Response::SharedPtr response) {

  (void)request;

  RCLCPP_INFO(this->get_logger(), "Received service request");

  response->success = true;
}
{% endif %}
{% if has_action_server %}


rclcpp_action::GoalResponse {{ node_class_name }}::actionHandleGoal(const rclcpp_action::GoalUUID& uuid, {{ package_name }}_interfaces::action::Fibonacci::Goal::ConstSharedPtr goal) {

  (void)uuid;
  (void)goal;

  RCLCPP_INFO(this->get_logger(), "Received action goal request");

  return rclcpp_action::GoalResponse::ACCEPT_AND_EXECUTE;
}


rclcpp_action::CancelResponse {{ node_class_name }}::actionHandleCancel(const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ package_name }}_interfaces::action::Fibonacci>> goal_handle) {

  (void)goal_handle;

  RCLCPP_INFO(this->get_logger(), "Received request to cancel action goal");

  return rclcpp_action::CancelResponse::ACCEPT;
}


void {{ node_class_name }}::actionHandleAccepted(const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ package_name }}_interfaces::action::Fibonacci>> goal_handle) {

  // execute action in a separate thread to avoid blocking
  std::thread{std::bind(&{{ node_class_name }}::actionExecute, this, std::placeholders::_1), goal_handle}.detach();
}


void {{ node_class_name }}::actionExecute(const std::shared_ptr<rclcpp_action::ServerGoalHandle<{{ package_name }}_interfaces::action::Fibonacci>> goal_handle) {

  RCLCPP_INFO(this->get_logger(), "Executing action goal");

  // define a sleeping rate between computing individual Fibonacci numbers
  rclcpp::Rate loop_rate(1);

  // create handy accessors for the action goal, feedback, and result
  const auto goal = goal_handle->get_goal();
  auto feedback = std::make_shared<{{ package_name }}_interfaces::action::Fibonacci::Feedback>();
  auto result = std::make_shared<{{ package_name }}_interfaces::action::Fibonacci::Result>();

  // initialize the Fibonacci sequence
  auto& partial_sequence = feedback->partial_sequence;
  partial_sequence.push_back(0);
  partial_sequence.push_back(1);

  // compute the Fibonacci sequence up to the requested order n
  for (int i = 1; i < goal->order && rclcpp::ok(); ++i) {

    // cancel, if requested
    if (goal_handle->is_canceling()) {
      result->sequence = feedback->partial_sequence;
      goal_handle->canceled(result);
      RCLCPP_INFO(this->get_logger(), "Action goal canceled");
      return;
    }

    // compute the next Fibonacci number
    partial_sequence.push_back(partial_sequence[i] + partial_sequence[i - 1]);

    // publish the current sequence as action feedback
    goal_handle->publish_feedback(feedback);
    RCLCPP_INFO(this->get_logger(), "Publishing action feedback");

    // sleep before computing the next Fibonacci number
    loop_rate.sleep();
  }

  // finish by publishing the action result
  if (rclcpp::ok()) {
    result->sequence = partial_sequence;
    goal_handle->succeed(result);
    RCLCPP_INFO(this->get_logger(), "Goal succeeded");
  }
}
{% endif %}
{% if has_timer %}


void {{ node_class_name }}::timerCallback() {

  RCLCPP_INFO(this->get_logger(), "Timer triggered");
}
{% endif %}
{% if auto_shutdown %}


void {{ node_class_name }}::autoShutdownTimerCallback() {

  RCLCPP_INFO(this->get_logger(), "Shutting down");
  rclcpp::shutdown();
}
{% endif %}
{% if is_lifecycle %}


rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn {{ node_class_name }}::on_configure(const rclcpp_lifecycle::State& state) {

  RCLCPP_INFO(get_logger(), "Configuring to enter 'inactive' state from '%s' state", state.label().c_str());

{% if has_params %}
  this->declareAndLoadParameter("param", param_, "TODO", true, false, false, 0.0, 10.0, 1.0);
{% endif %}
  setup();

  return rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn::SUCCESS;
}


rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn {{ node_class_name }}::on_activate(const rclcpp_lifecycle::State& state) {

  RCLCPP_INFO(get_logger(), "Activating to enter 'active' state from '%s' state", state.label().c_str());

{% if has_publisher %}
  publisher_->on_activate();
{% endif %}
{% if has_timer %}
  timer_ = this->create_wall_timer(std::chrono::duration<double>(param_), std::bind(&{{ node_class_name }}::timerCallback, this));
{% endif %}
{% if auto_shutdown %}

  auto_shutdown_timer_ = this->create_wall_timer(std::chrono::duration<double>(3.0), std::bind(&{{ node_class_name }}::autoShutdownTimerCallback, this));
{% endif %}

  return rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn::SUCCESS;
}


rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn {{ node_class_name }}::on_deactivate(const rclcpp_lifecycle::State& state) {

  RCLCPP_INFO(get_logger(), "Deactivating to enter 'inactive' state from '%s' state", state.label().c_str());

{% if has_timer %}
  timer_.reset();
{% endif %}
{% if has_publisher %}
  publisher_->on_deactivate();
{% endif %}

  return rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn::SUCCESS;
}


rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn {{ node_class_name }}::on_cleanup(const rclcpp_lifecycle::State& state) {

  RCLCPP_INFO(get_logger(), "Cleaning up to enter 'unconfigured' state from '%s' state", state.label().c_str());

{% if has_subscriber %}
  subscriber_.reset();
{% endif %}
{% if has_publisher %}
  publisher_.reset();
{% endif %}
{% if has_service_server %}
  service_server_.reset();
{% endif %}
{% if has_action_server %}
  action_server_.reset();
{% endif %}
{% if has_params %}
  parameters_callback_.reset();
{% endif %}
{% if has_timer %}
  timer_.reset();
{% endif %}

  return rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn::SUCCESS;
}


rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn {{ node_class_name }}::on_shutdown(const rclcpp_lifecycle::State& state) {

  RCLCPP_INFO(get_logger(), "Shutting down to enter 'finalized' state from '%s' state", state.label().c_str());

  if (state.id() >= lifecycle_msgs::msg::State::PRIMARY_STATE_ACTIVE)
    on_deactivate(state);
  if (state.id() >= lifecycle_msgs::msg::State::PRIMARY_STATE_INACTIVE)
    on_cleanup(state);

  return rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn::SUCCESS;
}
{% endif %}


}
{% if not is_component %}


int main(int argc, char *argv[]) {

  rclcpp::init(argc, argv);
{% if is_lifecycle %}
  rclcpp::spin(std::make_shared<{{ package_name }}::{{ node_class_name }}>()->get_node_base_interface());
{% else %}
  rclcpp::spin(std::make_shared<{{ package_name }}::{{ node_class_name }}>());
{% endif %}
  rclcpp::shutdown();

  return 0;
}
{% endif %}
