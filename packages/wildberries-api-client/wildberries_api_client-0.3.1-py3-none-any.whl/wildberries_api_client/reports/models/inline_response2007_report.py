# coding: utf-8

"""
    Othety

    <div class=\"description_important\">     Uznat bolhe ob othetah mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/5f2162c5-069b-416d-a4e1-48da2a76e6b0\">spravohnom centre</a> </div>  S pomohu etih metodov vy mohete poluhit [osnovnye othety](/openapi/reports#tag/Osnovnye-otchyoty) i othety o:   1. [Ostatkah na skladah](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah)   2. [Tovarah s obazatelnoi markirovkoi](/openapi/reports#tag/Otchyot-o-tovarah-c-obyazatelnoj-markirovkoj)   3. [Uderhaniah](/openapi/reports#tag/Otchyoty-ob-uderzhaniyah)   4. [Platnoi priemke](/openapi/reports#tag/Platnaya-priyomka)   5. [Platnom hranenii](/openapi/reports#tag/Platnoe-hranenie)   6. [Prodahah po regionam](/openapi/reports#tag/Prodazhi-po-regionam)   7. [Dole brenda v prodahah](/openapi/reports#tag/Dolya-brenda-v-prodazhah)   8. [Skrytyh tovarah](/openapi/reports#tag/Skrytye-tovary)   9. [Vozvratah i peremehenii tovarov](/openapi/reports#tag/Otchyot-o-vozvratah-i-peremeshenii-tovarov)   10. [Dinamike oborahivaemosti](/openapi/reports#tag/Dinamika-oborachivaemosti)   # noqa: E501

    OpenAPI spec version: reports
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2007Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'gi_create_date': 'date',
        'income_id': 'int',
        'nm_id': 'int',
        'shk_sreate_date': 'date',
        'subject_name': 'str',
        'total': 'float'
    }

    attribute_map = {
        'count': 'count',
        'gi_create_date': 'giCreateDate',
        'income_id': 'incomeId',
        'nm_id': 'nmID',
        'shk_sreate_date': 'shkSreateDate',
        'subject_name': 'subjectName',
        'total': 'total'
    }

    def __init__(self, count=None, gi_create_date=None, income_id=None, nm_id=None, shk_sreate_date=None, subject_name=None, total=None):  # noqa: E501
        """InlineResponse2007Report - a model defined in Swagger"""  # noqa: E501
        self._count = None
        self._gi_create_date = None
        self._income_id = None
        self._nm_id = None
        self._shk_sreate_date = None
        self._subject_name = None
        self._total = None
        self.discriminator = None
        if count is not None:
            self.count = count
        if gi_create_date is not None:
            self.gi_create_date = gi_create_date
        if income_id is not None:
            self.income_id = income_id
        if nm_id is not None:
            self.nm_id = nm_id
        if shk_sreate_date is not None:
            self.shk_sreate_date = shk_sreate_date
        if subject_name is not None:
            self.subject_name = subject_name
        if total is not None:
            self.total = total

    @property
    def count(self):
        """Gets the count of this InlineResponse2007Report.  # noqa: E501

        Kolihestvo tovarov, ht.  # noqa: E501

        :return: The count of this InlineResponse2007Report.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this InlineResponse2007Report.

        Kolihestvo tovarov, ht.  # noqa: E501

        :param count: The count of this InlineResponse2007Report.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def gi_create_date(self):
        """Gets the gi_create_date of this InlineResponse2007Report.  # noqa: E501

        Data sozdania postavki  # noqa: E501

        :return: The gi_create_date of this InlineResponse2007Report.  # noqa: E501
        :rtype: date
        """
        return self._gi_create_date

    @gi_create_date.setter
    def gi_create_date(self, gi_create_date):
        """Sets the gi_create_date of this InlineResponse2007Report.

        Data sozdania postavki  # noqa: E501

        :param gi_create_date: The gi_create_date of this InlineResponse2007Report.  # noqa: E501
        :type: date
        """

        self._gi_create_date = gi_create_date

    @property
    def income_id(self):
        """Gets the income_id of this InlineResponse2007Report.  # noqa: E501

        Nomer postavki  # noqa: E501

        :return: The income_id of this InlineResponse2007Report.  # noqa: E501
        :rtype: int
        """
        return self._income_id

    @income_id.setter
    def income_id(self, income_id):
        """Sets the income_id of this InlineResponse2007Report.

        Nomer postavki  # noqa: E501

        :param income_id: The income_id of this InlineResponse2007Report.  # noqa: E501
        :type: int
        """

        self._income_id = income_id

    @property
    def nm_id(self):
        """Gets the nm_id of this InlineResponse2007Report.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this InlineResponse2007Report.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this InlineResponse2007Report.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this InlineResponse2007Report.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def shk_sreate_date(self):
        """Gets the shk_sreate_date of this InlineResponse2007Report.  # noqa: E501

        Data priemki  # noqa: E501

        :return: The shk_sreate_date of this InlineResponse2007Report.  # noqa: E501
        :rtype: date
        """
        return self._shk_sreate_date

    @shk_sreate_date.setter
    def shk_sreate_date(self, shk_sreate_date):
        """Sets the shk_sreate_date of this InlineResponse2007Report.

        Data priemki  # noqa: E501

        :param shk_sreate_date: The shk_sreate_date of this InlineResponse2007Report.  # noqa: E501
        :type: date
        """

        self._shk_sreate_date = shk_sreate_date

    @property
    def subject_name(self):
        """Gets the subject_name of this InlineResponse2007Report.  # noqa: E501

        Predmet (podkategoria)  # noqa: E501

        :return: The subject_name of this InlineResponse2007Report.  # noqa: E501
        :rtype: str
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this InlineResponse2007Report.

        Predmet (podkategoria)  # noqa: E501

        :param subject_name: The subject_name of this InlineResponse2007Report.  # noqa: E501
        :type: str
        """

        self._subject_name = subject_name

    @property
    def total(self):
        """Gets the total of this InlineResponse2007Report.  # noqa: E501

        Summarnaa stoimost priemki, ₽ s kopeikami  # noqa: E501

        :return: The total of this InlineResponse2007Report.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InlineResponse2007Report.

        Summarnaa stoimost priemki, ₽ s kopeikami  # noqa: E501

        :param total: The total of this InlineResponse2007Report.  # noqa: E501
        :type: float
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2007Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2007Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
