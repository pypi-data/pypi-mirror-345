# coding: utf-8

"""
    ANTENNEX Reverberation Chamber API

    HTTP API for ANTENNEX The Wireless Connector(tm)

    The version of the OpenAPI document: 3.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from antennex_client.models.door_switch import DoorSwitch
from antennex_client.models.hardware_status_motor_driver import HardwareStatusMotorDriver
from antennex_client.models.pcb_power_state import PcbPowerState
from typing import Optional, Set
from typing_extensions import Self

class HardwareStatus(BaseModel):
    """
    Contains information about the equipment internals such as the state of the motors and the  state of the door sensor.
    """ # noqa: E501
    motor_driver: Optional[HardwareStatusMotorDriver] = Field(default=None, alias="motorDriver")
    door_switch: Optional[DoorSwitch] = Field(default=None, alias="doorSwitch")
    hwid: Optional[StrictStr] = Field(default=None, description="The hardware identifier.", alias="HWID")
    fan: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Contains a map of the speed of each fan expressed in revolutions per minute (rpm).")
    rf: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Contains a map of the current rf-generator frequency in Hz and the amplifier and attenuator DAC  voltages in V.")
    temperature: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Contains a map of the temperatures as indicated by the temperature sensors in the chamber in degrees Celsius.")
    power: Optional[Dict[str, PcbPowerState]] = Field(default=None, description="Contains a map of the state of each power rail.")
    voltages: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Contains a map of the power sensor ADC voltages expressed in V.")
    __properties: ClassVar[List[str]] = ["motorDriver", "doorSwitch", "HWID", "fan", "rf", "temperature", "power", "voltages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HardwareStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of motor_driver
        if self.motor_driver:
            _dict['motorDriver'] = self.motor_driver.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HardwareStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "motorDriver": HardwareStatusMotorDriver.from_dict(obj["motorDriver"]) if obj.get("motorDriver") is not None else None,
            "doorSwitch": obj.get("doorSwitch"),
            "HWID": obj.get("HWID"),
            "fan": obj.get("fan"),
            "rf": obj.get("rf"),
            "temperature": obj.get("temperature"),
            # ANTENNEX: Patch to check if item exists at all
            "power": dict((_k, _v) for _k, _v in obj.get("power").items()) if obj.get("power") is not None else None,
            "voltages": obj.get("voltages")
        })
        return _obj


