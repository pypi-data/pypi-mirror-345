# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NmReportGetReportsResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'datetime',
        'status': 'str',
        'name': 'str',
        'size': 'int',
        'start_date': 'date',
        'end_date': 'date'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'status': 'status',
        'name': 'name',
        'size': 'size',
        'start_date': 'startDate',
        'end_date': 'endDate'
    }

    def __init__(self, id=None, created_at=None, status=None, name=None, size=None, start_date=None, end_date=None):  # noqa: E501
        """NmReportGetReportsResponseData - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._status = None
        self._name = None
        self._size = None
        self._start_date = None
        self._end_date = None
        self.discriminator = None
        self.id = id
        self.created_at = created_at
        self.status = status
        self.name = name
        self.size = size
        self.start_date = start_date
        self.end_date = end_date

    @property
    def id(self):
        """Gets the id of this NmReportGetReportsResponseData.  # noqa: E501

        ID otheta  # noqa: E501

        :return: The id of this NmReportGetReportsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NmReportGetReportsResponseData.

        ID otheta  # noqa: E501

        :param id: The id of this NmReportGetReportsResponseData.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this NmReportGetReportsResponseData.  # noqa: E501

        Data i vrema zaverhenia generacii  # noqa: E501

        :return: The created_at of this NmReportGetReportsResponseData.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NmReportGetReportsResponseData.

        Data i vrema zaverhenia generacii  # noqa: E501

        :param created_at: The created_at of this NmReportGetReportsResponseData.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def status(self):
        """Gets the status of this NmReportGetReportsResponseData.  # noqa: E501

        Status otheta:  * `WAITING` — v oheredi na obrabotku * `PROCESSING` — generiruetsa * `SUCCESS —` gotov * `RETRY` — ohidaet povtornoi obrabotki * `FAILED` — ne poluhilos sgenerirovat, sgeneriruite povtorno   # noqa: E501

        :return: The status of this NmReportGetReportsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NmReportGetReportsResponseData.

        Status otheta:  * `WAITING` — v oheredi na obrabotku * `PROCESSING` — generiruetsa * `SUCCESS —` gotov * `RETRY` — ohidaet povtornoi obrabotki * `FAILED` — ne poluhilos sgenerirovat, sgeneriruite povtorno   # noqa: E501

        :param status: The status of this NmReportGetReportsResponseData.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def name(self):
        """Gets the name of this NmReportGetReportsResponseData.  # noqa: E501

        Nazvanie otheta  # noqa: E501

        :return: The name of this NmReportGetReportsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NmReportGetReportsResponseData.

        Nazvanie otheta  # noqa: E501

        :param name: The name of this NmReportGetReportsResponseData.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def size(self):
        """Gets the size of this NmReportGetReportsResponseData.  # noqa: E501

        Razmer otheta, B  # noqa: E501

        :return: The size of this NmReportGetReportsResponseData.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this NmReportGetReportsResponseData.

        Razmer otheta, B  # noqa: E501

        :param size: The size of this NmReportGetReportsResponseData.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def start_date(self):
        """Gets the start_date of this NmReportGetReportsResponseData.  # noqa: E501

        Nahalo perioda  # noqa: E501

        :return: The start_date of this NmReportGetReportsResponseData.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this NmReportGetReportsResponseData.

        Nahalo perioda  # noqa: E501

        :param start_date: The start_date of this NmReportGetReportsResponseData.  # noqa: E501
        :type: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this NmReportGetReportsResponseData.  # noqa: E501

        Konec perioda  # noqa: E501

        :return: The end_date of this NmReportGetReportsResponseData.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this NmReportGetReportsResponseData.

        Konec perioda  # noqa: E501

        :param end_date: The end_date of this NmReportGetReportsResponseData.  # noqa: E501
        :type: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NmReportGetReportsResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NmReportGetReportsResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
