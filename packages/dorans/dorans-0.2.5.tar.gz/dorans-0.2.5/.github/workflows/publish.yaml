name: Publish Python Package

on:
  push:
    branches:
      - release # Trigger on pushes to the release branch
  workflow_dispatch: # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read # Default read permissions

jobs:
  build:
    name: Build distribution üì¶
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Recommended to use major version tags
        with:
          # Fetch all history for versioning tools like setuptools_scm or hatch-vcs if needed
          fetch-depth: 0 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a specific version range or matrix if needed
          cache: pip
          cache-dependency-path: '**/requirements*.txt' # Cache based on requirements files

      - name: Install build dependencies
        run: pip install build hatchling # Explicitly install build and hatchling
        # Or if you prefer using requirements file:
        # run: pip install -r requirements/build.txt 

      - name: Set SOURCE_DATE_EPOCH for reproducible builds
        run: echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

      - name: Build artifacts
        run: python -m build

      - name: Generate hashes for built artifacts
        id: hash
        # Need write permission if using git-based versioning that writes tags during build
        # permissions: 
        #  contents: write 
        run: |
          cd dist
          echo "hashes=$(sha256sum * | base64 -w0)" >> "$GITHUB_OUTPUT"
          cd ..

      - name: Store built artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions # More descriptive name
          path: dist/
          retention-days: 7 # Adjust as needed

  provenance:
    name: Generate SLSA Provenance üõ°Ô∏è
    needs: [build]
    permissions:
      actions: read       # To read workflow path.
      id-token: write     # To sign the provenance.
      contents: write     # To write the provenance to the repository.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: ${{ needs.build.outputs.hashes }}
      # upload-assets: true # Optional: Upload provenance to the release assets
      # build-artifact-path: python-package-distributions # Optional: Point to the artifact if needed by specific generator versions

  # --- Publish to TestPyPI ---
  publish-testpypi:
    name: Publish to TestPyPI üß™
    needs: [build] # Depends only on having the artifacts built
    runs-on: ubuntu-latest
    environment:
      name: testpypi # Optional: Define a 'testpypi' environment if needed for specific rules/secrets
      url: https://test.pypi.org/p/dorans # Update 'dorans' if your package name is different
    permissions:
      id-token: write # IMPORTANT: Required for trusted publishing

    steps:
      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions # Match artifact name from build job
          path: dist/ # Download directly into dist/

      - name: Publish package distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1 # Use release version tag
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

  # --- Create GitHub Release ---
  create-release:
    name: Create GitHub Release üìù
    needs: [build, provenance, publish-testpypi] # Wait for build, provenance, and successful TestPyPI publish
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create the release

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        # Downloads all artifacts produced by previous jobs into respective directories
        # (e.g., python-package-distributions/, SLSA-provenance-*.intoto.jsonl/)

      - name: Create Draft Release
        env:
          GH_TOKEN: ${{ github.token }}
          # Extract version tag from the ref (e.g., refs/tags/v1.0.0 -> v1.0.0)
          # Handle potential 'v' prefix if necessary depending on your tagging scheme
          RELEASE_TAG: ${{ github.ref_name }} 
        run: |
          echo "Creating release for tag $RELEASE_TAG"
          # Ensure artifact directory structure is handled correctly
          # The downloaded artifacts might be in subdirectories based on their upload names
          # Adjust the glob patterns as needed
          gh release create "$RELEASE_TAG" \
              --repo "$GITHUB_REPOSITORY" \
              --title "Release $RELEASE_TAG" \
              --notes "Automated release for $RELEASE_TAG" \
              --draft \
              python-package-distributions/* \
              */*.intoto.jsonl

  # --- Publish to Main PyPI ---
  publish-pypi:
    name: Publish to PyPI üêç
    needs: [create-release] # Depends on release creation (which depends on build, provenance, testpypi)
    runs-on: ubuntu-latest
    environment:
      name: publish # Your existing environment, potentially with approvers
      url: https://pypi.org/p/dorans # Update 'dorans' if needed
    permissions:
      id-token: write # IMPORTANT: Required for trusted publishing

    steps:
      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions # Match artifact name from build job
          path: dist/

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
        # No repository-url needed, defaults to PyPI
        # packages-dir implicitly defaults to dist/
        