# coding: utf-8

"""
    Marketing i prodvihenie

    <div class=\"description_important\">       Uznat bolhe o marketinge i prodvihenii mohno v <a href=\"https://seller.wildberries.ru/instructions/category/59d92bd3-6ea0-40f2-b762-ca8835d7d42e?goBackOption=prevRoute&categoryId=479385c6-de01-4b4d-ad4e-ed941e65582e\">spravohnom centre</a> </div>    Metody marketinga i prodvihenia pozvolaut:   1. Poluhat informaciu o [reklamnyh kampaniah](/openapi/promotion#tag/Kampanii) i [mediakampaniah](/openapi/promotion#tag/Media).   2. [Sozdavat](/openapi/promotion#tag/Sozdanie-kampanij) i [upravlat](/openapi/promotion#tag/Upravlenie-kampaniyami) kampaniami.   3. Nastraivat [parametry kampanii](/openapi/promotion#tag/Parametry-kampanij) â€” klastery fraz, prodvigaemye tovary i tak dalee.   4. Upravlat [finansami kampanii](/openapi/promotion#tag/Finansy).   5. Rabotat s [kalendarem akcii](/openapi/promotion#tag/Kalendar-akcij).  Dannye sinhroniziruutsa s bazoi raz v 3 minuty. Statusy kampanii menautsa raz v minutu. Stavki kampanii menautsa raz v 30 sekund.   # noqa: E501

    OpenAPI spec version: promotion
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001Config(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'name': 'str',
        'value': 'str'
    }

    attribute_map = {
        'description': 'description',
        'name': 'name',
        'value': 'value'
    }

    def __init__(self, description=None, name=None, value=None):  # noqa: E501
        """InlineResponse2001Config - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._name = None
        self._value = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value

    @property
    def description(self):
        """Gets the description of this InlineResponse2001Config.  # noqa: E501

        Opisanie parametra  # noqa: E501

        :return: The description of this InlineResponse2001Config.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse2001Config.

        Opisanie parametra  # noqa: E501

        :param description: The description of this InlineResponse2001Config.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this InlineResponse2001Config.  # noqa: E501

        Nazvanie parametra  # noqa: E501

        :return: The name of this InlineResponse2001Config.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2001Config.

        Nazvanie parametra  # noqa: E501

        :param name: The name of this InlineResponse2001Config.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this InlineResponse2001Config.  # noqa: E501

        Znahenie  # noqa: E501

        :return: The value of this InlineResponse2001Config.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InlineResponse2001Config.

        Znahenie  # noqa: E501

        :param value: The value of this InlineResponse2001Config.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001Config, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001Config):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
