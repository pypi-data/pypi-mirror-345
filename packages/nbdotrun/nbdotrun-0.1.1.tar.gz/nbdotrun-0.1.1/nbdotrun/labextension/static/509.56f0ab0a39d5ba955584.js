"use strict";(self.webpackChunknbdotrun=self.webpackChunknbdotrun||[]).push([[509],{509:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var o=n(612),c=n(970),l=n(889);const s="nbdotrun",i=`${s}:plugin`;function d(e,t){const n=e.trimEnd().split("\n"),o=n[n.length-1];var c;return new RegExp(`^\\s*${c=t,c.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}\\s*$`).test(o)}function r(e,t){const n=new WeakSet;e.context.ready.then((()=>{const o=e.content,c=o.model;if(!c)return void console.error(`${s} Failed to retrieve notebook model`);const i=function(){let n=null;return()=>{n||(n=window.setTimeout((()=>{(()=>{for(let n=0;n<c.cells.length;n++){const i=o.widgets[n],r=c.cells.get(n);if("code"===(null==r?void 0:r.type)&&i instanceof l.CodeCell){const o=r,c=o.sharedModel.getSource();if(d(c,t)){console.log(`${s} Executing cell ${n} due to terminal symbol match: "${t}"`);const d=c.trimEnd().split("\n").slice(0,-1).join("\n");o.sharedModel.setSource(d),l.CodeCell.execute(i,e.sessionContext)}}}})(),n=null}),300))}}();for(let e=0;e<c.cells.length;e++){const t=c.cells.get(e);if(!n.has(t)&&"code"===t.type){const e=t;e.contentChanged.connect(i),n.add(e)}}c.cells.changed.connect(((e,t)=>{i(),"add"===t.type&&t.newValues.forEach((e=>{if(!n.has(e)&&"code"===e.type){const t=e;t.contentChanged.connect(i),n.add(t)}}))}))}))}const a={id:i,description:"A JupyterLab extension that will listen for code cell changes and run if ending in dot (`.`).",autoStart:!0,requires:[c.INotebookTracker],optional:[o.ISettingRegistry],activate:function(e,t,n){console.log(`JupyterLab extension ${s} is activated!`);let o=".";n&&n.load(i).then((e=>{o=e.get("triggerSymbol").composite})).catch((e=>{console.error(`${s} Failed to load settings`,e)})),t.widgetAdded.connect(((e,t)=>{r(t,o)})),t.forEach((e=>r(e,o)))}}}}]);