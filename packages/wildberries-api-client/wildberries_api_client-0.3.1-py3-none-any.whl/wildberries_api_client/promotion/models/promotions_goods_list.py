# coding: utf-8

"""
    Marketing i prodvihenie

    <div class=\"description_important\">       Uznat bolhe o marketinge i prodvihenii mohno v <a href=\"https://seller.wildberries.ru/instructions/category/59d92bd3-6ea0-40f2-b762-ca8835d7d42e?goBackOption=prevRoute&categoryId=479385c6-de01-4b4d-ad4e-ed941e65582e\">spravohnom centre</a> </div>    Metody marketinga i prodvihenia pozvolaut:   1. Poluhat informaciu o [reklamnyh kampaniah](/openapi/promotion#tag/Kampanii) i [mediakampaniah](/openapi/promotion#tag/Media).   2. [Sozdavat](/openapi/promotion#tag/Sozdanie-kampanij) i [upravlat](/openapi/promotion#tag/Upravlenie-kampaniyami) kampaniami.   3. Nastraivat [parametry kampanii](/openapi/promotion#tag/Parametry-kampanij) — klastery fraz, prodvigaemye tovary i tak dalee.   4. Upravlat [finansami kampanii](/openapi/promotion#tag/Finansy).   5. Rabotat s [kalendarem akcii](/openapi/promotion#tag/Kalendar-akcij).  Dannye sinhroniziruutsa s bazoi raz v 3 minuty. Statusy kampanii menautsa raz v minutu. Stavki kampanii menautsa raz v 30 sekund.   # noqa: E501

    OpenAPI spec version: promotion
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PromotionsGoodsList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'in_action': 'bool',
        'price': 'float',
        'currency_code': 'str',
        'plan_price': 'float',
        'discount': 'int',
        'plan_discount': 'int'
    }

    attribute_map = {
        'id': 'id',
        'in_action': 'inAction',
        'price': 'price',
        'currency_code': 'currencyCode',
        'plan_price': 'planPrice',
        'discount': 'discount',
        'plan_discount': 'planDiscount'
    }

    def __init__(self, id=None, in_action=None, price=None, currency_code=None, plan_price=None, discount=None, plan_discount=None):  # noqa: E501
        """PromotionsGoodsList - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._in_action = None
        self._price = None
        self._currency_code = None
        self._plan_price = None
        self._discount = None
        self._plan_discount = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if in_action is not None:
            self.in_action = in_action
        if price is not None:
            self.price = price
        if currency_code is not None:
            self.currency_code = currency_code
        if plan_price is not None:
            self.plan_price = plan_price
        if discount is not None:
            self.discount = discount
        if plan_discount is not None:
            self.plan_discount = plan_discount

    @property
    def id(self):
        """Gets the id of this PromotionsGoodsList.  # noqa: E501

        ID kartohki tovara  # noqa: E501

        :return: The id of this PromotionsGoodsList.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PromotionsGoodsList.

        ID kartohki tovara  # noqa: E501

        :param id: The id of this PromotionsGoodsList.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def in_action(self):
        """Gets the in_action of this PromotionsGoodsList.  # noqa: E501

        Uhastvuet v akcii:   - `true` — da   - `false` — net   # noqa: E501

        :return: The in_action of this PromotionsGoodsList.  # noqa: E501
        :rtype: bool
        """
        return self._in_action

    @in_action.setter
    def in_action(self, in_action):
        """Sets the in_action of this PromotionsGoodsList.

        Uhastvuet v akcii:   - `true` — da   - `false` — net   # noqa: E501

        :param in_action: The in_action of this PromotionsGoodsList.  # noqa: E501
        :type: bool
        """

        self._in_action = in_action

    @property
    def price(self):
        """Gets the price of this PromotionsGoodsList.  # noqa: E501

        Tekuhaa roznihnaa cena  # noqa: E501

        :return: The price of this PromotionsGoodsList.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PromotionsGoodsList.

        Tekuhaa roznihnaa cena  # noqa: E501

        :param price: The price of this PromotionsGoodsList.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def currency_code(self):
        """Gets the currency_code of this PromotionsGoodsList.  # noqa: E501

        Valuta v formate ISO 4217  # noqa: E501

        :return: The currency_code of this PromotionsGoodsList.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this PromotionsGoodsList.

        Valuta v formate ISO 4217  # noqa: E501

        :param currency_code: The currency_code of this PromotionsGoodsList.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def plan_price(self):
        """Gets the plan_price of this PromotionsGoodsList.  # noqa: E501

        Planovaa cena (cena vo vrema akcii)  # noqa: E501

        :return: The plan_price of this PromotionsGoodsList.  # noqa: E501
        :rtype: float
        """
        return self._plan_price

    @plan_price.setter
    def plan_price(self, plan_price):
        """Sets the plan_price of this PromotionsGoodsList.

        Planovaa cena (cena vo vrema akcii)  # noqa: E501

        :param plan_price: The plan_price of this PromotionsGoodsList.  # noqa: E501
        :type: float
        """

        self._plan_price = plan_price

    @property
    def discount(self):
        """Gets the discount of this PromotionsGoodsList.  # noqa: E501

        Tekuhaa skidka  # noqa: E501

        :return: The discount of this PromotionsGoodsList.  # noqa: E501
        :rtype: int
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this PromotionsGoodsList.

        Tekuhaa skidka  # noqa: E501

        :param discount: The discount of this PromotionsGoodsList.  # noqa: E501
        :type: int
        """

        self._discount = discount

    @property
    def plan_discount(self):
        """Gets the plan_discount of this PromotionsGoodsList.  # noqa: E501

        Rekomenduemaa skidka dla uhastia v akcii  # noqa: E501

        :return: The plan_discount of this PromotionsGoodsList.  # noqa: E501
        :rtype: int
        """
        return self._plan_discount

    @plan_discount.setter
    def plan_discount(self, plan_discount):
        """Sets the plan_discount of this PromotionsGoodsList.

        Rekomenduemaa skidka dla uhastia v akcii  # noqa: E501

        :param plan_discount: The plan_discount of this PromotionsGoodsList.  # noqa: E501
        :type: int
        """

        self._plan_discount = plan_discount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PromotionsGoodsList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromotionsGoodsList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
