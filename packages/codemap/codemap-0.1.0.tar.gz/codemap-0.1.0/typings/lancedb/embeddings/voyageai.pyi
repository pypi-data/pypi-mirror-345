"""
This type stub file was generated by pyright.
"""

import numpy as np
import PIL
from typing import ClassVar, List, TYPE_CHECKING, Union
from .base import EmbeddingFunction
from .registry import register
from .utils import IMAGES

if TYPE_CHECKING:
    ...
@register("voyageai")
class VoyageAIEmbeddingFunction(EmbeddingFunction):
    """
    An embedding function that uses the VoyageAI API

    https://docs.voyageai.com/docs/embeddings

    Parameters
    ----------
    name: str
        The name of the model to use. List of acceptable models:

            * voyage-3
            * voyage-3-lite
            * voyage-multimodal-3
            * voyage-finance-2
            * voyage-multilingual-2
            * voyage-law-2
            * voyage-code-2


    Examples
    --------
    import lancedb
    from lancedb.pydantic import LanceModel, Vector
    from lancedb.embeddings import EmbeddingFunctionRegistry

    voyageai = EmbeddingFunctionRegistry
        .get_instance()
        .get("voyageai")
        .create(name="voyage-3")

    class TextModel(LanceModel):
        text: str = voyageai.SourceField()
        vector: Vector(voyageai.ndims()) =  voyageai.VectorField()

    data = [ { "text": "hello world" },
            { "text": "goodbye world" }]

    db = lancedb.connect("~/.lancedb")
    tbl = db.create_table("test", schema=TextModel, mode="overwrite")

    tbl.add(data)

    """
    name: str
    client: ClassVar = ...
    text_embedding_models: list = ...
    multimodal_embedding_models: list = ...
    def ndims(self): # -> Literal[512, 1536, 1024]:
        ...
    
    def sanitize_input(self, images: IMAGES) -> Union[List[bytes], np.ndarray]:
        """
        Sanitize the input to the embedding function.
        """
        ...
    
    def generate_text_embeddings(self, text: str, **kwargs) -> np.ndarray:
        """
        Get the embeddings for the given texts

        Parameters
        ----------
        texts: list[str] or np.ndarray (of str)
            The texts to embed
        input_type: Optional[str]

        truncation: Optional[bool]
        """
        ...
    
    def generate_image_embedding(self, image: PIL.Image.Image, **kwargs) -> np.ndarray:
        ...
    
    def compute_query_embeddings(self, query: Union[str, PIL.Image.Image], *args, **kwargs) -> List[np.ndarray]:
        """
        Compute the embeddings for a given user query

        Parameters
        ----------
        query : Union[str, PIL.Image.Image]
            The query to embed. A query can be either text or an image.
        """
        ...
    
    def compute_source_embeddings(self, images: IMAGES, *args, **kwargs) -> List[np.array]:
        ...
    


