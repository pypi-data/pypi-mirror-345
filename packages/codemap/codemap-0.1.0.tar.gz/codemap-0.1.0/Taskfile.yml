version: "3"

vars:
  SRC_DIR: src
  TESTS_DIR: tests
  COV_MODULE: src/codemap

tasks:
  default:
    desc: List all available tasks
    cmds:
      - task -l

  lint:
    desc: Run all linting checks
    cmds:
      - task: lint:ruff
      - task: lint:pylint
      - task: lint:pyright

  lint:ruff:
    desc: Run ruff linter
    cmds:
      - uv run ruff check {{.SRC_DIR}} {{.TESTS_DIR}}

  lint:fix:
    desc: Run ruff linter with auto-fix
    cmds:
      - uv run ruff check --fix {{.SRC_DIR}} {{.TESTS_DIR}}

  lint:fix-unsafe:
    desc: Run ruff linter with unsafe auto-fixes
    cmds:
      - uv run ruff check --fix --unsafe-fixes {{.SRC_DIR}} {{.TESTS_DIR}}

  lint:pylint:
    desc: Run pylint
    cmds:
      - uv run pylint {{.SRC_DIR}} {{.TESTS_DIR}}

  lint:pyright:
    desc: Run pyright type checker
    cmds:
      - uv run pyright {{.SRC_DIR}} {{.TESTS_DIR}}

  format:
    desc: Run all formatters
    cmds:
      - task: format:isort
      - task: format:docformatter
      - task: lint:fix-unsafe
      - task: format:ruff

  format:ruff:
    desc: Run ruff formatter
    cmds:
      - uv run ruff format {{.SRC_DIR}} {{.TESTS_DIR}}

  format:isort:
    desc: Run isort
    cmds:
      - uv run isort {{.SRC_DIR}} {{.TESTS_DIR}}

  format:docformatter:
    desc: Run docformatter
    cmds:
      - cmd: uv run docformatter --recursive --in-place {{.SRC_DIR}} {{.TESTS_DIR}}
        ignore_error: true

  radon:
    desc: Run radon
    cmds:
      - task: radon:cc
      - task: radon:mi
      - task: radon:raw
      - task: radon:hal

  radon:cc:
    desc: Run radon cc
    cmds:
      - uv run radon cc {{.SRC_DIR}} -O .radon/cc.txt

  radon:mi:
    desc: Run radon mi
    cmds:
      - uv run radon mi {{.SRC_DIR}} -O .radon/mi.txt

  radon:raw:
    desc: Run radon raw
    cmds:
      - uv run radon raw {{.SRC_DIR}} -O .radon/raw.txt

  radon:hal:
    desc: Run radon hal
    cmds:
      - uv run radon hal {{.SRC_DIR}} -O .radon/hal.txt

  test:
    desc: Run all tests
    cmds:
      - task: test:pytest

  test:pytest:
    desc: Run pytest only
    cmds:
      - uv run pytest {{.TESTS_DIR}} -n logical

  test:coverage:
    desc: Run tests with coverage analysis
    cmds:
      - uv run pytest --cov={{.COV_MODULE}} --cov-report=term-missing {{.TESTS_DIR}} -n logical

  test:coverage:xml:
    desc: Run tests with coverage analysis and generate XML report
    cmds:
      - uv run pytest --cov={{.COV_MODULE}} --cov-branch --cov-report=xml {{.TESTS_DIR}} -n logical

  docs:
    desc: Check documentation coverage
    cmds:
      - uv run interrogate --style google --fail-under 90 --color -vv {{.SRC_DIR}}

  ci:
    desc: Run all checks and tests
    cmds:
      - task: format
      - task: lint
      - task: test:coverage

  ci:full:
    desc: Run all checks and tests in CI mode
    cmds:
      - task: lint
      - task: test:coverage:xml

  pre-commit:
    desc: Run pre-commit hooks on staged files only
    cmds:
      - |
        STAGED_FILES=$(git diff --name-only --cached --diff-filter=ACMR | grep -E '\.py$' | tr '\n' ' ')
        if [ -n "$STAGED_FILES" ]; then
          echo "Running checks on staged files: $STAGED_FILES"
          uv run ruff check --fix --unsafe-fixes $STAGED_FILES
          uv run ruff format $STAGED_FILES
          # Stage the files again in case they were modified
          git add $STAGED_FILES
        else
          echo "No Python files staged for commit"
        fi
  
  pre-push:
    desc: Run pre-push hooks
    cmds:
      - task: format
      - task: lint
      - task: test
