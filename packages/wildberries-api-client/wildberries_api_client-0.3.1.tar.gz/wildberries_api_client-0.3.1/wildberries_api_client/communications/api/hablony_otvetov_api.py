# coding: utf-8

"""
    Obhenie s pokupatelami

    <div class=\"description_important\">       Uznat bolhe ob obhenii s pokupatelami mohno v <a href=\"https://seller.wildberries.ru/instructions/category/f7f6c465-dd12-422d-80a0-a6d9562115d5?goBackOption=prevRoute&categoryId=30817062-14cc-4a82-bc78-3600c2b0685b\">spravohnom centre</a> </div>  herez metody obhenia s pokupatelem vy mohete rabotat s:   1. [Voprosami](/openapi/user-communication#tag/Voprosy) i [otzyvami](/openapi/user-communication#tag/Otzyvy) pokupatelei   2. [hablonami otvetov](/openapi/user-communication#tag/Shablony-otvetov) na voprosy i otzyvy   3. [hatami s pokupatelami](/openapi/user-communication#tag/Chat-s-pokupatelyami)   4. [Zaavkami pokupatelei na vozvrat](/openapi/user-communication#tag/Vozvraty-pokupatelyami)   # noqa: E501

    OpenAPI spec version: communication
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.communications.api_client import ApiClient


class HablonyOtvetovApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_templates_delete(self, **kwargs):  # noqa: E501
        """Udalit hablon  # noqa: E501

        Metod redaktiruet [hablon](/openapi/user-communication#tag/Shablony-otvetov/paths/~1api~1v1~1templates/get) otveta na [vopros](/openapi/user-communication#tag/Voprosy) ili [otzyv](/openapi/user-communication#tag/Otzyvy) pokupatela.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_templates_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1TemplatesBody1 body:
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_templates_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_templates_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_templates_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Udalit hablon  # noqa: E501

        Metod redaktiruet [hablon](/openapi/user-communication#tag/Shablony-otvetov/paths/~1api~1v1~1templates/get) otveta na [vopros](/openapi/user-communication#tag/Voprosy) ili [otzyv](/openapi/user-communication#tag/Otzyvy) pokupatela.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_templates_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1TemplatesBody1 body:
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_templates_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/templates', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_templates_get(self, template_type, **kwargs):  # noqa: E501
        """Poluhit hablony otvetov na voprosy i otzyvy  # noqa: E501

        Metod predostavlaet spisok hablonov otvetov na [voprosy](/openapi/user-communication#tag/Voprosy) i [otzyvy](/openapi/user-communication#tag/Otzyvy) pokupatelei.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_templates_get(template_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int template_type: `1` - hablony dla otzyvov<br> `2` - hablony dla voprosov  (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_templates_get_with_http_info(template_type, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_templates_get_with_http_info(template_type, **kwargs)  # noqa: E501
            return data

    def api_v1_templates_get_with_http_info(self, template_type, **kwargs):  # noqa: E501
        """Poluhit hablony otvetov na voprosy i otzyvy  # noqa: E501

        Metod predostavlaet spisok hablonov otvetov na [voprosy](/openapi/user-communication#tag/Voprosy) i [otzyvy](/openapi/user-communication#tag/Otzyvy) pokupatelei.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_templates_get_with_http_info(template_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int template_type: `1` - hablony dla otzyvov<br> `2` - hablony dla voprosov  (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_templates_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_type' is set
        if ('template_type' not in params or
                params['template_type'] is None):
            raise ValueError("Missing the required parameter `template_type` when calling `api_v1_templates_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'template_type' in params:
            query_params.append(('templateType', params['template_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_templates_patch(self, **kwargs):  # noqa: E501
        """Redaktirovat hablon  # noqa: E501

        Metod redaktiruet [hablon](/openapi/user-communication#tag/Shablony-otvetov/paths/~1api~1v1~1templates/get) otveta na [vopros](/openapi/user-communication#tag/Voprosy) ili [otzyv](/openapi/user-communication#tag/Otzyvy) pokupatela.<br><br>  V tekste hablona mohno ispolzovat lubye simvoly.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_templates_patch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1TemplatesBody2 body:
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_templates_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_templates_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_templates_patch_with_http_info(self, **kwargs):  # noqa: E501
        """Redaktirovat hablon  # noqa: E501

        Metod redaktiruet [hablon](/openapi/user-communication#tag/Shablony-otvetov/paths/~1api~1v1~1templates/get) otveta na [vopros](/openapi/user-communication#tag/Voprosy) ili [otzyv](/openapi/user-communication#tag/Otzyvy) pokupatela.<br><br>  V tekste hablona mohno ispolzovat lubye simvoly.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_templates_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1TemplatesBody2 body:
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_templates_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/templates', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_templates_post(self, **kwargs):  # noqa: E501
        """Sozdat hablon  # noqa: E501

        Metod dobavlaet [hablon](/openapi/user-communication#tag/Shablony-otvetov/paths/~1api~1v1~1templates/get) otveta na [vopros](/openapi/user-communication#tag/Voprosy) ili [otzyv](/openapi/user-communication#tag/Otzyvy) pokupatela.<br><br>  Mohno sozdat maksimum 20 hablonov: 10 dla otzyvov i 10 dla voprosov. V tekste hablona mohno ispolzovat lubye simvoly.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_templates_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1TemplatesBody body:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_templates_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_templates_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_templates_post_with_http_info(self, **kwargs):  # noqa: E501
        """Sozdat hablon  # noqa: E501

        Metod dobavlaet [hablon](/openapi/user-communication#tag/Shablony-otvetov/paths/~1api~1v1~1templates/get) otveta na [vopros](/openapi/user-communication#tag/Voprosy) ili [otzyv](/openapi/user-communication#tag/Otzyvy) pokupatela.<br><br>  Mohno sozdat maksimum 20 hablonov: 10 dla otzyvov i 10 dla voprosov. V tekste hablona mohno ispolzovat lubye simvoly.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_templates_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1TemplatesBody body:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_templates_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
