# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from empire_platform_api_public_client_legacy.models.permission import Permission
from empire_platform_api_public_client_legacy.models.platform_appearance import PlatformAppearance
from empire_platform_api_public_client_legacy.models.profile_user import ProfileUser
from empire_platform_api_public_client_legacy.models.timescale_preferences import TimescalePreferences

class Profile(BaseModel):
    """
    Profile
    """
    user: ProfileUser = Field(...)
    permissions: conlist(Permission) = Field(...)
    appearance: PlatformAppearance = Field(...)
    timescale_preferences: TimescalePreferences = Field(default=..., alias="timescalePreferences")
    impersonated_by: Optional[ProfileUser] = Field(default=None, alias="impersonatedBy")
    __properties = ["user", "permissions", "appearance", "timescalePreferences", "impersonatedBy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Profile:
        """Create an instance of Profile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timescale_preferences
        if self.timescale_preferences:
            _dict['timescalePreferences'] = self.timescale_preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of impersonated_by
        if self.impersonated_by:
            _dict['impersonatedBy'] = self.impersonated_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Profile:
        """Create an instance of Profile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Profile.parse_obj(obj)

        _obj = Profile.parse_obj({
            "user": ProfileUser.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "permissions": obj.get("permissions"),
            "appearance": obj.get("appearance"),
            "timescale_preferences": TimescalePreferences.from_dict(obj.get("timescalePreferences")) if obj.get("timescalePreferences") is not None else None,
            "impersonated_by": ProfileUser.from_dict(obj.get("impersonatedBy")) if obj.get("impersonatedBy") is not None else None
        })
        return _obj


