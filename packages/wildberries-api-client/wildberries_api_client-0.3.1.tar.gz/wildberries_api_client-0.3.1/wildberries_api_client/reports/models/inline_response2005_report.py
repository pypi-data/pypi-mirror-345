# coding: utf-8

"""
    Othety

    <div class=\"description_important\">     Uznat bolhe ob othetah mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/5f2162c5-069b-416d-a4e1-48da2a76e6b0\">spravohnom centre</a> </div>  S pomohu etih metodov vy mohete poluhit [osnovnye othety](/openapi/reports#tag/Osnovnye-otchyoty) i othety o:   1. [Ostatkah na skladah](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah)   2. [Tovarah s obazatelnoi markirovkoi](/openapi/reports#tag/Otchyot-o-tovarah-c-obyazatelnoj-markirovkoj)   3. [Uderhaniah](/openapi/reports#tag/Otchyoty-ob-uderzhaniyah)   4. [Platnoi priemke](/openapi/reports#tag/Platnaya-priyomka)   5. [Platnom hranenii](/openapi/reports#tag/Platnoe-hranenie)   6. [Prodahah po regionam](/openapi/reports#tag/Prodazhi-po-regionam)   7. [Dole brenda v prodahah](/openapi/reports#tag/Dolya-brenda-v-prodazhah)   8. [Skrytyh tovarah](/openapi/reports#tag/Skrytye-tovary)   9. [Vozvratah i peremehenii tovarov](/openapi/reports#tag/Otchyot-o-vozvratah-i-peremeshenii-tovarov)   10. [Dinamike oborahivaemosti](/openapi/reports#tag/Dinamika-oborachivaemosti)   # noqa: E501

    OpenAPI spec version: reports
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2005Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'int',
        '_date': 'date',
        'new_barcode': 'str',
        'new_color': 'str',
        'new_sa': 'str',
        'new_shk_id': 'int',
        'new_size': 'str',
        'nm_id': 'int',
        'old_barcode': 'str',
        'old_color': 'str',
        'old_sa': 'str',
        'old_shk_id': 'int',
        'old_size': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        '_date': 'date',
        'new_barcode': 'newBarcode',
        'new_color': 'newColor',
        'new_sa': 'newSa',
        'new_shk_id': 'newShkID',
        'new_size': 'newSize',
        'nm_id': 'nmID',
        'old_barcode': 'oldBarcode',
        'old_color': 'oldColor',
        'old_sa': 'oldSa',
        'old_shk_id': 'oldShkID',
        'old_size': 'oldSize'
    }

    def __init__(self, amount=None, _date=None, new_barcode=None, new_color=None, new_sa=None, new_shk_id=None, new_size=None, nm_id=None, old_barcode=None, old_color=None, old_sa=None, old_shk_id=None, old_size=None):  # noqa: E501
        """InlineResponse2005Report - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self.__date = None
        self._new_barcode = None
        self._new_color = None
        self._new_sa = None
        self._new_shk_id = None
        self._new_size = None
        self._nm_id = None
        self._old_barcode = None
        self._old_color = None
        self._old_sa = None
        self._old_shk_id = None
        self._old_size = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if _date is not None:
            self._date = _date
        if new_barcode is not None:
            self.new_barcode = new_barcode
        if new_color is not None:
            self.new_color = new_color
        if new_sa is not None:
            self.new_sa = new_sa
        if new_shk_id is not None:
            self.new_shk_id = new_shk_id
        if new_size is not None:
            self.new_size = new_size
        if nm_id is not None:
            self.nm_id = nm_id
        if old_barcode is not None:
            self.old_barcode = old_barcode
        if old_color is not None:
            self.old_color = old_color
        if old_sa is not None:
            self.old_sa = old_sa
        if old_shk_id is not None:
            self.old_shk_id = old_shk_id
        if old_size is not None:
            self.old_size = old_size

    @property
    def amount(self):
        """Gets the amount of this InlineResponse2005Report.  # noqa: E501

        Summa htrafa v kopeikah  # noqa: E501

        :return: The amount of this InlineResponse2005Report.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse2005Report.

        Summa htrafa v kopeikah  # noqa: E501

        :param amount: The amount of this InlineResponse2005Report.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def _date(self):
        """Gets the _date of this InlineResponse2005Report.  # noqa: E501

        Data izmenenia harakteristik tovara na sklade  # noqa: E501

        :return: The _date of this InlineResponse2005Report.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse2005Report.

        Data izmenenia harakteristik tovara na sklade  # noqa: E501

        :param _date: The _date of this InlineResponse2005Report.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def new_barcode(self):
        """Gets the new_barcode of this InlineResponse2005Report.  # noqa: E501

        Novyi barkod v kartohke tovara  # noqa: E501

        :return: The new_barcode of this InlineResponse2005Report.  # noqa: E501
        :rtype: str
        """
        return self._new_barcode

    @new_barcode.setter
    def new_barcode(self, new_barcode):
        """Sets the new_barcode of this InlineResponse2005Report.

        Novyi barkod v kartohke tovara  # noqa: E501

        :param new_barcode: The new_barcode of this InlineResponse2005Report.  # noqa: E501
        :type: str
        """

        self._new_barcode = new_barcode

    @property
    def new_color(self):
        """Gets the new_color of this InlineResponse2005Report.  # noqa: E501

        Novyi cvet  # noqa: E501

        :return: The new_color of this InlineResponse2005Report.  # noqa: E501
        :rtype: str
        """
        return self._new_color

    @new_color.setter
    def new_color(self, new_color):
        """Sets the new_color of this InlineResponse2005Report.

        Novyi cvet  # noqa: E501

        :param new_color: The new_color of this InlineResponse2005Report.  # noqa: E501
        :type: str
        """

        self._new_color = new_color

    @property
    def new_sa(self):
        """Gets the new_sa of this InlineResponse2005Report.  # noqa: E501

        Novyi artikul prodavca  # noqa: E501

        :return: The new_sa of this InlineResponse2005Report.  # noqa: E501
        :rtype: str
        """
        return self._new_sa

    @new_sa.setter
    def new_sa(self, new_sa):
        """Sets the new_sa of this InlineResponse2005Report.

        Novyi artikul prodavca  # noqa: E501

        :param new_sa: The new_sa of this InlineResponse2005Report.  # noqa: E501
        :type: str
        """

        self._new_sa = new_sa

    @property
    def new_shk_id(self):
        """Gets the new_shk_id of this InlineResponse2005Report.  # noqa: E501

        Novyi htrihkod tovara v WB  # noqa: E501

        :return: The new_shk_id of this InlineResponse2005Report.  # noqa: E501
        :rtype: int
        """
        return self._new_shk_id

    @new_shk_id.setter
    def new_shk_id(self, new_shk_id):
        """Sets the new_shk_id of this InlineResponse2005Report.

        Novyi htrihkod tovara v WB  # noqa: E501

        :param new_shk_id: The new_shk_id of this InlineResponse2005Report.  # noqa: E501
        :type: int
        """

        self._new_shk_id = new_shk_id

    @property
    def new_size(self):
        """Gets the new_size of this InlineResponse2005Report.  # noqa: E501

        Novyi razmer  # noqa: E501

        :return: The new_size of this InlineResponse2005Report.  # noqa: E501
        :rtype: str
        """
        return self._new_size

    @new_size.setter
    def new_size(self, new_size):
        """Sets the new_size of this InlineResponse2005Report.

        Novyi razmer  # noqa: E501

        :param new_size: The new_size of this InlineResponse2005Report.  # noqa: E501
        :type: str
        """

        self._new_size = new_size

    @property
    def nm_id(self):
        """Gets the nm_id of this InlineResponse2005Report.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this InlineResponse2005Report.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this InlineResponse2005Report.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this InlineResponse2005Report.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def old_barcode(self):
        """Gets the old_barcode of this InlineResponse2005Report.  # noqa: E501

        Staryi barkod iz kartohki tovara  # noqa: E501

        :return: The old_barcode of this InlineResponse2005Report.  # noqa: E501
        :rtype: str
        """
        return self._old_barcode

    @old_barcode.setter
    def old_barcode(self, old_barcode):
        """Sets the old_barcode of this InlineResponse2005Report.

        Staryi barkod iz kartohki tovara  # noqa: E501

        :param old_barcode: The old_barcode of this InlineResponse2005Report.  # noqa: E501
        :type: str
        """

        self._old_barcode = old_barcode

    @property
    def old_color(self):
        """Gets the old_color of this InlineResponse2005Report.  # noqa: E501

        Staryi cvet  # noqa: E501

        :return: The old_color of this InlineResponse2005Report.  # noqa: E501
        :rtype: str
        """
        return self._old_color

    @old_color.setter
    def old_color(self, old_color):
        """Sets the old_color of this InlineResponse2005Report.

        Staryi cvet  # noqa: E501

        :param old_color: The old_color of this InlineResponse2005Report.  # noqa: E501
        :type: str
        """

        self._old_color = old_color

    @property
    def old_sa(self):
        """Gets the old_sa of this InlineResponse2005Report.  # noqa: E501

        Staryi artikul prodavca  # noqa: E501

        :return: The old_sa of this InlineResponse2005Report.  # noqa: E501
        :rtype: str
        """
        return self._old_sa

    @old_sa.setter
    def old_sa(self, old_sa):
        """Sets the old_sa of this InlineResponse2005Report.

        Staryi artikul prodavca  # noqa: E501

        :param old_sa: The old_sa of this InlineResponse2005Report.  # noqa: E501
        :type: str
        """

        self._old_sa = old_sa

    @property
    def old_shk_id(self):
        """Gets the old_shk_id of this InlineResponse2005Report.  # noqa: E501

        Staryi htrihkod tovara v WB  # noqa: E501

        :return: The old_shk_id of this InlineResponse2005Report.  # noqa: E501
        :rtype: int
        """
        return self._old_shk_id

    @old_shk_id.setter
    def old_shk_id(self, old_shk_id):
        """Sets the old_shk_id of this InlineResponse2005Report.

        Staryi htrihkod tovara v WB  # noqa: E501

        :param old_shk_id: The old_shk_id of this InlineResponse2005Report.  # noqa: E501
        :type: int
        """

        self._old_shk_id = old_shk_id

    @property
    def old_size(self):
        """Gets the old_size of this InlineResponse2005Report.  # noqa: E501

        Staryi razmer  # noqa: E501

        :return: The old_size of this InlineResponse2005Report.  # noqa: E501
        :rtype: str
        """
        return self._old_size

    @old_size.setter
    def old_size(self, old_size):
        """Sets the old_size of this InlineResponse2005Report.

        Staryi razmer  # noqa: E501

        :param old_size: The old_size of this InlineResponse2005Report.  # noqa: E501
        :type: str
        """

        self._old_size = old_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
