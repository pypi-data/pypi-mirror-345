"""
This type stub file was generated by pyright.
"""

import numpy as np
import PIL
from pathlib import Path
from typing import Any, ClassVar, List, Optional, TYPE_CHECKING, Union
from .base import EmbeddingFunction
from .registry import register
from .utils import IMAGES, TEXT

if TYPE_CHECKING:
    ...
API_URL = ...
def is_valid_url(text): # -> bool:
    ...

@register("jina")
class JinaEmbeddings(EmbeddingFunction):
    """
    An embedding function that uses the Jina API

    https://jina.ai/embeddings/

    Parameters
    ----------
    name: str, default "jina-clip-v1". Note that some models support both image
        and text embeddings and some just text embedding

    api_key: str, default None
        The api key to access Jina API. If you pass None, you can set JINA_API_KEY
        environment variable

    """
    name: str = ...
    api_key: Optional[str] = ...
    _session: ClassVar = ...
    def ndims(self): # -> Literal[768]:
        ...
    
    @staticmethod
    def sensitive_keys() -> List[str]:
        ...
    
    def sanitize_input(self, inputs: Union[TEXT, IMAGES]) -> Union[List[Any], np.ndarray]:
        """
        Sanitize the input to the embedding function.
        """
        ...
    
    def compute_query_embeddings(self, query: Union[str, bytes, Path, PIL.Image.Image], *args, **kwargs) -> List[np.ndarray]:
        """
        Compute the embeddings for a given user query

        Parameters
        ----------
        query : Union[str, PIL.Image.Image]
            The query to embed. A query can be either text or an image.
        """
        ...
    
    def compute_source_embeddings(self, inputs: Union[TEXT, IMAGES], *args, **kwargs) -> List[np.array]:
        ...
    
    def generate_image_embedding(self, image: Union[str, bytes, Path, PIL.Image.Image]) -> np.ndarray:
        """
        Generate the embedding for a single image

        Parameters
        ----------
        image : Union[str, bytes, PIL.Image.Image]
            The image to embed. If the image is a str, it is treated as a uri.
            If the image is bytes, it is treated as the raw image bytes.
        """
        ...
    
    def generate_text_embeddings(self, texts: Union[List[str], np.ndarray], *args, **kwargs) -> List[np.array]:
        ...
    


