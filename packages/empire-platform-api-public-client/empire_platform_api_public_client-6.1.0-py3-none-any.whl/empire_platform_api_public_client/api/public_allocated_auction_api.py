# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from empire_platform_api_public_client.models.aggregated_allocated_auction import AggregatedAllocatedAuction
from empire_platform_api_public_client.models.allocated_auction_sort_by import AllocatedAuctionSortBy
from empire_platform_api_public_client.models.auction_product_type import AuctionProductType
from empire_platform_api_public_client.models.auction_timescale import AuctionTimescale
from empire_platform_api_public_client.models.border_direction import BorderDirection
from empire_platform_api_public_client.models.public_allocated_auction_batch import PublicAllocatedAuctionBatch

from empire_platform_api_public_client.api_client import ApiClient, RequestSerialized
from empire_platform_api_public_client.api_response import ApiResponse
from empire_platform_api_public_client.rest import RESTResponseType


class PublicAllocatedAuctionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_public_aggregated_allocated_auctions(
        self,
        border_direction: Annotated[Optional[BorderDirection], Field(description="Border Direction (optional)")] = None,
        timescales: Annotated[Optional[List[AuctionTimescale]], Field(description="List of Auction Timescales (optional)")] = None,
        product_types: Annotated[Optional[List[AuctionProductType]], Field(description="List of Auction Product Types (optional)")] = None,
        bidding_period_start: Annotated[Optional[datetime], Field(description="Filter for start of bidding period")] = None,
        bidding_period_end: Annotated[Optional[datetime], Field(description="Filter for end of bidding period")] = None,
        delivery_period_start: Optional[datetime] = None,
        delivery_period_end: Optional[datetime] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[AggregatedAllocatedAuction]:
        """get_public_aggregated_allocated_auctions

        Fetch a filterable list of Aggregated Allocated Auctions 

        :param border_direction: Border Direction (optional)
        :type border_direction: BorderDirection
        :param timescales: List of Auction Timescales (optional)
        :type timescales: List[AuctionTimescale]
        :param product_types: List of Auction Product Types (optional)
        :type product_types: List[AuctionProductType]
        :param bidding_period_start: Filter for start of bidding period
        :type bidding_period_start: datetime
        :param bidding_period_end: Filter for end of bidding period
        :type bidding_period_end: datetime
        :param delivery_period_start:
        :type delivery_period_start: datetime
        :param delivery_period_end:
        :type delivery_period_end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_public_aggregated_allocated_auctions_serialize(
            border_direction=border_direction,
            timescales=timescales,
            product_types=product_types,
            bidding_period_start=bidding_period_start,
            bidding_period_end=bidding_period_end,
            delivery_period_start=delivery_period_start,
            delivery_period_end=delivery_period_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AggregatedAllocatedAuction]",
            '422': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_public_aggregated_allocated_auctions_with_http_info(
        self,
        border_direction: Annotated[Optional[BorderDirection], Field(description="Border Direction (optional)")] = None,
        timescales: Annotated[Optional[List[AuctionTimescale]], Field(description="List of Auction Timescales (optional)")] = None,
        product_types: Annotated[Optional[List[AuctionProductType]], Field(description="List of Auction Product Types (optional)")] = None,
        bidding_period_start: Annotated[Optional[datetime], Field(description="Filter for start of bidding period")] = None,
        bidding_period_end: Annotated[Optional[datetime], Field(description="Filter for end of bidding period")] = None,
        delivery_period_start: Optional[datetime] = None,
        delivery_period_end: Optional[datetime] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[AggregatedAllocatedAuction]]:
        """get_public_aggregated_allocated_auctions

        Fetch a filterable list of Aggregated Allocated Auctions 

        :param border_direction: Border Direction (optional)
        :type border_direction: BorderDirection
        :param timescales: List of Auction Timescales (optional)
        :type timescales: List[AuctionTimescale]
        :param product_types: List of Auction Product Types (optional)
        :type product_types: List[AuctionProductType]
        :param bidding_period_start: Filter for start of bidding period
        :type bidding_period_start: datetime
        :param bidding_period_end: Filter for end of bidding period
        :type bidding_period_end: datetime
        :param delivery_period_start:
        :type delivery_period_start: datetime
        :param delivery_period_end:
        :type delivery_period_end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_public_aggregated_allocated_auctions_serialize(
            border_direction=border_direction,
            timescales=timescales,
            product_types=product_types,
            bidding_period_start=bidding_period_start,
            bidding_period_end=bidding_period_end,
            delivery_period_start=delivery_period_start,
            delivery_period_end=delivery_period_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AggregatedAllocatedAuction]",
            '422': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_public_aggregated_allocated_auctions_without_preload_content(
        self,
        border_direction: Annotated[Optional[BorderDirection], Field(description="Border Direction (optional)")] = None,
        timescales: Annotated[Optional[List[AuctionTimescale]], Field(description="List of Auction Timescales (optional)")] = None,
        product_types: Annotated[Optional[List[AuctionProductType]], Field(description="List of Auction Product Types (optional)")] = None,
        bidding_period_start: Annotated[Optional[datetime], Field(description="Filter for start of bidding period")] = None,
        bidding_period_end: Annotated[Optional[datetime], Field(description="Filter for end of bidding period")] = None,
        delivery_period_start: Optional[datetime] = None,
        delivery_period_end: Optional[datetime] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_public_aggregated_allocated_auctions

        Fetch a filterable list of Aggregated Allocated Auctions 

        :param border_direction: Border Direction (optional)
        :type border_direction: BorderDirection
        :param timescales: List of Auction Timescales (optional)
        :type timescales: List[AuctionTimescale]
        :param product_types: List of Auction Product Types (optional)
        :type product_types: List[AuctionProductType]
        :param bidding_period_start: Filter for start of bidding period
        :type bidding_period_start: datetime
        :param bidding_period_end: Filter for end of bidding period
        :type bidding_period_end: datetime
        :param delivery_period_start:
        :type delivery_period_start: datetime
        :param delivery_period_end:
        :type delivery_period_end: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_public_aggregated_allocated_auctions_serialize(
            border_direction=border_direction,
            timescales=timescales,
            product_types=product_types,
            bidding_period_start=bidding_period_start,
            bidding_period_end=bidding_period_end,
            delivery_period_start=delivery_period_start,
            delivery_period_end=delivery_period_end,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AggregatedAllocatedAuction]",
            '422': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_public_aggregated_allocated_auctions_serialize(
        self,
        border_direction,
        timescales,
        product_types,
        bidding_period_start,
        bidding_period_end,
        delivery_period_start,
        delivery_period_end,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'timescales': 'multi',
            'productTypes': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if border_direction is not None:
            
            _query_params.append(('borderDirection', border_direction.value))
            
        if timescales is not None:
            
            _query_params.append(('timescales', timescales))
            
        if product_types is not None:
            
            _query_params.append(('productTypes', product_types))
            
        if bidding_period_start is not None:
            if isinstance(bidding_period_start, datetime):
                _query_params.append(
                    (
                        'biddingPeriodStart',
                        bidding_period_start.isoformat()
                    )
                )
            else:
                _query_params.append(('biddingPeriodStart', bidding_period_start))
            
        if bidding_period_end is not None:
            if isinstance(bidding_period_end, datetime):
                _query_params.append(
                    (
                        'biddingPeriodEnd',
                        bidding_period_end.isoformat()
                    )
                )
            else:
                _query_params.append(('biddingPeriodEnd', bidding_period_end))
            
        if delivery_period_start is not None:
            if isinstance(delivery_period_start, datetime):
                _query_params.append(
                    (
                        'deliveryPeriodStart',
                        delivery_period_start.isoformat()
                    )
                )
            else:
                _query_params.append(('deliveryPeriodStart', delivery_period_start))
            
        if delivery_period_end is not None:
            if isinstance(delivery_period_end, datetime):
                _query_params.append(
                    (
                        'deliveryPeriodEnd',
                        delivery_period_end.isoformat()
                    )
                )
            else:
                _query_params.append(('deliveryPeriodEnd', delivery_period_end))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/public/allocated-auctions/aggregated',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_public_allocated_auctions(
        self,
        limit: Annotated[int, Field(le=100, strict=True, ge=1, description="Number of records to return on a page")],
        offset: Annotated[int, Field(strict=True, ge=0, description="Offset in the list of records to return")],
        sort_by: AllocatedAuctionSortBy,
        border_direction: Annotated[Optional[BorderDirection], Field(description="Border Direction (optional)")] = None,
        timescales: Annotated[Optional[List[AuctionTimescale]], Field(description="List of Auction Timescales (optional)")] = None,
        product_types: Annotated[Optional[List[AuctionProductType]], Field(description="List of Auction Product Types (optional)")] = None,
        bidding_period_start: Annotated[Optional[datetime], Field(description="Filter for start of bidding period")] = None,
        bidding_period_end: Annotated[Optional[datetime], Field(description="Filter for end of bidding period")] = None,
        delivery_period_start: Optional[datetime] = None,
        delivery_period_end: Optional[datetime] = None,
        query: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PublicAllocatedAuctionBatch:
        """get_public_allocated_auctions

        Fetch a paginated, sortable, filterable list of Allocated Auctions 

        :param limit: Number of records to return on a page (required)
        :type limit: int
        :param offset: Offset in the list of records to return (required)
        :type offset: int
        :param sort_by: (required)
        :type sort_by: AllocatedAuctionSortBy
        :param border_direction: Border Direction (optional)
        :type border_direction: BorderDirection
        :param timescales: List of Auction Timescales (optional)
        :type timescales: List[AuctionTimescale]
        :param product_types: List of Auction Product Types (optional)
        :type product_types: List[AuctionProductType]
        :param bidding_period_start: Filter for start of bidding period
        :type bidding_period_start: datetime
        :param bidding_period_end: Filter for end of bidding period
        :type bidding_period_end: datetime
        :param delivery_period_start:
        :type delivery_period_start: datetime
        :param delivery_period_end:
        :type delivery_period_end: datetime
        :param query:
        :type query: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_public_allocated_auctions_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            border_direction=border_direction,
            timescales=timescales,
            product_types=product_types,
            bidding_period_start=bidding_period_start,
            bidding_period_end=bidding_period_end,
            delivery_period_start=delivery_period_start,
            delivery_period_end=delivery_period_end,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PublicAllocatedAuctionBatch",
            '422': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_public_allocated_auctions_with_http_info(
        self,
        limit: Annotated[int, Field(le=100, strict=True, ge=1, description="Number of records to return on a page")],
        offset: Annotated[int, Field(strict=True, ge=0, description="Offset in the list of records to return")],
        sort_by: AllocatedAuctionSortBy,
        border_direction: Annotated[Optional[BorderDirection], Field(description="Border Direction (optional)")] = None,
        timescales: Annotated[Optional[List[AuctionTimescale]], Field(description="List of Auction Timescales (optional)")] = None,
        product_types: Annotated[Optional[List[AuctionProductType]], Field(description="List of Auction Product Types (optional)")] = None,
        bidding_period_start: Annotated[Optional[datetime], Field(description="Filter for start of bidding period")] = None,
        bidding_period_end: Annotated[Optional[datetime], Field(description="Filter for end of bidding period")] = None,
        delivery_period_start: Optional[datetime] = None,
        delivery_period_end: Optional[datetime] = None,
        query: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PublicAllocatedAuctionBatch]:
        """get_public_allocated_auctions

        Fetch a paginated, sortable, filterable list of Allocated Auctions 

        :param limit: Number of records to return on a page (required)
        :type limit: int
        :param offset: Offset in the list of records to return (required)
        :type offset: int
        :param sort_by: (required)
        :type sort_by: AllocatedAuctionSortBy
        :param border_direction: Border Direction (optional)
        :type border_direction: BorderDirection
        :param timescales: List of Auction Timescales (optional)
        :type timescales: List[AuctionTimescale]
        :param product_types: List of Auction Product Types (optional)
        :type product_types: List[AuctionProductType]
        :param bidding_period_start: Filter for start of bidding period
        :type bidding_period_start: datetime
        :param bidding_period_end: Filter for end of bidding period
        :type bidding_period_end: datetime
        :param delivery_period_start:
        :type delivery_period_start: datetime
        :param delivery_period_end:
        :type delivery_period_end: datetime
        :param query:
        :type query: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_public_allocated_auctions_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            border_direction=border_direction,
            timescales=timescales,
            product_types=product_types,
            bidding_period_start=bidding_period_start,
            bidding_period_end=bidding_period_end,
            delivery_period_start=delivery_period_start,
            delivery_period_end=delivery_period_end,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PublicAllocatedAuctionBatch",
            '422': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_public_allocated_auctions_without_preload_content(
        self,
        limit: Annotated[int, Field(le=100, strict=True, ge=1, description="Number of records to return on a page")],
        offset: Annotated[int, Field(strict=True, ge=0, description="Offset in the list of records to return")],
        sort_by: AllocatedAuctionSortBy,
        border_direction: Annotated[Optional[BorderDirection], Field(description="Border Direction (optional)")] = None,
        timescales: Annotated[Optional[List[AuctionTimescale]], Field(description="List of Auction Timescales (optional)")] = None,
        product_types: Annotated[Optional[List[AuctionProductType]], Field(description="List of Auction Product Types (optional)")] = None,
        bidding_period_start: Annotated[Optional[datetime], Field(description="Filter for start of bidding period")] = None,
        bidding_period_end: Annotated[Optional[datetime], Field(description="Filter for end of bidding period")] = None,
        delivery_period_start: Optional[datetime] = None,
        delivery_period_end: Optional[datetime] = None,
        query: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_public_allocated_auctions

        Fetch a paginated, sortable, filterable list of Allocated Auctions 

        :param limit: Number of records to return on a page (required)
        :type limit: int
        :param offset: Offset in the list of records to return (required)
        :type offset: int
        :param sort_by: (required)
        :type sort_by: AllocatedAuctionSortBy
        :param border_direction: Border Direction (optional)
        :type border_direction: BorderDirection
        :param timescales: List of Auction Timescales (optional)
        :type timescales: List[AuctionTimescale]
        :param product_types: List of Auction Product Types (optional)
        :type product_types: List[AuctionProductType]
        :param bidding_period_start: Filter for start of bidding period
        :type bidding_period_start: datetime
        :param bidding_period_end: Filter for end of bidding period
        :type bidding_period_end: datetime
        :param delivery_period_start:
        :type delivery_period_start: datetime
        :param delivery_period_end:
        :type delivery_period_end: datetime
        :param query:
        :type query: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_public_allocated_auctions_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            border_direction=border_direction,
            timescales=timescales,
            product_types=product_types,
            bidding_period_start=bidding_period_start,
            bidding_period_end=bidding_period_end,
            delivery_period_start=delivery_period_start,
            delivery_period_end=delivery_period_end,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PublicAllocatedAuctionBatch",
            '422': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_public_allocated_auctions_serialize(
        self,
        limit,
        offset,
        sort_by,
        border_direction,
        timescales,
        product_types,
        bidding_period_start,
        bidding_period_end,
        delivery_period_start,
        delivery_period_end,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'timescales': 'multi',
            'productTypes': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by.value))
            
        if border_direction is not None:
            
            _query_params.append(('borderDirection', border_direction.value))
            
        if timescales is not None:
            
            _query_params.append(('timescales', timescales))
            
        if product_types is not None:
            
            _query_params.append(('productTypes', product_types))
            
        if bidding_period_start is not None:
            if isinstance(bidding_period_start, datetime):
                _query_params.append(
                    (
                        'biddingPeriodStart',
                        bidding_period_start.isoformat()
                    )
                )
            else:
                _query_params.append(('biddingPeriodStart', bidding_period_start))
            
        if bidding_period_end is not None:
            if isinstance(bidding_period_end, datetime):
                _query_params.append(
                    (
                        'biddingPeriodEnd',
                        bidding_period_end.isoformat()
                    )
                )
            else:
                _query_params.append(('biddingPeriodEnd', bidding_period_end))
            
        if delivery_period_start is not None:
            if isinstance(delivery_period_start, datetime):
                _query_params.append(
                    (
                        'deliveryPeriodStart',
                        delivery_period_start.isoformat()
                    )
                )
            else:
                _query_params.append(('deliveryPeriodStart', delivery_period_start))
            
        if delivery_period_end is not None:
            if isinstance(delivery_period_end, datetime):
                _query_params.append(
                    (
                        'deliveryPeriodEnd',
                        delivery_period_end.isoformat()
                    )
                )
            else:
                _query_params.append(('deliveryPeriodEnd', delivery_period_end))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/public/allocated-auctions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


