# coding: utf-8

"""
    Zakazy Samovyvoz

    Upravlenie [sborohnymi zadaniami](/openapi/in-store-pickup#tag/Sborochnye-zadaniya-Samovyvoz) i [metadannymi](/openapi/in-store-pickup#tag/Metadannye-Samovyvoz) zakazov shemy Samovyvoz.   # noqa: E501

    OpenAPI spec version: instorepickup
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiNewOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ddate': 'str',
        'sale_price': 'int',
        'required_meta': 'list[str]',
        'article': 'str',
        'rid': 'str',
        'created_at': 'str',
        'warehouse_address': 'str',
        'order_code': 'str',
        'skus': 'list[str]',
        'id': 'int',
        'warehouse_id': 'int',
        'nm_id': 'int',
        'chrt_id': 'int',
        'pay_mode': 'str',
        'price': 'int',
        'currency_code': 'int',
        'cargo_type': 'int',
        'is_zero_order': 'bool'
    }

    attribute_map = {
        'ddate': 'ddate',
        'sale_price': 'salePrice',
        'required_meta': 'requiredMeta',
        'article': 'article',
        'rid': 'rid',
        'created_at': 'createdAt',
        'warehouse_address': 'warehouseAddress',
        'order_code': 'orderCode',
        'skus': 'skus',
        'id': 'id',
        'warehouse_id': 'warehouseId',
        'nm_id': 'nmId',
        'chrt_id': 'chrtId',
        'pay_mode': 'payMode',
        'price': 'price',
        'currency_code': 'currencyCode',
        'cargo_type': 'cargoType',
        'is_zero_order': 'isZeroOrder'
    }

    def __init__(self, ddate=None, sale_price=None, required_meta=None, article=None, rid=None, created_at=None, warehouse_address=None, order_code=None, skus=None, id=None, warehouse_id=None, nm_id=None, chrt_id=None, pay_mode=None, price=None, currency_code=None, cargo_type=None, is_zero_order=None):  # noqa: E501
        """ApiNewOrder - a model defined in Swagger"""  # noqa: E501
        self._ddate = None
        self._sale_price = None
        self._required_meta = None
        self._article = None
        self._rid = None
        self._created_at = None
        self._warehouse_address = None
        self._order_code = None
        self._skus = None
        self._id = None
        self._warehouse_id = None
        self._nm_id = None
        self._chrt_id = None
        self._pay_mode = None
        self._price = None
        self._currency_code = None
        self._cargo_type = None
        self._is_zero_order = None
        self.discriminator = None
        if ddate is not None:
            self.ddate = ddate
        if sale_price is not None:
            self.sale_price = sale_price
        if required_meta is not None:
            self.required_meta = required_meta
        if article is not None:
            self.article = article
        if rid is not None:
            self.rid = rid
        if created_at is not None:
            self.created_at = created_at
        if warehouse_address is not None:
            self.warehouse_address = warehouse_address
        if order_code is not None:
            self.order_code = order_code
        if skus is not None:
            self.skus = skus
        if id is not None:
            self.id = id
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if nm_id is not None:
            self.nm_id = nm_id
        if chrt_id is not None:
            self.chrt_id = chrt_id
        if pay_mode is not None:
            self.pay_mode = pay_mode
        if price is not None:
            self.price = price
        if currency_code is not None:
            self.currency_code = currency_code
        if cargo_type is not None:
            self.cargo_type = cargo_type
        if is_zero_order is not None:
            self.is_zero_order = is_zero_order

    @property
    def ddate(self):
        """Gets the ddate of this ApiNewOrder.  # noqa: E501

        Planiruemaa data dostavki  # noqa: E501

        :return: The ddate of this ApiNewOrder.  # noqa: E501
        :rtype: str
        """
        return self._ddate

    @ddate.setter
    def ddate(self, ddate):
        """Sets the ddate of this ApiNewOrder.

        Planiruemaa data dostavki  # noqa: E501

        :param ddate: The ddate of this ApiNewOrder.  # noqa: E501
        :type: str
        """

        self._ddate = ddate

    @property
    def sale_price(self):
        """Gets the sale_price of this ApiNewOrder.  # noqa: E501

        cena prodavca v valute prodahi s uhetom skidki prodavca, bez uheta skidki WB Kluba, umnohennaa na 100   # noqa: E501

        :return: The sale_price of this ApiNewOrder.  # noqa: E501
        :rtype: int
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price):
        """Sets the sale_price of this ApiNewOrder.

        cena prodavca v valute prodahi s uhetom skidki prodavca, bez uheta skidki WB Kluba, umnohennaa na 100   # noqa: E501

        :param sale_price: The sale_price of this ApiNewOrder.  # noqa: E501
        :type: int
        """

        self._sale_price = sale_price

    @property
    def required_meta(self):
        """Gets the required_meta of this ApiNewOrder.  # noqa: E501

        Perehen metadannyh, kotorye neobhodimo dobavit v sborohnoe zadanie. Na dannyi moment obazatelnym k dobavleniu avlaetsa tolko UIN, pri ego nalihii v perehne.   # noqa: E501

        :return: The required_meta of this ApiNewOrder.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_meta

    @required_meta.setter
    def required_meta(self, required_meta):
        """Sets the required_meta of this ApiNewOrder.

        Perehen metadannyh, kotorye neobhodimo dobavit v sborohnoe zadanie. Na dannyi moment obazatelnym k dobavleniu avlaetsa tolko UIN, pri ego nalihii v perehne.   # noqa: E501

        :param required_meta: The required_meta of this ApiNewOrder.  # noqa: E501
        :type: list[str]
        """

        self._required_meta = required_meta

    @property
    def article(self):
        """Gets the article of this ApiNewOrder.  # noqa: E501

        Artikul prodavca  # noqa: E501

        :return: The article of this ApiNewOrder.  # noqa: E501
        :rtype: str
        """
        return self._article

    @article.setter
    def article(self, article):
        """Sets the article of this ApiNewOrder.

        Artikul prodavca  # noqa: E501

        :param article: The article of this ApiNewOrder.  # noqa: E501
        :type: str
        """

        self._article = article

    @property
    def rid(self):
        """Gets the rid of this ApiNewOrder.  # noqa: E501

        ID sborohnogo zadania v sisteme WB  # noqa: E501

        :return: The rid of this ApiNewOrder.  # noqa: E501
        :rtype: str
        """
        return self._rid

    @rid.setter
    def rid(self, rid):
        """Sets the rid of this ApiNewOrder.

        ID sborohnogo zadania v sisteme WB  # noqa: E501

        :param rid: The rid of this ApiNewOrder.  # noqa: E501
        :type: str
        """

        self._rid = rid

    @property
    def created_at(self):
        """Gets the created_at of this ApiNewOrder.  # noqa: E501

        Data i vrema sozdania sborohnogo zadania  # noqa: E501

        :return: The created_at of this ApiNewOrder.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ApiNewOrder.

        Data i vrema sozdania sborohnogo zadania  # noqa: E501

        :param created_at: The created_at of this ApiNewOrder.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def warehouse_address(self):
        """Gets the warehouse_address of this ApiNewOrder.  # noqa: E501

        Adres magazina (sklada prodavca), na kotoryi postupilo sborohnoe zadanie   # noqa: E501

        :return: The warehouse_address of this ApiNewOrder.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_address

    @warehouse_address.setter
    def warehouse_address(self, warehouse_address):
        """Sets the warehouse_address of this ApiNewOrder.

        Adres magazina (sklada prodavca), na kotoryi postupilo sborohnoe zadanie   # noqa: E501

        :param warehouse_address: The warehouse_address of this ApiNewOrder.  # noqa: E501
        :type: str
        """

        self._warehouse_address = warehouse_address

    @property
    def order_code(self):
        """Gets the order_code of this ApiNewOrder.  # noqa: E501

        Unikalnyi ID, po kotoromu pokupatel mohet poluhit svoi zakaz   # noqa: E501

        :return: The order_code of this ApiNewOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_code

    @order_code.setter
    def order_code(self, order_code):
        """Sets the order_code of this ApiNewOrder.

        Unikalnyi ID, po kotoromu pokupatel mohet poluhit svoi zakaz   # noqa: E501

        :param order_code: The order_code of this ApiNewOrder.  # noqa: E501
        :type: str
        """

        self._order_code = order_code

    @property
    def skus(self):
        """Gets the skus of this ApiNewOrder.  # noqa: E501

        Massiv barkodov tovara  # noqa: E501

        :return: The skus of this ApiNewOrder.  # noqa: E501
        :rtype: list[str]
        """
        return self._skus

    @skus.setter
    def skus(self, skus):
        """Sets the skus of this ApiNewOrder.

        Massiv barkodov tovara  # noqa: E501

        :param skus: The skus of this ApiNewOrder.  # noqa: E501
        :type: list[str]
        """

        self._skus = skus

    @property
    def id(self):
        """Gets the id of this ApiNewOrder.  # noqa: E501

        ID sborohnogo zadania  # noqa: E501

        :return: The id of this ApiNewOrder.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiNewOrder.

        ID sborohnogo zadania  # noqa: E501

        :param id: The id of this ApiNewOrder.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ApiNewOrder.  # noqa: E501

        ID sklada prodavca, na kotoryi postupilo sborohnoe zadanie   # noqa: E501

        :return: The warehouse_id of this ApiNewOrder.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ApiNewOrder.

        ID sklada prodavca, na kotoryi postupilo sborohnoe zadanie   # noqa: E501

        :param warehouse_id: The warehouse_id of this ApiNewOrder.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    @property
    def nm_id(self):
        """Gets the nm_id of this ApiNewOrder.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this ApiNewOrder.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this ApiNewOrder.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this ApiNewOrder.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def chrt_id(self):
        """Gets the chrt_id of this ApiNewOrder.  # noqa: E501

        ID razmera tovara v sisteme WB  # noqa: E501

        :return: The chrt_id of this ApiNewOrder.  # noqa: E501
        :rtype: int
        """
        return self._chrt_id

    @chrt_id.setter
    def chrt_id(self, chrt_id):
        """Sets the chrt_id of this ApiNewOrder.

        ID razmera tovara v sisteme WB  # noqa: E501

        :param chrt_id: The chrt_id of this ApiNewOrder.  # noqa: E501
        :type: int
        """

        self._chrt_id = chrt_id

    @property
    def pay_mode(self):
        """Gets the pay_mode of this ApiNewOrder.  # noqa: E501

        Rehim oplaty:    - `prepaid` — predoplatnyi   - `postpaid` — postoplatnyi   - `unknown` — neizvestnyi    # noqa: E501

        :return: The pay_mode of this ApiNewOrder.  # noqa: E501
        :rtype: str
        """
        return self._pay_mode

    @pay_mode.setter
    def pay_mode(self, pay_mode):
        """Sets the pay_mode of this ApiNewOrder.

        Rehim oplaty:    - `prepaid` — predoplatnyi   - `postpaid` — postoplatnyi   - `unknown` — neizvestnyi    # noqa: E501

        :param pay_mode: The pay_mode of this ApiNewOrder.  # noqa: E501
        :type: str
        """

        self._pay_mode = pay_mode

    @property
    def price(self):
        """Gets the price of this ApiNewOrder.  # noqa: E501

        cena v valute prodahi s uhetom vseh skidok, umnohennaa na 100. Kod valuty prodahi — v pole `currencyCode`.   # noqa: E501

        :return: The price of this ApiNewOrder.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ApiNewOrder.

        cena v valute prodahi s uhetom vseh skidok, umnohennaa na 100. Kod valuty prodahi — v pole `currencyCode`.   # noqa: E501

        :param price: The price of this ApiNewOrder.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def currency_code(self):
        """Gets the currency_code of this ApiNewOrder.  # noqa: E501

        Kod valuty prodahi  # noqa: E501

        :return: The currency_code of this ApiNewOrder.  # noqa: E501
        :rtype: int
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ApiNewOrder.

        Kod valuty prodahi  # noqa: E501

        :param currency_code: The currency_code of this ApiNewOrder.  # noqa: E501
        :type: int
        """

        self._currency_code = currency_code

    @property
    def cargo_type(self):
        """Gets the cargo_type of this ApiNewOrder.  # noqa: E501

        <dl> <dt>Tip tovara:</dt> <dd>1 - standartnyi</dd> <dd>2 - SGT (Sverhgabaritnyi tovar)</dd> <dd>3 - KGT+ (Krupnogabaritnyi tovar)</dd> </dl>   # noqa: E501

        :return: The cargo_type of this ApiNewOrder.  # noqa: E501
        :rtype: int
        """
        return self._cargo_type

    @cargo_type.setter
    def cargo_type(self, cargo_type):
        """Sets the cargo_type of this ApiNewOrder.

        <dl> <dt>Tip tovara:</dt> <dd>1 - standartnyi</dd> <dd>2 - SGT (Sverhgabaritnyi tovar)</dd> <dd>3 - KGT+ (Krupnogabaritnyi tovar)</dd> </dl>   # noqa: E501

        :param cargo_type: The cargo_type of this ApiNewOrder.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if cargo_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cargo_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cargo_type, allowed_values)
            )

        self._cargo_type = cargo_type

    @property
    def is_zero_order(self):
        """Gets the is_zero_order of this ApiNewOrder.  # noqa: E501

        Priznak zakaza, sdelannogo na nulevoi ostatok tovara. (`false` - zakaz sdelan na tovar s nenulevym ostatkom, `true` - zakaz sdelan na tovar s ostatkom ravnym nulu. Sborohnoe zadanie mohno otmenit bez htrafa za otmenu)  # noqa: E501

        :return: The is_zero_order of this ApiNewOrder.  # noqa: E501
        :rtype: bool
        """
        return self._is_zero_order

    @is_zero_order.setter
    def is_zero_order(self, is_zero_order):
        """Sets the is_zero_order of this ApiNewOrder.

        Priznak zakaza, sdelannogo na nulevoi ostatok tovara. (`false` - zakaz sdelan na tovar s nenulevym ostatkom, `true` - zakaz sdelan na tovar s ostatkom ravnym nulu. Sborohnoe zadanie mohno otmenit bez htrafa za otmenu)  # noqa: E501

        :param is_zero_order: The is_zero_order of this ApiNewOrder.  # noqa: E501
        :type: bool
        """

        self._is_zero_order = is_zero_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiNewOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiNewOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
