# coding: utf-8

"""
    Zakazy FBS

    <div class=\"description_important\">       Uznat bolhe o zakazah FBS mohno v <a href=\"https://seller.wildberries.ru/instructions/category/b3e60238-fd4c-49ce-8668-ff688725a12d?goBackOption=prevRoute&categoryId=5a8e1202-0865-45b7-acae-5d0afc7add56\">spravohnom centre</a> </div>  V razdele zakazov FBS (Fulfillment by Seller) vam dostupny metody:   1. Upravlenia [sborohnymi zadaniami](/openapi/orders-fbs#tag/Sborochnye-zadaniya): informacia o sborohnyh zadaniah, metadannye, stikery i tak dalee.   2. Upravlenia [postavkami zakazov](/openapi/orders-fbs#tag/Postavki-FBS) prodavca na sklady WB.   3. Zakaza [propuskov](/openapi/orders-fbs#tag/Propuska) na sklady WB.   4. Dostavki zakazov [kurerom WB](/openapi/orders-fbs#tag/Dostavka-kurerom-WB-(DBW)) (DBW).   # noqa: E501

    OpenAPI spec version: order
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'full_address': 'str',
        'longitude': 'float',
        'latitude': 'float'
    }

    attribute_map = {
        'full_address': 'fullAddress',
        'longitude': 'longitude',
        'latitude': 'latitude'
    }

    def __init__(self, full_address=None, longitude=None, latitude=None):  # noqa: E501
        """OrderAddress - a model defined in Swagger"""  # noqa: E501
        self._full_address = None
        self._longitude = None
        self._latitude = None
        self.discriminator = None
        if full_address is not None:
            self.full_address = full_address
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude

    @property
    def full_address(self):
        """Gets the full_address of this OrderAddress.  # noqa: E501

        Adres dostavki.  # noqa: E501

        :return: The full_address of this OrderAddress.  # noqa: E501
        :rtype: str
        """
        return self._full_address

    @full_address.setter
    def full_address(self, full_address):
        """Sets the full_address of this OrderAddress.

        Adres dostavki.  # noqa: E501

        :param full_address: The full_address of this OrderAddress.  # noqa: E501
        :type: str
        """

        self._full_address = full_address

    @property
    def longitude(self):
        """Gets the longitude of this OrderAddress.  # noqa: E501

        Koordinata dolgoty  # noqa: E501

        :return: The longitude of this OrderAddress.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this OrderAddress.

        Koordinata dolgoty  # noqa: E501

        :param longitude: The longitude of this OrderAddress.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this OrderAddress.  # noqa: E501

        Koordinaty hiroty  # noqa: E501

        :return: The latitude of this OrderAddress.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this OrderAddress.

        Koordinaty hiroty  # noqa: E501

        :param latitude: The latitude of this OrderAddress.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
