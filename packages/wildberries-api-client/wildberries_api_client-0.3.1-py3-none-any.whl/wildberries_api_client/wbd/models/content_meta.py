# coding: utf-8

"""
    Wildberries cifrovoi

    Po voprosam raboty s WBD API, obrahaites v <a href=\"https://digital.wildberries.ru/support\" target=\"_blank\">tehniheskuu podderhku</a>.   # noqa: E501

    OpenAPI spec version: wbd
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContentMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'thumbnail': 'list[str]',
        'source_file_name': 'str',
        'rating': 'str',
        'original_name': 'str',
        'voice': 'str',
        'bisac': 'str',
        'pages': 'int',
        'author': 'str',
        'translator': 'str',
        'duration': 'str'
    }

    attribute_map = {
        'thumbnail': 'thumbnail',
        'source_file_name': 'source_file_name',
        'rating': 'rating',
        'original_name': 'original_name',
        'voice': 'voice',
        'bisac': 'bisac',
        'pages': 'pages',
        'author': 'author',
        'translator': 'translator',
        'duration': 'duration'
    }

    def __init__(self, thumbnail=None, source_file_name=None, rating=None, original_name=None, voice=None, bisac=None, pages=None, author=None, translator=None, duration=None):  # noqa: E501
        """ContentMeta - a model defined in Swagger"""  # noqa: E501
        self._thumbnail = None
        self._source_file_name = None
        self._rating = None
        self._original_name = None
        self._voice = None
        self._bisac = None
        self._pages = None
        self._author = None
        self._translator = None
        self._duration = None
        self.discriminator = None
        self.thumbnail = thumbnail
        if source_file_name is not None:
            self.source_file_name = source_file_name
        if rating is not None:
            self.rating = rating
        if original_name is not None:
            self.original_name = original_name
        if voice is not None:
            self.voice = voice
        if bisac is not None:
            self.bisac = bisac
        if pages is not None:
            self.pages = pages
        if author is not None:
            self.author = author
        if translator is not None:
            self.translator = translator
        if duration is not None:
            self.duration = duration

    @property
    def thumbnail(self):
        """Gets the thumbnail of this ContentMeta.  # noqa: E501

        URI adresa oblohki kontenta  # noqa: E501

        :return: The thumbnail of this ContentMeta.  # noqa: E501
        :rtype: list[str]
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this ContentMeta.

        URI adresa oblohki kontenta  # noqa: E501

        :param thumbnail: The thumbnail of this ContentMeta.  # noqa: E501
        :type: list[str]
        """
        if thumbnail is None:
            raise ValueError("Invalid value for `thumbnail`, must not be `None`")  # noqa: E501

        self._thumbnail = thumbnail

    @property
    def source_file_name(self):
        """Gets the source_file_name of this ContentMeta.  # noqa: E501

        Ima ishodnogo faila  # noqa: E501

        :return: The source_file_name of this ContentMeta.  # noqa: E501
        :rtype: str
        """
        return self._source_file_name

    @source_file_name.setter
    def source_file_name(self, source_file_name):
        """Sets the source_file_name of this ContentMeta.

        Ima ishodnogo faila  # noqa: E501

        :param source_file_name: The source_file_name of this ContentMeta.  # noqa: E501
        :type: str
        """

        self._source_file_name = source_file_name

    @property
    def rating(self):
        """Gets the rating of this ContentMeta.  # noqa: E501

        Vozrastnoe ogranihenie  # noqa: E501

        :return: The rating of this ContentMeta.  # noqa: E501
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this ContentMeta.

        Vozrastnoe ogranihenie  # noqa: E501

        :param rating: The rating of this ContentMeta.  # noqa: E501
        :type: str
        """
        allowed_values = ["0+", "6+", "12+", "14+", "16+", "18+"]  # noqa: E501
        if rating not in allowed_values:
            raise ValueError(
                "Invalid value for `rating` ({0}), must be one of {1}"  # noqa: E501
                .format(rating, allowed_values)
            )

        self._rating = rating

    @property
    def original_name(self):
        """Gets the original_name of this ContentMeta.  # noqa: E501

        Originalnoe nazvanie kontenta  # noqa: E501

        :return: The original_name of this ContentMeta.  # noqa: E501
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this ContentMeta.

        Originalnoe nazvanie kontenta  # noqa: E501

        :param original_name: The original_name of this ContentMeta.  # noqa: E501
        :type: str
        """

        self._original_name = original_name

    @property
    def voice(self):
        """Gets the voice of this ContentMeta.  # noqa: E501

        Akter ozvuhivauhii audiokontent  # noqa: E501

        :return: The voice of this ContentMeta.  # noqa: E501
        :rtype: str
        """
        return self._voice

    @voice.setter
    def voice(self, voice):
        """Sets the voice of this ContentMeta.

        Akter ozvuhivauhii audiokontent  # noqa: E501

        :param voice: The voice of this ContentMeta.  # noqa: E501
        :type: str
        """

        self._voice = voice

    @property
    def bisac(self):
        """Gets the bisac of this ContentMeta.  # noqa: E501

        [ISBN](https://en.wikipedia.org/wiki/ISBN) (Mehdunarodnyi standartnyi knihnyi nomer) - Kahdyi ISBN unikalen - Sostoit iz 13 simvolov, nahinaa s prefiksa \"978\" ili \"979\"   # noqa: E501

        :return: The bisac of this ContentMeta.  # noqa: E501
        :rtype: str
        """
        return self._bisac

    @bisac.setter
    def bisac(self, bisac):
        """Sets the bisac of this ContentMeta.

        [ISBN](https://en.wikipedia.org/wiki/ISBN) (Mehdunarodnyi standartnyi knihnyi nomer) - Kahdyi ISBN unikalen - Sostoit iz 13 simvolov, nahinaa s prefiksa \"978\" ili \"979\"   # noqa: E501

        :param bisac: The bisac of this ContentMeta.  # noqa: E501
        :type: str
        """

        self._bisac = bisac

    @property
    def pages(self):
        """Gets the pages of this ContentMeta.  # noqa: E501

        Kolihestvo stranic v knige (faile)  # noqa: E501

        :return: The pages of this ContentMeta.  # noqa: E501
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this ContentMeta.

        Kolihestvo stranic v knige (faile)  # noqa: E501

        :param pages: The pages of this ContentMeta.  # noqa: E501
        :type: int
        """

        self._pages = pages

    @property
    def author(self):
        """Gets the author of this ContentMeta.  # noqa: E501

        Avtor kontenta  # noqa: E501

        :return: The author of this ContentMeta.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ContentMeta.

        Avtor kontenta  # noqa: E501

        :param author: The author of this ContentMeta.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def translator(self):
        """Gets the translator of this ContentMeta.  # noqa: E501

        Avtor perevoda, takhe izvestnyi kak perevodhik, eto helovek, kotoryi zanimaetsa perevodom teksta iz odnogo azyka na drugoi.   # noqa: E501

        :return: The translator of this ContentMeta.  # noqa: E501
        :rtype: str
        """
        return self._translator

    @translator.setter
    def translator(self, translator):
        """Sets the translator of this ContentMeta.

        Avtor perevoda, takhe izvestnyi kak perevodhik, eto helovek, kotoryi zanimaetsa perevodom teksta iz odnogo azyka na drugoi.   # noqa: E501

        :param translator: The translator of this ContentMeta.  # noqa: E501
        :type: str
        """

        self._translator = translator

    @property
    def duration(self):
        """Gets the duration of this ContentMeta.  # noqa: E501

        Prodolhitelnost kontenta  # noqa: E501

        :return: The duration of this ContentMeta.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ContentMeta.

        Prodolhitelnost kontenta  # noqa: E501

        :param duration: The duration of this ContentMeta.  # noqa: E501
        :type: str
        """

        self._duration = duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
