# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from empire_platform_api_public_client_legacy.models.subscription_notification_preference import SubscriptionNotificationPreference
from empire_platform_api_public_client_legacy.models.subscription_notification_preference_with_email import SubscriptionNotificationPreferenceWithEmail

class UserPreferencesSubscriptionNotifications(BaseModel):
    """
    UserPreferencesSubscriptionNotifications
    """
    long_term_auction_updates: SubscriptionNotificationPreferenceWithEmail = Field(default=..., alias="longTermAuctionUpdates")
    day_ahead_auction_updates: SubscriptionNotificationPreference = Field(default=..., alias="dayAheadAuctionUpdates")
    intraday_auction_updates: SubscriptionNotificationPreference = Field(default=..., alias="intradayAuctionUpdates")
    buy_now_transmission_rights_offers: SubscriptionNotificationPreferenceWithEmail = Field(default=..., alias="buyNowTransmissionRightsOffers")
    unplanned_outage_updates: SubscriptionNotificationPreferenceWithEmail = Field(default=..., alias="unplannedOutageUpdates")
    curtailment: SubscriptionNotificationPreferenceWithEmail = Field(...)
    __properties = ["longTermAuctionUpdates", "dayAheadAuctionUpdates", "intradayAuctionUpdates", "buyNowTransmissionRightsOffers", "unplannedOutageUpdates", "curtailment"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserPreferencesSubscriptionNotifications:
        """Create an instance of UserPreferencesSubscriptionNotifications from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of long_term_auction_updates
        if self.long_term_auction_updates:
            _dict['longTermAuctionUpdates'] = self.long_term_auction_updates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of day_ahead_auction_updates
        if self.day_ahead_auction_updates:
            _dict['dayAheadAuctionUpdates'] = self.day_ahead_auction_updates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of intraday_auction_updates
        if self.intraday_auction_updates:
            _dict['intradayAuctionUpdates'] = self.intraday_auction_updates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buy_now_transmission_rights_offers
        if self.buy_now_transmission_rights_offers:
            _dict['buyNowTransmissionRightsOffers'] = self.buy_now_transmission_rights_offers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unplanned_outage_updates
        if self.unplanned_outage_updates:
            _dict['unplannedOutageUpdates'] = self.unplanned_outage_updates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of curtailment
        if self.curtailment:
            _dict['curtailment'] = self.curtailment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserPreferencesSubscriptionNotifications:
        """Create an instance of UserPreferencesSubscriptionNotifications from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserPreferencesSubscriptionNotifications.parse_obj(obj)

        _obj = UserPreferencesSubscriptionNotifications.parse_obj({
            "long_term_auction_updates": SubscriptionNotificationPreferenceWithEmail.from_dict(obj.get("longTermAuctionUpdates")) if obj.get("longTermAuctionUpdates") is not None else None,
            "day_ahead_auction_updates": SubscriptionNotificationPreference.from_dict(obj.get("dayAheadAuctionUpdates")) if obj.get("dayAheadAuctionUpdates") is not None else None,
            "intraday_auction_updates": SubscriptionNotificationPreference.from_dict(obj.get("intradayAuctionUpdates")) if obj.get("intradayAuctionUpdates") is not None else None,
            "buy_now_transmission_rights_offers": SubscriptionNotificationPreferenceWithEmail.from_dict(obj.get("buyNowTransmissionRightsOffers")) if obj.get("buyNowTransmissionRightsOffers") is not None else None,
            "unplanned_outage_updates": SubscriptionNotificationPreferenceWithEmail.from_dict(obj.get("unplannedOutageUpdates")) if obj.get("unplannedOutageUpdates") is not None else None,
            "curtailment": SubscriptionNotificationPreferenceWithEmail.from_dict(obj.get("curtailment")) if obj.get("curtailment") is not None else None
        })
        return _obj


