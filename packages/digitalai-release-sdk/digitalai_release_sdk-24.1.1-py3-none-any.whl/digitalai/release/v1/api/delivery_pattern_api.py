"""
    Digital.ai Release API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from digitalai.release.v1.api_client import ApiClient, Endpoint as _Endpoint
from digitalai.release.v1.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from digitalai.release.v1.model.create_delivery import CreateDelivery
from digitalai.release.v1.model.create_delivery_stage import CreateDeliveryStage
from digitalai.release.v1.model.delivery import Delivery
from digitalai.release.v1.model.delivery_pattern_filters import DeliveryPatternFilters
from digitalai.release.v1.model.duplicate_delivery_pattern import DuplicateDeliveryPattern
from digitalai.release.v1.model.stage import Stage
from digitalai.release.v1.model.tracked_item import TrackedItem
from digitalai.release.v1.model.transition import Transition
from digitalai.release.v1.model.validate_pattern import ValidatePattern


class DeliveryPatternApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.check_title_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/checkTitle',
                'operation_id': 'check_title',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'validate_pattern',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'validate_pattern':
                        (ValidatePattern,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'validate_pattern': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_delivery_from_pattern_endpoint = _Endpoint(
            settings={
                'response_type': (Delivery,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{patternId}/create',
                'operation_id': 'create_delivery_from_pattern',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'pattern_id',
                    'create_delivery',
                ],
                'required': [
                    'pattern_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pattern_id',
                ]
            },
            root_map={
                'validations': {
                    ('pattern_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pattern_id':
                        (str,),
                    'create_delivery':
                        (CreateDelivery,),
                },
                'attribute_map': {
                    'pattern_id': 'patternId',
                },
                'location_map': {
                    'pattern_id': 'path',
                    'create_delivery': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_pattern_endpoint = _Endpoint(
            settings={
                'response_type': (Delivery,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns',
                'operation_id': 'create_pattern',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'delivery',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delivery':
                        (Delivery,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'delivery': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_stage_endpoint = _Endpoint(
            settings={
                'response_type': (Stage,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{patternId}/createStage',
                'operation_id': 'create_stage',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'pattern_id',
                    'create_delivery_stage',
                ],
                'required': [
                    'pattern_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pattern_id',
                ]
            },
            root_map={
                'validations': {
                    ('pattern_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pattern_id':
                        (str,),
                    'create_delivery_stage':
                        (CreateDeliveryStage,),
                },
                'attribute_map': {
                    'pattern_id': 'patternId',
                },
                'location_map': {
                    'pattern_id': 'path',
                    'create_delivery_stage': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_stage1_endpoint = _Endpoint(
            settings={
                'response_type': (Stage,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{patternId}/stages',
                'operation_id': 'create_stage1',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'pattern_id',
                    'stage',
                ],
                'required': [
                    'pattern_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pattern_id',
                ]
            },
            root_map={
                'validations': {
                    ('pattern_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pattern_id':
                        (str,),
                    'stage':
                        (Stage,),
                },
                'attribute_map': {
                    'pattern_id': 'patternId',
                },
                'location_map': {
                    'pattern_id': 'path',
                    'stage': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_stage2_endpoint = _Endpoint(
            settings={
                'response_type': (Stage,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{patternId}/stages/{position}',
                'operation_id': 'create_stage2',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'pattern_id',
                    'position',
                    'stage',
                ],
                'required': [
                    'pattern_id',
                    'position',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pattern_id',
                ]
            },
            root_map={
                'validations': {
                    ('pattern_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pattern_id':
                        (str,),
                    'position':
                        (int,),
                    'stage':
                        (Stage,),
                },
                'attribute_map': {
                    'pattern_id': 'patternId',
                    'position': 'position',
                },
                'location_map': {
                    'pattern_id': 'path',
                    'position': 'path',
                    'stage': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_tracked_item_in_pattern_endpoint = _Endpoint(
            settings={
                'response_type': (TrackedItem,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{patternId}/tracked-items',
                'operation_id': 'create_tracked_item_in_pattern',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'pattern_id',
                    'tracked_item',
                ],
                'required': [
                    'pattern_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pattern_id',
                ]
            },
            root_map={
                'validations': {
                    ('pattern_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pattern_id':
                        (str,),
                    'tracked_item':
                        (TrackedItem,),
                },
                'attribute_map': {
                    'pattern_id': 'patternId',
                },
                'location_map': {
                    'pattern_id': 'path',
                    'tracked_item': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_transition_endpoint = _Endpoint(
            settings={
                'response_type': (Transition,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{stageId}/transitions',
                'operation_id': 'create_transition',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'stage_id',
                    'transition',
                ],
                'required': [
                    'stage_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'stage_id',
                ]
            },
            root_map={
                'validations': {
                    ('stage_id',): {

                        'regex': {
                            'pattern': r'.*Stage[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'stage_id':
                        (str,),
                    'transition':
                        (Transition,),
                },
                'attribute_map': {
                    'stage_id': 'stageId',
                },
                'location_map': {
                    'stage_id': 'path',
                    'transition': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_pattern_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{patternId}',
                'operation_id': 'delete_pattern',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'pattern_id',
                ],
                'required': [
                    'pattern_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pattern_id',
                ]
            },
            root_map={
                'validations': {
                    ('pattern_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pattern_id':
                        (str,),
                },
                'attribute_map': {
                    'pattern_id': 'patternId',
                },
                'location_map': {
                    'pattern_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_stage_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{stageId}',
                'operation_id': 'delete_stage',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'stage_id',
                ],
                'required': [
                    'stage_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'stage_id',
                ]
            },
            root_map={
                'validations': {
                    ('stage_id',): {

                        'regex': {
                            'pattern': r'.*Stage[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'stage_id':
                        (str,),
                },
                'attribute_map': {
                    'stage_id': 'stageId',
                },
                'location_map': {
                    'stage_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_tracked_item_delivery_pattern_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{itemId}',
                'operation_id': 'delete_tracked_item_delivery_pattern',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_id',
                ],
                'required': [
                    'item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'item_id',
                ]
            },
            root_map={
                'validations': {
                    ('item_id',): {

                        'regex': {
                            'pattern': r'.*TrackedItem[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_id':
                        (str,),
                },
                'attribute_map': {
                    'item_id': 'itemId',
                },
                'location_map': {
                    'item_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_transition_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{transitionId}',
                'operation_id': 'delete_transition',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'transition_id',
                ],
                'required': [
                    'transition_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'transition_id',
                ]
            },
            root_map={
                'validations': {
                    ('transition_id',): {

                        'regex': {
                            'pattern': r'.*Transition[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transition_id':
                        (str,),
                },
                'attribute_map': {
                    'transition_id': 'transitionId',
                },
                'location_map': {
                    'transition_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.duplicate_pattern_endpoint = _Endpoint(
            settings={
                'response_type': (Delivery,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{patternId}/duplicate',
                'operation_id': 'duplicate_pattern',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'pattern_id',
                    'duplicate_delivery_pattern',
                ],
                'required': [
                    'pattern_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pattern_id',
                ]
            },
            root_map={
                'validations': {
                    ('pattern_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pattern_id':
                        (str,),
                    'duplicate_delivery_pattern':
                        (DuplicateDeliveryPattern,),
                },
                'attribute_map': {
                    'pattern_id': 'patternId',
                },
                'location_map': {
                    'pattern_id': 'path',
                    'duplicate_delivery_pattern': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_pattern_endpoint = _Endpoint(
            settings={
                'response_type': (Delivery,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{patternId}',
                'operation_id': 'get_pattern',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'pattern_id',
                ],
                'required': [
                    'pattern_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pattern_id',
                ]
            },
            root_map={
                'validations': {
                    ('pattern_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pattern_id':
                        (str,),
                },
                'attribute_map': {
                    'pattern_id': 'patternId',
                },
                'location_map': {
                    'pattern_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pattern_by_id_or_title_endpoint = _Endpoint(
            settings={
                'response_type': (Delivery,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{patternIdOrTitle}',
                'operation_id': 'get_pattern_by_id_or_title',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'pattern_id_or_title',
                ],
                'required': [
                    'pattern_id_or_title',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pattern_id_or_title':
                        (str,),
                },
                'attribute_map': {
                    'pattern_id_or_title': 'patternIdOrTitle',
                },
                'location_map': {
                    'pattern_id_or_title': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_stages_in_pattern_endpoint = _Endpoint(
            settings={
                'response_type': ([Stage],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{patternId}/stages',
                'operation_id': 'get_stages_in_pattern',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'pattern_id',
                ],
                'required': [
                    'pattern_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pattern_id',
                ]
            },
            root_map={
                'validations': {
                    ('pattern_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pattern_id':
                        (str,),
                },
                'attribute_map': {
                    'pattern_id': 'patternId',
                },
                'location_map': {
                    'pattern_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_tracked_items_in_pattern_endpoint = _Endpoint(
            settings={
                'response_type': ([TrackedItem],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{patternId}/tracked-items',
                'operation_id': 'get_tracked_items_in_pattern',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'pattern_id',
                ],
                'required': [
                    'pattern_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pattern_id',
                ]
            },
            root_map={
                'validations': {
                    ('pattern_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pattern_id':
                        (str,),
                },
                'attribute_map': {
                    'pattern_id': 'patternId',
                },
                'location_map': {
                    'pattern_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_patterns_endpoint = _Endpoint(
            settings={
                'response_type': ([Delivery],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/search',
                'operation_id': 'search_patterns',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'page',
                    'results_per_page',
                    'delivery_pattern_filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'page':
                        (int,),
                    'results_per_page':
                        (int,),
                    'delivery_pattern_filters':
                        (DeliveryPatternFilters,),
                },
                'attribute_map': {
                    'page': 'page',
                    'results_per_page': 'resultsPerPage',
                },
                'location_map': {
                    'page': 'query',
                    'results_per_page': 'query',
                    'delivery_pattern_filters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_pattern_endpoint = _Endpoint(
            settings={
                'response_type': (Delivery,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{patternId}',
                'operation_id': 'update_pattern',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'pattern_id',
                    'delivery',
                ],
                'required': [
                    'pattern_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'pattern_id',
                ]
            },
            root_map={
                'validations': {
                    ('pattern_id',): {

                        'regex': {
                            'pattern': r'.*Delivery[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pattern_id':
                        (str,),
                    'delivery':
                        (Delivery,),
                },
                'attribute_map': {
                    'pattern_id': 'patternId',
                },
                'location_map': {
                    'pattern_id': 'path',
                    'delivery': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_stage_from_batch_endpoint = _Endpoint(
            settings={
                'response_type': (Stage,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{stageId}/batched',
                'operation_id': 'update_stage_from_batch',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'stage_id',
                    'stage',
                ],
                'required': [
                    'stage_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'stage_id',
                ]
            },
            root_map={
                'validations': {
                    ('stage_id',): {

                        'regex': {
                            'pattern': r'.*Stage[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'stage_id':
                        (str,),
                    'stage':
                        (Stage,),
                },
                'attribute_map': {
                    'stage_id': 'stageId',
                },
                'location_map': {
                    'stage_id': 'path',
                    'stage': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_stage_in_pattern_endpoint = _Endpoint(
            settings={
                'response_type': (Stage,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{stageId}',
                'operation_id': 'update_stage_in_pattern',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'stage_id',
                    'stage',
                ],
                'required': [
                    'stage_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'stage_id',
                ]
            },
            root_map={
                'validations': {
                    ('stage_id',): {

                        'regex': {
                            'pattern': r'.*Stage[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'stage_id':
                        (str,),
                    'stage':
                        (Stage,),
                },
                'attribute_map': {
                    'stage_id': 'stageId',
                },
                'location_map': {
                    'stage_id': 'path',
                    'stage': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_tracked_item_in_pattern_endpoint = _Endpoint(
            settings={
                'response_type': (TrackedItem,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{itemId}',
                'operation_id': 'update_tracked_item_in_pattern',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'item_id',
                    'tracked_item',
                ],
                'required': [
                    'item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'item_id',
                ]
            },
            root_map={
                'validations': {
                    ('item_id',): {

                        'regex': {
                            'pattern': r'.*TrackedItem[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'item_id':
                        (str,),
                    'tracked_item':
                        (TrackedItem,),
                },
                'attribute_map': {
                    'item_id': 'itemId',
                },
                'location_map': {
                    'item_id': 'path',
                    'tracked_item': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_transition_in_pattern_endpoint = _Endpoint(
            settings={
                'response_type': (Transition,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/delivery-patterns/{transitionId}',
                'operation_id': 'update_transition_in_pattern',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'transition_id',
                    'transition',
                ],
                'required': [
                    'transition_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'transition_id',
                ]
            },
            root_map={
                'validations': {
                    ('transition_id',): {

                        'regex': {
                            'pattern': r'.*Transition[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transition_id':
                        (str,),
                    'transition':
                        (Transition,),
                },
                'attribute_map': {
                    'transition_id': 'transitionId',
                },
                'location_map': {
                    'transition_id': 'path',
                    'transition': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def check_title(
        self,
        **kwargs
    ):
        """check_title  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_title(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            validate_pattern (ValidatePattern): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.check_title_endpoint.call_with_http_info(**kwargs)

    def create_delivery_from_pattern(
        self,
        pattern_id,
        **kwargs
    ):
        """create_delivery_from_pattern  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_delivery_from_pattern(pattern_id, async_req=True)
        >>> result = thread.get()

        Args:
            pattern_id (str):

        Keyword Args:
            create_delivery (CreateDelivery): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Delivery
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['pattern_id'] = \
            pattern_id
        return self.create_delivery_from_pattern_endpoint.call_with_http_info(**kwargs)

    def create_pattern(
        self,
        **kwargs
    ):
        """create_pattern  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pattern(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            delivery (Delivery): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Delivery
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.create_pattern_endpoint.call_with_http_info(**kwargs)

    def create_stage(
        self,
        pattern_id,
        **kwargs
    ):
        """create_stage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_stage(pattern_id, async_req=True)
        >>> result = thread.get()

        Args:
            pattern_id (str):

        Keyword Args:
            create_delivery_stage (CreateDeliveryStage): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Stage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['pattern_id'] = \
            pattern_id
        return self.create_stage_endpoint.call_with_http_info(**kwargs)

    def create_stage1(
        self,
        pattern_id,
        **kwargs
    ):
        """create_stage1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_stage1(pattern_id, async_req=True)
        >>> result = thread.get()

        Args:
            pattern_id (str):

        Keyword Args:
            stage (Stage): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Stage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['pattern_id'] = \
            pattern_id
        return self.create_stage1_endpoint.call_with_http_info(**kwargs)

    def create_stage2(
        self,
        pattern_id,
        position,
        **kwargs
    ):
        """create_stage2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_stage2(pattern_id, position, async_req=True)
        >>> result = thread.get()

        Args:
            pattern_id (str):
            position (int):

        Keyword Args:
            stage (Stage): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Stage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['pattern_id'] = \
            pattern_id
        kwargs['position'] = \
            position
        return self.create_stage2_endpoint.call_with_http_info(**kwargs)

    def create_tracked_item_in_pattern(
        self,
        pattern_id,
        **kwargs
    ):
        """create_tracked_item_in_pattern  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_tracked_item_in_pattern(pattern_id, async_req=True)
        >>> result = thread.get()

        Args:
            pattern_id (str):

        Keyword Args:
            tracked_item (TrackedItem): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TrackedItem
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['pattern_id'] = \
            pattern_id
        return self.create_tracked_item_in_pattern_endpoint.call_with_http_info(**kwargs)

    def create_transition(
        self,
        stage_id,
        **kwargs
    ):
        """create_transition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_transition(stage_id, async_req=True)
        >>> result = thread.get()

        Args:
            stage_id (str):

        Keyword Args:
            transition (Transition): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Transition
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['stage_id'] = \
            stage_id
        return self.create_transition_endpoint.call_with_http_info(**kwargs)

    def delete_pattern(
        self,
        pattern_id,
        **kwargs
    ):
        """delete_pattern  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_pattern(pattern_id, async_req=True)
        >>> result = thread.get()

        Args:
            pattern_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['pattern_id'] = \
            pattern_id
        return self.delete_pattern_endpoint.call_with_http_info(**kwargs)

    def delete_stage(
        self,
        stage_id,
        **kwargs
    ):
        """delete_stage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_stage(stage_id, async_req=True)
        >>> result = thread.get()

        Args:
            stage_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['stage_id'] = \
            stage_id
        return self.delete_stage_endpoint.call_with_http_info(**kwargs)

    def delete_tracked_item_delivery_pattern(
        self,
        item_id,
        **kwargs
    ):
        """delete_tracked_item_delivery_pattern  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_tracked_item_delivery_pattern(item_id, async_req=True)
        >>> result = thread.get()

        Args:
            item_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_id'] = \
            item_id
        return self.delete_tracked_item_delivery_pattern_endpoint.call_with_http_info(**kwargs)

    def delete_transition(
        self,
        transition_id,
        **kwargs
    ):
        """delete_transition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_transition(transition_id, async_req=True)
        >>> result = thread.get()

        Args:
            transition_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transition_id'] = \
            transition_id
        return self.delete_transition_endpoint.call_with_http_info(**kwargs)

    def duplicate_pattern(
        self,
        pattern_id,
        **kwargs
    ):
        """duplicate_pattern  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.duplicate_pattern(pattern_id, async_req=True)
        >>> result = thread.get()

        Args:
            pattern_id (str):

        Keyword Args:
            duplicate_delivery_pattern (DuplicateDeliveryPattern): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Delivery
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['pattern_id'] = \
            pattern_id
        return self.duplicate_pattern_endpoint.call_with_http_info(**kwargs)

    def get_pattern(
        self,
        pattern_id,
        **kwargs
    ):
        """get_pattern  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pattern(pattern_id, async_req=True)
        >>> result = thread.get()

        Args:
            pattern_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Delivery
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['pattern_id'] = \
            pattern_id
        return self.get_pattern_endpoint.call_with_http_info(**kwargs)

    def get_pattern_by_id_or_title(
        self,
        pattern_id_or_title,
        **kwargs
    ):
        """get_pattern_by_id_or_title  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pattern_by_id_or_title(pattern_id_or_title, async_req=True)
        >>> result = thread.get()

        Args:
            pattern_id_or_title (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Delivery
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['pattern_id_or_title'] = \
            pattern_id_or_title
        return self.get_pattern_by_id_or_title_endpoint.call_with_http_info(**kwargs)

    def get_stages_in_pattern(
        self,
        pattern_id,
        **kwargs
    ):
        """get_stages_in_pattern  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_stages_in_pattern(pattern_id, async_req=True)
        >>> result = thread.get()

        Args:
            pattern_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Stage]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['pattern_id'] = \
            pattern_id
        return self.get_stages_in_pattern_endpoint.call_with_http_info(**kwargs)

    def get_tracked_items_in_pattern(
        self,
        pattern_id,
        **kwargs
    ):
        """get_tracked_items_in_pattern  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tracked_items_in_pattern(pattern_id, async_req=True)
        >>> result = thread.get()

        Args:
            pattern_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [TrackedItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['pattern_id'] = \
            pattern_id
        return self.get_tracked_items_in_pattern_endpoint.call_with_http_info(**kwargs)

    def search_patterns(
        self,
        **kwargs
    ):
        """search_patterns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_patterns(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): [optional] if omitted the server will use the default value of 0
            results_per_page (int): [optional] if omitted the server will use the default value of 100
            delivery_pattern_filters (DeliveryPatternFilters): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Delivery]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.search_patterns_endpoint.call_with_http_info(**kwargs)

    def update_pattern(
        self,
        pattern_id,
        **kwargs
    ):
        """update_pattern  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_pattern(pattern_id, async_req=True)
        >>> result = thread.get()

        Args:
            pattern_id (str):

        Keyword Args:
            delivery (Delivery): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Delivery
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['pattern_id'] = \
            pattern_id
        return self.update_pattern_endpoint.call_with_http_info(**kwargs)

    def update_stage_from_batch(
        self,
        stage_id,
        **kwargs
    ):
        """update_stage_from_batch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_stage_from_batch(stage_id, async_req=True)
        >>> result = thread.get()

        Args:
            stage_id (str):

        Keyword Args:
            stage (Stage): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Stage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['stage_id'] = \
            stage_id
        return self.update_stage_from_batch_endpoint.call_with_http_info(**kwargs)

    def update_stage_in_pattern(
        self,
        stage_id,
        **kwargs
    ):
        """update_stage_in_pattern  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_stage_in_pattern(stage_id, async_req=True)
        >>> result = thread.get()

        Args:
            stage_id (str):

        Keyword Args:
            stage (Stage): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Stage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['stage_id'] = \
            stage_id
        return self.update_stage_in_pattern_endpoint.call_with_http_info(**kwargs)

    def update_tracked_item_in_pattern(
        self,
        item_id,
        **kwargs
    ):
        """update_tracked_item_in_pattern  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_tracked_item_in_pattern(item_id, async_req=True)
        >>> result = thread.get()

        Args:
            item_id (str):

        Keyword Args:
            tracked_item (TrackedItem): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TrackedItem
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['item_id'] = \
            item_id
        return self.update_tracked_item_in_pattern_endpoint.call_with_http_info(**kwargs)

    def update_transition_in_pattern(
        self,
        transition_id,
        **kwargs
    ):
        """update_transition_in_pattern  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_transition_in_pattern(transition_id, async_req=True)
        >>> result = thread.get()

        Args:
            transition_id (str):

        Keyword Args:
            transition (Transition): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Transition
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['transition_id'] = \
            transition_id
        return self.update_transition_in_pattern_endpoint.call_with_http_info(**kwargs)

