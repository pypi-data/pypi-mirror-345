# coding: utf-8

"""
    Zakazy FBS

    <div class=\"description_important\">       Uznat bolhe o zakazah FBS mohno v <a href=\"https://seller.wildberries.ru/instructions/category/b3e60238-fd4c-49ce-8668-ff688725a12d?goBackOption=prevRoute&categoryId=5a8e1202-0865-45b7-acae-5d0afc7add56\">spravohnom centre</a> </div>  V razdele zakazov FBS (Fulfillment by Seller) vam dostupny metody:   1. Upravlenia [sborohnymi zadaniami](/openapi/orders-fbs#tag/Sborochnye-zadaniya): informacia o sborohnyh zadaniah, metadannye, stikery i tak dalee.   2. Upravlenia [postavkami zakazov](/openapi/orders-fbs#tag/Postavki-FBS) prodavca na sklady WB.   3. Zakaza [propuskov](/openapi/orders-fbs#tag/Propuska) na sklady WB.   4. Dostavki zakazov [kurerom WB](/openapi/orders-fbs#tag/Dostavka-kurerom-WB-(DBW)) (DBW).   # noqa: E501

    OpenAPI spec version: order
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.orders_fbs.api_client import ApiClient


class MetadannyeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v3_orders_order_id_meta_delete(self, order_id, **kwargs):  # noqa: E501
        """Udalit metadannye sborohnogo zadania  # noqa: E501

        Metod udalaet znahenie [metadannyh sborohnogo zadania](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta/get) dla peredannogo kluha. <br><br> Vozmohnye metadannye:    - `imei` — [IMEI](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1imei/put)   - `uin` — [UIN](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1uin/put)   - `gtin` — [GTIN](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1gtin/put)   - `sgtin` — [kod markirovki](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1sgtin/put)  Mohno peredat tolko odin kluh.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_delete(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param str key: Nazvanie metadannyh dla udalenia (`imei`, `uin`, `gtin`, `sgtin`). Peredaetsa tolko odno znahenie.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_delete_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_delete_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_delete_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Udalit metadannye sborohnogo zadania  # noqa: E501

        Metod udalaet znahenie [metadannyh sborohnogo zadania](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta/get) dla peredannogo kluha. <br><br> Vozmohnye metadannye:    - `imei` — [IMEI](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1imei/put)   - `uin` — [UIN](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1uin/put)   - `gtin` — [GTIN](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1gtin/put)   - `sgtin` — [kod markirovki](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1sgtin/put)  Mohno peredat tolko odin kluh.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_delete_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param str key: Nazvanie metadannyh dla udalenia (`imei`, `uin`, `gtin`, `sgtin`). Peredaetsa tolko odno znahenie.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_get(self, order_id, **kwargs):  # noqa: E501
        """Poluhit metadannye sborohnogo zadania  # noqa: E501

        Metod predostavlaet metadannye zakaza, dostupnye dla [sborohnogo zadania](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get).  <br><br> Vozmohnye metadannye:    - `imei` — [IMEI](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1imei/put)   - `uin` — [UIN](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1uin/put)   - `gtin` — [GTIN](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1gtin/put)   - `sgtin` — [kod markirovki](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1sgtin/put)  Esli otvet vernulsa s pustoi strukturoi `meta`, znahit u sborohnogo zadania net metadannyh i dobavit ih nelza.    <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_get(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_get_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_get_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_get_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Poluhit metadannye sborohnogo zadania  # noqa: E501

        Metod predostavlaet metadannye zakaza, dostupnye dla [sborohnogo zadania](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get).  <br><br> Vozmohnye metadannye:    - `imei` — [IMEI](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1imei/put)   - `uin` — [UIN](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1uin/put)   - `gtin` — [GTIN](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1gtin/put)   - `sgtin` — [kod markirovki](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1sgtin/put)  Esli otvet vernulsa s pustoi strukturoi `meta`, znahit u sborohnogo zadania net metadannyh i dobavit ih nelza.    <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_get_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_gtin_put(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem GTIN  # noqa: E501

        Metod obnovlaet GTIN v [metadannyh sborohnogo zadania](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta/get) — unikalnyi ID tovara v Belarusi. <br><br> U odnogo sborohnogo zadania mohet byt tolko odin GTIN.   Dobavlat markirovku mohno tolko dla zakazov, kotorye dostavlautsa WB i nahodatsa v [statuse](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) `confirm`.  <div class=\"description_limit\">   Maksimum 1 000 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> summarno na odin akkaunt prodavca dla metodov:     <br>     1. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1uin/put\">Zakrepit za sborohnym zadaniem UIN</a><br>     2. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1imei/put\">Zakrepit za sborohnym zadaniem IMEI</a><br>     3. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1gtin/put\">Zakrepit za sborohnym zadaniem GTIN</a><br>     4. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1sgtin/put\">Zakrepit za sborohnym zadaniem kod markirovki</a>   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_gtin_put(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaGtinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_gtin_put_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_gtin_put_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_gtin_put_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem GTIN  # noqa: E501

        Metod obnovlaet GTIN v [metadannyh sborohnogo zadania](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta/get) — unikalnyi ID tovara v Belarusi. <br><br> U odnogo sborohnogo zadania mohet byt tolko odin GTIN.   Dobavlat markirovku mohno tolko dla zakazov, kotorye dostavlautsa WB i nahodatsa v [statuse](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) `confirm`.  <div class=\"description_limit\">   Maksimum 1 000 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> summarno na odin akkaunt prodavca dla metodov:     <br>     1. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1uin/put\">Zakrepit za sborohnym zadaniem UIN</a><br>     2. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1imei/put\">Zakrepit za sborohnym zadaniem IMEI</a><br>     3. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1gtin/put\">Zakrepit za sborohnym zadaniem GTIN</a><br>     4. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1sgtin/put\">Zakrepit za sborohnym zadaniem kod markirovki</a>   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_gtin_put_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaGtinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_gtin_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_gtin_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta/gtin', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_imei_put(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem IMEI  # noqa: E501

        Metod obnovlaet IMEI v [metadannyh sborohnogo zadania](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta/get). <br><br> U odnogo sborohnogo zadania mohet byt tolko odin IMEI. Esli u ustroistva dva IMEI — <strong>IMEI i IMEI2</strong> ili <strong>IMEI1 i IMEI2</strong> — ukahite tolko <strong>IMEI</strong> ili <strong>IMEI1</strong>. <strong>IMEI2</strong> ukazyvat ne nuhno. <br><br> Dobavlat markirovku mohno tolko dla zakazov, kotorye dostavlautsa WB i nahodatsa v [statuse](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) `confirm`.  <div class=\"description_limit\">   Maksimum 1 000 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> summarno na odin akkaunt prodavca dla metodov:     <br>     1. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1uin/put\">Zakrepit za sborohnym zadaniem UIN</a><br>     2. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1imei/put\">Zakrepit za sborohnym zadaniem IMEI</a><br>     3. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1gtin/put\">Zakrepit za sborohnym zadaniem GTIN</a><br>     4. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1sgtin/put\">Zakrepit za sborohnym zadaniem kod markirovki</a>   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_imei_put(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaImeiBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_imei_put_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_imei_put_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_imei_put_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem IMEI  # noqa: E501

        Metod obnovlaet IMEI v [metadannyh sborohnogo zadania](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta/get). <br><br> U odnogo sborohnogo zadania mohet byt tolko odin IMEI. Esli u ustroistva dva IMEI — <strong>IMEI i IMEI2</strong> ili <strong>IMEI1 i IMEI2</strong> — ukahite tolko <strong>IMEI</strong> ili <strong>IMEI1</strong>. <strong>IMEI2</strong> ukazyvat ne nuhno. <br><br> Dobavlat markirovku mohno tolko dla zakazov, kotorye dostavlautsa WB i nahodatsa v [statuse](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) `confirm`.  <div class=\"description_limit\">   Maksimum 1 000 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> summarno na odin akkaunt prodavca dla metodov:     <br>     1. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1uin/put\">Zakrepit za sborohnym zadaniem UIN</a><br>     2. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1imei/put\">Zakrepit za sborohnym zadaniem IMEI</a><br>     3. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1gtin/put\">Zakrepit za sborohnym zadaniem GTIN</a><br>     4. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1sgtin/put\">Zakrepit za sborohnym zadaniem kod markirovki</a>   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_imei_put_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaImeiBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_imei_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_imei_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta/imei', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_sgtin_put(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem kod markirovki tovara  # noqa: E501

        Metod pozvolaet zakrepit za [sborohnym zadaniem](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get) kod markirovki [hestnyi znak](https://hestnyiznak.rf). <br><br> Zakrepit kod markirovki mohno tolko esli v [metadannyh sborohnogo zadania](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta/get) est pole `sgtin`, a sborohnoe zadanie nahoditsa v [statuse](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) `confirm`. <br><br> Poluhit zagruhennye markirovki mohno v [metadannyh sborohnogo zadania](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta/get).  <div class=\"description_limit\">   Maksimum 1 000 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> summarno na odin akkaunt prodavca dla metodov:     <br>     1. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1uin/put\">Zakrepit za sborohnym zadaniem UIN</a><br>     2. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1imei/put\">Zakrepit za sborohnym zadaniem IMEI</a><br>     3. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1gtin/put\">Zakrepit za sborohnym zadaniem GTIN</a><br>     4. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1sgtin/put\">Zakrepit za sborohnym zadaniem kod markirovki</a>   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_sgtin_put(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaSgtinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_sgtin_put_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_sgtin_put_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_sgtin_put_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem kod markirovki tovara  # noqa: E501

        Metod pozvolaet zakrepit za [sborohnym zadaniem](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get) kod markirovki [hestnyi znak](https://hestnyiznak.rf). <br><br> Zakrepit kod markirovki mohno tolko esli v [metadannyh sborohnogo zadania](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta/get) est pole `sgtin`, a sborohnoe zadanie nahoditsa v [statuse](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) `confirm`. <br><br> Poluhit zagruhennye markirovki mohno v [metadannyh sborohnogo zadania](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta/get).  <div class=\"description_limit\">   Maksimum 1 000 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> summarno na odin akkaunt prodavca dla metodov:     <br>     1. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1uin/put\">Zakrepit za sborohnym zadaniem UIN</a><br>     2. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1imei/put\">Zakrepit za sborohnym zadaniem IMEI</a><br>     3. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1gtin/put\">Zakrepit za sborohnym zadaniem GTIN</a><br>     4. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1sgtin/put\">Zakrepit za sborohnym zadaniem kod markirovki</a>   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_sgtin_put_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaSgtinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_sgtin_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_sgtin_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta/sgtin', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_meta_uin_put(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem UIN  # noqa: E501

        Metod obnovlaet UIN v [metadannyh sborohnogo zadania](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta/get) — unikalnyi identifikacionnyi nomer.  <br><br> U odnogo sborohnogo zadania mohet byt tolko odin UIN.   Dobavlat markirovku mohno tolko dla zakazov, kotorye dostavlautsa WB i nahodatsa v [statuse](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) `confirm`.  <div class=\"description_limit\">   Maksimum 1 000 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> summarno na odin akkaunt prodavca dla metodov:     <br>     1. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1uin/put\">Zakrepit za sborohnym zadaniem UIN</a><br>     2. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1imei/put\">Zakrepit za sborohnym zadaniem IMEI</a><br>     3. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1gtin/put\">Zakrepit za sborohnym zadaniem GTIN</a><br>     4. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1sgtin/put\">Zakrepit za sborohnym zadaniem kod markirovki</a>   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_uin_put(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaUinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_meta_uin_put_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_meta_uin_put_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_meta_uin_put_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Zakrepit za sborohnym zadaniem UIN  # noqa: E501

        Metod obnovlaet UIN v [metadannyh sborohnogo zadania](/openapi/orders-fbs#tag/Metadannye/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta/get) — unikalnyi identifikacionnyi nomer.  <br><br> U odnogo sborohnogo zadania mohet byt tolko odin UIN.   Dobavlat markirovku mohno tolko dla zakazov, kotorye dostavlautsa WB i nahodatsa v [statuse](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) `confirm`.  <div class=\"description_limit\">   Maksimum 1 000 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> summarno na odin akkaunt prodavca dla metodov:     <br>     1. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1uin/put\">Zakrepit za sborohnym zadaniem UIN</a><br>     2. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1imei/put\">Zakrepit za sborohnym zadaniem IMEI</a><br>     3. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1gtin/put\">Zakrepit za sborohnym zadaniem GTIN</a><br>     4. <a href=\"/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1meta~1sgtin/put\">Zakrepit za sborohnym zadaniem kod markirovki</a>   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_meta_uin_put_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :param MetaUinBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_meta_uin_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_meta_uin_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/meta/uin', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
