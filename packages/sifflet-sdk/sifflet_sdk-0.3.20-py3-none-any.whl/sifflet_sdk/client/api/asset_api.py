"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from sifflet_sdk.client.api_client import ApiClient
from sifflet_sdk.client.api_client import Endpoint as _Endpoint
from sifflet_sdk.client.model.api_problem_schema import ApiProblemSchema
from sifflet_sdk.client.model.asset_dto import AssetDto
from sifflet_sdk.client.model.asset_full_schema_dto import AssetFullSchemaDto
from sifflet_sdk.client.model.asset_patch_dto import AssetPatchDto
from sifflet_sdk.client.model.asset_search_criteria import AssetSearchCriteria
from sifflet_sdk.client.model.asset_uri_dto import AssetUriDto
from sifflet_sdk.client.model.asset_urn_dto import AssetUrnDto
from sifflet_sdk.client.model.assets_catalog_dto import AssetsCatalogDto
from sifflet_sdk.client.model.csv_content_dto import CsvContentDto
from sifflet_sdk.client.model.dataset_generating_transformation_dto import (
    DatasetGeneratingTransformationDto,
)
from sifflet_sdk.client.model.dataset_params_dto import DatasetParamsDto
from sifflet_sdk.client.model.field_dto import FieldDto
from sifflet_sdk.client.model.field_search_result_dto import FieldSearchResultDto
from sifflet_sdk.client.model.get_asset_header_by_urn200_response import (
    GetAssetHeaderByUrn200Response,
)
from sifflet_sdk.client.model.get_asset_overview_by_urn200_response import (
    GetAssetOverviewByUrn200Response,
)
from sifflet_sdk.client.model.import_report_dto import ImportReportDto
from sifflet_sdk.client.model.prediction_feedback_dto import PredictionFeedbackDto
from sifflet_sdk.client.model.preview_dto import PreviewDto
from sifflet_sdk.client.model.preview_result_dto import PreviewResultDto
from sifflet_sdk.client.model.schema_version_dto import SchemaVersionDto
from sifflet_sdk.client.model.search_collection_transformation_run_dto import (
    SearchCollectionTransformationRunDto,
)
from sifflet_sdk.client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class AssetApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.confirm_import_asset_descriptions_endpoint = _Endpoint(
            settings={
                "response_type": (ImportReportDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/_confirm-import-descriptions",
                "operation_id": "confirm_import_asset_descriptions",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "import_id",
                ],
                "required": [
                    "import_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "import_id": (str,),
                },
                "attribute_map": {
                    "import_id": "importId",
                },
                "location_map": {
                    "import_id": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.convert_uri_to_urn_endpoint = _Endpoint(
            settings={
                "response_type": (AssetUrnDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/convert-uri-to-urn",
                "operation_id": "convert_uri_to_urn",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "asset_uri_dto",
                ],
                "required": [
                    "asset_uri_dto",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "asset_uri_dto": (AssetUriDto,),
                },
                "attribute_map": {},
                "location_map": {
                    "asset_uri_dto": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.export_asset_descriptions_endpoint = _Endpoint(
            settings={
                "response_type": (CsvContentDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/_export-descriptions",
                "operation_id": "export_asset_descriptions",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "sort",
                    "text_search",
                    "health_status",
                    "asset_filter_type",
                    "usage",
                    "tag",
                    "term",
                    "owner",
                    "custom_metadata_entry",
                    "ingestion",
                    "datasource",
                    "urn",
                    "domain",
                    "search_in_fields_and_descriptions",
                    "page",
                    "items_per_page",
                ],
                "required": [],
                "nullable": [],
                "enum": [
                    "health_status",
                    "usage",
                    "ingestion",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("health_status",): {
                        "CRITICAL": "CRITICAL",
                        "AT_RISK": "AT_RISK",
                        "HEALTHY": "HEALTHY",
                        "UNMONITORED": "UNMONITORED",
                        "NOT_SUPPORTED": "NOT_SUPPORTED",
                    },
                    ("usage",): {"UNSUPPORTED": "UNSUPPORTED", "LOW": "LOW", "MEDIUM": "MEDIUM", "HIGH": "HIGH"},
                    ("ingestion",): {"DECLARATIVE": "DECLARATIVE", "SIFFLET_SOURCED": "SIFFLET_SOURCED"},
                },
                "openapi_types": {
                    "sort": ([str],),
                    "text_search": (str,),
                    "health_status": ([str],),
                    "asset_filter_type": ([str],),
                    "usage": ([str],),
                    "tag": ([str],),
                    "term": ([str],),
                    "owner": ([str],),
                    "custom_metadata_entry": ([str],),
                    "ingestion": ([str],),
                    "datasource": ([str],),
                    "urn": ([str],),
                    "domain": (str,),
                    "search_in_fields_and_descriptions": (bool,),
                    "page": (int,),
                    "items_per_page": (int,),
                },
                "attribute_map": {
                    "sort": "sort",
                    "text_search": "textSearch",
                    "health_status": "healthStatus",
                    "asset_filter_type": "assetFilterType",
                    "usage": "usage",
                    "tag": "tag",
                    "term": "term",
                    "owner": "owner",
                    "custom_metadata_entry": "customMetadataEntry",
                    "ingestion": "ingestion",
                    "datasource": "datasource",
                    "urn": "urn",
                    "domain": "domain",
                    "search_in_fields_and_descriptions": "searchInFieldsAndDescriptions",
                    "page": "page",
                    "items_per_page": "itemsPerPage",
                },
                "location_map": {
                    "sort": "query",
                    "text_search": "query",
                    "health_status": "query",
                    "asset_filter_type": "query",
                    "usage": "query",
                    "tag": "query",
                    "term": "query",
                    "owner": "query",
                    "custom_metadata_entry": "query",
                    "ingestion": "query",
                    "datasource": "query",
                    "urn": "query",
                    "domain": "query",
                    "search_in_fields_and_descriptions": "query",
                    "page": "query",
                    "items_per_page": "query",
                },
                "collection_format_map": {
                    "sort": "multi",
                    "health_status": "multi",
                    "asset_filter_type": "multi",
                    "usage": "multi",
                    "tag": "multi",
                    "term": "multi",
                    "owner": "multi",
                    "custom_metadata_entry": "multi",
                    "ingestion": "multi",
                    "datasource": "multi",
                    "urn": "multi",
                },
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.export_asset_descriptions_template_endpoint = _Endpoint(
            settings={
                "response_type": (CsvContentDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/_export-descriptions-template",
                "operation_id": "export_asset_descriptions_template",
                "http_method": "GET",
                "servers": None,
            },
            params_map={"all": [], "required": [], "nullable": [], "enum": [], "validation": []},
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {},
                "attribute_map": {},
                "location_map": {},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_all_endpoint = _Endpoint(
            settings={
                "response_type": (AssetsCatalogDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets",
                "operation_id": "get_all",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "sort",
                    "text_search",
                    "health_status",
                    "asset_filter_type",
                    "usage",
                    "tag",
                    "term",
                    "owner",
                    "custom_metadata_entry",
                    "ingestion",
                    "datasource",
                    "urn",
                    "domain",
                    "search_in_fields_and_descriptions",
                    "page",
                    "items_per_page",
                ],
                "required": [],
                "nullable": [],
                "enum": [
                    "health_status",
                    "usage",
                    "ingestion",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("health_status",): {
                        "CRITICAL": "CRITICAL",
                        "AT_RISK": "AT_RISK",
                        "HEALTHY": "HEALTHY",
                        "UNMONITORED": "UNMONITORED",
                        "NOT_SUPPORTED": "NOT_SUPPORTED",
                    },
                    ("usage",): {"UNSUPPORTED": "UNSUPPORTED", "LOW": "LOW", "MEDIUM": "MEDIUM", "HIGH": "HIGH"},
                    ("ingestion",): {"DECLARATIVE": "DECLARATIVE", "SIFFLET_SOURCED": "SIFFLET_SOURCED"},
                },
                "openapi_types": {
                    "sort": ([str],),
                    "text_search": (str,),
                    "health_status": ([str],),
                    "asset_filter_type": ([str],),
                    "usage": ([str],),
                    "tag": ([str],),
                    "term": ([str],),
                    "owner": ([str],),
                    "custom_metadata_entry": ([str],),
                    "ingestion": ([str],),
                    "datasource": ([str],),
                    "urn": ([str],),
                    "domain": (str,),
                    "search_in_fields_and_descriptions": (bool,),
                    "page": (int,),
                    "items_per_page": (int,),
                },
                "attribute_map": {
                    "sort": "sort",
                    "text_search": "textSearch",
                    "health_status": "healthStatus",
                    "asset_filter_type": "assetFilterType",
                    "usage": "usage",
                    "tag": "tag",
                    "term": "term",
                    "owner": "owner",
                    "custom_metadata_entry": "customMetadataEntry",
                    "ingestion": "ingestion",
                    "datasource": "datasource",
                    "urn": "urn",
                    "domain": "domain",
                    "search_in_fields_and_descriptions": "searchInFieldsAndDescriptions",
                    "page": "page",
                    "items_per_page": "itemsPerPage",
                },
                "location_map": {
                    "sort": "query",
                    "text_search": "query",
                    "health_status": "query",
                    "asset_filter_type": "query",
                    "usage": "query",
                    "tag": "query",
                    "term": "query",
                    "owner": "query",
                    "custom_metadata_entry": "query",
                    "ingestion": "query",
                    "datasource": "query",
                    "urn": "query",
                    "domain": "query",
                    "search_in_fields_and_descriptions": "query",
                    "page": "query",
                    "items_per_page": "query",
                },
                "collection_format_map": {
                    "sort": "multi",
                    "health_status": "multi",
                    "asset_filter_type": "multi",
                    "usage": "multi",
                    "tag": "multi",
                    "term": "multi",
                    "owner": "multi",
                    "custom_metadata_entry": "multi",
                    "ingestion": "multi",
                    "datasource": "multi",
                    "urn": "multi",
                },
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_all_assets_endpoint = _Endpoint(
            settings={
                "response_type": (AssetsCatalogDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/search",
                "operation_id": "get_all_assets",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "asset_search_criteria",
                ],
                "required": [
                    "asset_search_criteria",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "asset_search_criteria": (AssetSearchCriteria,),
                },
                "attribute_map": {},
                "location_map": {
                    "asset_search_criteria": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.get_asset_by_urn_endpoint = _Endpoint(
            settings={
                "response_type": (AssetDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/{urn}",
                "operation_id": "get_asset_by_urn",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "urn",
                ],
                "required": [
                    "urn",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "urn": (str,),
                },
                "attribute_map": {
                    "urn": "urn",
                },
                "location_map": {
                    "urn": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_asset_fields_with_type_option_endpoint = _Endpoint(
            settings={
                "response_type": ([FieldSearchResultDto],),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/{urn}/_get-fields",
                "operation_id": "get_asset_fields_with_type_option",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "urn",
                    "type",
                ],
                "required": [
                    "urn",
                    "type",
                ],
                "nullable": [],
                "enum": [
                    "type",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("type",): {
                        "ANY": "any",
                        "DATE": "date",
                        "TIME": "time",
                        "TEMPORAL": "temporal",
                        "TEMPORAL_BUTTERFLY": "temporal_butterfly",
                        "NUMERIC": "numeric",
                        "GROUP": "group",
                    },
                },
                "openapi_types": {
                    "urn": (str,),
                    "type": (str,),
                },
                "attribute_map": {
                    "urn": "urn",
                    "type": "type",
                },
                "location_map": {
                    "urn": "path",
                    "type": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_asset_full_schema_by_urn_and_version_endpoint = _Endpoint(
            settings={
                "response_type": (AssetFullSchemaDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/{urn}/schema-full/{version}",
                "operation_id": "get_asset_full_schema_by_urn_and_version",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "urn",
                    "version",
                ],
                "required": [
                    "urn",
                    "version",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "urn": (str,),
                    "version": (str,),
                },
                "attribute_map": {
                    "urn": "urn",
                    "version": "version",
                },
                "location_map": {
                    "urn": "path",
                    "version": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_asset_generating_transformation_by_urn_endpoint = _Endpoint(
            settings={
                "response_type": (DatasetGeneratingTransformationDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/{urn}/generating-transformation",
                "operation_id": "get_asset_generating_transformation_by_urn",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "urn",
                ],
                "required": [
                    "urn",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "urn": (str,),
                },
                "attribute_map": {
                    "urn": "urn",
                },
                "location_map": {
                    "urn": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_asset_generating_transformation_runs_by_urn_endpoint = _Endpoint(
            settings={
                "response_type": (SearchCollectionTransformationRunDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/{urn}/generating-transformation-runs",
                "operation_id": "get_asset_generating_transformation_runs_by_urn",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "urn",
                    "page",
                    "items_per_page",
                    "sort",
                ],
                "required": [
                    "urn",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "urn": (str,),
                    "page": (int,),
                    "items_per_page": (int,),
                    "sort": ([str],),
                },
                "attribute_map": {
                    "urn": "urn",
                    "page": "page",
                    "items_per_page": "itemsPerPage",
                    "sort": "sort",
                },
                "location_map": {
                    "urn": "path",
                    "page": "query",
                    "items_per_page": "query",
                    "sort": "query",
                },
                "collection_format_map": {
                    "sort": "multi",
                },
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_asset_header_by_urn_endpoint = _Endpoint(
            settings={
                "response_type": (GetAssetHeaderByUrn200Response,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/{urn}/header",
                "operation_id": "get_asset_header_by_urn",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "urn",
                ],
                "required": [
                    "urn",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "urn": (str,),
                },
                "attribute_map": {
                    "urn": "urn",
                },
                "location_map": {
                    "urn": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_asset_overview_by_urn_endpoint = _Endpoint(
            settings={
                "response_type": (GetAssetOverviewByUrn200Response,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/{urn}/overview",
                "operation_id": "get_asset_overview_by_urn",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "urn",
                ],
                "required": [
                    "urn",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "urn": (str,),
                },
                "attribute_map": {
                    "urn": "urn",
                },
                "location_map": {
                    "urn": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_asset_preview_by_urn_endpoint = _Endpoint(
            settings={
                "response_type": (PreviewResultDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/{urn}/preview",
                "operation_id": "get_asset_preview_by_urn",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "urn",
                    "preview_dto",
                ],
                "required": [
                    "urn",
                    "preview_dto",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "urn": (str,),
                    "preview_dto": (PreviewDto,),
                },
                "attribute_map": {
                    "urn": "urn",
                },
                "location_map": {
                    "urn": "path",
                    "preview_dto": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.get_asset_schema_by_urn_and_version_endpoint = _Endpoint(
            settings={
                "response_type": ([FieldDto],),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/{urn}/schema/{version}",
                "operation_id": "get_asset_schema_by_urn_and_version",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "urn",
                    "version",
                ],
                "required": [
                    "urn",
                    "version",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "urn": (str,),
                    "version": (str,),
                },
                "attribute_map": {
                    "urn": "urn",
                    "version": "version",
                },
                "location_map": {
                    "urn": "path",
                    "version": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_asset_schema_versions_by_urn_endpoint = _Endpoint(
            settings={
                "response_type": ([SchemaVersionDto],),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/{urn}/schema-versions",
                "operation_id": "get_asset_schema_versions_by_urn",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "urn",
                ],
                "required": [
                    "urn",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "urn": (str,),
                },
                "attribute_map": {
                    "urn": "urn",
                },
                "location_map": {
                    "urn": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.patch_asset_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/{urn}",
                "operation_id": "patch_asset",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "urn",
                    "asset_patch_dto",
                ],
                "required": [
                    "urn",
                    "asset_patch_dto",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "urn": (str,),
                    "asset_patch_dto": (AssetPatchDto,),
                },
                "attribute_map": {
                    "urn": "urn",
                },
                "location_map": {
                    "urn": "path",
                    "asset_patch_dto": "body",
                },
                "collection_format_map": {},
            },
            headers_map={"accept": ["application/problem+json"], "content_type": ["application/json"]},
            api_client=api_client,
        )
        self.patch_asset_params_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/{urn}/params",
                "operation_id": "patch_asset_params",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "urn",
                    "dataset_params_dto",
                ],
                "required": [
                    "urn",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "urn": (str,),
                    "dataset_params_dto": (DatasetParamsDto,),
                },
                "attribute_map": {
                    "urn": "urn",
                },
                "location_map": {
                    "urn": "path",
                    "dataset_params_dto": "body",
                },
                "collection_format_map": {},
            },
            headers_map={"accept": ["application/problem+json"], "content_type": ["application/json"]},
            api_client=api_client,
        )
        self.pre_import_asset_descriptions_endpoint = _Endpoint(
            settings={
                "response_type": (ImportReportDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/_pre-import-descriptions",
                "operation_id": "pre_import_asset_descriptions",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "csv_content_dto",
                ],
                "required": [
                    "csv_content_dto",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "csv_content_dto": (CsvContentDto,),
                },
                "attribute_map": {},
                "location_map": {
                    "csv_content_dto": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.send_prediction_feedback_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/assets/{urn}/_send-prediction-feedback",
                "operation_id": "send_prediction_feedback",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "urn",
                    "prediction_feedback_dto",
                ],
                "required": [
                    "urn",
                    "prediction_feedback_dto",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "urn": (str,),
                    "prediction_feedback_dto": (PredictionFeedbackDto,),
                },
                "attribute_map": {
                    "urn": "urn",
                },
                "location_map": {
                    "urn": "path",
                    "prediction_feedback_dto": "body",
                },
                "collection_format_map": {},
            },
            headers_map={"accept": ["application/problem+json"], "content_type": ["application/json"]},
            api_client=api_client,
        )

    def confirm_import_asset_descriptions(self, import_id, **kwargs):
        """Confirm import asset descriptions (dataset descriptions and field descriptions)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.confirm_import_asset_descriptions(import_id, async_req=True)
        >>> result = thread.get()

        Args:
            import_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ImportReportDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["import_id"] = import_id
        return self.confirm_import_asset_descriptions_endpoint.call_with_http_info(**kwargs)

    def convert_uri_to_urn(self, asset_uri_dto, **kwargs):
        """Convert uri to urn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.convert_uri_to_urn(asset_uri_dto, async_req=True)
        >>> result = thread.get()

        Args:
            asset_uri_dto (AssetUriDto):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetUrnDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["asset_uri_dto"] = asset_uri_dto
        return self.convert_uri_to_urn_endpoint.call_with_http_info(**kwargs)

    def export_asset_descriptions(self, **kwargs):
        """Export asset descriptions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export_asset_descriptions(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            sort ([str]): The resource fields on which to apply the sort, format : property,ASC|DESC. [optional]
            text_search (str): Global text search. [optional]
            health_status ([str]): Filter on given health statuses. [optional]
            asset_filter_type ([str]): Filter on given asset types. [optional]
            usage ([str]): Filter on given usage types. [optional]
            tag ([str]): Filter on given tag ids. [optional]
            term ([str]): Filter on given term ids. [optional]
            owner ([str]): Filter on given owner ids. [optional]
            custom_metadata_entry ([str]): Filter on given custom metadata entry ids. [optional]
            ingestion ([str]): Filter on given asset ingestion. [optional]
            datasource ([str]): Filter on given datasource ids. [optional]
            urn ([str]): Filter on given assets urn. [optional]
            domain (str): Domain searched. [optional]
            search_in_fields_and_descriptions (bool): Search on fields and field descriptions. [optional]
            page (int): The requested page number. Zero-based page index (0..N). [optional] if omitted the server will use the default value of 0
            items_per_page (int): The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items. [optional] if omitted the server will use the default value of 25
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CsvContentDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.export_asset_descriptions_endpoint.call_with_http_info(**kwargs)

    def export_asset_descriptions_template(self, **kwargs):
        """Export asset descriptions template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export_asset_descriptions_template(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CsvContentDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.export_asset_descriptions_template_endpoint.call_with_http_info(**kwargs)

    def get_all(self, **kwargs):
        """Get search results and search filters for asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            sort ([str]): The resource fields on which to apply the sort, format : property,ASC|DESC. [optional]
            text_search (str): Global text search. [optional]
            health_status ([str]): Filter on given health statuses. [optional]
            asset_filter_type ([str]): Filter on given asset types. [optional]
            usage ([str]): Filter on given usage types. [optional]
            tag ([str]): Filter on given tag ids. [optional]
            term ([str]): Filter on given term ids. [optional]
            owner ([str]): Filter on given owner ids. [optional]
            custom_metadata_entry ([str]): Filter on given custom metadata entry ids. [optional]
            ingestion ([str]): Filter on given asset ingestion. [optional]
            datasource ([str]): Filter on given datasource ids. [optional]
            urn ([str]): Filter on given assets urn. [optional]
            domain (str): Domain searched. [optional]
            search_in_fields_and_descriptions (bool): Search on fields and field descriptions. [optional]
            page (int): The requested page number. Zero-based page index (0..N). [optional] if omitted the server will use the default value of 0
            items_per_page (int): The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items. [optional] if omitted the server will use the default value of 25
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetsCatalogDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.get_all_endpoint.call_with_http_info(**kwargs)

    def get_all_assets(self, asset_search_criteria, **kwargs):
        """Get all catalog assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_assets(asset_search_criteria, async_req=True)
        >>> result = thread.get()

        Args:
            asset_search_criteria (AssetSearchCriteria):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetsCatalogDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["asset_search_criteria"] = asset_search_criteria
        return self.get_all_assets_endpoint.call_with_http_info(**kwargs)

    def get_asset_by_urn(self, urn, **kwargs):
        """Get a single asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_by_urn(urn, async_req=True)
        >>> result = thread.get()

        Args:
            urn (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["urn"] = urn
        return self.get_asset_by_urn_endpoint.call_with_http_info(**kwargs)

    def get_asset_fields_with_type_option(self, urn, type, **kwargs):
        """Get fields with type option  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_fields_with_type_option(urn, type, async_req=True)
        >>> result = thread.get()

        Args:
            urn (str):
            type (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [FieldSearchResultDto]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["urn"] = urn
        kwargs["type"] = type
        return self.get_asset_fields_with_type_option_endpoint.call_with_http_info(**kwargs)

    def get_asset_full_schema_by_urn_and_version(self, urn, version, **kwargs):
        """Get a single asset full schema  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_full_schema_by_urn_and_version(urn, version, async_req=True)
        >>> result = thread.get()

        Args:
            urn (str):
            version (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetFullSchemaDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["urn"] = urn
        kwargs["version"] = version
        return self.get_asset_full_schema_by_urn_and_version_endpoint.call_with_http_info(**kwargs)

    def get_asset_generating_transformation_by_urn(self, urn, **kwargs):
        """Get a single asset generating transformation information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_generating_transformation_by_urn(urn, async_req=True)
        >>> result = thread.get()

        Args:
            urn (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DatasetGeneratingTransformationDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["urn"] = urn
        return self.get_asset_generating_transformation_by_urn_endpoint.call_with_http_info(**kwargs)

    def get_asset_generating_transformation_runs_by_urn(self, urn, **kwargs):
        """Get a single asset generating transformation runs information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_generating_transformation_runs_by_urn(urn, async_req=True)
        >>> result = thread.get()

        Args:
            urn (str):

        Keyword Args:
            page (int): The requested page number. Zero-based page index (0..N). [optional] if omitted the server will use the default value of 0
            items_per_page (int): The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items. [optional] if omitted the server will use the default value of 25
            sort ([str]): The resource fields on which to apply the sort, format : property,ASC|DESC. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SearchCollectionTransformationRunDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["urn"] = urn
        return self.get_asset_generating_transformation_runs_by_urn_endpoint.call_with_http_info(**kwargs)

    def get_asset_header_by_urn(self, urn, **kwargs):
        """Get a single asset header  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_header_by_urn(urn, async_req=True)
        >>> result = thread.get()

        Args:
            urn (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetAssetHeaderByUrn200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["urn"] = urn
        return self.get_asset_header_by_urn_endpoint.call_with_http_info(**kwargs)

    def get_asset_overview_by_urn(self, urn, **kwargs):
        """Get a single asset overview params  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_overview_by_urn(urn, async_req=True)
        >>> result = thread.get()

        Args:
            urn (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetAssetOverviewByUrn200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["urn"] = urn
        return self.get_asset_overview_by_urn_endpoint.call_with_http_info(**kwargs)

    def get_asset_preview_by_urn(self, urn, preview_dto, **kwargs):
        """Get a single asset preview data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_preview_by_urn(urn, preview_dto, async_req=True)
        >>> result = thread.get()

        Args:
            urn (str):
            preview_dto (PreviewDto):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PreviewResultDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["urn"] = urn
        kwargs["preview_dto"] = preview_dto
        return self.get_asset_preview_by_urn_endpoint.call_with_http_info(**kwargs)

    def get_asset_schema_by_urn_and_version(self, urn, version, **kwargs):
        """Get a single asset schema  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_schema_by_urn_and_version(urn, version, async_req=True)
        >>> result = thread.get()

        Args:
            urn (str):
            version (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [FieldDto]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["urn"] = urn
        kwargs["version"] = version
        return self.get_asset_schema_by_urn_and_version_endpoint.call_with_http_info(**kwargs)

    def get_asset_schema_versions_by_urn(self, urn, **kwargs):
        """Get a single asset schema versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_schema_versions_by_urn(urn, async_req=True)
        >>> result = thread.get()

        Args:
            urn (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [SchemaVersionDto]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["urn"] = urn
        return self.get_asset_schema_versions_by_urn_endpoint.call_with_http_info(**kwargs)

    def patch_asset(self, urn, asset_patch_dto, **kwargs):
        """Patch Asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_asset(urn, asset_patch_dto, async_req=True)
        >>> result = thread.get()

        Args:
            urn (str):
            asset_patch_dto (AssetPatchDto):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["urn"] = urn
        kwargs["asset_patch_dto"] = asset_patch_dto
        return self.patch_asset_endpoint.call_with_http_info(**kwargs)

    def patch_asset_params(self, urn, **kwargs):
        """Patch Asset Params  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_asset_params(urn, async_req=True)
        >>> result = thread.get()

        Args:
            urn (str):

        Keyword Args:
            dataset_params_dto (DatasetParamsDto): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["urn"] = urn
        return self.patch_asset_params_endpoint.call_with_http_info(**kwargs)

    def pre_import_asset_descriptions(self, csv_content_dto, **kwargs):
        """Pre-import asset descriptions (dataset descriptions and field descriptions)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pre_import_asset_descriptions(csv_content_dto, async_req=True)
        >>> result = thread.get()

        Args:
            csv_content_dto (CsvContentDto):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ImportReportDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["csv_content_dto"] = csv_content_dto
        return self.pre_import_asset_descriptions_endpoint.call_with_http_info(**kwargs)

    def send_prediction_feedback(self, urn, prediction_feedback_dto, **kwargs):
        """send_prediction_feedback  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_prediction_feedback(urn, prediction_feedback_dto, async_req=True)
        >>> result = thread.get()

        Args:
            urn (str):
            prediction_feedback_dto (PredictionFeedbackDto):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["urn"] = urn
        kwargs["prediction_feedback_dto"] = prediction_feedback_dto
        return self.send_prediction_feedback_endpoint.call_with_http_info(**kwargs)
