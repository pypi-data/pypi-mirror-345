# coding: utf-8

"""
    Rabota s tovarami

    <div class=\"description_ref\">     Uznat, kak ispolzovat metody v biznes-keisah, mohno v <a href=\"https://dev.wildberries.ru/news/101\">instrukcii po rabote s tovarami</a> </div>  Rabota s tovarami vkluhaet v seba:   1. [Sozdanie](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) i [redaktirovanie](/openapi/work-with-products#tag/Kartochki-tovarov) kartohek tovarov: v tom hisle, poluhenie [kategorii, predmetov i harakteristik tovarov](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) i zagruzku [mediafailov](/openapi/work-with-products#tag/Mediafajly).   2. Nastroiku [arlykov](/openapi/work-with-products#tag/Yarlyki) dla udobnogo poiska tovarov.   3. Ustanovku [cen i skidok](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Upravlenie [ostatkami tovarov](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) i [skladami](/openapi/work-with-products#tag/Sklady-prodavca), esli vy rabotaete po modeli prodah so sklada prodavca.   # noqa: E501

    OpenAPI spec version: products
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charc_id': 'int',
        'subject_name': 'str',
        'subject_id': 'int',
        'name': 'str',
        'required': 'bool',
        'unit_name': 'str',
        'max_count': 'int',
        'popular': 'bool',
        'charc_type': 'int'
    }

    attribute_map = {
        'charc_id': 'charcID',
        'subject_name': 'subjectName',
        'subject_id': 'subjectID',
        'name': 'name',
        'required': 'required',
        'unit_name': 'unitName',
        'max_count': 'maxCount',
        'popular': 'popular',
        'charc_type': 'charcType'
    }

    def __init__(self, charc_id=None, subject_name=None, subject_id=None, name=None, required=None, unit_name=None, max_count=None, popular=None, charc_type=None):  # noqa: E501
        """InlineResponse2002Data - a model defined in Swagger"""  # noqa: E501
        self._charc_id = None
        self._subject_name = None
        self._subject_id = None
        self._name = None
        self._required = None
        self._unit_name = None
        self._max_count = None
        self._popular = None
        self._charc_type = None
        self.discriminator = None
        if charc_id is not None:
            self.charc_id = charc_id
        if subject_name is not None:
            self.subject_name = subject_name
        if subject_id is not None:
            self.subject_id = subject_id
        if name is not None:
            self.name = name
        if required is not None:
            self.required = required
        if unit_name is not None:
            self.unit_name = unit_name
        if max_count is not None:
            self.max_count = max_count
        if popular is not None:
            self.popular = popular
        if charc_type is not None:
            self.charc_type = charc_type

    @property
    def charc_id(self):
        """Gets the charc_id of this InlineResponse2002Data.  # noqa: E501

        ID harakteristiki  # noqa: E501

        :return: The charc_id of this InlineResponse2002Data.  # noqa: E501
        :rtype: int
        """
        return self._charc_id

    @charc_id.setter
    def charc_id(self, charc_id):
        """Sets the charc_id of this InlineResponse2002Data.

        ID harakteristiki  # noqa: E501

        :param charc_id: The charc_id of this InlineResponse2002Data.  # noqa: E501
        :type: int
        """

        self._charc_id = charc_id

    @property
    def subject_name(self):
        """Gets the subject_name of this InlineResponse2002Data.  # noqa: E501

        Nazvanie predmeta  # noqa: E501

        :return: The subject_name of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this InlineResponse2002Data.

        Nazvanie predmeta  # noqa: E501

        :param subject_name: The subject_name of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._subject_name = subject_name

    @property
    def subject_id(self):
        """Gets the subject_id of this InlineResponse2002Data.  # noqa: E501

        ID predmeta  # noqa: E501

        :return: The subject_id of this InlineResponse2002Data.  # noqa: E501
        :rtype: int
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this InlineResponse2002Data.

        ID predmeta  # noqa: E501

        :param subject_id: The subject_id of this InlineResponse2002Data.  # noqa: E501
        :type: int
        """

        self._subject_id = subject_id

    @property
    def name(self):
        """Gets the name of this InlineResponse2002Data.  # noqa: E501

        Nazvanie harakteristiki  # noqa: E501

        :return: The name of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2002Data.

        Nazvanie harakteristiki  # noqa: E501

        :param name: The name of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def required(self):
        """Gets the required of this InlineResponse2002Data.  # noqa: E501

        true - harakteristiku neobhodimo obazatelno ukazat v kartohke tovara. false - harakteristiku ne obazatelno ukazyvat  # noqa: E501

        :return: The required of this InlineResponse2002Data.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this InlineResponse2002Data.

        true - harakteristiku neobhodimo obazatelno ukazat v kartohke tovara. false - harakteristiku ne obazatelno ukazyvat  # noqa: E501

        :param required: The required of this InlineResponse2002Data.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def unit_name(self):
        """Gets the unit_name of this InlineResponse2002Data.  # noqa: E501

        Edinica izmerenia  # noqa: E501

        :return: The unit_name of this InlineResponse2002Data.  # noqa: E501
        :rtype: str
        """
        return self._unit_name

    @unit_name.setter
    def unit_name(self, unit_name):
        """Sets the unit_name of this InlineResponse2002Data.

        Edinica izmerenia  # noqa: E501

        :param unit_name: The unit_name of this InlineResponse2002Data.  # noqa: E501
        :type: str
        """

        self._unit_name = unit_name

    @property
    def max_count(self):
        """Gets the max_count of this InlineResponse2002Data.  # noqa: E501

        Maksimalnoe kol-vo znahenii, kotoroe mohno prisvoit dannoi harakteristike. Esli 0, to net ogranihenia.   # noqa: E501

        :return: The max_count of this InlineResponse2002Data.  # noqa: E501
        :rtype: int
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """Sets the max_count of this InlineResponse2002Data.

        Maksimalnoe kol-vo znahenii, kotoroe mohno prisvoit dannoi harakteristike. Esli 0, to net ogranihenia.   # noqa: E501

        :param max_count: The max_count of this InlineResponse2002Data.  # noqa: E501
        :type: int
        """

        self._max_count = max_count

    @property
    def popular(self):
        """Gets the popular of this InlineResponse2002Data.  # noqa: E501

        harakteristika popularna u polzovatelei (true - da, false - net)  # noqa: E501

        :return: The popular of this InlineResponse2002Data.  # noqa: E501
        :rtype: bool
        """
        return self._popular

    @popular.setter
    def popular(self, popular):
        """Sets the popular of this InlineResponse2002Data.

        harakteristika popularna u polzovatelei (true - da, false - net)  # noqa: E501

        :param popular: The popular of this InlineResponse2002Data.  # noqa: E501
        :type: bool
        """

        self._popular = popular

    @property
    def charc_type(self):
        """Gets the charc_type of this InlineResponse2002Data.  # noqa: E501

        Tip harakteristiki (1 i 0 - stroka ili massiv strok; 4 - hislo ili massiv hisel)  # noqa: E501

        :return: The charc_type of this InlineResponse2002Data.  # noqa: E501
        :rtype: int
        """
        return self._charc_type

    @charc_type.setter
    def charc_type(self, charc_type):
        """Sets the charc_type of this InlineResponse2002Data.

        Tip harakteristiki (1 i 0 - stroka ili massiv strok; 4 - hislo ili massiv hisel)  # noqa: E501

        :param charc_type: The charc_type of this InlineResponse2002Data.  # noqa: E501
        :type: int
        """

        self._charc_type = charc_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
