# coding: utf-8

"""
    Dokumenty i buhgalteria

    <div class=\"description_important\">       Uznat bolhe o dokumentah i buhgalterii mohno v <a href=\"https://seller.wildberries.ru/instructions/category/ba929b64-1f89-4426-82d7-ce998ee552bd?goBackOption=prevRoute&categoryId=3c971375-9939-45e8-ab82-376019be8942\">spravohnom centre</a> </div>  Prosmotr [finansovyh othetov](/openapi/financial-reports-and-accounting#tag/Finansovye-otchyoty) i [dokumentov](/openapi/financial-reports-and-accounting#tag/Dokumenty) prodavca.   # noqa: E501

    OpenAPI spec version: finances
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetListDataDocuments(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_name': 'str',
        'name': 'str',
        'category': 'str',
        'extensions': 'list[str]',
        'creation_time': 'str',
        'viewed': 'bool'
    }

    attribute_map = {
        'service_name': 'serviceName',
        'name': 'name',
        'category': 'category',
        'extensions': 'extensions',
        'creation_time': 'creationTime',
        'viewed': 'viewed'
    }

    def __init__(self, service_name=None, name=None, category=None, extensions=None, creation_time=None, viewed=None):  # noqa: E501
        """GetListDataDocuments - a model defined in Swagger"""  # noqa: E501
        self._service_name = None
        self._name = None
        self._category = None
        self._extensions = None
        self._creation_time = None
        self._viewed = None
        self.discriminator = None
        if service_name is not None:
            self.service_name = service_name
        if name is not None:
            self.name = name
        if category is not None:
            self.category = category
        if extensions is not None:
            self.extensions = extensions
        if creation_time is not None:
            self.creation_time = creation_time
        if viewed is not None:
            self.viewed = viewed

    @property
    def service_name(self):
        """Gets the service_name of this GetListDataDocuments.  # noqa: E501

        Unikalnyi ID dokumenta  # noqa: E501

        :return: The service_name of this GetListDataDocuments.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this GetListDataDocuments.

        Unikalnyi ID dokumenta  # noqa: E501

        :param service_name: The service_name of this GetListDataDocuments.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def name(self):
        """Gets the name of this GetListDataDocuments.  # noqa: E501

        Nazvanie dokumenta  # noqa: E501

        :return: The name of this GetListDataDocuments.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetListDataDocuments.

        Nazvanie dokumenta  # noqa: E501

        :param name: The name of this GetListDataDocuments.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def category(self):
        """Gets the category of this GetListDataDocuments.  # noqa: E501

        Nazvanie [kategorii dokumentov](./financial-reports-and-accounting#tag/Dokumenty/paths/~1api~1v1~1documents~1categories/get) iz pola otveta `title`  # noqa: E501

        :return: The category of this GetListDataDocuments.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this GetListDataDocuments.

        Nazvanie [kategorii dokumentov](./financial-reports-and-accounting#tag/Dokumenty/paths/~1api~1v1~1documents~1categories/get) iz pola otveta `title`  # noqa: E501

        :param category: The category of this GetListDataDocuments.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def extensions(self):
        """Gets the extensions of this GetListDataDocuments.  # noqa: E501

        Formaty dokumenta  # noqa: E501

        :return: The extensions of this GetListDataDocuments.  # noqa: E501
        :rtype: list[str]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this GetListDataDocuments.

        Formaty dokumenta  # noqa: E501

        :param extensions: The extensions of this GetListDataDocuments.  # noqa: E501
        :type: list[str]
        """

        self._extensions = extensions

    @property
    def creation_time(self):
        """Gets the creation_time of this GetListDataDocuments.  # noqa: E501

        Data i vrema sozdania dokumenta  # noqa: E501

        :return: The creation_time of this GetListDataDocuments.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this GetListDataDocuments.

        Data i vrema sozdania dokumenta  # noqa: E501

        :param creation_time: The creation_time of this GetListDataDocuments.  # noqa: E501
        :type: str
        """

        self._creation_time = creation_time

    @property
    def viewed(self):
        """Gets the viewed of this GetListDataDocuments.  # noqa: E501

        Vygruhen li dokument v lihnom kabinete  # noqa: E501

        :return: The viewed of this GetListDataDocuments.  # noqa: E501
        :rtype: bool
        """
        return self._viewed

    @viewed.setter
    def viewed(self, viewed):
        """Sets the viewed of this GetListDataDocuments.

        Vygruhen li dokument v lihnom kabinete  # noqa: E501

        :param viewed: The viewed of this GetListDataDocuments.  # noqa: E501
        :type: bool
        """

        self._viewed = viewed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetListDataDocuments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetListDataDocuments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
