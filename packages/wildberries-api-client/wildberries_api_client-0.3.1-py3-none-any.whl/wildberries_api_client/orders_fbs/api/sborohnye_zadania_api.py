# coding: utf-8

"""
    Zakazy FBS

    <div class=\"description_important\">       Uznat bolhe o zakazah FBS mohno v <a href=\"https://seller.wildberries.ru/instructions/category/b3e60238-fd4c-49ce-8668-ff688725a12d?goBackOption=prevRoute&categoryId=5a8e1202-0865-45b7-acae-5d0afc7add56\">spravohnom centre</a> </div>  V razdele zakazov FBS (Fulfillment by Seller) vam dostupny metody:   1. Upravlenia [sborohnymi zadaniami](/openapi/orders-fbs#tag/Sborochnye-zadaniya): informacia o sborohnyh zadaniah, metadannye, stikery i tak dalee.   2. Upravlenia [postavkami zakazov](/openapi/orders-fbs#tag/Postavki-FBS) prodavca na sklady WB.   3. Zakaza [propuskov](/openapi/orders-fbs#tag/Propuska) na sklady WB.   4. Dostavki zakazov [kurerom WB](/openapi/orders-fbs#tag/Dostavka-kurerom-WB-(DBW)) (DBW).   # noqa: E501

    OpenAPI spec version: order
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.orders_fbs.api_client import ApiClient


class SborohnyeZadaniaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v3_files_orders_external_stickers_post(self, **kwargs):  # noqa: E501
        """Poluhit spisok ssylok na stikery sborohnyh zadanii, kotorye trebuutsa pri krossbordere  # noqa: E501

        Metod predostavlaet spisok ssylok na stikery [sborohnyh zadanii](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get), kotorye trebuutsa pri krossbordere.  Ogranihenia:   - Za odin zapros mohno poluhit maksimum 100 stikerov.   - Mohno poluhit stikery tolko dla sborohnyh zadanii, nahodahihsa v dostavke — [status](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) `complete`.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_files_orders_external_stickers_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersExternalstickersBody body:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_files_orders_external_stickers_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_files_orders_external_stickers_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v3_files_orders_external_stickers_post_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit spisok ssylok na stikery sborohnyh zadanii, kotorye trebuutsa pri krossbordere  # noqa: E501

        Metod predostavlaet spisok ssylok na stikery [sborohnyh zadanii](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get), kotorye trebuutsa pri krossbordere.  Ogranihenia:   - Za odin zapros mohno poluhit maksimum 100 stikerov.   - Mohno poluhit stikery tolko dla sborohnyh zadanii, nahodahihsa v dostavke — [status](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) `complete`.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_files_orders_external_stickers_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersExternalstickersBody body:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_files_orders_external_stickers_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/files/orders/external-stickers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_client_post(self, body, **kwargs):  # noqa: E501
        """Zakazy s informaciei po klientu  # noqa: E501

        Metod pozvolaet poluhat informaciu o pokupatele po ID sborohnogo zadania.  Tolko dla krossbordera iz **Turcii**.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_client_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersRequestAPI body: (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_client_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_client_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_client_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Zakazy s informaciei po klientu  # noqa: E501

        Metod pozvolaet poluhat informaciu o pokupatele po ID sborohnogo zadania.  Tolko dla krossbordera iz **Turcii**.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_client_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersRequestAPI body: (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_client_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v3_orders_client_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/client', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_get(self, limit, next, **kwargs):  # noqa: E501
        """Poluhit informaciu o sborohnyh zadaniah  # noqa: E501

        Metod predostavlaet informaciu o sborohnyh zadaniah bez ih aktualnogo [statusa](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post).  Mohno poluhit dannye za zadannyi period, maksimum 30 kalendarnyh dnei.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_get(limit, next, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Parametr paginacii. Ustanavlivaet predelnoe kolihestvo vozvrahaemyh dannyh. (required)
        :param int next: Parametr paginacii. Ustanavlivaet znahenie, s kotorogo nado poluhit sleduuhii paket dannyh. Dla poluhenia polnogo spiska dannyh dolhen byt raven 0 v pervom zaprose. Dla sleduuhih zaprosov neobhodimo brat znahenia iz odnoimennogo pola v otvete. (required)
        :param int date_from: Data nahala perioda v formate Unix timestamp. Po umolhaniu — data za 30 dnei do zaprosa 
        :param int date_to: Data konca perioda v formate Unix timestamp
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_get_with_http_info(limit, next, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_get_with_http_info(limit, next, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_get_with_http_info(self, limit, next, **kwargs):  # noqa: E501
        """Poluhit informaciu o sborohnyh zadaniah  # noqa: E501

        Metod predostavlaet informaciu o sborohnyh zadaniah bez ih aktualnogo [statusa](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post).  Mohno poluhit dannye za zadannyi period, maksimum 30 kalendarnyh dnei.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_get_with_http_info(limit, next, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Parametr paginacii. Ustanavlivaet predelnoe kolihestvo vozvrahaemyh dannyh. (required)
        :param int next: Parametr paginacii. Ustanavlivaet znahenie, s kotorogo nado poluhit sleduuhii paket dannyh. Dla poluhenia polnogo spiska dannyh dolhen byt raven 0 v pervom zaprose. Dla sleduuhih zaprosov neobhodimo brat znahenia iz odnoimennogo pola v otvete. (required)
        :param int date_from: Data nahala perioda v formate Unix timestamp. Po umolhaniu — data za 30 dnei do zaprosa 
        :param int date_to: Data konca perioda v formate Unix timestamp
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'next', 'date_from', 'date_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `api_v3_orders_get`")  # noqa: E501
        # verify the required parameter 'next' is set
        if ('next' not in params or
                params['next'] is None):
            raise ValueError("Missing the required parameter `next` when calling `api_v3_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'next' in params:
            query_params.append(('next', params['next']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_new_get(self, **kwargs):  # noqa: E501
        """Poluhit spisok novyh sborohnyh zadanii  # noqa: E501

        Metod predostavlaet spisok vseh novyh [sborohnyh zadanii](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get), kotorye est u prodavca na moment zaprosa.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_new_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_new_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_new_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v3_orders_new_get_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit spisok novyh sborohnyh zadanii  # noqa: E501

        Metod predostavlaet spisok vseh novyh [sborohnyh zadanii](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get), kotorye est u prodavca na moment zaprosa.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_new_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_new_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/new', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_order_id_cancel_patch(self, order_id, **kwargs):  # noqa: E501
        """Otmenit sborohnoe zadanie  # noqa: E501

        Metod otmenaet [sborohnoe zadanie](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get) i perevodit v [status](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) `cancel` — otmeneno prodavcom.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_cancel_patch(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_order_id_cancel_patch_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_order_id_cancel_patch_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_order_id_cancel_patch_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Otmenit sborohnoe zadanie  # noqa: E501

        Metod otmenaet [sborohnoe zadanie](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get) i perevodit v [status](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) `cancel` — otmeneno prodavcom.  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_order_id_cancel_patch_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: ID sborohnogo zadania (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_order_id_cancel_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `api_v3_orders_order_id_cancel_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['orderId'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/{orderId}/cancel', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_status_history_post(self, **kwargs):  # noqa: E501
        """Istoria statusov dla sborohnyh zadanii krossbordera  # noqa: E501

        Metod predostavlaet istoriu [statusov](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) dla [sborohnyh zadanii](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get) krossbordera.    <div class=\"description_limit\">       Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov   </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_status_history_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StatusHistoryBody body:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_status_history_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_status_history_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v3_orders_status_history_post_with_http_info(self, **kwargs):  # noqa: E501
        """Istoria statusov dla sborohnyh zadanii krossbordera  # noqa: E501

        Metod predostavlaet istoriu [statusov](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) dla [sborohnyh zadanii](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get) krossbordera.    <div class=\"description_limit\">       Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov   </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_status_history_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StatusHistoryBody body:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_status_history_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/status/history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_status_post(self, **kwargs):  # noqa: E501
        """Poluhit statusy sborohnyh zadanii  # noqa: E501

        Metod predostavlaet statusy [sborohnyh zadanii](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get) po ih ID. <br><br> `supplierStatus` — status sborohnogo zadania. Trigger ego izmenenia — sam prodavec.  Vozmohnye znahenia `supplierStatus`:  | Status   | Opisanie            | Kak perevesti sborohnoe zadanie v dannyi status | |-------|----------------------|--------------------------------------| | **new**      | Novoe sborohnoe zadanie |  | | **confirm**  | Na sborke <br>Dla dostavki silami Wildberries `fbs` |[Dobavit sborohnoe zadanie k postavke](/openapi/orders-fbs#tag/Postavki-FBS/paths/~1api~1v3~1supplies~1%7BsupplyId%7D~1orders~1%7BorderId%7D/patch) | **complete** | V dostavke <br> Dla dostavki silami Wildberries `fbs` i kurerom WB `wbgo`  | Dla `fbs` — [peredat postavku v dostavku](/openapi/orders-fbs#tag/Postavki/paths/~1api~1v3~1supplies~1%7BsupplyId%7D~1deliver/patch) <br> Dla `wbgo` — [perevesti sborohnoe zadanie v dostavku](/openapi/orders-fbs#tag/Dostavka-kurerom-WB-(DBW)/paths/~1api~1v3~1orders~1%7BorderId%7D~1assemble/patch) | | **cancel**   | Otmeneno prodavcom   | [Otmenit sborohnoe zadanie](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1cancel/patch) | **receive**  | Poluheno klientom<br> Dla dostavki kurerom WB `wbgo`   | Status menaetsa avtomatiheski | **reject**   | Otkaz klienta pri poluhenii<br>  Dla dostavki kurerom WB `wbgo`  |  Status menaetsa avtomatiheski  <br><br> `wbStatus` — status sborohnogo zadania v sisteme WB.  Vozmohnye znahenia `wbStatus`: - `waiting` — sborohnoe zadanie v rabote - `sorted` — sborohnoe zadanie otsortirovano - `sold` — sborohnoe zadanie poluheno pokupatelem - `canceled` — otmena sborohnogo zadania - `canceled_by_client` — pokupatel otmenil zakaz pri poluhenii - `declined_by_client` — pokupatel otmenil zakaz. Otmena dostupna pokupatelu v pervyi has s momenta zakaza, esli zakaz ne pereveden na sborku - `defect` — otmena sborohnogo zadania po prihine braka - `ready_for_pickup` — sborohnoe zadanie pribylo na punkt vydahi zakazov (PVZ) - `postponed_delivery` — kurerskaa dostavka otlohena     <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_status_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersStatusBody body:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_status_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_status_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v3_orders_status_post_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit statusy sborohnyh zadanii  # noqa: E501

        Metod predostavlaet statusy [sborohnyh zadanii](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get) po ih ID. <br><br> `supplierStatus` — status sborohnogo zadania. Trigger ego izmenenia — sam prodavec.  Vozmohnye znahenia `supplierStatus`:  | Status   | Opisanie            | Kak perevesti sborohnoe zadanie v dannyi status | |-------|----------------------|--------------------------------------| | **new**      | Novoe sborohnoe zadanie |  | | **confirm**  | Na sborke <br>Dla dostavki silami Wildberries `fbs` |[Dobavit sborohnoe zadanie k postavke](/openapi/orders-fbs#tag/Postavki-FBS/paths/~1api~1v3~1supplies~1%7BsupplyId%7D~1orders~1%7BorderId%7D/patch) | **complete** | V dostavke <br> Dla dostavki silami Wildberries `fbs` i kurerom WB `wbgo`  | Dla `fbs` — [peredat postavku v dostavku](/openapi/orders-fbs#tag/Postavki/paths/~1api~1v3~1supplies~1%7BsupplyId%7D~1deliver/patch) <br> Dla `wbgo` — [perevesti sborohnoe zadanie v dostavku](/openapi/orders-fbs#tag/Dostavka-kurerom-WB-(DBW)/paths/~1api~1v3~1orders~1%7BorderId%7D~1assemble/patch) | | **cancel**   | Otmeneno prodavcom   | [Otmenit sborohnoe zadanie](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1%7BorderId%7D~1cancel/patch) | **receive**  | Poluheno klientom<br> Dla dostavki kurerom WB `wbgo`   | Status menaetsa avtomatiheski | **reject**   | Otkaz klienta pri poluhenii<br>  Dla dostavki kurerom WB `wbgo`  |  Status menaetsa avtomatiheski  <br><br> `wbStatus` — status sborohnogo zadania v sisteme WB.  Vozmohnye znahenia `wbStatus`: - `waiting` — sborohnoe zadanie v rabote - `sorted` — sborohnoe zadanie otsortirovano - `sold` — sborohnoe zadanie poluheno pokupatelem - `canceled` — otmena sborohnogo zadania - `canceled_by_client` — pokupatel otmenil zakaz pri poluhenii - `declined_by_client` — pokupatel otmenil zakaz. Otmena dostupna pokupatelu v pervyi has s momenta zakaza, esli zakaz ne pereveden na sborku - `defect` — otmena sborohnogo zadania po prihine braka - `ready_for_pickup` — sborohnoe zadanie pribylo na punkt vydahi zakazov (PVZ) - `postponed_delivery` — kurerskaa dostavka otlohena     <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_status_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrdersStatusBody body:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_status_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_orders_stickers_post(self, type, width, height, **kwargs):  # noqa: E501
        """Poluhit stikery sborohnyh zadanii  # noqa: E501

        Metod predostavlaet spisok stikerov dla [sborohnyh zadanii](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get).  Mohno poluhit stiker v formatah:   - SVG   - ZPLV (vertikalnyi)   - ZPLH (gorizontalnyi)   - PNG  Ogranihenia:   - Za odin zapros mohno poluhit maksimum 100 stikerov.   - Mohno poluhit stikery tolko dla sborohnyh zadanii, nahodahihsa na sborke — [status](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) `confirm`.  Dostupny razmery:   - 580x400 px pri parametrah `\"width\": 58`, `\"height\": 40`   - 400x300 px pri parametrah `\"width\": 40`, `\"height\": 30`  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_stickers_post(type, width, height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Tip stikera (required)
        :param int width: hirina stikera (required)
        :param int height: Vysota stikera (required)
        :param OrdersStickersBody body:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_orders_stickers_post_with_http_info(type, width, height, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_orders_stickers_post_with_http_info(type, width, height, **kwargs)  # noqa: E501
            return data

    def api_v3_orders_stickers_post_with_http_info(self, type, width, height, **kwargs):  # noqa: E501
        """Poluhit stikery sborohnyh zadanii  # noqa: E501

        Metod predostavlaet spisok stikerov dla [sborohnyh zadanii](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get).  Mohno poluhit stiker v formatah:   - SVG   - ZPLV (vertikalnyi)   - ZPLH (gorizontalnyi)   - PNG  Ogranihenia:   - Za odin zapros mohno poluhit maksimum 100 stikerov.   - Mohno poluhit stikery tolko dla sborohnyh zadanii, nahodahihsa na sborke — [status](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders~1status/post) `confirm`.  Dostupny razmery:   - 580x400 px pri parametrah `\"width\": 58`, `\"height\": 40`   - 400x300 px pri parametrah `\"width\": 40`, `\"height\": 30`  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_orders_stickers_post_with_http_info(type, width, height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Tip stikera (required)
        :param int width: hirina stikera (required)
        :param int height: Vysota stikera (required)
        :param OrdersStickersBody body:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'width', 'height', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_orders_stickers_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `api_v3_orders_stickers_post`")  # noqa: E501
        # verify the required parameter 'width' is set
        if ('width' not in params or
                params['width'] is None):
            raise ValueError("Missing the required parameter `width` when calling `api_v3_orders_stickers_post`")  # noqa: E501
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `api_v3_orders_stickers_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'width' in params:
            query_params.append(('width', params['width']))  # noqa: E501
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/orders/stickers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_supplies_orders_reshipment_get(self, **kwargs):  # noqa: E501
        """Poluhit vse sborohnye zadania dla povtornoi otgruzki  # noqa: E501

        Metod predostavlaet vse [sborohnye zadania](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get), trebuuhie povtornoi otgruzki.  <br><br> Povtornaa otgruzka trebuetsa, esli postavka byla otskanirovana v punkte priemki, no pri etom v nei vse ehe est neotskanirovannye tovary. Spusta opredelennoe vrema neobhodimo dostavit eti tovary zanovo. Dannye sborohnye zadania mohno perevesti v [druguu aktivnuu postavku](/openapi/orders-fbs#tag/Postavki-FBS/paths/~1api~1v3~1supplies~1%7BsupplyId%7D~1orders~1%7BorderId%7D/patch).  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_orders_reshipment_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_supplies_orders_reshipment_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_supplies_orders_reshipment_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v3_supplies_orders_reshipment_get_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit vse sborohnye zadania dla povtornoi otgruzki  # noqa: E501

        Metod predostavlaet vse [sborohnye zadania](/openapi/orders-fbs#tag/Sborochnye-zadaniya/paths/~1api~1v3~1orders/get), trebuuhie povtornoi otgruzki.  <br><br> Povtornaa otgruzka trebuetsa, esli postavka byla otskanirovana v punkte priemki, no pri etom v nei vse ehe est neotskanirovannye tovary. Spusta opredelennoe vrema neobhodimo dostavit eti tovary zanovo. Dannye sborohnye zadania mohno perevesti v [druguu aktivnuu postavku](/openapi/orders-fbs#tag/Postavki-FBS/paths/~1api~1v3~1supplies~1%7BsupplyId%7D~1orders~1%7BorderId%7D/patch).  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_supplies_orders_reshipment_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_supplies_orders_reshipment_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/supplies/orders/reshipment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
