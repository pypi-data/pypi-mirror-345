# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from wildberries_api_client.analytics.models.table_common_metrics import TableCommonMetrics  # noqa: F401,E501

class AllOfTableProductItemStMetrics(TableCommonMetrics):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_price': 'object',
        'availability': 'str'
    }
    if hasattr(TableCommonMetrics, "swagger_types"):
        swagger_types.update(TableCommonMetrics.swagger_types)

    attribute_map = {
        'current_price': 'currentPrice',
        'availability': 'availability'
    }
    if hasattr(TableCommonMetrics, "attribute_map"):
        attribute_map.update(TableCommonMetrics.attribute_map)

    def __init__(self, current_price=None, availability=None, *args, **kwargs):  # noqa: E501
        """AllOfTableProductItemStMetrics - a model defined in Swagger"""  # noqa: E501
        self._current_price = None
        self._availability = None
        self.discriminator = None
        self.current_price = current_price
        self.availability = availability
        TableCommonMetrics.__init__(self, *args, **kwargs)

    @property
    def current_price(self):
        """Gets the current_price of this AllOfTableProductItemStMetrics.  # noqa: E501

        Tekuhaa cena  # noqa: E501

        :return: The current_price of this AllOfTableProductItemStMetrics.  # noqa: E501
        :rtype: object
        """
        return self._current_price

    @current_price.setter
    def current_price(self, current_price):
        """Sets the current_price of this AllOfTableProductItemStMetrics.

        Tekuhaa cena  # noqa: E501

        :param current_price: The current_price of this AllOfTableProductItemStMetrics.  # noqa: E501
        :type: object
        """
        if current_price is None:
            raise ValueError("Invalid value for `current_price`, must not be `None`")  # noqa: E501

        self._current_price = current_price

    @property
    def availability(self):
        """Gets the availability of this AllOfTableProductItemStMetrics.  # noqa: E501

        Dostupnost tovara:   - `deficient` — Deficit   - `actual` — Aktualnyi   - `balanced` — Balans   - `nonActual` — Neaktualnyi   - `nonLiquid` — Nelikvid   - `invalidData` — Ne rasshitano   # noqa: E501

        :return: The availability of this AllOfTableProductItemStMetrics.  # noqa: E501
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AllOfTableProductItemStMetrics.

        Dostupnost tovara:   - `deficient` — Deficit   - `actual` — Aktualnyi   - `balanced` — Balans   - `nonActual` — Neaktualnyi   - `nonLiquid` — Nelikvid   - `invalidData` — Ne rasshitano   # noqa: E501

        :param availability: The availability of this AllOfTableProductItemStMetrics.  # noqa: E501
        :type: str
        """
        if availability is None:
            raise ValueError("Invalid value for `availability`, must not be `None`")  # noqa: E501
        allowed_values = ["deficient", "actual", "balanced", "nonActual", "nonLiquid", "invalidData"]  # noqa: E501
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"  # noqa: E501
                .format(availability, allowed_values)
            )

        self._availability = availability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllOfTableProductItemStMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllOfTableProductItemStMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
