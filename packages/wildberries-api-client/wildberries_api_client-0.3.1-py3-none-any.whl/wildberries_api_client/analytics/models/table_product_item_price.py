# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableProductItemPrice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_price': 'int',
        'max_price': 'int'
    }

    attribute_map = {
        'min_price': 'minPrice',
        'max_price': 'maxPrice'
    }

    def __init__(self, min_price=None, max_price=None):  # noqa: E501
        """TableProductItemPrice - a model defined in Swagger"""  # noqa: E501
        self._min_price = None
        self._max_price = None
        self.discriminator = None
        self.min_price = min_price
        self.max_price = max_price

    @property
    def min_price(self):
        """Gets the min_price of this TableProductItemPrice.  # noqa: E501

        Minimalnaa cena prodavca so skidkoi prodavca (bez uheta skidki WB Kluba)  # noqa: E501

        :return: The min_price of this TableProductItemPrice.  # noqa: E501
        :rtype: int
        """
        return self._min_price

    @min_price.setter
    def min_price(self, min_price):
        """Sets the min_price of this TableProductItemPrice.

        Minimalnaa cena prodavca so skidkoi prodavca (bez uheta skidki WB Kluba)  # noqa: E501

        :param min_price: The min_price of this TableProductItemPrice.  # noqa: E501
        :type: int
        """
        if min_price is None:
            raise ValueError("Invalid value for `min_price`, must not be `None`")  # noqa: E501

        self._min_price = min_price

    @property
    def max_price(self):
        """Gets the max_price of this TableProductItemPrice.  # noqa: E501

        Maksimalnaa cena prodavca so skidkoi prodavca (bez uheta skidki WB Kluba)  # noqa: E501

        :return: The max_price of this TableProductItemPrice.  # noqa: E501
        :rtype: int
        """
        return self._max_price

    @max_price.setter
    def max_price(self, max_price):
        """Sets the max_price of this TableProductItemPrice.

        Maksimalnaa cena prodavca so skidkoi prodavca (bez uheta skidki WB Kluba)  # noqa: E501

        :param max_price: The max_price of this TableProductItemPrice.  # noqa: E501
        :type: int
        """
        if max_price is None:
            raise ValueError("Invalid value for `max_price`, must not be `None`")  # noqa: E501

        self._max_price = max_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableProductItemPrice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableProductItemPrice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
