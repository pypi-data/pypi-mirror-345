# coding: utf-8

"""
    Postavki FBW

    <div class=\"description_important\">       Uznat bolhe o postavkah FBW mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/5a8e1202-0865-45b7-acae-5d0afc7add56?goBackOption=prevRoute&categoryId=479385c6-de01-4b4d-ad4e-ed941e65582e\">spravohnom centre</a> </div>  Upravlenie informaciei dla formirovania postavok, skladskimi dannymi i statusami   # noqa: E501

    OpenAPI spec version: ordersfbw
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelsAcceptanceCoefficient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'coefficient': 'float',
        'warehouse_id': 'int',
        'warehouse_name': 'str',
        'allow_unload': 'bool',
        'box_type_name': 'str',
        'box_type_id': 'int',
        'storage_coef': 'str',
        'delivery_coef': 'str',
        'delivery_base_liter': 'str',
        'delivery_additional_liter': 'str',
        'storage_base_liter': 'str',
        'storage_additional_liter': 'str',
        'is_sorting_center': 'bool'
    }

    attribute_map = {
        '_date': 'date',
        'coefficient': 'coefficient',
        'warehouse_id': 'warehouseID',
        'warehouse_name': 'warehouseName',
        'allow_unload': 'allowUnload',
        'box_type_name': 'boxTypeName',
        'box_type_id': 'boxTypeID',
        'storage_coef': 'storageCoef',
        'delivery_coef': 'deliveryCoef',
        'delivery_base_liter': 'deliveryBaseLiter',
        'delivery_additional_liter': 'deliveryAdditionalLiter',
        'storage_base_liter': 'storageBaseLiter',
        'storage_additional_liter': 'storageAdditionalLiter',
        'is_sorting_center': 'isSortingCenter'
    }

    def __init__(self, _date=None, coefficient=None, warehouse_id=None, warehouse_name=None, allow_unload=None, box_type_name=None, box_type_id=None, storage_coef=None, delivery_coef=None, delivery_base_liter=None, delivery_additional_liter=None, storage_base_liter=None, storage_additional_liter=None, is_sorting_center=None):  # noqa: E501
        """ModelsAcceptanceCoefficient - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._coefficient = None
        self._warehouse_id = None
        self._warehouse_name = None
        self._allow_unload = None
        self._box_type_name = None
        self._box_type_id = None
        self._storage_coef = None
        self._delivery_coef = None
        self._delivery_base_liter = None
        self._delivery_additional_liter = None
        self._storage_base_liter = None
        self._storage_additional_liter = None
        self._is_sorting_center = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if coefficient is not None:
            self.coefficient = coefficient
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if warehouse_name is not None:
            self.warehouse_name = warehouse_name
        if allow_unload is not None:
            self.allow_unload = allow_unload
        if box_type_name is not None:
            self.box_type_name = box_type_name
        if box_type_id is not None:
            self.box_type_id = box_type_id
        if storage_coef is not None:
            self.storage_coef = storage_coef
        if delivery_coef is not None:
            self.delivery_coef = delivery_coef
        if delivery_base_liter is not None:
            self.delivery_base_liter = delivery_base_liter
        if delivery_additional_liter is not None:
            self.delivery_additional_liter = delivery_additional_liter
        if storage_base_liter is not None:
            self.storage_base_liter = storage_base_liter
        if storage_additional_liter is not None:
            self.storage_additional_liter = storage_additional_liter
        if is_sorting_center is not None:
            self.is_sorting_center = is_sorting_center

    @property
    def _date(self):
        """Gets the _date of this ModelsAcceptanceCoefficient.  # noqa: E501

        Data nahala deistvia koefficienta  # noqa: E501

        :return: The _date of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ModelsAcceptanceCoefficient.

        Data nahala deistvia koefficienta  # noqa: E501

        :param _date: The _date of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def coefficient(self):
        """Gets the coefficient of this ModelsAcceptanceCoefficient.  # noqa: E501

        Koefficient priemki:   - `-1` — priemka nedostupna, vne zavisimosti ot znahenia pola `allowUnload`   - `0` — besplatnaa priemka   - ot `1` — mnohitel stoimosti priemki   # noqa: E501

        :return: The coefficient of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: float
        """
        return self._coefficient

    @coefficient.setter
    def coefficient(self, coefficient):
        """Sets the coefficient of this ModelsAcceptanceCoefficient.

        Koefficient priemki:   - `-1` — priemka nedostupna, vne zavisimosti ot znahenia pola `allowUnload`   - `0` — besplatnaa priemka   - ot `1` — mnohitel stoimosti priemki   # noqa: E501

        :param coefficient: The coefficient of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: float
        """

        self._coefficient = coefficient

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ModelsAcceptanceCoefficient.  # noqa: E501

        ID sklada. Po nemu mohno poluhit [informaciu o sklade](https://dev.wildberries.ru/openapi/orders-fbw#tag/Postavki/paths/~1api~1v1~1warehouses/get)  # noqa: E501

        :return: The warehouse_id of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ModelsAcceptanceCoefficient.

        ID sklada. Po nemu mohno poluhit [informaciu o sklade](https://dev.wildberries.ru/openapi/orders-fbw#tag/Postavki/paths/~1api~1v1~1warehouses/get)  # noqa: E501

        :param warehouse_id: The warehouse_id of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    @property
    def warehouse_name(self):
        """Gets the warehouse_name of this ModelsAcceptanceCoefficient.  # noqa: E501

        Nazvanie sklada  # noqa: E501

        :return: The warehouse_name of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_name

    @warehouse_name.setter
    def warehouse_name(self, warehouse_name):
        """Sets the warehouse_name of this ModelsAcceptanceCoefficient.

        Nazvanie sklada  # noqa: E501

        :param warehouse_name: The warehouse_name of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: str
        """

        self._warehouse_name = warehouse_name

    @property
    def allow_unload(self):
        """Gets the allow_unload of this ModelsAcceptanceCoefficient.  # noqa: E501

        Dostupnost priemki dla postavok dannogo tipa, smotri znahenie pola `boxTypeName`:  - `true` — priemka dostupna  - `false` — priemka ne dostupna    # noqa: E501

        :return: The allow_unload of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: bool
        """
        return self._allow_unload

    @allow_unload.setter
    def allow_unload(self, allow_unload):
        """Sets the allow_unload of this ModelsAcceptanceCoefficient.

        Dostupnost priemki dla postavok dannogo tipa, smotri znahenie pola `boxTypeName`:  - `true` — priemka dostupna  - `false` — priemka ne dostupna    # noqa: E501

        :param allow_unload: The allow_unload of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: bool
        """

        self._allow_unload = allow_unload

    @property
    def box_type_name(self):
        """Gets the box_type_name of this ModelsAcceptanceCoefficient.  # noqa: E501

        Tip postavki:   - `Koroba`   - `Monopallety`   - `Superseif`   - `QR-postavka s korobami`   # noqa: E501

        :return: The box_type_name of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: str
        """
        return self._box_type_name

    @box_type_name.setter
    def box_type_name(self, box_type_name):
        """Sets the box_type_name of this ModelsAcceptanceCoefficient.

        Tip postavki:   - `Koroba`   - `Monopallety`   - `Superseif`   - `QR-postavka s korobami`   # noqa: E501

        :param box_type_name: The box_type_name of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: str
        """

        self._box_type_name = box_type_name

    @property
    def box_type_id(self):
        """Gets the box_type_id of this ModelsAcceptanceCoefficient.  # noqa: E501

        ID tipa postavki:   - `2` — Koroba   - `5` — Monopallety   - `6` — Superseif <br>Dla tipa postavki **QR-postavka s korobami** pole ne vozvrahaetsa   # noqa: E501

        :return: The box_type_id of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: int
        """
        return self._box_type_id

    @box_type_id.setter
    def box_type_id(self, box_type_id):
        """Sets the box_type_id of this ModelsAcceptanceCoefficient.

        ID tipa postavki:   - `2` — Koroba   - `5` — Monopallety   - `6` — Superseif <br>Dla tipa postavki **QR-postavka s korobami** pole ne vozvrahaetsa   # noqa: E501

        :param box_type_id: The box_type_id of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: int
        """

        self._box_type_id = box_type_id

    @property
    def storage_coef(self):
        """Gets the storage_coef of this ModelsAcceptanceCoefficient.  # noqa: E501

        Koefficient hranenia  # noqa: E501

        :return: The storage_coef of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: str
        """
        return self._storage_coef

    @storage_coef.setter
    def storage_coef(self, storage_coef):
        """Sets the storage_coef of this ModelsAcceptanceCoefficient.

        Koefficient hranenia  # noqa: E501

        :param storage_coef: The storage_coef of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: str
        """

        self._storage_coef = storage_coef

    @property
    def delivery_coef(self):
        """Gets the delivery_coef of this ModelsAcceptanceCoefficient.  # noqa: E501

        Koefficient logistiki  # noqa: E501

        :return: The delivery_coef of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: str
        """
        return self._delivery_coef

    @delivery_coef.setter
    def delivery_coef(self, delivery_coef):
        """Sets the delivery_coef of this ModelsAcceptanceCoefficient.

        Koefficient logistiki  # noqa: E501

        :param delivery_coef: The delivery_coef of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: str
        """

        self._delivery_coef = delivery_coef

    @property
    def delivery_base_liter(self):
        """Gets the delivery_base_liter of this ModelsAcceptanceCoefficient.  # noqa: E501

        Stoimost logistiki pervogo litra  # noqa: E501

        :return: The delivery_base_liter of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: str
        """
        return self._delivery_base_liter

    @delivery_base_liter.setter
    def delivery_base_liter(self, delivery_base_liter):
        """Sets the delivery_base_liter of this ModelsAcceptanceCoefficient.

        Stoimost logistiki pervogo litra  # noqa: E501

        :param delivery_base_liter: The delivery_base_liter of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: str
        """

        self._delivery_base_liter = delivery_base_liter

    @property
    def delivery_additional_liter(self):
        """Gets the delivery_additional_liter of this ModelsAcceptanceCoefficient.  # noqa: E501

        Stoimost logistiki kahdogo sleduuhego litra  # noqa: E501

        :return: The delivery_additional_liter of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: str
        """
        return self._delivery_additional_liter

    @delivery_additional_liter.setter
    def delivery_additional_liter(self, delivery_additional_liter):
        """Sets the delivery_additional_liter of this ModelsAcceptanceCoefficient.

        Stoimost logistiki kahdogo sleduuhego litra  # noqa: E501

        :param delivery_additional_liter: The delivery_additional_liter of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: str
        """

        self._delivery_additional_liter = delivery_additional_liter

    @property
    def storage_base_liter(self):
        """Gets the storage_base_liter of this ModelsAcceptanceCoefficient.  # noqa: E501

        Stoimost hranenia:  <br>   <b>Dla pallet</b> - stoimost za odnu palletu   <br>  <b>Dla korobov</b> - stoimost hranenia za pervyi litr   # noqa: E501

        :return: The storage_base_liter of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: str
        """
        return self._storage_base_liter

    @storage_base_liter.setter
    def storage_base_liter(self, storage_base_liter):
        """Sets the storage_base_liter of this ModelsAcceptanceCoefficient.

        Stoimost hranenia:  <br>   <b>Dla pallet</b> - stoimost za odnu palletu   <br>  <b>Dla korobov</b> - stoimost hranenia za pervyi litr   # noqa: E501

        :param storage_base_liter: The storage_base_liter of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: str
        """

        self._storage_base_liter = storage_base_liter

    @property
    def storage_additional_liter(self):
        """Gets the storage_additional_liter of this ModelsAcceptanceCoefficient.  # noqa: E501

        Stoimost hranenia kahdogo posleduuhego litra:   <br>  <b>Dla pallet</b> - vsegda budet <code>null</code>, t.k. stoimost hranenia za edinicu pallety opredelaetsa v <code>StorageBaseLiter</code>   <br>  <b>Dla korobov</b> - stoimost hranenia za kahdyi posleduuhii litr   # noqa: E501

        :return: The storage_additional_liter of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: str
        """
        return self._storage_additional_liter

    @storage_additional_liter.setter
    def storage_additional_liter(self, storage_additional_liter):
        """Sets the storage_additional_liter of this ModelsAcceptanceCoefficient.

        Stoimost hranenia kahdogo posleduuhego litra:   <br>  <b>Dla pallet</b> - vsegda budet <code>null</code>, t.k. stoimost hranenia za edinicu pallety opredelaetsa v <code>StorageBaseLiter</code>   <br>  <b>Dla korobov</b> - stoimost hranenia za kahdyi posleduuhii litr   # noqa: E501

        :param storage_additional_liter: The storage_additional_liter of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: str
        """

        self._storage_additional_liter = storage_additional_liter

    @property
    def is_sorting_center(self):
        """Gets the is_sorting_center of this ModelsAcceptanceCoefficient.  # noqa: E501

        Tip sklada:  - `true` — sortirovohnyi centr (Sc)  - `false` — obyhnyi    # noqa: E501

        :return: The is_sorting_center of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: bool
        """
        return self._is_sorting_center

    @is_sorting_center.setter
    def is_sorting_center(self, is_sorting_center):
        """Sets the is_sorting_center of this ModelsAcceptanceCoefficient.

        Tip sklada:  - `true` — sortirovohnyi centr (Sc)  - `false` — obyhnyi    # noqa: E501

        :param is_sorting_center: The is_sorting_center of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: bool
        """

        self._is_sorting_center = is_sorting_center

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsAcceptanceCoefficient, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsAcceptanceCoefficient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
