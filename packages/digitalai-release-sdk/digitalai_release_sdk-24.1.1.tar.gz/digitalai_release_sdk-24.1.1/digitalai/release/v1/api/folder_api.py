"""
    Digital.ai Release API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from digitalai.release.v1.api_client import ApiClient, Endpoint as _Endpoint
from digitalai.release.v1.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from digitalai.release.v1.model.folder import Folder
from digitalai.release.v1.model.release import Release
from digitalai.release.v1.model.releases_filters import ReleasesFilters
from digitalai.release.v1.model.team_view import TeamView
from digitalai.release.v1.model.variable import Variable
from digitalai.release.v1.model.variable1 import Variable1


class FolderApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_folder_endpoint = _Endpoint(
            settings={
                'response_type': (Folder,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}',
                'operation_id': 'add_folder',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'folder',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'folder':
                        (Folder,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                },
                'location_map': {
                    'folder_id': 'path',
                    'folder': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_folder_variable_endpoint = _Endpoint(
            settings={
                'response_type': (Variable,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/variables',
                'operation_id': 'create_folder_variable',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'variable1',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'variable1':
                        (Variable1,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                },
                'location_map': {
                    'folder_id': 'path',
                    'variable1': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_folder_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}',
                'operation_id': 'delete_folder',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                },
                'location_map': {
                    'folder_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_folder_variable_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/{variableId}',
                'operation_id': 'delete_folder_variable',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'variable_id',
                ],
                'required': [
                    'folder_id',
                    'variable_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                    'variable_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                    ('variable_id',): {

                        'regex': {
                            'pattern': r'.*Variable[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'variable_id':
                        (str,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'variable_id': 'variableId',
                },
                'location_map': {
                    'folder_id': 'path',
                    'variable_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.find_endpoint = _Endpoint(
            settings={
                'response_type': (Folder,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/find',
                'operation_id': 'find',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'by_path',
                    'depth',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'by_path':
                        (str,),
                    'depth':
                        (int,),
                },
                'attribute_map': {
                    'by_path': 'byPath',
                    'depth': 'depth',
                },
                'location_map': {
                    'by_path': 'query',
                    'depth': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_folder_endpoint = _Endpoint(
            settings={
                'response_type': (Folder,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}',
                'operation_id': 'get_folder',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'depth',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'depth':
                        (int,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'depth': 'depth',
                },
                'location_map': {
                    'folder_id': 'path',
                    'depth': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_folder_permissions_endpoint = _Endpoint(
            settings={
                'response_type': ([str],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/permissions',
                'operation_id': 'get_folder_permissions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_folder_teams_endpoint = _Endpoint(
            settings={
                'response_type': ([TeamView],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/teams',
                'operation_id': 'get_folder_teams',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                },
                'location_map': {
                    'folder_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_folder_templates_endpoint = _Endpoint(
            settings={
                'response_type': ([Release],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/templates',
                'operation_id': 'get_folder_templates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'depth',
                    'page',
                    'results_per_page',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'depth':
                        (int,),
                    'page':
                        (int,),
                    'results_per_page':
                        (int,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'depth': 'depth',
                    'page': 'page',
                    'results_per_page': 'resultsPerPage',
                },
                'location_map': {
                    'folder_id': 'path',
                    'depth': 'query',
                    'page': 'query',
                    'results_per_page': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_folder_variable_endpoint = _Endpoint(
            settings={
                'response_type': (Variable,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/{variableId}',
                'operation_id': 'get_folder_variable',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'variable_id',
                ],
                'required': [
                    'folder_id',
                    'variable_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                    'variable_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                    ('variable_id',): {

                        'regex': {
                            'pattern': r'.*Variable[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'variable_id':
                        (str,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'variable_id': 'variableId',
                },
                'location_map': {
                    'folder_id': 'path',
                    'variable_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.is_folder_owner_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/folderOwner',
                'operation_id': 'is_folder_owner',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                },
                'location_map': {
                    'folder_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_endpoint = _Endpoint(
            settings={
                'response_type': ([Folder],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/list',
                'operation_id': 'list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'depth',
                    'page',
                    'permissions',
                    'results_per_page',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'depth':
                        (int,),
                    'page':
                        (int,),
                    'permissions':
                        (bool,),
                    'results_per_page':
                        (int,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'depth': 'depth',
                    'page': 'page',
                    'permissions': 'permissions',
                    'results_per_page': 'resultsPerPage',
                },
                'location_map': {
                    'folder_id': 'path',
                    'depth': 'query',
                    'page': 'query',
                    'permissions': 'query',
                    'results_per_page': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_root_endpoint = _Endpoint(
            settings={
                'response_type': ([Folder],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/list',
                'operation_id': 'list_root',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'depth',
                    'page',
                    'permissions',
                    'results_per_page',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'depth':
                        (int,),
                    'page':
                        (int,),
                    'permissions':
                        (bool,),
                    'results_per_page':
                        (int,),
                },
                'attribute_map': {
                    'depth': 'depth',
                    'page': 'page',
                    'permissions': 'permissions',
                    'results_per_page': 'resultsPerPage',
                },
                'location_map': {
                    'depth': 'query',
                    'page': 'query',
                    'permissions': 'query',
                    'results_per_page': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_variable_values_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (str,)},),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/variableValues',
                'operation_id': 'list_variable_values',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'folder_only',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'folder_only':
                        (bool,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'folder_only': 'folderOnly',
                },
                'location_map': {
                    'folder_id': 'path',
                    'folder_only': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_variables_endpoint = _Endpoint(
            settings={
                'response_type': ([Variable],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/variables',
                'operation_id': 'list_variables',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'folder_only',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'folder_only':
                        (bool,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'folder_only': 'folderOnly',
                },
                'location_map': {
                    'folder_id': 'path',
                    'folder_only': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.move_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/move',
                'operation_id': 'move',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'new_parent_id',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'new_parent_id':
                        (str,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'new_parent_id': 'newParentId',
                },
                'location_map': {
                    'folder_id': 'path',
                    'new_parent_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.move_template_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/templates/{templateId}',
                'operation_id': 'move_template',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'template_id',
                    'merge_permissions',
                ],
                'required': [
                    'folder_id',
                    'template_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                    'template_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                    ('template_id',): {

                        'regex': {
                            'pattern': r'.*Release[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'template_id':
                        (str,),
                    'merge_permissions':
                        (bool,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'template_id': 'templateId',
                    'merge_permissions': 'mergePermissions',
                },
                'location_map': {
                    'folder_id': 'path',
                    'template_id': 'path',
                    'merge_permissions': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.rename_folder_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/rename',
                'operation_id': 'rename_folder',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'new_name',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'new_name':
                        (str,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'new_name': 'newName',
                },
                'location_map': {
                    'folder_id': 'path',
                    'new_name': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_releases_folder_endpoint = _Endpoint(
            settings={
                'response_type': ([Release],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/releases',
                'operation_id': 'search_releases_folder',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'depth',
                    'numberbypage',
                    'page',
                    'releases_filters',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'depth':
                        (int,),
                    'numberbypage':
                        (int,),
                    'page':
                        (int,),
                    'releases_filters':
                        (ReleasesFilters,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'depth': 'depth',
                    'numberbypage': 'numberbypage',
                    'page': 'page',
                },
                'location_map': {
                    'folder_id': 'path',
                    'depth': 'query',
                    'numberbypage': 'query',
                    'page': 'query',
                    'releases_filters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_folder_teams_endpoint = _Endpoint(
            settings={
                'response_type': ([TeamView],),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/teams',
                'operation_id': 'set_folder_teams',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'team_view',
                ],
                'required': [
                    'folder_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'team_view':
                        ([TeamView],),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                },
                'location_map': {
                    'folder_id': 'path',
                    'team_view': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_folder_variable_endpoint = _Endpoint(
            settings={
                'response_type': (Variable,),
                'auth': [
                    'basicAuth',
                    'patAuth'
                ],
                'endpoint_path': '/api/v1/folders/{folderId}/{variableId}',
                'operation_id': 'update_folder_variable',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'folder_id',
                    'variable_id',
                    'variable',
                ],
                'required': [
                    'folder_id',
                    'variable_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'folder_id',
                    'variable_id',
                ]
            },
            root_map={
                'validations': {
                    ('folder_id',): {

                        'regex': {
                            'pattern': r'.*(Folder[^\/]*|Applications)',  # noqa: E501
                        },
                    },
                    ('variable_id',): {

                        'regex': {
                            'pattern': r'.*Variable[^\/]*',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'folder_id':
                        (str,),
                    'variable_id':
                        (str,),
                    'variable':
                        (Variable,),
                },
                'attribute_map': {
                    'folder_id': 'folderId',
                    'variable_id': 'variableId',
                },
                'location_map': {
                    'folder_id': 'path',
                    'variable_id': 'path',
                    'variable': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def add_folder(
        self,
        folder_id,
        **kwargs
    ):
        """add_folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_folder(folder_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):

        Keyword Args:
            folder (Folder): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Folder
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        return self.add_folder_endpoint.call_with_http_info(**kwargs)

    def create_folder_variable(
        self,
        folder_id,
        **kwargs
    ):
        """create_folder_variable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_folder_variable(folder_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):

        Keyword Args:
            variable1 (Variable1): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Variable
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        return self.create_folder_variable_endpoint.call_with_http_info(**kwargs)

    def delete_folder(
        self,
        folder_id,
        **kwargs
    ):
        """delete_folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_folder(folder_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        return self.delete_folder_endpoint.call_with_http_info(**kwargs)

    def delete_folder_variable(
        self,
        folder_id,
        variable_id,
        **kwargs
    ):
        """delete_folder_variable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_folder_variable(folder_id, variable_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):
            variable_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        kwargs['variable_id'] = \
            variable_id
        return self.delete_folder_variable_endpoint.call_with_http_info(**kwargs)

    def find(
        self,
        **kwargs
    ):
        """find  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            by_path (str): [optional]
            depth (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Folder
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.find_endpoint.call_with_http_info(**kwargs)

    def get_folder(
        self,
        folder_id,
        **kwargs
    ):
        """get_folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_folder(folder_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):

        Keyword Args:
            depth (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Folder
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        return self.get_folder_endpoint.call_with_http_info(**kwargs)

    def get_folder_permissions(
        self,
        **kwargs
    ):
        """get_folder_permissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_folder_permissions(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [str]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_folder_permissions_endpoint.call_with_http_info(**kwargs)

    def get_folder_teams(
        self,
        folder_id,
        **kwargs
    ):
        """get_folder_teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_folder_teams(folder_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [TeamView]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        return self.get_folder_teams_endpoint.call_with_http_info(**kwargs)

    def get_folder_templates(
        self,
        folder_id,
        **kwargs
    ):
        """get_folder_templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_folder_templates(folder_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):

        Keyword Args:
            depth (int): [optional]
            page (int): [optional]
            results_per_page (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Release]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        return self.get_folder_templates_endpoint.call_with_http_info(**kwargs)

    def get_folder_variable(
        self,
        folder_id,
        variable_id,
        **kwargs
    ):
        """get_folder_variable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_folder_variable(folder_id, variable_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):
            variable_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Variable
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        kwargs['variable_id'] = \
            variable_id
        return self.get_folder_variable_endpoint.call_with_http_info(**kwargs)

    def is_folder_owner(
        self,
        folder_id,
        **kwargs
    ):
        """is_folder_owner  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.is_folder_owner(folder_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        return self.is_folder_owner_endpoint.call_with_http_info(**kwargs)

    def list(
        self,
        folder_id,
        **kwargs
    ):
        """list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list(folder_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):

        Keyword Args:
            depth (int): [optional]
            page (int): [optional]
            permissions (bool): [optional]
            results_per_page (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Folder]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        return self.list_endpoint.call_with_http_info(**kwargs)

    def list_root(
        self,
        **kwargs
    ):
        """list_root  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_root(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            depth (int): [optional]
            page (int): [optional]
            permissions (bool): [optional]
            results_per_page (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Folder]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.list_root_endpoint.call_with_http_info(**kwargs)

    def list_variable_values(
        self,
        folder_id,
        **kwargs
    ):
        """list_variable_values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_variable_values(folder_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):

        Keyword Args:
            folder_only (bool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (str,)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        return self.list_variable_values_endpoint.call_with_http_info(**kwargs)

    def list_variables(
        self,
        folder_id,
        **kwargs
    ):
        """list_variables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_variables(folder_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):

        Keyword Args:
            folder_only (bool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Variable]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        return self.list_variables_endpoint.call_with_http_info(**kwargs)

    def move(
        self,
        folder_id,
        **kwargs
    ):
        """move  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.move(folder_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):

        Keyword Args:
            new_parent_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        return self.move_endpoint.call_with_http_info(**kwargs)

    def move_template(
        self,
        folder_id,
        template_id,
        **kwargs
    ):
        """move_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.move_template(folder_id, template_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):
            template_id (str):

        Keyword Args:
            merge_permissions (bool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        kwargs['template_id'] = \
            template_id
        return self.move_template_endpoint.call_with_http_info(**kwargs)

    def rename_folder(
        self,
        folder_id,
        **kwargs
    ):
        """rename_folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.rename_folder(folder_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):

        Keyword Args:
            new_name (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        return self.rename_folder_endpoint.call_with_http_info(**kwargs)

    def search_releases_folder(
        self,
        folder_id,
        **kwargs
    ):
        """search_releases_folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_releases_folder(folder_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):

        Keyword Args:
            depth (int): [optional]
            numberbypage (int): [optional]
            page (int): [optional]
            releases_filters (ReleasesFilters): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Release]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        return self.search_releases_folder_endpoint.call_with_http_info(**kwargs)

    def set_folder_teams(
        self,
        folder_id,
        **kwargs
    ):
        """set_folder_teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_folder_teams(folder_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):

        Keyword Args:
            team_view ([TeamView]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [TeamView]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        return self.set_folder_teams_endpoint.call_with_http_info(**kwargs)

    def update_folder_variable(
        self,
        folder_id,
        variable_id,
        **kwargs
    ):
        """update_folder_variable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_folder_variable(folder_id, variable_id, async_req=True)
        >>> result = thread.get()

        Args:
            folder_id (str):
            variable_id (str):

        Keyword Args:
            variable (Variable): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Variable
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['folder_id'] = \
            folder_id
        kwargs['variable_id'] = \
            variable_id
        return self.update_folder_variable_endpoint.call_with_http_info(**kwargs)

