# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VisibilityInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'visibility': 'VisibilityInfoVisibility',
        'open_card': 'VisibilityInfoOpenCard',
        'by_day': 'list[VisibilityInfoByDay]',
        'by_week': 'list[VisibilityInfoByDay]',
        'by_month': 'list[VisibilityInfoByDay]'
    }

    attribute_map = {
        'visibility': 'visibility',
        'open_card': 'openCard',
        'by_day': 'byDay',
        'by_week': 'byWeek',
        'by_month': 'byMonth'
    }

    def __init__(self, visibility=None, open_card=None, by_day=None, by_week=None, by_month=None):  # noqa: E501
        """VisibilityInfo - a model defined in Swagger"""  # noqa: E501
        self._visibility = None
        self._open_card = None
        self._by_day = None
        self._by_week = None
        self._by_month = None
        self.discriminator = None
        self.visibility = visibility
        self.open_card = open_card
        if by_day is not None:
            self.by_day = by_day
        if by_week is not None:
            self.by_week = by_week
        if by_month is not None:
            self.by_month = by_month

    @property
    def visibility(self):
        """Gets the visibility of this VisibilityInfo.  # noqa: E501


        :return: The visibility of this VisibilityInfo.  # noqa: E501
        :rtype: VisibilityInfoVisibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this VisibilityInfo.


        :param visibility: The visibility of this VisibilityInfo.  # noqa: E501
        :type: VisibilityInfoVisibility
        """
        if visibility is None:
            raise ValueError("Invalid value for `visibility`, must not be `None`")  # noqa: E501

        self._visibility = visibility

    @property
    def open_card(self):
        """Gets the open_card of this VisibilityInfo.  # noqa: E501


        :return: The open_card of this VisibilityInfo.  # noqa: E501
        :rtype: VisibilityInfoOpenCard
        """
        return self._open_card

    @open_card.setter
    def open_card(self, open_card):
        """Sets the open_card of this VisibilityInfo.


        :param open_card: The open_card of this VisibilityInfo.  # noqa: E501
        :type: VisibilityInfoOpenCard
        """
        if open_card is None:
            raise ValueError("Invalid value for `open_card`, must not be `None`")  # noqa: E501

        self._open_card = open_card

    @property
    def by_day(self):
        """Gets the by_day of this VisibilityInfo.  # noqa: E501

        Dannye dla otrisovki grafika v lihnom kabinete po vidimosti i perehodam v kartohki po dnam  # noqa: E501

        :return: The by_day of this VisibilityInfo.  # noqa: E501
        :rtype: list[VisibilityInfoByDay]
        """
        return self._by_day

    @by_day.setter
    def by_day(self, by_day):
        """Sets the by_day of this VisibilityInfo.

        Dannye dla otrisovki grafika v lihnom kabinete po vidimosti i perehodam v kartohki po dnam  # noqa: E501

        :param by_day: The by_day of this VisibilityInfo.  # noqa: E501
        :type: list[VisibilityInfoByDay]
        """

        self._by_day = by_day

    @property
    def by_week(self):
        """Gets the by_week of this VisibilityInfo.  # noqa: E501

        Dannye dla otrisovki grafika v lihnom kabinete po vidimosti i perehodam v kartohki po nedelam  # noqa: E501

        :return: The by_week of this VisibilityInfo.  # noqa: E501
        :rtype: list[VisibilityInfoByDay]
        """
        return self._by_week

    @by_week.setter
    def by_week(self, by_week):
        """Sets the by_week of this VisibilityInfo.

        Dannye dla otrisovki grafika v lihnom kabinete po vidimosti i perehodam v kartohki po nedelam  # noqa: E501

        :param by_week: The by_week of this VisibilityInfo.  # noqa: E501
        :type: list[VisibilityInfoByDay]
        """

        self._by_week = by_week

    @property
    def by_month(self):
        """Gets the by_month of this VisibilityInfo.  # noqa: E501

        Dannye dla otrisovki grafika v lihnom kabinete po vidimosti i perehodam v kartohki po mesacam  # noqa: E501

        :return: The by_month of this VisibilityInfo.  # noqa: E501
        :rtype: list[VisibilityInfoByDay]
        """
        return self._by_month

    @by_month.setter
    def by_month(self, by_month):
        """Sets the by_month of this VisibilityInfo.

        Dannye dla otrisovki grafika v lihnom kabinete po vidimosti i perehodam v kartohki po mesacam  # noqa: E501

        :param by_month: The by_month of this VisibilityInfo.  # noqa: E501
        :type: list[VisibilityInfoByDay]
        """

        self._by_month = by_month

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VisibilityInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VisibilityInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
