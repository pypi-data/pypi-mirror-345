name: Package
on:
  push:
    branches:
      - main
      - alpha

  workflow_dispatch:
    inputs:
      force_pypi_release:
        description: 'Force PyPi publish'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: write

jobs:
  package:
    name: Package
    environment: production
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Setup | Force correct release branch on workflow sha
        run: |
          git clone https://github.com/${{ github.repository }} .
          git checkout -B ${{ github.ref_name }} ${{ github.sha }}
          git config user.name "cpg-software-ci-bot"
          git config user.email "software-team+githubcibot@populationgenomics.org.au"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Action | Semantic Version Release
        id: release
        uses: python-semantic-release/python-semantic-release@v9.21.0
        with:
          root_options: '-v'
          git_committer_email: 'software-team+githubcibot@populationgenomics.org.au'
          git_committer_name: 'cpg-software-ci-bot'
          github_token: ${{ secrets.BOT_ACCESS_TOKEN }}

      - name: Build on no release
        if: steps.release.outputs.released != 'true'
        run: |
          echo "No release was made, manual build"
          make ci-build

      - name: Publish | Upload package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        if: steps.release.outputs.released == 'true' || github.event.inputs.force_pypi_release == 'true'

      - name: Publish | Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v9.21.0
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.BOT_ACCESS_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5.4.1

      - name: Install project dependencies
        run: |
          uv sync
          source .venv/bin/activate

      - run: uv pip install mike

      - name: Publish | Update docs version
        run: |
          uv run mike deploy -F docs/mkdocs.yml --push --update-aliases ${{ steps.release.outputs.tag }} latest
