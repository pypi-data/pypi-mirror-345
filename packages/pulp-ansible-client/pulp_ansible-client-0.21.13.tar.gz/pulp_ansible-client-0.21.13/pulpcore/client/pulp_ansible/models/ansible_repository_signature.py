# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulp_ansible.configuration import Configuration


class AnsibleRepositorySignature(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content_units': 'list[object]',
        'signing_service': 'str'
    }

    attribute_map = {
        'content_units': 'content_units',
        'signing_service': 'signing_service'
    }

    def __init__(self, content_units=None, signing_service=None, local_vars_configuration=None):  # noqa: E501
        """AnsibleRepositorySignature - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content_units = None
        self._signing_service = None
        self.discriminator = None

        self.content_units = content_units
        self.signing_service = signing_service

    @property
    def content_units(self):
        """Gets the content_units of this AnsibleRepositorySignature.  # noqa: E501

        List of collection version hrefs to sign, use * to sign all content in repository  # noqa: E501

        :return: The content_units of this AnsibleRepositorySignature.  # noqa: E501
        :rtype: list[object]
        """
        return self._content_units

    @content_units.setter
    def content_units(self, content_units):
        """Sets the content_units of this AnsibleRepositorySignature.

        List of collection version hrefs to sign, use * to sign all content in repository  # noqa: E501

        :param content_units: The content_units of this AnsibleRepositorySignature.  # noqa: E501
        :type: list[object]
        """
        if self.local_vars_configuration.client_side_validation and content_units is None:  # noqa: E501
            raise ValueError("Invalid value for `content_units`, must not be `None`")  # noqa: E501

        self._content_units = content_units

    @property
    def signing_service(self):
        """Gets the signing_service of this AnsibleRepositorySignature.  # noqa: E501

        A signing service to use to sign the collections  # noqa: E501

        :return: The signing_service of this AnsibleRepositorySignature.  # noqa: E501
        :rtype: str
        """
        return self._signing_service

    @signing_service.setter
    def signing_service(self, signing_service):
        """Sets the signing_service of this AnsibleRepositorySignature.

        A signing service to use to sign the collections  # noqa: E501

        :param signing_service: The signing_service of this AnsibleRepositorySignature.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and signing_service is None:  # noqa: E501
            raise ValueError("Invalid value for `signing_service`, must not be `None`")  # noqa: E501

        self._signing_service = signing_service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnsibleRepositorySignature):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnsibleRepositorySignature):
            return True

        return self.to_dict() != other.to_dict()
