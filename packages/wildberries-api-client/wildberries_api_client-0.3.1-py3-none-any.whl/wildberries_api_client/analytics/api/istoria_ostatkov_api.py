# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.analytics.api_client import ApiClient


class IstoriaOstatkovApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_stocks_report_offices_post(self, body, **kwargs):  # noqa: E501
        """Dannye po skladam  # noqa: E501

        Metod formiruet nabor dannyh ob ostatkah po skladam. <br><br> Dannye po skladam Marketpleis (FBS) prihodat v agregirovannom vide — po vsem srazu, bez detalizacii po konkretnym skladam — eti zapisi budut s `\"regionName\":\"Marketpleis\"` i `\"offices\":[]`.  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_stocks_report_offices_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommonShippingOfficeFilters body: (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_stocks_report_offices_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_stocks_report_offices_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_stocks_report_offices_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Dannye po skladam  # noqa: E501

        Metod formiruet nabor dannyh ob ostatkah po skladam. <br><br> Dannye po skladam Marketpleis (FBS) prihodat v agregirovannom vide — po vsem srazu, bez detalizacii po konkretnym skladam — eti zapisi budut s `\"regionName\":\"Marketpleis\"` i `\"offices\":[]`.  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_stocks_report_offices_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommonShippingOfficeFilters body: (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_stocks_report_offices_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_stocks_report_offices_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stocks-report/offices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_stocks_report_products_groups_post(self, body, **kwargs):  # noqa: E501
        """Dannye po gruppam  # noqa: E501

        Metod formiruet nabor dannyh ob ostatkah po gruppam tovarov. <br><br> Gruppa tovarov opisyvaetsa kortehem `subjectID, brandName, tagID`.      <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_stocks_report_products_groups_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableGroupRequestSt body: (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_stocks_report_products_groups_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_stocks_report_products_groups_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_stocks_report_products_groups_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Dannye po gruppam  # noqa: E501

        Metod formiruet nabor dannyh ob ostatkah po gruppam tovarov. <br><br> Gruppa tovarov opisyvaetsa kortehem `subjectID, brandName, tagID`.      <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_stocks_report_products_groups_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableGroupRequestSt body: (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_stocks_report_products_groups_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_stocks_report_products_groups_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stocks-report/products/groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_stocks_report_products_products_post(self, body, **kwargs):  # noqa: E501
        """Dannye po tovaram  # noqa: E501

        Metod formiruet nabor dannyh ob ostatkah po tovaram. <br><br> Mohno poluhit dannye kak po otdelnym tovaram, tak i v ramkah vsego otheta — esli v zaprose otsutstvuut filtry: `nmIDs`, `subjectID`, `brandName`, `tagID`.  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_stocks_report_products_products_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableProductRequest body: (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_stocks_report_products_products_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_stocks_report_products_products_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_stocks_report_products_products_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Dannye po tovaram  # noqa: E501

        Metod formiruet nabor dannyh ob ostatkah po tovaram. <br><br> Mohno poluhit dannye kak po otdelnym tovaram, tak i v ramkah vsego otheta — esli v zaprose otsutstvuut filtry: `nmIDs`, `subjectID`, `brandName`, `tagID`.  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_stocks_report_products_products_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableProductRequest body: (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_stocks_report_products_products_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_stocks_report_products_products_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stocks-report/products/products', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_stocks_report_products_sizes_post(self, body, **kwargs):  # noqa: E501
        """Dannye po razmeram  # noqa: E501

        Metod formiruet nabor dannyh ob ostatkah po razmeram tovara. <br><br> Vozmohny sluhai: 1. Tovar imeet razmery i `\"includeOffice\":true`, togda v otvete budut dannye ob ostatkah po kahdomu iz razmerov s vlohennoi detalizaciei po skladam. 2. Tovar imeet razmery i `\"includeOffice\":false`, togda v otvete budut dannye ob ostatkah po kahdomu iz razmerov bez vlohennoi detalizacii po skladam. 3. Tovar ne imeet razmera i `\"includeOffice\":true`, togda v otvete budet detalizacia po skladam. Bez dannyh ob ostatkah po kahdomu iz razmerov. 4. Tovar ne imeet razmera i `\"includeOffice\":false`, togda telo otveta budet pustym.<br></br> Tovar ne imeet razmera, esli u nego edinstvennyi razmer s `\"techSize\":\"0\"`. V otvetah metoda poluhenia dannyh po [tovaram](/openapi/analytics#tag/Istoriya-ostatkov/paths/~1api~1v2~1stocks-report~1products~1products/post) u takih tovarov `\"hasSizes\":false`.<br></br> Dannye po skladam Marketpleis (FBS) prihodat v agregirovannom vide — po vsem srazu, bez detalizacii po konkretnym skladam — eti zapisi budut s `\"regionName\":\"Marketpleis\"` i `\"officeName\":\"\"`.  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_stocks_report_products_sizes_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommonSizeFilters body: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_stocks_report_products_sizes_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_stocks_report_products_sizes_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_stocks_report_products_sizes_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Dannye po razmeram  # noqa: E501

        Metod formiruet nabor dannyh ob ostatkah po razmeram tovara. <br><br> Vozmohny sluhai: 1. Tovar imeet razmery i `\"includeOffice\":true`, togda v otvete budut dannye ob ostatkah po kahdomu iz razmerov s vlohennoi detalizaciei po skladam. 2. Tovar imeet razmery i `\"includeOffice\":false`, togda v otvete budut dannye ob ostatkah po kahdomu iz razmerov bez vlohennoi detalizacii po skladam. 3. Tovar ne imeet razmera i `\"includeOffice\":true`, togda v otvete budet detalizacia po skladam. Bez dannyh ob ostatkah po kahdomu iz razmerov. 4. Tovar ne imeet razmera i `\"includeOffice\":false`, togda telo otveta budet pustym.<br></br> Tovar ne imeet razmera, esli u nego edinstvennyi razmer s `\"techSize\":\"0\"`. V otvetah metoda poluhenia dannyh po [tovaram](/openapi/analytics#tag/Istoriya-ostatkov/paths/~1api~1v2~1stocks-report~1products~1products/post) u takih tovarov `\"hasSizes\":false`.<br></br> Dannye po skladam Marketpleis (FBS) prihodat v agregirovannom vide — po vsem srazu, bez detalizacii po konkretnym skladam — eti zapisi budut s `\"regionName\":\"Marketpleis\"` i `\"officeName\":\"\"`.  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_stocks_report_products_sizes_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommonSizeFilters body: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_stocks_report_products_sizes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_stocks_report_products_sizes_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stocks-report/products/sizes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
