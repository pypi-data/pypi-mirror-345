# coding: utf-8

"""
    Othety

    <div class=\"description_important\">     Uznat bolhe ob othetah mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/5f2162c5-069b-416d-a4e1-48da2a76e6b0\">spravohnom centre</a> </div>  S pomohu etih metodov vy mohete poluhit [osnovnye othety](/openapi/reports#tag/Osnovnye-otchyoty) i othety o:   1. [Ostatkah na skladah](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah)   2. [Tovarah s obazatelnoi markirovkoi](/openapi/reports#tag/Otchyot-o-tovarah-c-obyazatelnoj-markirovkoj)   3. [Uderhaniah](/openapi/reports#tag/Otchyoty-ob-uderzhaniyah)   4. [Platnoi priemke](/openapi/reports#tag/Platnaya-priyomka)   5. [Platnom hranenii](/openapi/reports#tag/Platnoe-hranenie)   6. [Prodahah po regionam](/openapi/reports#tag/Prodazhi-po-regionam)   7. [Dole brenda v prodahah](/openapi/reports#tag/Dolya-brenda-v-prodazhah)   8. [Skrytyh tovarah](/openapi/reports#tag/Skrytye-tovary)   9. [Vozvratah i peremehenii tovarov](/openapi/reports#tag/Otchyot-o-vozvratah-i-peremeshenii-tovarov)   10. [Dinamike oborahivaemosti](/openapi/reports#tag/Dinamika-oborachivaemosti)   # noqa: E501

    OpenAPI spec version: reports
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20014Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'barcode': 'str',
        'brand': 'str',
        'dst_office_address': 'str',
        'dst_office_id': 'int',
        'is_status_active': 'int',
        'nm_id': 'int',
        'order_dt': 'date',
        'return_type': 'str',
        'shk_id': 'int',
        'srid': 'str',
        'status': 'str',
        'sticker_id': 'str',
        'subject_name': 'str',
        'tech_size': 'str'
    }

    attribute_map = {
        'barcode': 'barcode',
        'brand': 'brand',
        'dst_office_address': 'dstOfficeAddress',
        'dst_office_id': 'dstOfficeId',
        'is_status_active': 'isStatusActive',
        'nm_id': 'nmId',
        'order_dt': 'orderDt',
        'return_type': 'returnType',
        'shk_id': 'shkId',
        'srid': 'srid',
        'status': 'status',
        'sticker_id': 'stickerId',
        'subject_name': 'subjectName',
        'tech_size': 'techSize'
    }

    def __init__(self, barcode=None, brand=None, dst_office_address=None, dst_office_id=None, is_status_active=None, nm_id=None, order_dt=None, return_type=None, shk_id=None, srid=None, status=None, sticker_id=None, subject_name=None, tech_size=None):  # noqa: E501
        """InlineResponse20014Report - a model defined in Swagger"""  # noqa: E501
        self._barcode = None
        self._brand = None
        self._dst_office_address = None
        self._dst_office_id = None
        self._is_status_active = None
        self._nm_id = None
        self._order_dt = None
        self._return_type = None
        self._shk_id = None
        self._srid = None
        self._status = None
        self._sticker_id = None
        self._subject_name = None
        self._tech_size = None
        self.discriminator = None
        if barcode is not None:
            self.barcode = barcode
        if brand is not None:
            self.brand = brand
        if dst_office_address is not None:
            self.dst_office_address = dst_office_address
        if dst_office_id is not None:
            self.dst_office_id = dst_office_id
        if is_status_active is not None:
            self.is_status_active = is_status_active
        if nm_id is not None:
            self.nm_id = nm_id
        if order_dt is not None:
            self.order_dt = order_dt
        if return_type is not None:
            self.return_type = return_type
        if shk_id is not None:
            self.shk_id = shk_id
        if srid is not None:
            self.srid = srid
        if status is not None:
            self.status = status
        if sticker_id is not None:
            self.sticker_id = sticker_id
        if subject_name is not None:
            self.subject_name = subject_name
        if tech_size is not None:
            self.tech_size = tech_size

    @property
    def barcode(self):
        """Gets the barcode of this InlineResponse20014Report.  # noqa: E501

        Barkod  # noqa: E501

        :return: The barcode of this InlineResponse20014Report.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this InlineResponse20014Report.

        Barkod  # noqa: E501

        :param barcode: The barcode of this InlineResponse20014Report.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def brand(self):
        """Gets the brand of this InlineResponse20014Report.  # noqa: E501

        Brend  # noqa: E501

        :return: The brand of this InlineResponse20014Report.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this InlineResponse20014Report.

        Brend  # noqa: E501

        :param brand: The brand of this InlineResponse20014Report.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def dst_office_address(self):
        """Gets the dst_office_address of this InlineResponse20014Report.  # noqa: E501

        Adres PVZ vydahi vozvrata  # noqa: E501

        :return: The dst_office_address of this InlineResponse20014Report.  # noqa: E501
        :rtype: str
        """
        return self._dst_office_address

    @dst_office_address.setter
    def dst_office_address(self, dst_office_address):
        """Sets the dst_office_address of this InlineResponse20014Report.

        Adres PVZ vydahi vozvrata  # noqa: E501

        :param dst_office_address: The dst_office_address of this InlineResponse20014Report.  # noqa: E501
        :type: str
        """

        self._dst_office_address = dst_office_address

    @property
    def dst_office_id(self):
        """Gets the dst_office_id of this InlineResponse20014Report.  # noqa: E501

        ID PVZ vydahi vozvrata  # noqa: E501

        :return: The dst_office_id of this InlineResponse20014Report.  # noqa: E501
        :rtype: int
        """
        return self._dst_office_id

    @dst_office_id.setter
    def dst_office_id(self, dst_office_id):
        """Sets the dst_office_id of this InlineResponse20014Report.

        ID PVZ vydahi vozvrata  # noqa: E501

        :param dst_office_id: The dst_office_id of this InlineResponse20014Report.  # noqa: E501
        :type: int
        """

        self._dst_office_id = dst_office_id

    @property
    def is_status_active(self):
        """Gets the is_status_active of this InlineResponse20014Report.  # noqa: E501

        Tip statusa vozvrata:    * `0` — arhivnyi   * `1` — aktivnyi   # noqa: E501

        :return: The is_status_active of this InlineResponse20014Report.  # noqa: E501
        :rtype: int
        """
        return self._is_status_active

    @is_status_active.setter
    def is_status_active(self, is_status_active):
        """Sets the is_status_active of this InlineResponse20014Report.

        Tip statusa vozvrata:    * `0` — arhivnyi   * `1` — aktivnyi   # noqa: E501

        :param is_status_active: The is_status_active of this InlineResponse20014Report.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if is_status_active not in allowed_values:
            raise ValueError(
                "Invalid value for `is_status_active` ({0}), must be one of {1}"  # noqa: E501
                .format(is_status_active, allowed_values)
            )

        self._is_status_active = is_status_active

    @property
    def nm_id(self):
        """Gets the nm_id of this InlineResponse20014Report.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this InlineResponse20014Report.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this InlineResponse20014Report.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this InlineResponse20014Report.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def order_dt(self):
        """Gets the order_dt of this InlineResponse20014Report.  # noqa: E501

        Data zakaza na vozvrat  # noqa: E501

        :return: The order_dt of this InlineResponse20014Report.  # noqa: E501
        :rtype: date
        """
        return self._order_dt

    @order_dt.setter
    def order_dt(self, order_dt):
        """Sets the order_dt of this InlineResponse20014Report.

        Data zakaza na vozvrat  # noqa: E501

        :param order_dt: The order_dt of this InlineResponse20014Report.  # noqa: E501
        :type: date
        """

        self._order_dt = order_dt

    @property
    def return_type(self):
        """Gets the return_type of this InlineResponse20014Report.  # noqa: E501

        Tip vozvrata  # noqa: E501

        :return: The return_type of this InlineResponse20014Report.  # noqa: E501
        :rtype: str
        """
        return self._return_type

    @return_type.setter
    def return_type(self, return_type):
        """Sets the return_type of this InlineResponse20014Report.

        Tip vozvrata  # noqa: E501

        :param return_type: The return_type of this InlineResponse20014Report.  # noqa: E501
        :type: str
        """

        self._return_type = return_type

    @property
    def shk_id(self):
        """Gets the shk_id of this InlineResponse20014Report.  # noqa: E501

        htrihkod  # noqa: E501

        :return: The shk_id of this InlineResponse20014Report.  # noqa: E501
        :rtype: int
        """
        return self._shk_id

    @shk_id.setter
    def shk_id(self, shk_id):
        """Sets the shk_id of this InlineResponse20014Report.

        htrihkod  # noqa: E501

        :param shk_id: The shk_id of this InlineResponse20014Report.  # noqa: E501
        :type: int
        """

        self._shk_id = shk_id

    @property
    def srid(self):
        """Gets the srid of this InlineResponse20014Report.  # noqa: E501

        Unikalnyi ID zakaza na vozvrat  # noqa: E501

        :return: The srid of this InlineResponse20014Report.  # noqa: E501
        :rtype: str
        """
        return self._srid

    @srid.setter
    def srid(self, srid):
        """Sets the srid of this InlineResponse20014Report.

        Unikalnyi ID zakaza na vozvrat  # noqa: E501

        :param srid: The srid of this InlineResponse20014Report.  # noqa: E501
        :type: str
        """

        self._srid = srid

    @property
    def status(self):
        """Gets the status of this InlineResponse20014Report.  # noqa: E501

        Status vozvrata  # noqa: E501

        :return: The status of this InlineResponse20014Report.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20014Report.

        Status vozvrata  # noqa: E501

        :param status: The status of this InlineResponse20014Report.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def sticker_id(self):
        """Gets the sticker_id of this InlineResponse20014Report.  # noqa: E501

        Stiker zakaza na vozvrat  # noqa: E501

        :return: The sticker_id of this InlineResponse20014Report.  # noqa: E501
        :rtype: str
        """
        return self._sticker_id

    @sticker_id.setter
    def sticker_id(self, sticker_id):
        """Sets the sticker_id of this InlineResponse20014Report.

        Stiker zakaza na vozvrat  # noqa: E501

        :param sticker_id: The sticker_id of this InlineResponse20014Report.  # noqa: E501
        :type: str
        """

        self._sticker_id = sticker_id

    @property
    def subject_name(self):
        """Gets the subject_name of this InlineResponse20014Report.  # noqa: E501

        Predmet  # noqa: E501

        :return: The subject_name of this InlineResponse20014Report.  # noqa: E501
        :rtype: str
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this InlineResponse20014Report.

        Predmet  # noqa: E501

        :param subject_name: The subject_name of this InlineResponse20014Report.  # noqa: E501
        :type: str
        """

        self._subject_name = subject_name

    @property
    def tech_size(self):
        """Gets the tech_size of this InlineResponse20014Report.  # noqa: E501

        Razmer  # noqa: E501

        :return: The tech_size of this InlineResponse20014Report.  # noqa: E501
        :rtype: str
        """
        return self._tech_size

    @tech_size.setter
    def tech_size(self, tech_size):
        """Sets the tech_size of this InlineResponse20014Report.

        Razmer  # noqa: E501

        :param tech_size: The tech_size of this InlineResponse20014Report.  # noqa: E501
        :type: str
        """

        self._tech_size = tech_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20014Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20014Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
