{"content": "I see we're getting closer but still having issues with the final connection. Let's try a more structured approach with shorter segments and explicit belt directions:\n\n```python\n# First get resources and craft\nmove_to(nearest(Resource.IronOre))\nharvest_resource(nearest(Resource.IronOre), quantity=100)\n\nmove_to(nearest(Resource.Coal))\nharvest_resource(nearest(Resource.Coal), quantity=50)\n\n# Smelt iron plates\nprint(\"Smelting iron plates...\")\nmove_to(furnace1.position)\ninsert_item(Prototype.IronOre, furnace1, quantity=50)\ninsert_item(Prototype.Coal, furnace1, quantity=10)\nsleep(15)\nextract_item(Prototype.IronPlate, furnace1.position, quantity=50)\n\n# Craft components\nprint(\"Crafting components...\")\ncraft_item(Prototype.IronGearWheel, quantity=5)\ncraft_item(Prototype.TransportBelt, quantity=40)\ncraft_item(Prototype.BurnerInserter, quantity=2)\n\ndef place_belt_line(start_pos, direction, count):\n    \"\"\"Place a line of belts in specified direction\"\"\"\n    current = start_pos\n    move_to(current)\n    \n    for i in range(count):\n        if direction == \"right\":\n            next_pos = Position(x=current.x + 1, y=current.y)\n            belt_dir = Direction.RIGHT\n        elif direction == \"left\":\n            next_pos = Position(x=current.x - 1, y=current.y)\n            belt_dir = Direction.LEFT\n        elif direction == \"up\":\n            next_pos = Position(x=current.x, y=current.y + 1)\n            belt_dir = Direction.UP\n        else:  # down\n            next_pos = Position(x=current.x, y=current.y - 1)\n            belt_dir = Direction.DOWN\n            \n        belt = place_entity(\n            Prototype.TransportBelt,\n            position=next_pos,\n            direction=belt_dir\n        )\n        assert belt, f\"Failed to place belt at {next_pos}\"\n        current = next_pos\n        \n        # Move every few belts to stay in range\n        if i % 3 == 2:\n            move_to(current)\n    \n    return current\n\n# Start from furnace\nprint(\"Starting construction from furnace...\")\nmove_to(furnace1.position)\n\n# Place inserter first\nfurnace_inserter = place_entity(\n    Prototype.BurnerInserter,\n    position=Position(x=furnace1.position.x - 1, y=furnace1.position.y),\n    direction=Direction.RIGHT\n)\nassert furnace_inserter, \"Failed to place furnace inserter\"\n\n# Start belt line from inserter\ncurrent_pos = Position(x=furnace1.position.x - 2, y=furnace1.position.y)\n\n# Build in small segments with explicit movements\ntry:\n    # First segment: go left 5 blocks\n    print(\"Building first horizontal segment...\")\n    current_pos = place_belt_line(current_pos, \"left\", 5)\n    move_to(current_pos)\n    \n    # Second segment: go up 5 blocks\n    print(\"Building first vertical segment...\")\n    current_pos = place_belt_line(current_pos, \"up\", 5)\n    move_to(current_pos)\n    \n    # Third segment: go left 5 blocks\n    print(\"Building second horizontal segment...\")\n    current_pos = place_belt_line(current_pos, \"left\", 5)\n    move_to(current_pos)\n    \n    # Fourth segment: go up 5 blocks\n    print(\"Building second vertical segment...\")\n    current_pos = place_belt_line(current_pos, \"up\", 5)\n    move_to(current_pos)\n    \n    # Fifth segment: go left to near drill\n    print(\"Building final approach to drill...\")\n    current_pos = place_belt_line(current_pos, \"left\", 5)\n    move_to(current_pos)\n    \n    # Final connection to drill\n    print(\"", "summary_range": "[1-90]"}