# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from empire_platform_api_public_client.models.secondary_market_day_ahead_or_intra_day_noticeboard_entry_details import SecondaryMarketDayAheadOrIntraDayNoticeboardEntryDetails
from empire_platform_api_public_client.models.secondary_market_day_ahead_or_intra_day_noticeboard_entry_matching import SecondaryMarketDayAheadOrIntraDayNoticeboardEntryMatching
from empire_platform_api_public_client.models.secondary_market_day_ahead_or_intra_day_noticeboard_entry_response import SecondaryMarketDayAheadOrIntraDayNoticeboardEntryResponse
from typing import Optional, Set
from typing_extensions import Self

class SecondaryMarketDayAheadOrIntraDayNoticeboardEntry(BaseModel):
    """
    SecondaryMarketDayAheadOrIntraDayNoticeboardEntry
    """ # noqa: E501
    notice_details: SecondaryMarketDayAheadOrIntraDayNoticeboardEntryDetails = Field(alias="noticeDetails")
    responses: List[SecondaryMarketDayAheadOrIntraDayNoticeboardEntryResponse]
    matching_entries: List[SecondaryMarketDayAheadOrIntraDayNoticeboardEntryMatching] = Field(alias="matchingEntries")
    __properties: ClassVar[List[str]] = ["noticeDetails", "responses", "matchingEntries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecondaryMarketDayAheadOrIntraDayNoticeboardEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of notice_details
        if self.notice_details:
            _dict['noticeDetails'] = self.notice_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in responses (list)
        _items = []
        if self.responses:
            for _item_responses in self.responses:
                if _item_responses:
                    _items.append(_item_responses.to_dict())
            _dict['responses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in matching_entries (list)
        _items = []
        if self.matching_entries:
            for _item_matching_entries in self.matching_entries:
                if _item_matching_entries:
                    _items.append(_item_matching_entries.to_dict())
            _dict['matchingEntries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecondaryMarketDayAheadOrIntraDayNoticeboardEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "noticeDetails": SecondaryMarketDayAheadOrIntraDayNoticeboardEntryDetails.from_dict(obj["noticeDetails"]) if obj.get("noticeDetails") is not None else None,
            "responses": [SecondaryMarketDayAheadOrIntraDayNoticeboardEntryResponse.from_dict(_item) for _item in obj["responses"]] if obj.get("responses") is not None else None,
            "matchingEntries": [SecondaryMarketDayAheadOrIntraDayNoticeboardEntryMatching.from_dict(_item) for _item in obj["matchingEntries"]] if obj.get("matchingEntries") is not None else None
        })
        return _obj


