# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from empire_platform_api_public_client.models.secondary_market_return_request_batch import SecondaryMarketReturnRequestBatch

class TestSecondaryMarketReturnRequestBatch(unittest.TestCase):
    """SecondaryMarketReturnRequestBatch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SecondaryMarketReturnRequestBatch:
        """Test SecondaryMarketReturnRequestBatch
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SecondaryMarketReturnRequestBatch`
        """
        model = SecondaryMarketReturnRequestBatch()
        if include_optional:
            return SecondaryMarketReturnRequestBatch(
                entries = [
                    empire_platform_api_public_client.models.secondary_market_return_request.SecondaryMarketReturnRequest(
                        id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                        source_auction = empire_platform_api_public_client.models.source_auction_display_data.SourceAuctionDisplayData(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            display_id = 'BDL-NL-GB-E-BASE---220305-01', ), 
                        return_auction = empire_platform_api_public_client.models.return_auction.ReturnAuction(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            display_id = 'BDL-NL-GB-E-BASE---220305-01', 
                            direction = 'GB_NL', 
                            delivery_period = empire_platform_api_public_client.models.mtu_period.MtuPeriod(
                                from_mtu_start = '2022-01-04T10:00:00.000Z', 
                                to_mtu_end = '2022-01-04T11:00:00.000Z', ), 
                            status = 'CREATED', ), 
                        returned_capacity = 56, 
                        successfully_allocated_capacity = 56, 
                        price = 1.337, 
                        status = 'PENDING', 
                        organisation_name = '', )
                    ],
                total_count = 0
            )
        else:
            return SecondaryMarketReturnRequestBatch(
                entries = [
                    empire_platform_api_public_client.models.secondary_market_return_request.SecondaryMarketReturnRequest(
                        id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                        source_auction = empire_platform_api_public_client.models.source_auction_display_data.SourceAuctionDisplayData(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            display_id = 'BDL-NL-GB-E-BASE---220305-01', ), 
                        return_auction = empire_platform_api_public_client.models.return_auction.ReturnAuction(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            display_id = 'BDL-NL-GB-E-BASE---220305-01', 
                            direction = 'GB_NL', 
                            delivery_period = empire_platform_api_public_client.models.mtu_period.MtuPeriod(
                                from_mtu_start = '2022-01-04T10:00:00.000Z', 
                                to_mtu_end = '2022-01-04T11:00:00.000Z', ), 
                            status = 'CREATED', ), 
                        returned_capacity = 56, 
                        successfully_allocated_capacity = 56, 
                        price = 1.337, 
                        status = 'PENDING', 
                        organisation_name = '', )
                    ],
                total_count = 0,
        )
        """

    def testSecondaryMarketReturnRequestBatch(self):
        """Test SecondaryMarketReturnRequestBatch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
