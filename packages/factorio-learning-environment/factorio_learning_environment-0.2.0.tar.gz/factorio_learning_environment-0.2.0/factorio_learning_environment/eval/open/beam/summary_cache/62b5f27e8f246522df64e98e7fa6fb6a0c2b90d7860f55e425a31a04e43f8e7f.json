{"content": "\"\"\"\nLet's try a different approach using smaller segments and ensuring we're always in range.\nWe'll also validate our positions more carefully.\n\"\"\"\n\n# First get resources and smelt enough iron\nmove_to(nearest(Resource.IronOre))\nharvest_resource(nearest(Resource.IronOre), quantity=100)\n\nmove_to(nearest(Resource.Coal))\nharvest_resource(nearest(Resource.Coal), quantity=50)\n\n# Smelt iron plates in two batches\nprint(\"Smelting iron plates...\")\nmove_to(furnace1.position)\ninsert_item(Prototype.IronOre, furnace1, quantity=50)\ninsert_item(Prototype.Coal, furnace1, quantity=10)\n\nprint(\"Waiting for first batch of smelting to complete...\")\nsleep(15)\nextract_item(Prototype.IronPlate, furnace1.position, quantity=50)\n\nprint(\"Smelting second batch...\")\ninsert_item(Prototype.IronOre, furnace1, quantity=50)\nsleep(15)\nextract_item(Prototype.IronPlate, furnace1.position, quantity=50)\n\n# Craft components\nprint(\"Crafting components...\")\ncraft_item(Prototype.IronGearWheel, quantity=5)\ncraft_item(Prototype.TransportBelt, quantity=40)\ncraft_item(Prototype.BurnerInserter, quantity=2)\n\n# Get positions and print them for debugging\ndrill_pos = drill.drop_position\nfurnace_pos = furnace1.position\nprint(f\"Need to connect drill at {drill_pos} to furnace at {furnace_pos}\")\n\n# Function to place a single belt with position validation\ndef place_single_belt(pos_x, pos_y, direction):\n    \"\"\"Place a single belt after ensuring we're in range\"\"\"\n    target_pos = Position(x=float(pos_x), y=float(pos_y))\n    move_to(target_pos)  # Move to ensure we're in range\n    \n    belt = place_entity(\n        Prototype.TransportBelt,\n        position=target_pos,\n        direction=direction\n    )\n    if belt:\n        print(f\"Successfully placed belt at {target_pos}\")\n    else:\n        print(f\"Failed to place belt at {target_pos}\")\n    return belt\n\n# Start at furnace\nprint(\"Starting construction from furnace...\")\nmove_to(furnace_pos)\n\n# Place inserter first\ninserter_pos = Position(x=furnace_pos.x - 1.0, y=furnace_pos.y)\nfurnace_inserter = place_entity(\n    Prototype.BurnerInserter,\n    position=inserter_pos,\n    direction=Direction.RIGHT\n)\nassert furnace_inserter, \"Failed to place furnace inserter\"\n\n# Calculate waypoints for belt path\n# We'll go up first, then left towards the drill\nstart_x = furnace_pos.x - 2.0  # Start just past the inserter\ncurrent_x = start_x\ncurrent_y = furnace_pos.y\n\nprint(\"Building belt line...\")\ntry:\n    # First place belt next to inserter\n    first_belt = place_single_belt(current_x, current_y, Direction.RIGHT)\n    assert first_belt, \"Failed to place first belt\"\n    \n    # Move upward in small segments\n    while current_y < drill_pos.y - 2.0:  # Leave room for final connection\n        next_y = min(current_y + 2.0, drill_pos.y - 2.0)\n        move_to(Position(x=current_x, y=current_y))\n        belt = place_single_belt(current_x, next_y, Direction.UP)\n        assert belt, f\"Failed to place vertical belt at {current_x}, {next_y}\"\n        current_y = next_y\n        print(f\"Placed vertical belt at {current_x}, {current_y}\")\n    \n    # Move left towards drill in small segments\n    while current_x > drill_pos.x + 2.0:  # Leave room for final connection\n        next_x = max(current_x - 2.0, drill_pos.x + 2", "summary_range": "[1-96]"}