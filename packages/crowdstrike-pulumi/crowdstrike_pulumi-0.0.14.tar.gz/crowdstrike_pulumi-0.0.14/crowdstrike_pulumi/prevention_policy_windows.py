# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PreventionPolicyWindowsArgs', 'PreventionPolicyWindows']

@pulumi.input_type
class PreventionPolicyWindowsArgs:
    def __init__(__self__, *,
                 host_groups: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 ioa_rule_groups: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 additional_user_mode_data: Optional[pulumi.Input[builtins.bool]] = None,
                 advanced_remediation: Optional[pulumi.Input[builtins.bool]] = None,
                 adware_and_pup: Optional[pulumi.Input['PreventionPolicyWindowsAdwareAndPupArgs']] = None,
                 application_exploitation_activity: Optional[pulumi.Input[builtins.bool]] = None,
                 backup_deletion: Optional[pulumi.Input[builtins.bool]] = None,
                 bios_deep_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 chopper_webshell: Optional[pulumi.Input[builtins.bool]] = None,
                 cloud_anti_malware: Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareArgs']] = None,
                 cloud_anti_malware_microsoft_office_files: Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs']] = None,
                 cloud_anti_malware_user_initiated: Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs']] = None,
                 code_injection: Optional[pulumi.Input[builtins.bool]] = None,
                 credential_dumping: Optional[pulumi.Input[builtins.bool]] = None,
                 cryptowall: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 detect_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 drive_by_download: Optional[pulumi.Input[builtins.bool]] = None,
                 driver_load_prevention: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 engine_full_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_dll_load_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_exploitation_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_ml_for_larger_files: Optional[pulumi.Input[builtins.bool]] = None,
                 extended_user_mode_data: Optional[pulumi.Input['PreventionPolicyWindowsExtendedUserModeDataArgs']] = None,
                 file_encryption: Optional[pulumi.Input[builtins.bool]] = None,
                 file_system_access: Optional[pulumi.Input[builtins.bool]] = None,
                 file_system_containment: Optional[pulumi.Input[builtins.bool]] = None,
                 force_aslr: Optional[pulumi.Input[builtins.bool]] = None,
                 force_dep: Optional[pulumi.Input[builtins.bool]] = None,
                 hardware_enhanced_exploit_detection: Optional[pulumi.Input[builtins.bool]] = None,
                 heap_spray_preallocation: Optional[pulumi.Input[builtins.bool]] = None,
                 http_detections: Optional[pulumi.Input[builtins.bool]] = None,
                 intelligence_sourced_threats: Optional[pulumi.Input[builtins.bool]] = None,
                 interpreter_only: Optional[pulumi.Input[builtins.bool]] = None,
                 javascript_via_rundll32: Optional[pulumi.Input[builtins.bool]] = None,
                 locky: Optional[pulumi.Input[builtins.bool]] = None,
                 memory_scanning: Optional[pulumi.Input[builtins.bool]] = None,
                 memory_scanning_scan_with_cpu: Optional[pulumi.Input[builtins.bool]] = None,
                 microsoft_office_file_suspicious_macro_removal: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 notify_end_users: Optional[pulumi.Input[builtins.bool]] = None,
                 null_page_allocation: Optional[pulumi.Input[builtins.bool]] = None,
                 on_write_script_file_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_and_security_center_registration: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_on_removable_media: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 redact_http_detection_details: Optional[pulumi.Input[builtins.bool]] = None,
                 script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
                 seh_overwrite_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 sensor_anti_malware: Optional[pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareArgs']] = None,
                 sensor_anti_malware_user_initiated: Optional[pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs']] = None,
                 sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 suspicious_registry_operations: Optional[pulumi.Input[builtins.bool]] = None,
                 suspicious_scripts_and_commands: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 usb_insertion_triggered_scan: Optional[pulumi.Input[builtins.bool]] = None,
                 volume_shadow_copy_audit: Optional[pulumi.Input[builtins.bool]] = None,
                 volume_shadow_copy_protect: Optional[pulumi.Input[builtins.bool]] = None,
                 vulnerable_driver_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 windows_logon_bypass_sticky_keys: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a PreventionPolicyWindows resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] additional_user_mode_data: Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        :param pulumi.Input[builtins.bool] advanced_remediation: Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
        :param pulumi.Input['PreventionPolicyWindowsAdwareAndPupArgs'] adware_and_pup: Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        :param pulumi.Input[builtins.bool] application_exploitation_activity: Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
        :param pulumi.Input[builtins.bool] backup_deletion: Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
        :param pulumi.Input[builtins.bool] bios_deep_visibility: Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
        :param pulumi.Input[builtins.bool] chopper_webshell: Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        :param pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareArgs'] cloud_anti_malware: Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        :param pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs'] cloud_anti_malware_microsoft_office_files: Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        :param pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs'] cloud_anti_malware_user_initiated: For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
        :param pulumi.Input[builtins.bool] code_injection: Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] credential_dumping: Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] cryptowall: Whether to enable the setting. A process associated with Cryptowall was blocked.
        :param pulumi.Input[builtins.bool] custom_blocking: Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        :param pulumi.Input[builtins.str] description: Description of the prevention policy.
        :param pulumi.Input[builtins.bool] detect_on_write: Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] drive_by_download: Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
        :param pulumi.Input[builtins.bool] driver_load_prevention: Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
        :param pulumi.Input[builtins.bool] enabled: Enable the prevention policy.
        :param pulumi.Input[builtins.bool] engine_full_visibility: Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreter_only to be enabled.
        :param pulumi.Input[builtins.bool] enhanced_dll_load_visibility: Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
        :param pulumi.Input[builtins.bool] enhanced_exploitation_visibility: Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
        :param pulumi.Input[builtins.bool] enhanced_ml_for_larger_files: Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
        :param pulumi.Input['PreventionPolicyWindowsExtendedUserModeDataArgs'] extended_user_mode_data: Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        :param pulumi.Input[builtins.bool] file_encryption: Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
        :param pulumi.Input[builtins.bool] file_system_access: Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
        :param pulumi.Input[builtins.bool] file_system_containment: Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
        :param pulumi.Input[builtins.bool] force_aslr: Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] force_dep: Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] hardware_enhanced_exploit_detection: Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
        :param pulumi.Input[builtins.bool] heap_spray_preallocation: Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] http_detections: Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
        :param pulumi.Input[builtins.bool] intelligence_sourced_threats: Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        :param pulumi.Input[builtins.bool] interpreter_only: Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
        :param pulumi.Input[builtins.bool] javascript_via_rundll32: Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
        :param pulumi.Input[builtins.bool] locky: Whether to enable the setting. A process determined to be associated with Locky was blocked.
        :param pulumi.Input[builtins.bool] memory_scanning: Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
        :param pulumi.Input[builtins.bool] memory_scanning_scan_with_cpu: Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
        :param pulumi.Input[builtins.bool] microsoft_office_file_suspicious_macro_removal: Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        :param pulumi.Input[builtins.str] name: Name of the prevention policy.
        :param pulumi.Input[builtins.bool] notify_end_users: Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
        :param pulumi.Input[builtins.bool] null_page_allocation: Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] on_write_script_file_visibility: Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        :param pulumi.Input[builtins.bool] prevent_suspicious_processes: Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        :param pulumi.Input[builtins.bool] quarantine_and_security_center_registration: Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
        :param pulumi.Input[builtins.bool] quarantine_on_removable_media: Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
        :param pulumi.Input[builtins.bool] quarantine_on_write: Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] redact_http_detection_details: Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
        :param pulumi.Input[builtins.bool] script_based_execution_monitoring: Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine & Security Center Registration toggle to be enabled.
        :param pulumi.Input[builtins.bool] seh_overwrite_protection: Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareArgs'] sensor_anti_malware: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        :param pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs'] sensor_anti_malware_user_initiated: For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
        :param pulumi.Input[builtins.bool] sensor_tampering_protection: Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        :param pulumi.Input[builtins.bool] suspicious_registry_operations: Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
        :param pulumi.Input[builtins.bool] suspicious_scripts_and_commands: Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
        :param pulumi.Input[builtins.bool] upload_unknown_detection_related_executables: Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] upload_unknown_executables: Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] usb_insertion_triggered_scan: Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
        :param pulumi.Input[builtins.bool] volume_shadow_copy_audit: Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
        :param pulumi.Input[builtins.bool] volume_shadow_copy_protect: Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
        :param pulumi.Input[builtins.bool] vulnerable_driver_protection: Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
        :param pulumi.Input[builtins.bool] windows_logon_bypass_sticky_keys: Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
        """
        pulumi.set(__self__, "host_groups", host_groups)
        pulumi.set(__self__, "ioa_rule_groups", ioa_rule_groups)
        if additional_user_mode_data is not None:
            pulumi.set(__self__, "additional_user_mode_data", additional_user_mode_data)
        if advanced_remediation is not None:
            pulumi.set(__self__, "advanced_remediation", advanced_remediation)
        if adware_and_pup is not None:
            pulumi.set(__self__, "adware_and_pup", adware_and_pup)
        if application_exploitation_activity is not None:
            pulumi.set(__self__, "application_exploitation_activity", application_exploitation_activity)
        if backup_deletion is not None:
            pulumi.set(__self__, "backup_deletion", backup_deletion)
        if bios_deep_visibility is not None:
            pulumi.set(__self__, "bios_deep_visibility", bios_deep_visibility)
        if chopper_webshell is not None:
            pulumi.set(__self__, "chopper_webshell", chopper_webshell)
        if cloud_anti_malware is not None:
            pulumi.set(__self__, "cloud_anti_malware", cloud_anti_malware)
        if cloud_anti_malware_microsoft_office_files is not None:
            pulumi.set(__self__, "cloud_anti_malware_microsoft_office_files", cloud_anti_malware_microsoft_office_files)
        if cloud_anti_malware_user_initiated is not None:
            pulumi.set(__self__, "cloud_anti_malware_user_initiated", cloud_anti_malware_user_initiated)
        if code_injection is not None:
            pulumi.set(__self__, "code_injection", code_injection)
        if credential_dumping is not None:
            pulumi.set(__self__, "credential_dumping", credential_dumping)
        if cryptowall is not None:
            pulumi.set(__self__, "cryptowall", cryptowall)
        if custom_blocking is not None:
            pulumi.set(__self__, "custom_blocking", custom_blocking)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detect_on_write is not None:
            pulumi.set(__self__, "detect_on_write", detect_on_write)
        if drive_by_download is not None:
            pulumi.set(__self__, "drive_by_download", drive_by_download)
        if driver_load_prevention is not None:
            pulumi.set(__self__, "driver_load_prevention", driver_load_prevention)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if engine_full_visibility is not None:
            pulumi.set(__self__, "engine_full_visibility", engine_full_visibility)
        if enhanced_dll_load_visibility is not None:
            pulumi.set(__self__, "enhanced_dll_load_visibility", enhanced_dll_load_visibility)
        if enhanced_exploitation_visibility is not None:
            pulumi.set(__self__, "enhanced_exploitation_visibility", enhanced_exploitation_visibility)
        if enhanced_ml_for_larger_files is not None:
            pulumi.set(__self__, "enhanced_ml_for_larger_files", enhanced_ml_for_larger_files)
        if extended_user_mode_data is not None:
            pulumi.set(__self__, "extended_user_mode_data", extended_user_mode_data)
        if file_encryption is not None:
            pulumi.set(__self__, "file_encryption", file_encryption)
        if file_system_access is not None:
            pulumi.set(__self__, "file_system_access", file_system_access)
        if file_system_containment is not None:
            pulumi.set(__self__, "file_system_containment", file_system_containment)
        if force_aslr is not None:
            pulumi.set(__self__, "force_aslr", force_aslr)
        if force_dep is not None:
            pulumi.set(__self__, "force_dep", force_dep)
        if hardware_enhanced_exploit_detection is not None:
            pulumi.set(__self__, "hardware_enhanced_exploit_detection", hardware_enhanced_exploit_detection)
        if heap_spray_preallocation is not None:
            pulumi.set(__self__, "heap_spray_preallocation", heap_spray_preallocation)
        if http_detections is not None:
            pulumi.set(__self__, "http_detections", http_detections)
        if intelligence_sourced_threats is not None:
            pulumi.set(__self__, "intelligence_sourced_threats", intelligence_sourced_threats)
        if interpreter_only is not None:
            pulumi.set(__self__, "interpreter_only", interpreter_only)
        if javascript_via_rundll32 is not None:
            pulumi.set(__self__, "javascript_via_rundll32", javascript_via_rundll32)
        if locky is not None:
            pulumi.set(__self__, "locky", locky)
        if memory_scanning is not None:
            pulumi.set(__self__, "memory_scanning", memory_scanning)
        if memory_scanning_scan_with_cpu is not None:
            pulumi.set(__self__, "memory_scanning_scan_with_cpu", memory_scanning_scan_with_cpu)
        if microsoft_office_file_suspicious_macro_removal is not None:
            pulumi.set(__self__, "microsoft_office_file_suspicious_macro_removal", microsoft_office_file_suspicious_macro_removal)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_end_users is not None:
            pulumi.set(__self__, "notify_end_users", notify_end_users)
        if null_page_allocation is not None:
            pulumi.set(__self__, "null_page_allocation", null_page_allocation)
        if on_write_script_file_visibility is not None:
            pulumi.set(__self__, "on_write_script_file_visibility", on_write_script_file_visibility)
        if prevent_suspicious_processes is not None:
            pulumi.set(__self__, "prevent_suspicious_processes", prevent_suspicious_processes)
        if quarantine_and_security_center_registration is not None:
            pulumi.set(__self__, "quarantine_and_security_center_registration", quarantine_and_security_center_registration)
        if quarantine_on_removable_media is not None:
            pulumi.set(__self__, "quarantine_on_removable_media", quarantine_on_removable_media)
        if quarantine_on_write is not None:
            pulumi.set(__self__, "quarantine_on_write", quarantine_on_write)
        if redact_http_detection_details is not None:
            pulumi.set(__self__, "redact_http_detection_details", redact_http_detection_details)
        if script_based_execution_monitoring is not None:
            pulumi.set(__self__, "script_based_execution_monitoring", script_based_execution_monitoring)
        if seh_overwrite_protection is not None:
            pulumi.set(__self__, "seh_overwrite_protection", seh_overwrite_protection)
        if sensor_anti_malware is not None:
            pulumi.set(__self__, "sensor_anti_malware", sensor_anti_malware)
        if sensor_anti_malware_user_initiated is not None:
            pulumi.set(__self__, "sensor_anti_malware_user_initiated", sensor_anti_malware_user_initiated)
        if sensor_tampering_protection is not None:
            pulumi.set(__self__, "sensor_tampering_protection", sensor_tampering_protection)
        if suspicious_registry_operations is not None:
            pulumi.set(__self__, "suspicious_registry_operations", suspicious_registry_operations)
        if suspicious_scripts_and_commands is not None:
            pulumi.set(__self__, "suspicious_scripts_and_commands", suspicious_scripts_and_commands)
        if upload_unknown_detection_related_executables is not None:
            pulumi.set(__self__, "upload_unknown_detection_related_executables", upload_unknown_detection_related_executables)
        if upload_unknown_executables is not None:
            pulumi.set(__self__, "upload_unknown_executables", upload_unknown_executables)
        if usb_insertion_triggered_scan is not None:
            pulumi.set(__self__, "usb_insertion_triggered_scan", usb_insertion_triggered_scan)
        if volume_shadow_copy_audit is not None:
            pulumi.set(__self__, "volume_shadow_copy_audit", volume_shadow_copy_audit)
        if volume_shadow_copy_protect is not None:
            pulumi.set(__self__, "volume_shadow_copy_protect", volume_shadow_copy_protect)
        if vulnerable_driver_protection is not None:
            pulumi.set(__self__, "vulnerable_driver_protection", vulnerable_driver_protection)
        if windows_logon_bypass_sticky_keys is not None:
            pulumi.set(__self__, "windows_logon_bypass_sticky_keys", windows_logon_bypass_sticky_keys)

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        Host Group ids to attach to the prevention policy.
        """
        return pulumi.get(self, "host_groups")

    @host_groups.setter
    def host_groups(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "host_groups", value)

    @property
    @pulumi.getter(name="ioaRuleGroups")
    def ioa_rule_groups(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        IOA Rule Group to attach to the prevention policy.
        """
        return pulumi.get(self, "ioa_rule_groups")

    @ioa_rule_groups.setter
    def ioa_rule_groups(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ioa_rule_groups", value)

    @property
    @pulumi.getter(name="additionalUserModeData")
    def additional_user_mode_data(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        """
        return pulumi.get(self, "additional_user_mode_data")

    @additional_user_mode_data.setter
    def additional_user_mode_data(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "additional_user_mode_data", value)

    @property
    @pulumi.getter(name="advancedRemediation")
    def advanced_remediation(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
        """
        return pulumi.get(self, "advanced_remediation")

    @advanced_remediation.setter
    def advanced_remediation(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "advanced_remediation", value)

    @property
    @pulumi.getter(name="adwareAndPup")
    def adware_and_pup(self) -> Optional[pulumi.Input['PreventionPolicyWindowsAdwareAndPupArgs']]:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        """
        return pulumi.get(self, "adware_and_pup")

    @adware_and_pup.setter
    def adware_and_pup(self, value: Optional[pulumi.Input['PreventionPolicyWindowsAdwareAndPupArgs']]):
        pulumi.set(self, "adware_and_pup", value)

    @property
    @pulumi.getter(name="applicationExploitationActivity")
    def application_exploitation_activity(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
        """
        return pulumi.get(self, "application_exploitation_activity")

    @application_exploitation_activity.setter
    def application_exploitation_activity(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "application_exploitation_activity", value)

    @property
    @pulumi.getter(name="backupDeletion")
    def backup_deletion(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
        """
        return pulumi.get(self, "backup_deletion")

    @backup_deletion.setter
    def backup_deletion(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "backup_deletion", value)

    @property
    @pulumi.getter(name="biosDeepVisibility")
    def bios_deep_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
        """
        return pulumi.get(self, "bios_deep_visibility")

    @bios_deep_visibility.setter
    def bios_deep_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bios_deep_visibility", value)

    @property
    @pulumi.getter(name="chopperWebshell")
    def chopper_webshell(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        """
        return pulumi.get(self, "chopper_webshell")

    @chopper_webshell.setter
    def chopper_webshell(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "chopper_webshell", value)

    @property
    @pulumi.getter(name="cloudAntiMalware")
    def cloud_anti_malware(self) -> Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareArgs']]:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        """
        return pulumi.get(self, "cloud_anti_malware")

    @cloud_anti_malware.setter
    def cloud_anti_malware(self, value: Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareArgs']]):
        pulumi.set(self, "cloud_anti_malware", value)

    @property
    @pulumi.getter(name="cloudAntiMalwareMicrosoftOfficeFiles")
    def cloud_anti_malware_microsoft_office_files(self) -> Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs']]:
        """
        Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        """
        return pulumi.get(self, "cloud_anti_malware_microsoft_office_files")

    @cloud_anti_malware_microsoft_office_files.setter
    def cloud_anti_malware_microsoft_office_files(self, value: Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs']]):
        pulumi.set(self, "cloud_anti_malware_microsoft_office_files", value)

    @property
    @pulumi.getter(name="cloudAntiMalwareUserInitiated")
    def cloud_anti_malware_user_initiated(self) -> Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs']]:
        """
        For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
        """
        return pulumi.get(self, "cloud_anti_malware_user_initiated")

    @cloud_anti_malware_user_initiated.setter
    def cloud_anti_malware_user_initiated(self, value: Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs']]):
        pulumi.set(self, "cloud_anti_malware_user_initiated", value)

    @property
    @pulumi.getter(name="codeInjection")
    def code_injection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "code_injection")

    @code_injection.setter
    def code_injection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "code_injection", value)

    @property
    @pulumi.getter(name="credentialDumping")
    def credential_dumping(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "credential_dumping")

    @credential_dumping.setter
    def credential_dumping(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "credential_dumping", value)

    @property
    @pulumi.getter
    def cryptowall(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A process associated with Cryptowall was blocked.
        """
        return pulumi.get(self, "cryptowall")

    @cryptowall.setter
    def cryptowall(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cryptowall", value)

    @property
    @pulumi.getter(name="customBlocking")
    def custom_blocking(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        """
        return pulumi.get(self, "custom_blocking")

    @custom_blocking.setter
    def custom_blocking(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "custom_blocking", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of the prevention policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="detectOnWrite")
    def detect_on_write(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        """
        return pulumi.get(self, "detect_on_write")

    @detect_on_write.setter
    def detect_on_write(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "detect_on_write", value)

    @property
    @pulumi.getter(name="driveByDownload")
    def drive_by_download(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
        """
        return pulumi.get(self, "drive_by_download")

    @drive_by_download.setter
    def drive_by_download(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "drive_by_download", value)

    @property
    @pulumi.getter(name="driverLoadPrevention")
    def driver_load_prevention(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
        """
        return pulumi.get(self, "driver_load_prevention")

    @driver_load_prevention.setter
    def driver_load_prevention(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "driver_load_prevention", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable the prevention policy.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="engineFullVisibility")
    def engine_full_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreter_only to be enabled.
        """
        return pulumi.get(self, "engine_full_visibility")

    @engine_full_visibility.setter
    def engine_full_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "engine_full_visibility", value)

    @property
    @pulumi.getter(name="enhancedDllLoadVisibility")
    def enhanced_dll_load_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
        """
        return pulumi.get(self, "enhanced_dll_load_visibility")

    @enhanced_dll_load_visibility.setter
    def enhanced_dll_load_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enhanced_dll_load_visibility", value)

    @property
    @pulumi.getter(name="enhancedExploitationVisibility")
    def enhanced_exploitation_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
        """
        return pulumi.get(self, "enhanced_exploitation_visibility")

    @enhanced_exploitation_visibility.setter
    def enhanced_exploitation_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enhanced_exploitation_visibility", value)

    @property
    @pulumi.getter(name="enhancedMlForLargerFiles")
    def enhanced_ml_for_larger_files(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
        """
        return pulumi.get(self, "enhanced_ml_for_larger_files")

    @enhanced_ml_for_larger_files.setter
    def enhanced_ml_for_larger_files(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enhanced_ml_for_larger_files", value)

    @property
    @pulumi.getter(name="extendedUserModeData")
    def extended_user_mode_data(self) -> Optional[pulumi.Input['PreventionPolicyWindowsExtendedUserModeDataArgs']]:
        """
        Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        """
        return pulumi.get(self, "extended_user_mode_data")

    @extended_user_mode_data.setter
    def extended_user_mode_data(self, value: Optional[pulumi.Input['PreventionPolicyWindowsExtendedUserModeDataArgs']]):
        pulumi.set(self, "extended_user_mode_data", value)

    @property
    @pulumi.getter(name="fileEncryption")
    def file_encryption(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
        """
        return pulumi.get(self, "file_encryption")

    @file_encryption.setter
    def file_encryption(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "file_encryption", value)

    @property
    @pulumi.getter(name="fileSystemAccess")
    def file_system_access(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
        """
        return pulumi.get(self, "file_system_access")

    @file_system_access.setter
    def file_system_access(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "file_system_access", value)

    @property
    @pulumi.getter(name="fileSystemContainment")
    def file_system_containment(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
        """
        return pulumi.get(self, "file_system_containment")

    @file_system_containment.setter
    def file_system_containment(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "file_system_containment", value)

    @property
    @pulumi.getter(name="forceAslr")
    def force_aslr(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "force_aslr")

    @force_aslr.setter
    def force_aslr(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "force_aslr", value)

    @property
    @pulumi.getter(name="forceDep")
    def force_dep(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "force_dep")

    @force_dep.setter
    def force_dep(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "force_dep", value)

    @property
    @pulumi.getter(name="hardwareEnhancedExploitDetection")
    def hardware_enhanced_exploit_detection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
        """
        return pulumi.get(self, "hardware_enhanced_exploit_detection")

    @hardware_enhanced_exploit_detection.setter
    def hardware_enhanced_exploit_detection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "hardware_enhanced_exploit_detection", value)

    @property
    @pulumi.getter(name="heapSprayPreallocation")
    def heap_spray_preallocation(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "heap_spray_preallocation")

    @heap_spray_preallocation.setter
    def heap_spray_preallocation(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "heap_spray_preallocation", value)

    @property
    @pulumi.getter(name="httpDetections")
    def http_detections(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
        """
        return pulumi.get(self, "http_detections")

    @http_detections.setter
    def http_detections(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "http_detections", value)

    @property
    @pulumi.getter(name="intelligenceSourcedThreats")
    def intelligence_sourced_threats(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        """
        return pulumi.get(self, "intelligence_sourced_threats")

    @intelligence_sourced_threats.setter
    def intelligence_sourced_threats(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "intelligence_sourced_threats", value)

    @property
    @pulumi.getter(name="interpreterOnly")
    def interpreter_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
        """
        return pulumi.get(self, "interpreter_only")

    @interpreter_only.setter
    def interpreter_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "interpreter_only", value)

    @property
    @pulumi.getter(name="javascriptViaRundll32")
    def javascript_via_rundll32(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
        """
        return pulumi.get(self, "javascript_via_rundll32")

    @javascript_via_rundll32.setter
    def javascript_via_rundll32(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "javascript_via_rundll32", value)

    @property
    @pulumi.getter
    def locky(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A process determined to be associated with Locky was blocked.
        """
        return pulumi.get(self, "locky")

    @locky.setter
    def locky(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "locky", value)

    @property
    @pulumi.getter(name="memoryScanning")
    def memory_scanning(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
        """
        return pulumi.get(self, "memory_scanning")

    @memory_scanning.setter
    def memory_scanning(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "memory_scanning", value)

    @property
    @pulumi.getter(name="memoryScanningScanWithCpu")
    def memory_scanning_scan_with_cpu(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
        """
        return pulumi.get(self, "memory_scanning_scan_with_cpu")

    @memory_scanning_scan_with_cpu.setter
    def memory_scanning_scan_with_cpu(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "memory_scanning_scan_with_cpu", value)

    @property
    @pulumi.getter(name="microsoftOfficeFileSuspiciousMacroRemoval")
    def microsoft_office_file_suspicious_macro_removal(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        """
        return pulumi.get(self, "microsoft_office_file_suspicious_macro_removal")

    @microsoft_office_file_suspicious_macro_removal.setter
    def microsoft_office_file_suspicious_macro_removal(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "microsoft_office_file_suspicious_macro_removal", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the prevention policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyEndUsers")
    def notify_end_users(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
        """
        return pulumi.get(self, "notify_end_users")

    @notify_end_users.setter
    def notify_end_users(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "notify_end_users", value)

    @property
    @pulumi.getter(name="nullPageAllocation")
    def null_page_allocation(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "null_page_allocation")

    @null_page_allocation.setter
    def null_page_allocation(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "null_page_allocation", value)

    @property
    @pulumi.getter(name="onWriteScriptFileVisibility")
    def on_write_script_file_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        """
        return pulumi.get(self, "on_write_script_file_visibility")

    @on_write_script_file_visibility.setter
    def on_write_script_file_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "on_write_script_file_visibility", value)

    @property
    @pulumi.getter(name="preventSuspiciousProcesses")
    def prevent_suspicious_processes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        """
        return pulumi.get(self, "prevent_suspicious_processes")

    @prevent_suspicious_processes.setter
    def prevent_suspicious_processes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "prevent_suspicious_processes", value)

    @property
    @pulumi.getter(name="quarantineAndSecurityCenterRegistration")
    def quarantine_and_security_center_registration(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
        """
        return pulumi.get(self, "quarantine_and_security_center_registration")

    @quarantine_and_security_center_registration.setter
    def quarantine_and_security_center_registration(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "quarantine_and_security_center_registration", value)

    @property
    @pulumi.getter(name="quarantineOnRemovableMedia")
    def quarantine_on_removable_media(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
        """
        return pulumi.get(self, "quarantine_on_removable_media")

    @quarantine_on_removable_media.setter
    def quarantine_on_removable_media(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "quarantine_on_removable_media", value)

    @property
    @pulumi.getter(name="quarantineOnWrite")
    def quarantine_on_write(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        """
        return pulumi.get(self, "quarantine_on_write")

    @quarantine_on_write.setter
    def quarantine_on_write(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "quarantine_on_write", value)

    @property
    @pulumi.getter(name="redactHttpDetectionDetails")
    def redact_http_detection_details(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
        """
        return pulumi.get(self, "redact_http_detection_details")

    @redact_http_detection_details.setter
    def redact_http_detection_details(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "redact_http_detection_details", value)

    @property
    @pulumi.getter(name="scriptBasedExecutionMonitoring")
    def script_based_execution_monitoring(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine & Security Center Registration toggle to be enabled.
        """
        return pulumi.get(self, "script_based_execution_monitoring")

    @script_based_execution_monitoring.setter
    def script_based_execution_monitoring(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "script_based_execution_monitoring", value)

    @property
    @pulumi.getter(name="sehOverwriteProtection")
    def seh_overwrite_protection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "seh_overwrite_protection")

    @seh_overwrite_protection.setter
    def seh_overwrite_protection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "seh_overwrite_protection", value)

    @property
    @pulumi.getter(name="sensorAntiMalware")
    def sensor_anti_malware(self) -> Optional[pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareArgs']]:
        """
        For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        """
        return pulumi.get(self, "sensor_anti_malware")

    @sensor_anti_malware.setter
    def sensor_anti_malware(self, value: Optional[pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareArgs']]):
        pulumi.set(self, "sensor_anti_malware", value)

    @property
    @pulumi.getter(name="sensorAntiMalwareUserInitiated")
    def sensor_anti_malware_user_initiated(self) -> Optional[pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs']]:
        """
        For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
        """
        return pulumi.get(self, "sensor_anti_malware_user_initiated")

    @sensor_anti_malware_user_initiated.setter
    def sensor_anti_malware_user_initiated(self, value: Optional[pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs']]):
        pulumi.set(self, "sensor_anti_malware_user_initiated", value)

    @property
    @pulumi.getter(name="sensorTamperingProtection")
    def sensor_tampering_protection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        """
        return pulumi.get(self, "sensor_tampering_protection")

    @sensor_tampering_protection.setter
    def sensor_tampering_protection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sensor_tampering_protection", value)

    @property
    @pulumi.getter(name="suspiciousRegistryOperations")
    def suspicious_registry_operations(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
        """
        return pulumi.get(self, "suspicious_registry_operations")

    @suspicious_registry_operations.setter
    def suspicious_registry_operations(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspicious_registry_operations", value)

    @property
    @pulumi.getter(name="suspiciousScriptsAndCommands")
    def suspicious_scripts_and_commands(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
        """
        return pulumi.get(self, "suspicious_scripts_and_commands")

    @suspicious_scripts_and_commands.setter
    def suspicious_scripts_and_commands(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspicious_scripts_and_commands", value)

    @property
    @pulumi.getter(name="uploadUnknownDetectionRelatedExecutables")
    def upload_unknown_detection_related_executables(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_detection_related_executables")

    @upload_unknown_detection_related_executables.setter
    def upload_unknown_detection_related_executables(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upload_unknown_detection_related_executables", value)

    @property
    @pulumi.getter(name="uploadUnknownExecutables")
    def upload_unknown_executables(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_executables")

    @upload_unknown_executables.setter
    def upload_unknown_executables(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upload_unknown_executables", value)

    @property
    @pulumi.getter(name="usbInsertionTriggeredScan")
    def usb_insertion_triggered_scan(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
        """
        return pulumi.get(self, "usb_insertion_triggered_scan")

    @usb_insertion_triggered_scan.setter
    def usb_insertion_triggered_scan(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "usb_insertion_triggered_scan", value)

    @property
    @pulumi.getter(name="volumeShadowCopyAudit")
    def volume_shadow_copy_audit(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
        """
        return pulumi.get(self, "volume_shadow_copy_audit")

    @volume_shadow_copy_audit.setter
    def volume_shadow_copy_audit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "volume_shadow_copy_audit", value)

    @property
    @pulumi.getter(name="volumeShadowCopyProtect")
    def volume_shadow_copy_protect(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
        """
        return pulumi.get(self, "volume_shadow_copy_protect")

    @volume_shadow_copy_protect.setter
    def volume_shadow_copy_protect(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "volume_shadow_copy_protect", value)

    @property
    @pulumi.getter(name="vulnerableDriverProtection")
    def vulnerable_driver_protection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
        """
        return pulumi.get(self, "vulnerable_driver_protection")

    @vulnerable_driver_protection.setter
    def vulnerable_driver_protection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "vulnerable_driver_protection", value)

    @property
    @pulumi.getter(name="windowsLogonBypassStickyKeys")
    def windows_logon_bypass_sticky_keys(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
        """
        return pulumi.get(self, "windows_logon_bypass_sticky_keys")

    @windows_logon_bypass_sticky_keys.setter
    def windows_logon_bypass_sticky_keys(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "windows_logon_bypass_sticky_keys", value)


@pulumi.input_type
class _PreventionPolicyWindowsState:
    def __init__(__self__, *,
                 additional_user_mode_data: Optional[pulumi.Input[builtins.bool]] = None,
                 advanced_remediation: Optional[pulumi.Input[builtins.bool]] = None,
                 adware_and_pup: Optional[pulumi.Input['PreventionPolicyWindowsAdwareAndPupArgs']] = None,
                 application_exploitation_activity: Optional[pulumi.Input[builtins.bool]] = None,
                 backup_deletion: Optional[pulumi.Input[builtins.bool]] = None,
                 bios_deep_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 chopper_webshell: Optional[pulumi.Input[builtins.bool]] = None,
                 cloud_anti_malware: Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareArgs']] = None,
                 cloud_anti_malware_microsoft_office_files: Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs']] = None,
                 cloud_anti_malware_user_initiated: Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs']] = None,
                 code_injection: Optional[pulumi.Input[builtins.bool]] = None,
                 credential_dumping: Optional[pulumi.Input[builtins.bool]] = None,
                 cryptowall: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 detect_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 drive_by_download: Optional[pulumi.Input[builtins.bool]] = None,
                 driver_load_prevention: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 engine_full_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_dll_load_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_exploitation_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_ml_for_larger_files: Optional[pulumi.Input[builtins.bool]] = None,
                 extended_user_mode_data: Optional[pulumi.Input['PreventionPolicyWindowsExtendedUserModeDataArgs']] = None,
                 file_encryption: Optional[pulumi.Input[builtins.bool]] = None,
                 file_system_access: Optional[pulumi.Input[builtins.bool]] = None,
                 file_system_containment: Optional[pulumi.Input[builtins.bool]] = None,
                 force_aslr: Optional[pulumi.Input[builtins.bool]] = None,
                 force_dep: Optional[pulumi.Input[builtins.bool]] = None,
                 hardware_enhanced_exploit_detection: Optional[pulumi.Input[builtins.bool]] = None,
                 heap_spray_preallocation: Optional[pulumi.Input[builtins.bool]] = None,
                 host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 http_detections: Optional[pulumi.Input[builtins.bool]] = None,
                 intelligence_sourced_threats: Optional[pulumi.Input[builtins.bool]] = None,
                 interpreter_only: Optional[pulumi.Input[builtins.bool]] = None,
                 ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 javascript_via_rundll32: Optional[pulumi.Input[builtins.bool]] = None,
                 last_updated: Optional[pulumi.Input[builtins.str]] = None,
                 locky: Optional[pulumi.Input[builtins.bool]] = None,
                 memory_scanning: Optional[pulumi.Input[builtins.bool]] = None,
                 memory_scanning_scan_with_cpu: Optional[pulumi.Input[builtins.bool]] = None,
                 microsoft_office_file_suspicious_macro_removal: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 notify_end_users: Optional[pulumi.Input[builtins.bool]] = None,
                 null_page_allocation: Optional[pulumi.Input[builtins.bool]] = None,
                 on_write_script_file_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_and_security_center_registration: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_on_removable_media: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 redact_http_detection_details: Optional[pulumi.Input[builtins.bool]] = None,
                 script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
                 seh_overwrite_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 sensor_anti_malware: Optional[pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareArgs']] = None,
                 sensor_anti_malware_user_initiated: Optional[pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs']] = None,
                 sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 suspicious_registry_operations: Optional[pulumi.Input[builtins.bool]] = None,
                 suspicious_scripts_and_commands: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 usb_insertion_triggered_scan: Optional[pulumi.Input[builtins.bool]] = None,
                 volume_shadow_copy_audit: Optional[pulumi.Input[builtins.bool]] = None,
                 volume_shadow_copy_protect: Optional[pulumi.Input[builtins.bool]] = None,
                 vulnerable_driver_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 windows_logon_bypass_sticky_keys: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering PreventionPolicyWindows resources.
        :param pulumi.Input[builtins.bool] additional_user_mode_data: Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        :param pulumi.Input[builtins.bool] advanced_remediation: Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
        :param pulumi.Input['PreventionPolicyWindowsAdwareAndPupArgs'] adware_and_pup: Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        :param pulumi.Input[builtins.bool] application_exploitation_activity: Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
        :param pulumi.Input[builtins.bool] backup_deletion: Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
        :param pulumi.Input[builtins.bool] bios_deep_visibility: Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
        :param pulumi.Input[builtins.bool] chopper_webshell: Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        :param pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareArgs'] cloud_anti_malware: Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        :param pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs'] cloud_anti_malware_microsoft_office_files: Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        :param pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs'] cloud_anti_malware_user_initiated: For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
        :param pulumi.Input[builtins.bool] code_injection: Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] credential_dumping: Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] cryptowall: Whether to enable the setting. A process associated with Cryptowall was blocked.
        :param pulumi.Input[builtins.bool] custom_blocking: Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        :param pulumi.Input[builtins.str] description: Description of the prevention policy.
        :param pulumi.Input[builtins.bool] detect_on_write: Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] drive_by_download: Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
        :param pulumi.Input[builtins.bool] driver_load_prevention: Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
        :param pulumi.Input[builtins.bool] enabled: Enable the prevention policy.
        :param pulumi.Input[builtins.bool] engine_full_visibility: Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreter_only to be enabled.
        :param pulumi.Input[builtins.bool] enhanced_dll_load_visibility: Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
        :param pulumi.Input[builtins.bool] enhanced_exploitation_visibility: Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
        :param pulumi.Input[builtins.bool] enhanced_ml_for_larger_files: Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
        :param pulumi.Input['PreventionPolicyWindowsExtendedUserModeDataArgs'] extended_user_mode_data: Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        :param pulumi.Input[builtins.bool] file_encryption: Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
        :param pulumi.Input[builtins.bool] file_system_access: Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
        :param pulumi.Input[builtins.bool] file_system_containment: Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
        :param pulumi.Input[builtins.bool] force_aslr: Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] force_dep: Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] hardware_enhanced_exploit_detection: Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
        :param pulumi.Input[builtins.bool] heap_spray_preallocation: Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] http_detections: Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
        :param pulumi.Input[builtins.bool] intelligence_sourced_threats: Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        :param pulumi.Input[builtins.bool] interpreter_only: Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] javascript_via_rundll32: Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
        :param pulumi.Input[builtins.bool] locky: Whether to enable the setting. A process determined to be associated with Locky was blocked.
        :param pulumi.Input[builtins.bool] memory_scanning: Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
        :param pulumi.Input[builtins.bool] memory_scanning_scan_with_cpu: Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
        :param pulumi.Input[builtins.bool] microsoft_office_file_suspicious_macro_removal: Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        :param pulumi.Input[builtins.str] name: Name of the prevention policy.
        :param pulumi.Input[builtins.bool] notify_end_users: Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
        :param pulumi.Input[builtins.bool] null_page_allocation: Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] on_write_script_file_visibility: Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        :param pulumi.Input[builtins.bool] prevent_suspicious_processes: Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        :param pulumi.Input[builtins.bool] quarantine_and_security_center_registration: Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
        :param pulumi.Input[builtins.bool] quarantine_on_removable_media: Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
        :param pulumi.Input[builtins.bool] quarantine_on_write: Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] redact_http_detection_details: Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
        :param pulumi.Input[builtins.bool] script_based_execution_monitoring: Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine & Security Center Registration toggle to be enabled.
        :param pulumi.Input[builtins.bool] seh_overwrite_protection: Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareArgs'] sensor_anti_malware: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        :param pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs'] sensor_anti_malware_user_initiated: For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
        :param pulumi.Input[builtins.bool] sensor_tampering_protection: Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        :param pulumi.Input[builtins.bool] suspicious_registry_operations: Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
        :param pulumi.Input[builtins.bool] suspicious_scripts_and_commands: Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
        :param pulumi.Input[builtins.bool] upload_unknown_detection_related_executables: Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] upload_unknown_executables: Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] usb_insertion_triggered_scan: Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
        :param pulumi.Input[builtins.bool] volume_shadow_copy_audit: Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
        :param pulumi.Input[builtins.bool] volume_shadow_copy_protect: Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
        :param pulumi.Input[builtins.bool] vulnerable_driver_protection: Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
        :param pulumi.Input[builtins.bool] windows_logon_bypass_sticky_keys: Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
        """
        if additional_user_mode_data is not None:
            pulumi.set(__self__, "additional_user_mode_data", additional_user_mode_data)
        if advanced_remediation is not None:
            pulumi.set(__self__, "advanced_remediation", advanced_remediation)
        if adware_and_pup is not None:
            pulumi.set(__self__, "adware_and_pup", adware_and_pup)
        if application_exploitation_activity is not None:
            pulumi.set(__self__, "application_exploitation_activity", application_exploitation_activity)
        if backup_deletion is not None:
            pulumi.set(__self__, "backup_deletion", backup_deletion)
        if bios_deep_visibility is not None:
            pulumi.set(__self__, "bios_deep_visibility", bios_deep_visibility)
        if chopper_webshell is not None:
            pulumi.set(__self__, "chopper_webshell", chopper_webshell)
        if cloud_anti_malware is not None:
            pulumi.set(__self__, "cloud_anti_malware", cloud_anti_malware)
        if cloud_anti_malware_microsoft_office_files is not None:
            pulumi.set(__self__, "cloud_anti_malware_microsoft_office_files", cloud_anti_malware_microsoft_office_files)
        if cloud_anti_malware_user_initiated is not None:
            pulumi.set(__self__, "cloud_anti_malware_user_initiated", cloud_anti_malware_user_initiated)
        if code_injection is not None:
            pulumi.set(__self__, "code_injection", code_injection)
        if credential_dumping is not None:
            pulumi.set(__self__, "credential_dumping", credential_dumping)
        if cryptowall is not None:
            pulumi.set(__self__, "cryptowall", cryptowall)
        if custom_blocking is not None:
            pulumi.set(__self__, "custom_blocking", custom_blocking)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detect_on_write is not None:
            pulumi.set(__self__, "detect_on_write", detect_on_write)
        if drive_by_download is not None:
            pulumi.set(__self__, "drive_by_download", drive_by_download)
        if driver_load_prevention is not None:
            pulumi.set(__self__, "driver_load_prevention", driver_load_prevention)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if engine_full_visibility is not None:
            pulumi.set(__self__, "engine_full_visibility", engine_full_visibility)
        if enhanced_dll_load_visibility is not None:
            pulumi.set(__self__, "enhanced_dll_load_visibility", enhanced_dll_load_visibility)
        if enhanced_exploitation_visibility is not None:
            pulumi.set(__self__, "enhanced_exploitation_visibility", enhanced_exploitation_visibility)
        if enhanced_ml_for_larger_files is not None:
            pulumi.set(__self__, "enhanced_ml_for_larger_files", enhanced_ml_for_larger_files)
        if extended_user_mode_data is not None:
            pulumi.set(__self__, "extended_user_mode_data", extended_user_mode_data)
        if file_encryption is not None:
            pulumi.set(__self__, "file_encryption", file_encryption)
        if file_system_access is not None:
            pulumi.set(__self__, "file_system_access", file_system_access)
        if file_system_containment is not None:
            pulumi.set(__self__, "file_system_containment", file_system_containment)
        if force_aslr is not None:
            pulumi.set(__self__, "force_aslr", force_aslr)
        if force_dep is not None:
            pulumi.set(__self__, "force_dep", force_dep)
        if hardware_enhanced_exploit_detection is not None:
            pulumi.set(__self__, "hardware_enhanced_exploit_detection", hardware_enhanced_exploit_detection)
        if heap_spray_preallocation is not None:
            pulumi.set(__self__, "heap_spray_preallocation", heap_spray_preallocation)
        if host_groups is not None:
            pulumi.set(__self__, "host_groups", host_groups)
        if http_detections is not None:
            pulumi.set(__self__, "http_detections", http_detections)
        if intelligence_sourced_threats is not None:
            pulumi.set(__self__, "intelligence_sourced_threats", intelligence_sourced_threats)
        if interpreter_only is not None:
            pulumi.set(__self__, "interpreter_only", interpreter_only)
        if ioa_rule_groups is not None:
            pulumi.set(__self__, "ioa_rule_groups", ioa_rule_groups)
        if javascript_via_rundll32 is not None:
            pulumi.set(__self__, "javascript_via_rundll32", javascript_via_rundll32)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if locky is not None:
            pulumi.set(__self__, "locky", locky)
        if memory_scanning is not None:
            pulumi.set(__self__, "memory_scanning", memory_scanning)
        if memory_scanning_scan_with_cpu is not None:
            pulumi.set(__self__, "memory_scanning_scan_with_cpu", memory_scanning_scan_with_cpu)
        if microsoft_office_file_suspicious_macro_removal is not None:
            pulumi.set(__self__, "microsoft_office_file_suspicious_macro_removal", microsoft_office_file_suspicious_macro_removal)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_end_users is not None:
            pulumi.set(__self__, "notify_end_users", notify_end_users)
        if null_page_allocation is not None:
            pulumi.set(__self__, "null_page_allocation", null_page_allocation)
        if on_write_script_file_visibility is not None:
            pulumi.set(__self__, "on_write_script_file_visibility", on_write_script_file_visibility)
        if prevent_suspicious_processes is not None:
            pulumi.set(__self__, "prevent_suspicious_processes", prevent_suspicious_processes)
        if quarantine_and_security_center_registration is not None:
            pulumi.set(__self__, "quarantine_and_security_center_registration", quarantine_and_security_center_registration)
        if quarantine_on_removable_media is not None:
            pulumi.set(__self__, "quarantine_on_removable_media", quarantine_on_removable_media)
        if quarantine_on_write is not None:
            pulumi.set(__self__, "quarantine_on_write", quarantine_on_write)
        if redact_http_detection_details is not None:
            pulumi.set(__self__, "redact_http_detection_details", redact_http_detection_details)
        if script_based_execution_monitoring is not None:
            pulumi.set(__self__, "script_based_execution_monitoring", script_based_execution_monitoring)
        if seh_overwrite_protection is not None:
            pulumi.set(__self__, "seh_overwrite_protection", seh_overwrite_protection)
        if sensor_anti_malware is not None:
            pulumi.set(__self__, "sensor_anti_malware", sensor_anti_malware)
        if sensor_anti_malware_user_initiated is not None:
            pulumi.set(__self__, "sensor_anti_malware_user_initiated", sensor_anti_malware_user_initiated)
        if sensor_tampering_protection is not None:
            pulumi.set(__self__, "sensor_tampering_protection", sensor_tampering_protection)
        if suspicious_registry_operations is not None:
            pulumi.set(__self__, "suspicious_registry_operations", suspicious_registry_operations)
        if suspicious_scripts_and_commands is not None:
            pulumi.set(__self__, "suspicious_scripts_and_commands", suspicious_scripts_and_commands)
        if upload_unknown_detection_related_executables is not None:
            pulumi.set(__self__, "upload_unknown_detection_related_executables", upload_unknown_detection_related_executables)
        if upload_unknown_executables is not None:
            pulumi.set(__self__, "upload_unknown_executables", upload_unknown_executables)
        if usb_insertion_triggered_scan is not None:
            pulumi.set(__self__, "usb_insertion_triggered_scan", usb_insertion_triggered_scan)
        if volume_shadow_copy_audit is not None:
            pulumi.set(__self__, "volume_shadow_copy_audit", volume_shadow_copy_audit)
        if volume_shadow_copy_protect is not None:
            pulumi.set(__self__, "volume_shadow_copy_protect", volume_shadow_copy_protect)
        if vulnerable_driver_protection is not None:
            pulumi.set(__self__, "vulnerable_driver_protection", vulnerable_driver_protection)
        if windows_logon_bypass_sticky_keys is not None:
            pulumi.set(__self__, "windows_logon_bypass_sticky_keys", windows_logon_bypass_sticky_keys)

    @property
    @pulumi.getter(name="additionalUserModeData")
    def additional_user_mode_data(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        """
        return pulumi.get(self, "additional_user_mode_data")

    @additional_user_mode_data.setter
    def additional_user_mode_data(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "additional_user_mode_data", value)

    @property
    @pulumi.getter(name="advancedRemediation")
    def advanced_remediation(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
        """
        return pulumi.get(self, "advanced_remediation")

    @advanced_remediation.setter
    def advanced_remediation(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "advanced_remediation", value)

    @property
    @pulumi.getter(name="adwareAndPup")
    def adware_and_pup(self) -> Optional[pulumi.Input['PreventionPolicyWindowsAdwareAndPupArgs']]:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        """
        return pulumi.get(self, "adware_and_pup")

    @adware_and_pup.setter
    def adware_and_pup(self, value: Optional[pulumi.Input['PreventionPolicyWindowsAdwareAndPupArgs']]):
        pulumi.set(self, "adware_and_pup", value)

    @property
    @pulumi.getter(name="applicationExploitationActivity")
    def application_exploitation_activity(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
        """
        return pulumi.get(self, "application_exploitation_activity")

    @application_exploitation_activity.setter
    def application_exploitation_activity(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "application_exploitation_activity", value)

    @property
    @pulumi.getter(name="backupDeletion")
    def backup_deletion(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
        """
        return pulumi.get(self, "backup_deletion")

    @backup_deletion.setter
    def backup_deletion(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "backup_deletion", value)

    @property
    @pulumi.getter(name="biosDeepVisibility")
    def bios_deep_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
        """
        return pulumi.get(self, "bios_deep_visibility")

    @bios_deep_visibility.setter
    def bios_deep_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bios_deep_visibility", value)

    @property
    @pulumi.getter(name="chopperWebshell")
    def chopper_webshell(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        """
        return pulumi.get(self, "chopper_webshell")

    @chopper_webshell.setter
    def chopper_webshell(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "chopper_webshell", value)

    @property
    @pulumi.getter(name="cloudAntiMalware")
    def cloud_anti_malware(self) -> Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareArgs']]:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        """
        return pulumi.get(self, "cloud_anti_malware")

    @cloud_anti_malware.setter
    def cloud_anti_malware(self, value: Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareArgs']]):
        pulumi.set(self, "cloud_anti_malware", value)

    @property
    @pulumi.getter(name="cloudAntiMalwareMicrosoftOfficeFiles")
    def cloud_anti_malware_microsoft_office_files(self) -> Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs']]:
        """
        Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        """
        return pulumi.get(self, "cloud_anti_malware_microsoft_office_files")

    @cloud_anti_malware_microsoft_office_files.setter
    def cloud_anti_malware_microsoft_office_files(self, value: Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs']]):
        pulumi.set(self, "cloud_anti_malware_microsoft_office_files", value)

    @property
    @pulumi.getter(name="cloudAntiMalwareUserInitiated")
    def cloud_anti_malware_user_initiated(self) -> Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs']]:
        """
        For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
        """
        return pulumi.get(self, "cloud_anti_malware_user_initiated")

    @cloud_anti_malware_user_initiated.setter
    def cloud_anti_malware_user_initiated(self, value: Optional[pulumi.Input['PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs']]):
        pulumi.set(self, "cloud_anti_malware_user_initiated", value)

    @property
    @pulumi.getter(name="codeInjection")
    def code_injection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "code_injection")

    @code_injection.setter
    def code_injection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "code_injection", value)

    @property
    @pulumi.getter(name="credentialDumping")
    def credential_dumping(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "credential_dumping")

    @credential_dumping.setter
    def credential_dumping(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "credential_dumping", value)

    @property
    @pulumi.getter
    def cryptowall(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A process associated with Cryptowall was blocked.
        """
        return pulumi.get(self, "cryptowall")

    @cryptowall.setter
    def cryptowall(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cryptowall", value)

    @property
    @pulumi.getter(name="customBlocking")
    def custom_blocking(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        """
        return pulumi.get(self, "custom_blocking")

    @custom_blocking.setter
    def custom_blocking(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "custom_blocking", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of the prevention policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="detectOnWrite")
    def detect_on_write(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        """
        return pulumi.get(self, "detect_on_write")

    @detect_on_write.setter
    def detect_on_write(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "detect_on_write", value)

    @property
    @pulumi.getter(name="driveByDownload")
    def drive_by_download(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
        """
        return pulumi.get(self, "drive_by_download")

    @drive_by_download.setter
    def drive_by_download(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "drive_by_download", value)

    @property
    @pulumi.getter(name="driverLoadPrevention")
    def driver_load_prevention(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
        """
        return pulumi.get(self, "driver_load_prevention")

    @driver_load_prevention.setter
    def driver_load_prevention(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "driver_load_prevention", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable the prevention policy.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="engineFullVisibility")
    def engine_full_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreter_only to be enabled.
        """
        return pulumi.get(self, "engine_full_visibility")

    @engine_full_visibility.setter
    def engine_full_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "engine_full_visibility", value)

    @property
    @pulumi.getter(name="enhancedDllLoadVisibility")
    def enhanced_dll_load_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
        """
        return pulumi.get(self, "enhanced_dll_load_visibility")

    @enhanced_dll_load_visibility.setter
    def enhanced_dll_load_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enhanced_dll_load_visibility", value)

    @property
    @pulumi.getter(name="enhancedExploitationVisibility")
    def enhanced_exploitation_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
        """
        return pulumi.get(self, "enhanced_exploitation_visibility")

    @enhanced_exploitation_visibility.setter
    def enhanced_exploitation_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enhanced_exploitation_visibility", value)

    @property
    @pulumi.getter(name="enhancedMlForLargerFiles")
    def enhanced_ml_for_larger_files(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
        """
        return pulumi.get(self, "enhanced_ml_for_larger_files")

    @enhanced_ml_for_larger_files.setter
    def enhanced_ml_for_larger_files(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enhanced_ml_for_larger_files", value)

    @property
    @pulumi.getter(name="extendedUserModeData")
    def extended_user_mode_data(self) -> Optional[pulumi.Input['PreventionPolicyWindowsExtendedUserModeDataArgs']]:
        """
        Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        """
        return pulumi.get(self, "extended_user_mode_data")

    @extended_user_mode_data.setter
    def extended_user_mode_data(self, value: Optional[pulumi.Input['PreventionPolicyWindowsExtendedUserModeDataArgs']]):
        pulumi.set(self, "extended_user_mode_data", value)

    @property
    @pulumi.getter(name="fileEncryption")
    def file_encryption(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
        """
        return pulumi.get(self, "file_encryption")

    @file_encryption.setter
    def file_encryption(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "file_encryption", value)

    @property
    @pulumi.getter(name="fileSystemAccess")
    def file_system_access(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
        """
        return pulumi.get(self, "file_system_access")

    @file_system_access.setter
    def file_system_access(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "file_system_access", value)

    @property
    @pulumi.getter(name="fileSystemContainment")
    def file_system_containment(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
        """
        return pulumi.get(self, "file_system_containment")

    @file_system_containment.setter
    def file_system_containment(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "file_system_containment", value)

    @property
    @pulumi.getter(name="forceAslr")
    def force_aslr(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "force_aslr")

    @force_aslr.setter
    def force_aslr(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "force_aslr", value)

    @property
    @pulumi.getter(name="forceDep")
    def force_dep(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "force_dep")

    @force_dep.setter
    def force_dep(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "force_dep", value)

    @property
    @pulumi.getter(name="hardwareEnhancedExploitDetection")
    def hardware_enhanced_exploit_detection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
        """
        return pulumi.get(self, "hardware_enhanced_exploit_detection")

    @hardware_enhanced_exploit_detection.setter
    def hardware_enhanced_exploit_detection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "hardware_enhanced_exploit_detection", value)

    @property
    @pulumi.getter(name="heapSprayPreallocation")
    def heap_spray_preallocation(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "heap_spray_preallocation")

    @heap_spray_preallocation.setter
    def heap_spray_preallocation(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "heap_spray_preallocation", value)

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Host Group ids to attach to the prevention policy.
        """
        return pulumi.get(self, "host_groups")

    @host_groups.setter
    def host_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "host_groups", value)

    @property
    @pulumi.getter(name="httpDetections")
    def http_detections(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
        """
        return pulumi.get(self, "http_detections")

    @http_detections.setter
    def http_detections(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "http_detections", value)

    @property
    @pulumi.getter(name="intelligenceSourcedThreats")
    def intelligence_sourced_threats(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        """
        return pulumi.get(self, "intelligence_sourced_threats")

    @intelligence_sourced_threats.setter
    def intelligence_sourced_threats(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "intelligence_sourced_threats", value)

    @property
    @pulumi.getter(name="interpreterOnly")
    def interpreter_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
        """
        return pulumi.get(self, "interpreter_only")

    @interpreter_only.setter
    def interpreter_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "interpreter_only", value)

    @property
    @pulumi.getter(name="ioaRuleGroups")
    def ioa_rule_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        IOA Rule Group to attach to the prevention policy.
        """
        return pulumi.get(self, "ioa_rule_groups")

    @ioa_rule_groups.setter
    def ioa_rule_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ioa_rule_groups", value)

    @property
    @pulumi.getter(name="javascriptViaRundll32")
    def javascript_via_rundll32(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
        """
        return pulumi.get(self, "javascript_via_rundll32")

    @javascript_via_rundll32.setter
    def javascript_via_rundll32(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "javascript_via_rundll32", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter
    def locky(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A process determined to be associated with Locky was blocked.
        """
        return pulumi.get(self, "locky")

    @locky.setter
    def locky(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "locky", value)

    @property
    @pulumi.getter(name="memoryScanning")
    def memory_scanning(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
        """
        return pulumi.get(self, "memory_scanning")

    @memory_scanning.setter
    def memory_scanning(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "memory_scanning", value)

    @property
    @pulumi.getter(name="memoryScanningScanWithCpu")
    def memory_scanning_scan_with_cpu(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
        """
        return pulumi.get(self, "memory_scanning_scan_with_cpu")

    @memory_scanning_scan_with_cpu.setter
    def memory_scanning_scan_with_cpu(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "memory_scanning_scan_with_cpu", value)

    @property
    @pulumi.getter(name="microsoftOfficeFileSuspiciousMacroRemoval")
    def microsoft_office_file_suspicious_macro_removal(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        """
        return pulumi.get(self, "microsoft_office_file_suspicious_macro_removal")

    @microsoft_office_file_suspicious_macro_removal.setter
    def microsoft_office_file_suspicious_macro_removal(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "microsoft_office_file_suspicious_macro_removal", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the prevention policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyEndUsers")
    def notify_end_users(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
        """
        return pulumi.get(self, "notify_end_users")

    @notify_end_users.setter
    def notify_end_users(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "notify_end_users", value)

    @property
    @pulumi.getter(name="nullPageAllocation")
    def null_page_allocation(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "null_page_allocation")

    @null_page_allocation.setter
    def null_page_allocation(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "null_page_allocation", value)

    @property
    @pulumi.getter(name="onWriteScriptFileVisibility")
    def on_write_script_file_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        """
        return pulumi.get(self, "on_write_script_file_visibility")

    @on_write_script_file_visibility.setter
    def on_write_script_file_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "on_write_script_file_visibility", value)

    @property
    @pulumi.getter(name="preventSuspiciousProcesses")
    def prevent_suspicious_processes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        """
        return pulumi.get(self, "prevent_suspicious_processes")

    @prevent_suspicious_processes.setter
    def prevent_suspicious_processes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "prevent_suspicious_processes", value)

    @property
    @pulumi.getter(name="quarantineAndSecurityCenterRegistration")
    def quarantine_and_security_center_registration(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
        """
        return pulumi.get(self, "quarantine_and_security_center_registration")

    @quarantine_and_security_center_registration.setter
    def quarantine_and_security_center_registration(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "quarantine_and_security_center_registration", value)

    @property
    @pulumi.getter(name="quarantineOnRemovableMedia")
    def quarantine_on_removable_media(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
        """
        return pulumi.get(self, "quarantine_on_removable_media")

    @quarantine_on_removable_media.setter
    def quarantine_on_removable_media(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "quarantine_on_removable_media", value)

    @property
    @pulumi.getter(name="quarantineOnWrite")
    def quarantine_on_write(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        """
        return pulumi.get(self, "quarantine_on_write")

    @quarantine_on_write.setter
    def quarantine_on_write(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "quarantine_on_write", value)

    @property
    @pulumi.getter(name="redactHttpDetectionDetails")
    def redact_http_detection_details(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
        """
        return pulumi.get(self, "redact_http_detection_details")

    @redact_http_detection_details.setter
    def redact_http_detection_details(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "redact_http_detection_details", value)

    @property
    @pulumi.getter(name="scriptBasedExecutionMonitoring")
    def script_based_execution_monitoring(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine & Security Center Registration toggle to be enabled.
        """
        return pulumi.get(self, "script_based_execution_monitoring")

    @script_based_execution_monitoring.setter
    def script_based_execution_monitoring(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "script_based_execution_monitoring", value)

    @property
    @pulumi.getter(name="sehOverwriteProtection")
    def seh_overwrite_protection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "seh_overwrite_protection")

    @seh_overwrite_protection.setter
    def seh_overwrite_protection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "seh_overwrite_protection", value)

    @property
    @pulumi.getter(name="sensorAntiMalware")
    def sensor_anti_malware(self) -> Optional[pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareArgs']]:
        """
        For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        """
        return pulumi.get(self, "sensor_anti_malware")

    @sensor_anti_malware.setter
    def sensor_anti_malware(self, value: Optional[pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareArgs']]):
        pulumi.set(self, "sensor_anti_malware", value)

    @property
    @pulumi.getter(name="sensorAntiMalwareUserInitiated")
    def sensor_anti_malware_user_initiated(self) -> Optional[pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs']]:
        """
        For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
        """
        return pulumi.get(self, "sensor_anti_malware_user_initiated")

    @sensor_anti_malware_user_initiated.setter
    def sensor_anti_malware_user_initiated(self, value: Optional[pulumi.Input['PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs']]):
        pulumi.set(self, "sensor_anti_malware_user_initiated", value)

    @property
    @pulumi.getter(name="sensorTamperingProtection")
    def sensor_tampering_protection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        """
        return pulumi.get(self, "sensor_tampering_protection")

    @sensor_tampering_protection.setter
    def sensor_tampering_protection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sensor_tampering_protection", value)

    @property
    @pulumi.getter(name="suspiciousRegistryOperations")
    def suspicious_registry_operations(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
        """
        return pulumi.get(self, "suspicious_registry_operations")

    @suspicious_registry_operations.setter
    def suspicious_registry_operations(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspicious_registry_operations", value)

    @property
    @pulumi.getter(name="suspiciousScriptsAndCommands")
    def suspicious_scripts_and_commands(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
        """
        return pulumi.get(self, "suspicious_scripts_and_commands")

    @suspicious_scripts_and_commands.setter
    def suspicious_scripts_and_commands(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspicious_scripts_and_commands", value)

    @property
    @pulumi.getter(name="uploadUnknownDetectionRelatedExecutables")
    def upload_unknown_detection_related_executables(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_detection_related_executables")

    @upload_unknown_detection_related_executables.setter
    def upload_unknown_detection_related_executables(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upload_unknown_detection_related_executables", value)

    @property
    @pulumi.getter(name="uploadUnknownExecutables")
    def upload_unknown_executables(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_executables")

    @upload_unknown_executables.setter
    def upload_unknown_executables(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upload_unknown_executables", value)

    @property
    @pulumi.getter(name="usbInsertionTriggeredScan")
    def usb_insertion_triggered_scan(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
        """
        return pulumi.get(self, "usb_insertion_triggered_scan")

    @usb_insertion_triggered_scan.setter
    def usb_insertion_triggered_scan(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "usb_insertion_triggered_scan", value)

    @property
    @pulumi.getter(name="volumeShadowCopyAudit")
    def volume_shadow_copy_audit(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
        """
        return pulumi.get(self, "volume_shadow_copy_audit")

    @volume_shadow_copy_audit.setter
    def volume_shadow_copy_audit(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "volume_shadow_copy_audit", value)

    @property
    @pulumi.getter(name="volumeShadowCopyProtect")
    def volume_shadow_copy_protect(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
        """
        return pulumi.get(self, "volume_shadow_copy_protect")

    @volume_shadow_copy_protect.setter
    def volume_shadow_copy_protect(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "volume_shadow_copy_protect", value)

    @property
    @pulumi.getter(name="vulnerableDriverProtection")
    def vulnerable_driver_protection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
        """
        return pulumi.get(self, "vulnerable_driver_protection")

    @vulnerable_driver_protection.setter
    def vulnerable_driver_protection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "vulnerable_driver_protection", value)

    @property
    @pulumi.getter(name="windowsLogonBypassStickyKeys")
    def windows_logon_bypass_sticky_keys(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
        """
        return pulumi.get(self, "windows_logon_bypass_sticky_keys")

    @windows_logon_bypass_sticky_keys.setter
    def windows_logon_bypass_sticky_keys(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "windows_logon_bypass_sticky_keys", value)


class PreventionPolicyWindows(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_user_mode_data: Optional[pulumi.Input[builtins.bool]] = None,
                 advanced_remediation: Optional[pulumi.Input[builtins.bool]] = None,
                 adware_and_pup: Optional[pulumi.Input[Union['PreventionPolicyWindowsAdwareAndPupArgs', 'PreventionPolicyWindowsAdwareAndPupArgsDict']]] = None,
                 application_exploitation_activity: Optional[pulumi.Input[builtins.bool]] = None,
                 backup_deletion: Optional[pulumi.Input[builtins.bool]] = None,
                 bios_deep_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 chopper_webshell: Optional[pulumi.Input[builtins.bool]] = None,
                 cloud_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareArgs', 'PreventionPolicyWindowsCloudAntiMalwareArgsDict']]] = None,
                 cloud_anti_malware_microsoft_office_files: Optional[pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs', 'PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgsDict']]] = None,
                 cloud_anti_malware_user_initiated: Optional[pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs', 'PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgsDict']]] = None,
                 code_injection: Optional[pulumi.Input[builtins.bool]] = None,
                 credential_dumping: Optional[pulumi.Input[builtins.bool]] = None,
                 cryptowall: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 detect_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 drive_by_download: Optional[pulumi.Input[builtins.bool]] = None,
                 driver_load_prevention: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 engine_full_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_dll_load_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_exploitation_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_ml_for_larger_files: Optional[pulumi.Input[builtins.bool]] = None,
                 extended_user_mode_data: Optional[pulumi.Input[Union['PreventionPolicyWindowsExtendedUserModeDataArgs', 'PreventionPolicyWindowsExtendedUserModeDataArgsDict']]] = None,
                 file_encryption: Optional[pulumi.Input[builtins.bool]] = None,
                 file_system_access: Optional[pulumi.Input[builtins.bool]] = None,
                 file_system_containment: Optional[pulumi.Input[builtins.bool]] = None,
                 force_aslr: Optional[pulumi.Input[builtins.bool]] = None,
                 force_dep: Optional[pulumi.Input[builtins.bool]] = None,
                 hardware_enhanced_exploit_detection: Optional[pulumi.Input[builtins.bool]] = None,
                 heap_spray_preallocation: Optional[pulumi.Input[builtins.bool]] = None,
                 host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 http_detections: Optional[pulumi.Input[builtins.bool]] = None,
                 intelligence_sourced_threats: Optional[pulumi.Input[builtins.bool]] = None,
                 interpreter_only: Optional[pulumi.Input[builtins.bool]] = None,
                 ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 javascript_via_rundll32: Optional[pulumi.Input[builtins.bool]] = None,
                 locky: Optional[pulumi.Input[builtins.bool]] = None,
                 memory_scanning: Optional[pulumi.Input[builtins.bool]] = None,
                 memory_scanning_scan_with_cpu: Optional[pulumi.Input[builtins.bool]] = None,
                 microsoft_office_file_suspicious_macro_removal: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 notify_end_users: Optional[pulumi.Input[builtins.bool]] = None,
                 null_page_allocation: Optional[pulumi.Input[builtins.bool]] = None,
                 on_write_script_file_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_and_security_center_registration: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_on_removable_media: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 redact_http_detection_details: Optional[pulumi.Input[builtins.bool]] = None,
                 script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
                 seh_overwrite_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 sensor_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyWindowsSensorAntiMalwareArgs', 'PreventionPolicyWindowsSensorAntiMalwareArgsDict']]] = None,
                 sensor_anti_malware_user_initiated: Optional[pulumi.Input[Union['PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs', 'PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgsDict']]] = None,
                 sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 suspicious_registry_operations: Optional[pulumi.Input[builtins.bool]] = None,
                 suspicious_scripts_and_commands: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 usb_insertion_triggered_scan: Optional[pulumi.Input[builtins.bool]] = None,
                 volume_shadow_copy_audit: Optional[pulumi.Input[builtins.bool]] = None,
                 volume_shadow_copy_protect: Optional[pulumi.Input[builtins.bool]] = None,
                 vulnerable_driver_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 windows_logon_bypass_sticky_keys: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        This resource allows you to manage prevention policies for Windows hosts. Prevention policies allow you to manage what activity will trigger detections and preventions on your hosts.

        ## API Scopes

        The following API scopes are required:

        - Prevention policies | Read & Write

        ## Example Usage

        ```python
        import pulumi
        import crowdstrike_pulumi as crowdstrike

        example = crowdstrike.PreventionPolicyWindows("example",
            enabled=True,
            description="Made with Pulumi",
            host_groups=[],
            ioa_rule_groups=[],
            adware_and_pup={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            cloud_anti_malware_microsoft_office_files={
                "detection": "MODERATE",
                "prevention": "DISABLED",
            },
            cloud_anti_malware={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            cloud_anti_malware_user_initiated={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            sensor_anti_malware={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            sensor_anti_malware_user_initiated={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            extended_user_mode_data={
                "detection": "MODERATE",
            },
            usb_insertion_triggered_scan=True,
            application_exploitation_activity=True,
            additional_user_mode_data=True,
            notify_end_users=True,
            advanced_remediation=True,
            backup_deletion=True,
            bios_deep_visibility=True,
            chopper_webshell=True,
            code_injection=True,
            credential_dumping=True,
            cryptowall=True,
            custom_blocking=True,
            detect_on_write=True,
            drive_by_download=True,
            driver_load_prevention=True,
            interpreter_only=True,
            engine_full_visibility=True,
            enhanced_exploitation_visibility=True,
            enhanced_dll_load_visibility=True,
            enhanced_ml_for_larger_files=True,
            file_encryption=True,
            file_system_access=True,
            force_aslr=True,
            force_dep=True,
            heap_spray_preallocation=True,
            null_page_allocation=True,
            seh_overwrite_protection=True,
            hardware_enhanced_exploit_detection=True,
            http_detections=True,
            redact_http_detection_details=True,
            intelligence_sourced_threats=True,
            javascript_via_rundll32=True,
            locky=True,
            memory_scanning=True,
            memory_scanning_scan_with_cpu=True,
            microsoft_office_file_suspicious_macro_removal=True,
            on_write_script_file_visibility=True,
            prevent_suspicious_processes=True,
            quarantine_and_security_center_registration=True,
            quarantine_on_removable_media=True,
            quarantine_on_write=True,
            script_based_execution_monitoring=True,
            sensor_tampering_protection=True,
            suspicious_registry_operations=True,
            suspicious_scripts_and_commands=True,
            upload_unknown_executables=True,
            upload_unknown_detection_related_executables=True,
            volume_shadow_copy_audit=True,
            volume_shadow_copy_protect=True,
            vulnerable_driver_protection=True,
            windows_logon_bypass_sticky_keys=True,
            file_system_containment=True)
        pulumi.export("preventionPolicyWindows", example)
        ```

        ## Import

        prevention policy can be imported by specifying the policy id.

        ```sh
        $ pulumi import crowdstrike:index/preventionPolicyWindows:PreventionPolicyWindows example 7fb858a949034a0cbca175f660f1e769
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] additional_user_mode_data: Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        :param pulumi.Input[builtins.bool] advanced_remediation: Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
        :param pulumi.Input[Union['PreventionPolicyWindowsAdwareAndPupArgs', 'PreventionPolicyWindowsAdwareAndPupArgsDict']] adware_and_pup: Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        :param pulumi.Input[builtins.bool] application_exploitation_activity: Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
        :param pulumi.Input[builtins.bool] backup_deletion: Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
        :param pulumi.Input[builtins.bool] bios_deep_visibility: Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
        :param pulumi.Input[builtins.bool] chopper_webshell: Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        :param pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareArgs', 'PreventionPolicyWindowsCloudAntiMalwareArgsDict']] cloud_anti_malware: Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        :param pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs', 'PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgsDict']] cloud_anti_malware_microsoft_office_files: Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        :param pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs', 'PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgsDict']] cloud_anti_malware_user_initiated: For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
        :param pulumi.Input[builtins.bool] code_injection: Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] credential_dumping: Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] cryptowall: Whether to enable the setting. A process associated with Cryptowall was blocked.
        :param pulumi.Input[builtins.bool] custom_blocking: Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        :param pulumi.Input[builtins.str] description: Description of the prevention policy.
        :param pulumi.Input[builtins.bool] detect_on_write: Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] drive_by_download: Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
        :param pulumi.Input[builtins.bool] driver_load_prevention: Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
        :param pulumi.Input[builtins.bool] enabled: Enable the prevention policy.
        :param pulumi.Input[builtins.bool] engine_full_visibility: Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreter_only to be enabled.
        :param pulumi.Input[builtins.bool] enhanced_dll_load_visibility: Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
        :param pulumi.Input[builtins.bool] enhanced_exploitation_visibility: Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
        :param pulumi.Input[builtins.bool] enhanced_ml_for_larger_files: Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
        :param pulumi.Input[Union['PreventionPolicyWindowsExtendedUserModeDataArgs', 'PreventionPolicyWindowsExtendedUserModeDataArgsDict']] extended_user_mode_data: Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        :param pulumi.Input[builtins.bool] file_encryption: Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
        :param pulumi.Input[builtins.bool] file_system_access: Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
        :param pulumi.Input[builtins.bool] file_system_containment: Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
        :param pulumi.Input[builtins.bool] force_aslr: Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] force_dep: Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] hardware_enhanced_exploit_detection: Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
        :param pulumi.Input[builtins.bool] heap_spray_preallocation: Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] http_detections: Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
        :param pulumi.Input[builtins.bool] intelligence_sourced_threats: Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        :param pulumi.Input[builtins.bool] interpreter_only: Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] javascript_via_rundll32: Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
        :param pulumi.Input[builtins.bool] locky: Whether to enable the setting. A process determined to be associated with Locky was blocked.
        :param pulumi.Input[builtins.bool] memory_scanning: Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
        :param pulumi.Input[builtins.bool] memory_scanning_scan_with_cpu: Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
        :param pulumi.Input[builtins.bool] microsoft_office_file_suspicious_macro_removal: Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        :param pulumi.Input[builtins.str] name: Name of the prevention policy.
        :param pulumi.Input[builtins.bool] notify_end_users: Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
        :param pulumi.Input[builtins.bool] null_page_allocation: Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] on_write_script_file_visibility: Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        :param pulumi.Input[builtins.bool] prevent_suspicious_processes: Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        :param pulumi.Input[builtins.bool] quarantine_and_security_center_registration: Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
        :param pulumi.Input[builtins.bool] quarantine_on_removable_media: Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
        :param pulumi.Input[builtins.bool] quarantine_on_write: Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] redact_http_detection_details: Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
        :param pulumi.Input[builtins.bool] script_based_execution_monitoring: Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine & Security Center Registration toggle to be enabled.
        :param pulumi.Input[builtins.bool] seh_overwrite_protection: Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[Union['PreventionPolicyWindowsSensorAntiMalwareArgs', 'PreventionPolicyWindowsSensorAntiMalwareArgsDict']] sensor_anti_malware: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        :param pulumi.Input[Union['PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs', 'PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgsDict']] sensor_anti_malware_user_initiated: For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
        :param pulumi.Input[builtins.bool] sensor_tampering_protection: Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        :param pulumi.Input[builtins.bool] suspicious_registry_operations: Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
        :param pulumi.Input[builtins.bool] suspicious_scripts_and_commands: Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
        :param pulumi.Input[builtins.bool] upload_unknown_detection_related_executables: Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] upload_unknown_executables: Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] usb_insertion_triggered_scan: Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
        :param pulumi.Input[builtins.bool] volume_shadow_copy_audit: Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
        :param pulumi.Input[builtins.bool] volume_shadow_copy_protect: Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
        :param pulumi.Input[builtins.bool] vulnerable_driver_protection: Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
        :param pulumi.Input[builtins.bool] windows_logon_bypass_sticky_keys: Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PreventionPolicyWindowsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to manage prevention policies for Windows hosts. Prevention policies allow you to manage what activity will trigger detections and preventions on your hosts.

        ## API Scopes

        The following API scopes are required:

        - Prevention policies | Read & Write

        ## Example Usage

        ```python
        import pulumi
        import crowdstrike_pulumi as crowdstrike

        example = crowdstrike.PreventionPolicyWindows("example",
            enabled=True,
            description="Made with Pulumi",
            host_groups=[],
            ioa_rule_groups=[],
            adware_and_pup={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            cloud_anti_malware_microsoft_office_files={
                "detection": "MODERATE",
                "prevention": "DISABLED",
            },
            cloud_anti_malware={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            cloud_anti_malware_user_initiated={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            sensor_anti_malware={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            sensor_anti_malware_user_initiated={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            extended_user_mode_data={
                "detection": "MODERATE",
            },
            usb_insertion_triggered_scan=True,
            application_exploitation_activity=True,
            additional_user_mode_data=True,
            notify_end_users=True,
            advanced_remediation=True,
            backup_deletion=True,
            bios_deep_visibility=True,
            chopper_webshell=True,
            code_injection=True,
            credential_dumping=True,
            cryptowall=True,
            custom_blocking=True,
            detect_on_write=True,
            drive_by_download=True,
            driver_load_prevention=True,
            interpreter_only=True,
            engine_full_visibility=True,
            enhanced_exploitation_visibility=True,
            enhanced_dll_load_visibility=True,
            enhanced_ml_for_larger_files=True,
            file_encryption=True,
            file_system_access=True,
            force_aslr=True,
            force_dep=True,
            heap_spray_preallocation=True,
            null_page_allocation=True,
            seh_overwrite_protection=True,
            hardware_enhanced_exploit_detection=True,
            http_detections=True,
            redact_http_detection_details=True,
            intelligence_sourced_threats=True,
            javascript_via_rundll32=True,
            locky=True,
            memory_scanning=True,
            memory_scanning_scan_with_cpu=True,
            microsoft_office_file_suspicious_macro_removal=True,
            on_write_script_file_visibility=True,
            prevent_suspicious_processes=True,
            quarantine_and_security_center_registration=True,
            quarantine_on_removable_media=True,
            quarantine_on_write=True,
            script_based_execution_monitoring=True,
            sensor_tampering_protection=True,
            suspicious_registry_operations=True,
            suspicious_scripts_and_commands=True,
            upload_unknown_executables=True,
            upload_unknown_detection_related_executables=True,
            volume_shadow_copy_audit=True,
            volume_shadow_copy_protect=True,
            vulnerable_driver_protection=True,
            windows_logon_bypass_sticky_keys=True,
            file_system_containment=True)
        pulumi.export("preventionPolicyWindows", example)
        ```

        ## Import

        prevention policy can be imported by specifying the policy id.

        ```sh
        $ pulumi import crowdstrike:index/preventionPolicyWindows:PreventionPolicyWindows example 7fb858a949034a0cbca175f660f1e769
        ```

        :param str resource_name: The name of the resource.
        :param PreventionPolicyWindowsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PreventionPolicyWindowsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_user_mode_data: Optional[pulumi.Input[builtins.bool]] = None,
                 advanced_remediation: Optional[pulumi.Input[builtins.bool]] = None,
                 adware_and_pup: Optional[pulumi.Input[Union['PreventionPolicyWindowsAdwareAndPupArgs', 'PreventionPolicyWindowsAdwareAndPupArgsDict']]] = None,
                 application_exploitation_activity: Optional[pulumi.Input[builtins.bool]] = None,
                 backup_deletion: Optional[pulumi.Input[builtins.bool]] = None,
                 bios_deep_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 chopper_webshell: Optional[pulumi.Input[builtins.bool]] = None,
                 cloud_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareArgs', 'PreventionPolicyWindowsCloudAntiMalwareArgsDict']]] = None,
                 cloud_anti_malware_microsoft_office_files: Optional[pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs', 'PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgsDict']]] = None,
                 cloud_anti_malware_user_initiated: Optional[pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs', 'PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgsDict']]] = None,
                 code_injection: Optional[pulumi.Input[builtins.bool]] = None,
                 credential_dumping: Optional[pulumi.Input[builtins.bool]] = None,
                 cryptowall: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 detect_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 drive_by_download: Optional[pulumi.Input[builtins.bool]] = None,
                 driver_load_prevention: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 engine_full_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_dll_load_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_exploitation_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enhanced_ml_for_larger_files: Optional[pulumi.Input[builtins.bool]] = None,
                 extended_user_mode_data: Optional[pulumi.Input[Union['PreventionPolicyWindowsExtendedUserModeDataArgs', 'PreventionPolicyWindowsExtendedUserModeDataArgsDict']]] = None,
                 file_encryption: Optional[pulumi.Input[builtins.bool]] = None,
                 file_system_access: Optional[pulumi.Input[builtins.bool]] = None,
                 file_system_containment: Optional[pulumi.Input[builtins.bool]] = None,
                 force_aslr: Optional[pulumi.Input[builtins.bool]] = None,
                 force_dep: Optional[pulumi.Input[builtins.bool]] = None,
                 hardware_enhanced_exploit_detection: Optional[pulumi.Input[builtins.bool]] = None,
                 heap_spray_preallocation: Optional[pulumi.Input[builtins.bool]] = None,
                 host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 http_detections: Optional[pulumi.Input[builtins.bool]] = None,
                 intelligence_sourced_threats: Optional[pulumi.Input[builtins.bool]] = None,
                 interpreter_only: Optional[pulumi.Input[builtins.bool]] = None,
                 ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 javascript_via_rundll32: Optional[pulumi.Input[builtins.bool]] = None,
                 locky: Optional[pulumi.Input[builtins.bool]] = None,
                 memory_scanning: Optional[pulumi.Input[builtins.bool]] = None,
                 memory_scanning_scan_with_cpu: Optional[pulumi.Input[builtins.bool]] = None,
                 microsoft_office_file_suspicious_macro_removal: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 notify_end_users: Optional[pulumi.Input[builtins.bool]] = None,
                 null_page_allocation: Optional[pulumi.Input[builtins.bool]] = None,
                 on_write_script_file_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_and_security_center_registration: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_on_removable_media: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine_on_write: Optional[pulumi.Input[builtins.bool]] = None,
                 redact_http_detection_details: Optional[pulumi.Input[builtins.bool]] = None,
                 script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
                 seh_overwrite_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 sensor_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyWindowsSensorAntiMalwareArgs', 'PreventionPolicyWindowsSensorAntiMalwareArgsDict']]] = None,
                 sensor_anti_malware_user_initiated: Optional[pulumi.Input[Union['PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs', 'PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgsDict']]] = None,
                 sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 suspicious_registry_operations: Optional[pulumi.Input[builtins.bool]] = None,
                 suspicious_scripts_and_commands: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 usb_insertion_triggered_scan: Optional[pulumi.Input[builtins.bool]] = None,
                 volume_shadow_copy_audit: Optional[pulumi.Input[builtins.bool]] = None,
                 volume_shadow_copy_protect: Optional[pulumi.Input[builtins.bool]] = None,
                 vulnerable_driver_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 windows_logon_bypass_sticky_keys: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PreventionPolicyWindowsArgs.__new__(PreventionPolicyWindowsArgs)

            __props__.__dict__["additional_user_mode_data"] = additional_user_mode_data
            __props__.__dict__["advanced_remediation"] = advanced_remediation
            __props__.__dict__["adware_and_pup"] = adware_and_pup
            __props__.__dict__["application_exploitation_activity"] = application_exploitation_activity
            __props__.__dict__["backup_deletion"] = backup_deletion
            __props__.__dict__["bios_deep_visibility"] = bios_deep_visibility
            __props__.__dict__["chopper_webshell"] = chopper_webshell
            __props__.__dict__["cloud_anti_malware"] = cloud_anti_malware
            __props__.__dict__["cloud_anti_malware_microsoft_office_files"] = cloud_anti_malware_microsoft_office_files
            __props__.__dict__["cloud_anti_malware_user_initiated"] = cloud_anti_malware_user_initiated
            __props__.__dict__["code_injection"] = code_injection
            __props__.__dict__["credential_dumping"] = credential_dumping
            __props__.__dict__["cryptowall"] = cryptowall
            __props__.__dict__["custom_blocking"] = custom_blocking
            __props__.__dict__["description"] = description
            __props__.__dict__["detect_on_write"] = detect_on_write
            __props__.__dict__["drive_by_download"] = drive_by_download
            __props__.__dict__["driver_load_prevention"] = driver_load_prevention
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["engine_full_visibility"] = engine_full_visibility
            __props__.__dict__["enhanced_dll_load_visibility"] = enhanced_dll_load_visibility
            __props__.__dict__["enhanced_exploitation_visibility"] = enhanced_exploitation_visibility
            __props__.__dict__["enhanced_ml_for_larger_files"] = enhanced_ml_for_larger_files
            __props__.__dict__["extended_user_mode_data"] = extended_user_mode_data
            __props__.__dict__["file_encryption"] = file_encryption
            __props__.__dict__["file_system_access"] = file_system_access
            __props__.__dict__["file_system_containment"] = file_system_containment
            __props__.__dict__["force_aslr"] = force_aslr
            __props__.__dict__["force_dep"] = force_dep
            __props__.__dict__["hardware_enhanced_exploit_detection"] = hardware_enhanced_exploit_detection
            __props__.__dict__["heap_spray_preallocation"] = heap_spray_preallocation
            if host_groups is None and not opts.urn:
                raise TypeError("Missing required property 'host_groups'")
            __props__.__dict__["host_groups"] = host_groups
            __props__.__dict__["http_detections"] = http_detections
            __props__.__dict__["intelligence_sourced_threats"] = intelligence_sourced_threats
            __props__.__dict__["interpreter_only"] = interpreter_only
            if ioa_rule_groups is None and not opts.urn:
                raise TypeError("Missing required property 'ioa_rule_groups'")
            __props__.__dict__["ioa_rule_groups"] = ioa_rule_groups
            __props__.__dict__["javascript_via_rundll32"] = javascript_via_rundll32
            __props__.__dict__["locky"] = locky
            __props__.__dict__["memory_scanning"] = memory_scanning
            __props__.__dict__["memory_scanning_scan_with_cpu"] = memory_scanning_scan_with_cpu
            __props__.__dict__["microsoft_office_file_suspicious_macro_removal"] = microsoft_office_file_suspicious_macro_removal
            __props__.__dict__["name"] = name
            __props__.__dict__["notify_end_users"] = notify_end_users
            __props__.__dict__["null_page_allocation"] = null_page_allocation
            __props__.__dict__["on_write_script_file_visibility"] = on_write_script_file_visibility
            __props__.__dict__["prevent_suspicious_processes"] = prevent_suspicious_processes
            __props__.__dict__["quarantine_and_security_center_registration"] = quarantine_and_security_center_registration
            __props__.__dict__["quarantine_on_removable_media"] = quarantine_on_removable_media
            __props__.__dict__["quarantine_on_write"] = quarantine_on_write
            __props__.__dict__["redact_http_detection_details"] = redact_http_detection_details
            __props__.__dict__["script_based_execution_monitoring"] = script_based_execution_monitoring
            __props__.__dict__["seh_overwrite_protection"] = seh_overwrite_protection
            __props__.__dict__["sensor_anti_malware"] = sensor_anti_malware
            __props__.__dict__["sensor_anti_malware_user_initiated"] = sensor_anti_malware_user_initiated
            __props__.__dict__["sensor_tampering_protection"] = sensor_tampering_protection
            __props__.__dict__["suspicious_registry_operations"] = suspicious_registry_operations
            __props__.__dict__["suspicious_scripts_and_commands"] = suspicious_scripts_and_commands
            __props__.__dict__["upload_unknown_detection_related_executables"] = upload_unknown_detection_related_executables
            __props__.__dict__["upload_unknown_executables"] = upload_unknown_executables
            __props__.__dict__["usb_insertion_triggered_scan"] = usb_insertion_triggered_scan
            __props__.__dict__["volume_shadow_copy_audit"] = volume_shadow_copy_audit
            __props__.__dict__["volume_shadow_copy_protect"] = volume_shadow_copy_protect
            __props__.__dict__["vulnerable_driver_protection"] = vulnerable_driver_protection
            __props__.__dict__["windows_logon_bypass_sticky_keys"] = windows_logon_bypass_sticky_keys
            __props__.__dict__["last_updated"] = None
        super(PreventionPolicyWindows, __self__).__init__(
            'crowdstrike:index/preventionPolicyWindows:PreventionPolicyWindows',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_user_mode_data: Optional[pulumi.Input[builtins.bool]] = None,
            advanced_remediation: Optional[pulumi.Input[builtins.bool]] = None,
            adware_and_pup: Optional[pulumi.Input[Union['PreventionPolicyWindowsAdwareAndPupArgs', 'PreventionPolicyWindowsAdwareAndPupArgsDict']]] = None,
            application_exploitation_activity: Optional[pulumi.Input[builtins.bool]] = None,
            backup_deletion: Optional[pulumi.Input[builtins.bool]] = None,
            bios_deep_visibility: Optional[pulumi.Input[builtins.bool]] = None,
            chopper_webshell: Optional[pulumi.Input[builtins.bool]] = None,
            cloud_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareArgs', 'PreventionPolicyWindowsCloudAntiMalwareArgsDict']]] = None,
            cloud_anti_malware_microsoft_office_files: Optional[pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs', 'PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgsDict']]] = None,
            cloud_anti_malware_user_initiated: Optional[pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs', 'PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgsDict']]] = None,
            code_injection: Optional[pulumi.Input[builtins.bool]] = None,
            credential_dumping: Optional[pulumi.Input[builtins.bool]] = None,
            cryptowall: Optional[pulumi.Input[builtins.bool]] = None,
            custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            detect_on_write: Optional[pulumi.Input[builtins.bool]] = None,
            drive_by_download: Optional[pulumi.Input[builtins.bool]] = None,
            driver_load_prevention: Optional[pulumi.Input[builtins.bool]] = None,
            enabled: Optional[pulumi.Input[builtins.bool]] = None,
            engine_full_visibility: Optional[pulumi.Input[builtins.bool]] = None,
            enhanced_dll_load_visibility: Optional[pulumi.Input[builtins.bool]] = None,
            enhanced_exploitation_visibility: Optional[pulumi.Input[builtins.bool]] = None,
            enhanced_ml_for_larger_files: Optional[pulumi.Input[builtins.bool]] = None,
            extended_user_mode_data: Optional[pulumi.Input[Union['PreventionPolicyWindowsExtendedUserModeDataArgs', 'PreventionPolicyWindowsExtendedUserModeDataArgsDict']]] = None,
            file_encryption: Optional[pulumi.Input[builtins.bool]] = None,
            file_system_access: Optional[pulumi.Input[builtins.bool]] = None,
            file_system_containment: Optional[pulumi.Input[builtins.bool]] = None,
            force_aslr: Optional[pulumi.Input[builtins.bool]] = None,
            force_dep: Optional[pulumi.Input[builtins.bool]] = None,
            hardware_enhanced_exploit_detection: Optional[pulumi.Input[builtins.bool]] = None,
            heap_spray_preallocation: Optional[pulumi.Input[builtins.bool]] = None,
            host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            http_detections: Optional[pulumi.Input[builtins.bool]] = None,
            intelligence_sourced_threats: Optional[pulumi.Input[builtins.bool]] = None,
            interpreter_only: Optional[pulumi.Input[builtins.bool]] = None,
            ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            javascript_via_rundll32: Optional[pulumi.Input[builtins.bool]] = None,
            last_updated: Optional[pulumi.Input[builtins.str]] = None,
            locky: Optional[pulumi.Input[builtins.bool]] = None,
            memory_scanning: Optional[pulumi.Input[builtins.bool]] = None,
            memory_scanning_scan_with_cpu: Optional[pulumi.Input[builtins.bool]] = None,
            microsoft_office_file_suspicious_macro_removal: Optional[pulumi.Input[builtins.bool]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            notify_end_users: Optional[pulumi.Input[builtins.bool]] = None,
            null_page_allocation: Optional[pulumi.Input[builtins.bool]] = None,
            on_write_script_file_visibility: Optional[pulumi.Input[builtins.bool]] = None,
            prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
            quarantine_and_security_center_registration: Optional[pulumi.Input[builtins.bool]] = None,
            quarantine_on_removable_media: Optional[pulumi.Input[builtins.bool]] = None,
            quarantine_on_write: Optional[pulumi.Input[builtins.bool]] = None,
            redact_http_detection_details: Optional[pulumi.Input[builtins.bool]] = None,
            script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
            seh_overwrite_protection: Optional[pulumi.Input[builtins.bool]] = None,
            sensor_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyWindowsSensorAntiMalwareArgs', 'PreventionPolicyWindowsSensorAntiMalwareArgsDict']]] = None,
            sensor_anti_malware_user_initiated: Optional[pulumi.Input[Union['PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs', 'PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgsDict']]] = None,
            sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
            suspicious_registry_operations: Optional[pulumi.Input[builtins.bool]] = None,
            suspicious_scripts_and_commands: Optional[pulumi.Input[builtins.bool]] = None,
            upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
            upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None,
            usb_insertion_triggered_scan: Optional[pulumi.Input[builtins.bool]] = None,
            volume_shadow_copy_audit: Optional[pulumi.Input[builtins.bool]] = None,
            volume_shadow_copy_protect: Optional[pulumi.Input[builtins.bool]] = None,
            vulnerable_driver_protection: Optional[pulumi.Input[builtins.bool]] = None,
            windows_logon_bypass_sticky_keys: Optional[pulumi.Input[builtins.bool]] = None) -> 'PreventionPolicyWindows':
        """
        Get an existing PreventionPolicyWindows resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] additional_user_mode_data: Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        :param pulumi.Input[builtins.bool] advanced_remediation: Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
        :param pulumi.Input[Union['PreventionPolicyWindowsAdwareAndPupArgs', 'PreventionPolicyWindowsAdwareAndPupArgsDict']] adware_and_pup: Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        :param pulumi.Input[builtins.bool] application_exploitation_activity: Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
        :param pulumi.Input[builtins.bool] backup_deletion: Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
        :param pulumi.Input[builtins.bool] bios_deep_visibility: Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
        :param pulumi.Input[builtins.bool] chopper_webshell: Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        :param pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareArgs', 'PreventionPolicyWindowsCloudAntiMalwareArgsDict']] cloud_anti_malware: Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        :param pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgs', 'PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFilesArgsDict']] cloud_anti_malware_microsoft_office_files: Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        :param pulumi.Input[Union['PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgs', 'PreventionPolicyWindowsCloudAntiMalwareUserInitiatedArgsDict']] cloud_anti_malware_user_initiated: For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
        :param pulumi.Input[builtins.bool] code_injection: Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] credential_dumping: Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] cryptowall: Whether to enable the setting. A process associated with Cryptowall was blocked.
        :param pulumi.Input[builtins.bool] custom_blocking: Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        :param pulumi.Input[builtins.str] description: Description of the prevention policy.
        :param pulumi.Input[builtins.bool] detect_on_write: Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] drive_by_download: Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
        :param pulumi.Input[builtins.bool] driver_load_prevention: Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
        :param pulumi.Input[builtins.bool] enabled: Enable the prevention policy.
        :param pulumi.Input[builtins.bool] engine_full_visibility: Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreter_only to be enabled.
        :param pulumi.Input[builtins.bool] enhanced_dll_load_visibility: Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
        :param pulumi.Input[builtins.bool] enhanced_exploitation_visibility: Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
        :param pulumi.Input[builtins.bool] enhanced_ml_for_larger_files: Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
        :param pulumi.Input[Union['PreventionPolicyWindowsExtendedUserModeDataArgs', 'PreventionPolicyWindowsExtendedUserModeDataArgsDict']] extended_user_mode_data: Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        :param pulumi.Input[builtins.bool] file_encryption: Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
        :param pulumi.Input[builtins.bool] file_system_access: Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
        :param pulumi.Input[builtins.bool] file_system_containment: Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
        :param pulumi.Input[builtins.bool] force_aslr: Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] force_dep: Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] hardware_enhanced_exploit_detection: Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
        :param pulumi.Input[builtins.bool] heap_spray_preallocation: Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] http_detections: Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
        :param pulumi.Input[builtins.bool] intelligence_sourced_threats: Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        :param pulumi.Input[builtins.bool] interpreter_only: Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] javascript_via_rundll32: Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
        :param pulumi.Input[builtins.bool] locky: Whether to enable the setting. A process determined to be associated with Locky was blocked.
        :param pulumi.Input[builtins.bool] memory_scanning: Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
        :param pulumi.Input[builtins.bool] memory_scanning_scan_with_cpu: Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
        :param pulumi.Input[builtins.bool] microsoft_office_file_suspicious_macro_removal: Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        :param pulumi.Input[builtins.str] name: Name of the prevention policy.
        :param pulumi.Input[builtins.bool] notify_end_users: Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
        :param pulumi.Input[builtins.bool] null_page_allocation: Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[builtins.bool] on_write_script_file_visibility: Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        :param pulumi.Input[builtins.bool] prevent_suspicious_processes: Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        :param pulumi.Input[builtins.bool] quarantine_and_security_center_registration: Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
        :param pulumi.Input[builtins.bool] quarantine_on_removable_media: Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
        :param pulumi.Input[builtins.bool] quarantine_on_write: Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        :param pulumi.Input[builtins.bool] redact_http_detection_details: Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
        :param pulumi.Input[builtins.bool] script_based_execution_monitoring: Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine & Security Center Registration toggle to be enabled.
        :param pulumi.Input[builtins.bool] seh_overwrite_protection: Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        :param pulumi.Input[Union['PreventionPolicyWindowsSensorAntiMalwareArgs', 'PreventionPolicyWindowsSensorAntiMalwareArgsDict']] sensor_anti_malware: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        :param pulumi.Input[Union['PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgs', 'PreventionPolicyWindowsSensorAntiMalwareUserInitiatedArgsDict']] sensor_anti_malware_user_initiated: For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
        :param pulumi.Input[builtins.bool] sensor_tampering_protection: Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        :param pulumi.Input[builtins.bool] suspicious_registry_operations: Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
        :param pulumi.Input[builtins.bool] suspicious_scripts_and_commands: Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
        :param pulumi.Input[builtins.bool] upload_unknown_detection_related_executables: Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] upload_unknown_executables: Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] usb_insertion_triggered_scan: Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
        :param pulumi.Input[builtins.bool] volume_shadow_copy_audit: Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
        :param pulumi.Input[builtins.bool] volume_shadow_copy_protect: Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
        :param pulumi.Input[builtins.bool] vulnerable_driver_protection: Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
        :param pulumi.Input[builtins.bool] windows_logon_bypass_sticky_keys: Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PreventionPolicyWindowsState.__new__(_PreventionPolicyWindowsState)

        __props__.__dict__["additional_user_mode_data"] = additional_user_mode_data
        __props__.__dict__["advanced_remediation"] = advanced_remediation
        __props__.__dict__["adware_and_pup"] = adware_and_pup
        __props__.__dict__["application_exploitation_activity"] = application_exploitation_activity
        __props__.__dict__["backup_deletion"] = backup_deletion
        __props__.__dict__["bios_deep_visibility"] = bios_deep_visibility
        __props__.__dict__["chopper_webshell"] = chopper_webshell
        __props__.__dict__["cloud_anti_malware"] = cloud_anti_malware
        __props__.__dict__["cloud_anti_malware_microsoft_office_files"] = cloud_anti_malware_microsoft_office_files
        __props__.__dict__["cloud_anti_malware_user_initiated"] = cloud_anti_malware_user_initiated
        __props__.__dict__["code_injection"] = code_injection
        __props__.__dict__["credential_dumping"] = credential_dumping
        __props__.__dict__["cryptowall"] = cryptowall
        __props__.__dict__["custom_blocking"] = custom_blocking
        __props__.__dict__["description"] = description
        __props__.__dict__["detect_on_write"] = detect_on_write
        __props__.__dict__["drive_by_download"] = drive_by_download
        __props__.__dict__["driver_load_prevention"] = driver_load_prevention
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["engine_full_visibility"] = engine_full_visibility
        __props__.__dict__["enhanced_dll_load_visibility"] = enhanced_dll_load_visibility
        __props__.__dict__["enhanced_exploitation_visibility"] = enhanced_exploitation_visibility
        __props__.__dict__["enhanced_ml_for_larger_files"] = enhanced_ml_for_larger_files
        __props__.__dict__["extended_user_mode_data"] = extended_user_mode_data
        __props__.__dict__["file_encryption"] = file_encryption
        __props__.__dict__["file_system_access"] = file_system_access
        __props__.__dict__["file_system_containment"] = file_system_containment
        __props__.__dict__["force_aslr"] = force_aslr
        __props__.__dict__["force_dep"] = force_dep
        __props__.__dict__["hardware_enhanced_exploit_detection"] = hardware_enhanced_exploit_detection
        __props__.__dict__["heap_spray_preallocation"] = heap_spray_preallocation
        __props__.__dict__["host_groups"] = host_groups
        __props__.__dict__["http_detections"] = http_detections
        __props__.__dict__["intelligence_sourced_threats"] = intelligence_sourced_threats
        __props__.__dict__["interpreter_only"] = interpreter_only
        __props__.__dict__["ioa_rule_groups"] = ioa_rule_groups
        __props__.__dict__["javascript_via_rundll32"] = javascript_via_rundll32
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["locky"] = locky
        __props__.__dict__["memory_scanning"] = memory_scanning
        __props__.__dict__["memory_scanning_scan_with_cpu"] = memory_scanning_scan_with_cpu
        __props__.__dict__["microsoft_office_file_suspicious_macro_removal"] = microsoft_office_file_suspicious_macro_removal
        __props__.__dict__["name"] = name
        __props__.__dict__["notify_end_users"] = notify_end_users
        __props__.__dict__["null_page_allocation"] = null_page_allocation
        __props__.__dict__["on_write_script_file_visibility"] = on_write_script_file_visibility
        __props__.__dict__["prevent_suspicious_processes"] = prevent_suspicious_processes
        __props__.__dict__["quarantine_and_security_center_registration"] = quarantine_and_security_center_registration
        __props__.__dict__["quarantine_on_removable_media"] = quarantine_on_removable_media
        __props__.__dict__["quarantine_on_write"] = quarantine_on_write
        __props__.__dict__["redact_http_detection_details"] = redact_http_detection_details
        __props__.__dict__["script_based_execution_monitoring"] = script_based_execution_monitoring
        __props__.__dict__["seh_overwrite_protection"] = seh_overwrite_protection
        __props__.__dict__["sensor_anti_malware"] = sensor_anti_malware
        __props__.__dict__["sensor_anti_malware_user_initiated"] = sensor_anti_malware_user_initiated
        __props__.__dict__["sensor_tampering_protection"] = sensor_tampering_protection
        __props__.__dict__["suspicious_registry_operations"] = suspicious_registry_operations
        __props__.__dict__["suspicious_scripts_and_commands"] = suspicious_scripts_and_commands
        __props__.__dict__["upload_unknown_detection_related_executables"] = upload_unknown_detection_related_executables
        __props__.__dict__["upload_unknown_executables"] = upload_unknown_executables
        __props__.__dict__["usb_insertion_triggered_scan"] = usb_insertion_triggered_scan
        __props__.__dict__["volume_shadow_copy_audit"] = volume_shadow_copy_audit
        __props__.__dict__["volume_shadow_copy_protect"] = volume_shadow_copy_protect
        __props__.__dict__["vulnerable_driver_protection"] = vulnerable_driver_protection
        __props__.__dict__["windows_logon_bypass_sticky_keys"] = windows_logon_bypass_sticky_keys
        return PreventionPolicyWindows(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="additionalUserModeData")
    def additional_user_mode_data(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        """
        return pulumi.get(self, "additional_user_mode_data")

    @property
    @pulumi.getter(name="advancedRemediation")
    def advanced_remediation(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Perform advanced remediation for IOA detections to kill processes, quarantine files, remove scheduled tasks, and clear and delete ASEP registry values.
        """
        return pulumi.get(self, "advanced_remediation")

    @property
    @pulumi.getter(name="adwareAndPup")
    def adware_and_pup(self) -> pulumi.Output['outputs.PreventionPolicyWindowsAdwareAndPup']:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent adware and potentially unwanted programs (PUP) for your online hosts.
        """
        return pulumi.get(self, "adware_and_pup")

    @property
    @pulumi.getter(name="applicationExploitationActivity")
    def application_exploitation_activity(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Creation of a process, such as a command prompt, from an exploited browser or browser flash plugin was blocked.
        """
        return pulumi.get(self, "application_exploitation_activity")

    @property
    @pulumi.getter(name="backupDeletion")
    def backup_deletion(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Deletion of backups often indicative of ransomware activity.
        """
        return pulumi.get(self, "backup_deletion")

    @property
    @pulumi.getter(name="biosDeepVisibility")
    def bios_deep_visibility(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Provides visibility into BIOS. Detects suspicious and unexpected images. Recommend testing to monitor system startup performance before full deployment.
        """
        return pulumi.get(self, "bios_deep_visibility")

    @property
    @pulumi.getter(name="chopperWebshell")
    def chopper_webshell(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Execution of a command shell was blocked and is indicative of the system hosting a Chopper web page.
        """
        return pulumi.get(self, "chopper_webshell")

    @property
    @pulumi.getter(name="cloudAntiMalware")
    def cloud_anti_malware(self) -> pulumi.Output['outputs.PreventionPolicyWindowsCloudAntiMalware']:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        """
        return pulumi.get(self, "cloud_anti_malware")

    @property
    @pulumi.getter(name="cloudAntiMalwareMicrosoftOfficeFiles")
    def cloud_anti_malware_microsoft_office_files(self) -> pulumi.Output['outputs.PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFiles']:
        """
        Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        """
        return pulumi.get(self, "cloud_anti_malware_microsoft_office_files")

    @property
    @pulumi.getter(name="cloudAntiMalwareUserInitiated")
    def cloud_anti_malware_user_initiated(self) -> pulumi.Output['outputs.PreventionPolicyWindowsCloudAntiMalwareUserInitiated']:
        """
        For online hosts running on-demand scans initiated by end users, use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware.
        """
        return pulumi.get(self, "cloud_anti_malware_user_initiated")

    @property
    @pulumi.getter(name="codeInjection")
    def code_injection(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Kill processes that unexpectedly injected code into another process. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "code_injection")

    @property
    @pulumi.getter(name="credentialDumping")
    def credential_dumping(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Kill suspicious processes determined to be stealing logins and passwords. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "credential_dumping")

    @property
    @pulumi.getter
    def cryptowall(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. A process associated with Cryptowall was blocked.
        """
        return pulumi.get(self, "cryptowall")

    @property
    @pulumi.getter(name="customBlocking")
    def custom_blocking(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        """
        return pulumi.get(self, "custom_blocking")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Description of the prevention policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detectOnWrite")
    def detect_on_write(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Use machine learning to analyze suspicious files when they're written to disk. To adjust detection sensitivity, change Anti-malware Detection levels in Sensor Machine Learning and Cloud Machine Learning.
        """
        return pulumi.get(self, "detect_on_write")

    @property
    @pulumi.getter(name="driveByDownload")
    def drive_by_download(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. A suspicious file written by a browser attempted to execute and was blocked.
        """
        return pulumi.get(self, "drive_by_download")

    @property
    @pulumi.getter(name="driverLoadPrevention")
    def driver_load_prevention(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Block the loading of kernel drivers that CrowdStrike analysts have identified as malicious. Available on Windows 10 and Windows Server 2016 and later.
        """
        return pulumi.get(self, "driver_load_prevention")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Enable the prevention policy.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="engineFullVisibility")
    def engine_full_visibility(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Provides visibility into malicious System Management Automation engine usage by any application. Requires interpreter_only to be enabled.
        """
        return pulumi.get(self, "engine_full_visibility")

    @property
    @pulumi.getter(name="enhancedDllLoadVisibility")
    def enhanced_dll_load_visibility(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. For hosts running Windows Server, increases sensor visibility of loaded DLLs. Improves detection coverage and telemetry, but may cause a small performance impact. Recommend testing with critical applications before full deployment.
        """
        return pulumi.get(self, "enhanced_dll_load_visibility")

    @property
    @pulumi.getter(name="enhancedExploitationVisibility")
    def enhanced_exploitation_visibility(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. For hosts running Windows 10 1809 and Server 2019 and later, provides additional visibility into common exploitation techniques used to weaken or circumvent application security.
        """
        return pulumi.get(self, "enhanced_exploitation_visibility")

    @property
    @pulumi.getter(name="enhancedMlForLargerFiles")
    def enhanced_ml_for_larger_files(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Expand ML file size coverage. Existing ML level settings apply.
        """
        return pulumi.get(self, "enhanced_ml_for_larger_files")

    @property
    @pulumi.getter(name="extendedUserModeData")
    def extended_user_mode_data(self) -> pulumi.Output['outputs.PreventionPolicyWindowsExtendedUserModeData']:
        """
        Allows the sensor to get more data from a user-mode component it loads into all eligible processes, which augments online machine learning and turns on additional detections. Recommend testing with critical applications before full deployment.
        """
        return pulumi.get(self, "extended_user_mode_data")

    @property
    @pulumi.getter(name="fileEncryption")
    def file_encryption(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. A process that created a file with a known ransomware extension was terminated.
        """
        return pulumi.get(self, "file_encryption")

    @property
    @pulumi.getter(name="fileSystemAccess")
    def file_system_access(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. A process associated with a high volume of file system operations typical of ransomware behavior was terminated.
        """
        return pulumi.get(self, "file_system_access")

    @property
    @pulumi.getter(name="fileSystemContainment")
    def file_system_containment(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. File System Containment will be enabled, this will allow prevention capabilities to automatically contain file system activity.  When disabled each user under active containment will be released and the File System Containment will enter a disabled mode
        """
        return pulumi.get(self, "file_system_containment")

    @property
    @pulumi.getter(name="forceAslr")
    def force_aslr(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. An Address Space Layout Randomization (ASLR) bypass attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "force_aslr")

    @property
    @pulumi.getter(name="forceDep")
    def force_dep(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. A process that had Force Data Execution Prevention (Force DEP) applied tried to execute non-executable memory and was blocked. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "force_dep")

    @property
    @pulumi.getter(name="hardwareEnhancedExploitDetection")
    def hardware_enhanced_exploit_detection(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Provides additional visibility into application exploits by using CPU hardware features that detect suspicious control flows. Available only for hosts running Windows 10 (RS4) or Windows Server 2016 Version 1803 or later and Skylake or later CPU.
        """
        return pulumi.get(self, "hardware_enhanced_exploit_detection")

    @property
    @pulumi.getter(name="heapSprayPreallocation")
    def heap_spray_preallocation(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. A heap spray attempt was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "heap_spray_preallocation")

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Host Group ids to attach to the prevention policy.
        """
        return pulumi.get(self, "host_groups")

    @property
    @pulumi.getter(name="httpDetections")
    def http_detections(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic and certain encrypted HTTPS traffic on the sensor for malicious patterns and generate detection events on non-Server systems.
        """
        return pulumi.get(self, "http_detections")

    @property
    @pulumi.getter(name="intelligenceSourcedThreats")
    def intelligence_sourced_threats(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Block processes that CrowdStrike Intelligence analysts classify as malicious. These are focused on static hash-based IOCs.
        """
        return pulumi.get(self, "intelligence_sourced_threats")

    @property
    @pulumi.getter(name="interpreterOnly")
    def interpreter_only(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Provides visibility into malicious PowerShell interpreter usage. For hosts running Windows 10, Script-Based Execution Monitoring may be used instead.
        """
        return pulumi.get(self, "interpreter_only")

    @property
    @pulumi.getter(name="ioaRuleGroups")
    def ioa_rule_groups(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        IOA Rule Group to attach to the prevention policy.
        """
        return pulumi.get(self, "ioa_rule_groups")

    @property
    @pulumi.getter(name="javascriptViaRundll32")
    def javascript_via_rundll32(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. JavaScript executing from a command line via rundll32.exe was prevented.
        """
        return pulumi.get(self, "javascript_via_rundll32")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def locky(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. A process determined to be associated with Locky was blocked.
        """
        return pulumi.get(self, "locky")

    @property
    @pulumi.getter(name="memoryScanning")
    def memory_scanning(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Provides visibility into in-memory attacks by scanning for suspicious artifacts on hosts with the following: an integrated GPU and supporting OS libraries, Windows 10 v1607 (RS1) or later, and a Skylake or newer Intel CPU.
        """
        return pulumi.get(self, "memory_scanning")

    @property
    @pulumi.getter(name="memoryScanningScanWithCpu")
    def memory_scanning_scan_with_cpu(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Allows memory scanning to use the CPU or virtual CPU when an integrated GPU is not available. All Intel processors supported, requires Windows 8.1/2012 R2 or later.
        """
        return pulumi.get(self, "memory_scanning_scan_with_cpu")

    @property
    @pulumi.getter(name="microsoftOfficeFileSuspiciousMacroRemoval")
    def microsoft_office_file_suspicious_macro_removal(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Identifies potentially malicious macros in Microsoft Office files and, if prevention is enabled, either quarantines the file or removes the malicious macros before releasing the file back to the host
        """
        return pulumi.get(self, "microsoft_office_file_suspicious_macro_removal")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the prevention policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifyEndUsers")
    def notify_end_users(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Show a pop-up notification to the end user when the Falcon sensor blocks, kills, or quarantines. These messages also show up in the Windows Event Viewer under Applications and Service Logs.
        """
        return pulumi.get(self, "notify_end_users")

    @property
    @pulumi.getter(name="nullPageAllocation")
    def null_page_allocation(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Allocating memory to the NULL (0) memory page was detected and blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "null_page_allocation")

    @property
    @pulumi.getter(name="onWriteScriptFileVisibility")
    def on_write_script_file_visibility(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        """
        return pulumi.get(self, "on_write_script_file_visibility")

    @property
    @pulumi.getter(name="preventSuspiciousProcesses")
    def prevent_suspicious_processes(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        """
        return pulumi.get(self, "prevent_suspicious_processes")

    @property
    @pulumi.getter(name="quarantineAndSecurityCenterRegistration")
    def quarantine_and_security_center_registration(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions. CrowdStrike Falcon registers with Windows Security Center, disabling Windows Defender.
        """
        return pulumi.get(self, "quarantine_and_security_center_registration")

    @property
    @pulumi.getter(name="quarantineOnRemovableMedia")
    def quarantine_on_removable_media(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Quarantine executable files after they’re prevented by NGAV.
        """
        return pulumi.get(self, "quarantine_on_removable_media")

    @property
    @pulumi.getter(name="quarantineOnWrite")
    def quarantine_on_write(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Use machine learning to quarantine suspicious files when they're written to disk. To adjust quarantine sensitivity, change Anti-malware Prevention levels in Sensor Machine Learning and Cloud Machine Learning.
        """
        return pulumi.get(self, "quarantine_on_write")

    @property
    @pulumi.getter(name="redactHttpDetectionDetails")
    def redact_http_detection_details(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Remove certain information from HTTP Detection events, including URL, raw HTTP header and POST bodies if they were present. This does not affect the generation of HTTP Detections, only additional details that would be included and may include personal information (depending on the malware in question). When disabled, the information is used to improve the response to detection events. Has no effect unless HTTP Detections is also enabled.
        """
        return pulumi.get(self, "redact_http_detection_details")

    @property
    @pulumi.getter(name="scriptBasedExecutionMonitoring")
    def script_based_execution_monitoring(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. For hosts running Windows 10 and Servers 2016 and later, provides visibility into suspicious scripts and VBA macros in Office documents. Requires Quarantine & Security Center Registration toggle to be enabled.
        """
        return pulumi.get(self, "script_based_execution_monitoring")

    @property
    @pulumi.getter(name="sehOverwriteProtection")
    def seh_overwrite_protection(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Overwriting a Structured Exception Handler (SEH) was detected and may have been blocked. This may have been part of an attempted exploit. Requires additional*user*mode_data to be enabled.
        """
        return pulumi.get(self, "seh_overwrite_protection")

    @property
    @pulumi.getter(name="sensorAntiMalware")
    def sensor_anti_malware(self) -> pulumi.Output['outputs.PreventionPolicyWindowsSensorAntiMalware']:
        """
        For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        """
        return pulumi.get(self, "sensor_anti_malware")

    @property
    @pulumi.getter(name="sensorAntiMalwareUserInitiated")
    def sensor_anti_malware_user_initiated(self) -> pulumi.Output['outputs.PreventionPolicyWindowsSensorAntiMalwareUserInitiated']:
        """
        For offline and online hosts running on-demand scans initiated by end users, use sensor-based machine learning to identify and analyze unknown executables to detect and prevent malware.
        """
        return pulumi.get(self, "sensor_anti_malware_user_initiated")

    @property
    @pulumi.getter(name="sensorTamperingProtection")
    def sensor_tampering_protection(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Blocks attempts to tamper with the sensor. If disabled, the sensor still creates detections for tampering attempts but doesn’t block them. Disabling not recommended.
        """
        return pulumi.get(self, "sensor_tampering_protection")

    @property
    @pulumi.getter(name="suspiciousRegistryOperations")
    def suspicious_registry_operations(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Block registry operations that CrowdStrike analysts classify as suspicious. Focuses on dynamic IOAs, such as ASEPs and security config changes. The associated process may be killed.
        """
        return pulumi.get(self, "suspicious_registry_operations")

    @property
    @pulumi.getter(name="suspiciousScriptsAndCommands")
    def suspicious_scripts_and_commands(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Block execution of scripts and commands that CrowdStrike analysts classify as suspicious. Requires Interpreter-Only and/or Script-Based Execution Monitoring.
        """
        return pulumi.get(self, "suspicious_scripts_and_commands")

    @property
    @pulumi.getter(name="uploadUnknownDetectionRelatedExecutables")
    def upload_unknown_detection_related_executables(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_detection_related_executables")

    @property
    @pulumi.getter(name="uploadUnknownExecutables")
    def upload_unknown_executables(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_executables")

    @property
    @pulumi.getter(name="usbInsertionTriggeredScan")
    def usb_insertion_triggered_scan(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Start an on-demand scan when an end user inserts a USB device. To adjust detection sensitivity, change Anti-malware Detection levels in On-Demand Scans Machine Learning.
        """
        return pulumi.get(self, "usb_insertion_triggered_scan")

    @property
    @pulumi.getter(name="volumeShadowCopyAudit")
    def volume_shadow_copy_audit(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Create an alert when a suspicious process deletes volume shadow copies. Recommended: Use audit mode with a test group to try allowlisting trusted software before turning on Protect.
        """
        return pulumi.get(self, "volume_shadow_copy_audit")

    @property
    @pulumi.getter(name="volumeShadowCopyProtect")
    def volume_shadow_copy_protect(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Prevent suspicious processes from deleting volume shadow copies. Requires volume*shadow*copy_audit.
        """
        return pulumi.get(self, "volume_shadow_copy_protect")

    @property
    @pulumi.getter(name="vulnerableDriverProtection")
    def vulnerable_driver_protection(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Quarantine and block the loading of newly written kernel drivers that CrowdStrike analysts have identified as vulnerable. Available on Windows 10 and Windows 2016 and later. Requires driver*load*prevention.
        """
        return pulumi.get(self, "vulnerable_driver_protection")

    @property
    @pulumi.getter(name="windowsLogonBypassStickyKeys")
    def windows_logon_bypass_sticky_keys(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. A command line process associated with Windows logon bypass was prevented from executing.
        """
        return pulumi.get(self, "windows_logon_bypass_sticky_keys")

