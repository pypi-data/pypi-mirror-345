# coding: utf-8

"""
    Marketing i prodvihenie

    <div class=\"description_important\">       Uznat bolhe o marketinge i prodvihenii mohno v <a href=\"https://seller.wildberries.ru/instructions/category/59d92bd3-6ea0-40f2-b762-ca8835d7d42e?goBackOption=prevRoute&categoryId=479385c6-de01-4b4d-ad4e-ed941e65582e\">spravohnom centre</a> </div>    Metody marketinga i prodvihenia pozvolaut:   1. Poluhat informaciu o [reklamnyh kampaniah](/openapi/promotion#tag/Kampanii) i [mediakampaniah](/openapi/promotion#tag/Media).   2. [Sozdavat](/openapi/promotion#tag/Sozdanie-kampanij) i [upravlat](/openapi/promotion#tag/Upravlenie-kampaniyami) kampaniami.   3. Nastraivat [parametry kampanii](/openapi/promotion#tag/Parametry-kampanij) â€” klastery fraz, prodvigaemye tovary i tak dalee.   4. Upravlat [finansami kampanii](/openapi/promotion#tag/Finansy).   5. Rabotat s [kalendarem akcii](/openapi/promotion#tag/Kalendar-akcij).  Dannye sinhroniziruutsa s bazoi raz v 3 minuty. Statusy kampanii menautsa raz v minutu. Stavki kampanii menautsa raz v 30 sekund.   # noqa: E501

    OpenAPI spec version: promotion
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.promotion.api_client import ApiClient


class MediaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adv_v1_advert_get(self, id, **kwargs):  # noqa: E501
        """Informacia o mediakampanii  # noqa: E501

        Metod predostavlaet informaciu ob odnoi kampanii [VB.Media](https://cmp.wildberries.ru/cmpf/list). Vmesto kartohek tovarov v mediakampaniah prodvigautsa reklamnye bannery prodavca na saite i v prilohenii WB.  <div class=\"description_limit\">     Maksimum 10 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_advert_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID mediakampanii (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_advert_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_advert_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def adv_v1_advert_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Informacia o mediakampanii  # noqa: E501

        Metod predostavlaet informaciu ob odnoi kampanii [VB.Media](https://cmp.wildberries.ru/cmpf/list). Vmesto kartohek tovarov v mediakampaniah prodvigautsa reklamnye bannery prodavca na saite i v prilohenii WB.  <div class=\"description_limit\">     Maksimum 10 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_advert_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID mediakampanii (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_advert_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_advert_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/advert', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_adverts_get(self, **kwargs):  # noqa: E501
        """Spisok mediakampanii  # noqa: E501

        Metod predostavlaet spisok vseh [mediakampanii](/openapi/promotion#tag/Media/paths/~1adv~1v1~1advert/get) prodavca po ih tipam i statusam.  <div class=\"description_limit\">     Maksimum 10 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_adverts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int status: <dl> <dt>Status mediakampanii:</dt>   <dd><code>1</code> - hernovik</dd>   <dd><code>2</code> - moderacia   <dd><code>3</code> - otkloneno (s vozmohnostu vernut na moderaciu)</dd>   <dd><code>4</code> - odobreno</dd>   <dd><code>5</code> - zaplanirovano</dd>   <dd><code>6</code> - na pokazah</dd>   <dd><code>7</code> - zaverheno</dd>   <dd><code>8</code> - otkazalsa</dd>   <dd><code>9</code> - priostanovlena prodavcom</dd>   <dd><code>10</code> - pauza po dnevnomu limitu</dd>   <dd><code>11</code> - pauza po rashodu budheta</dd> </dl> 
        :param int type: <dl> <dt>Tip mediakampanii:</dt> <dd><code>1</code> - razmehenie po dnam</dd> <dd><code>2</code> - razmehenie po prosmotram</dd> </dl> 
        :param int limit: Kolihestvo kampanii v otvete
        :param int offset: Smehenie otnositelno pervoi mediakampanii
        :param str order: <dl> <dt>Poradok vyvoda otveta:</dt> <dd><code>create</code> - po vremeni sozdania mediakampanii</dd> <dd><code>id</code> - po ID mediakampanii</dd> </dl> 
        :param str direction: <dl> <dt>Poradok sortirovki:</dt> <dd><code>desc</code> - ot bolhego k menhemu</dd> <dd><code>asc</code> - ot menhego k bolhemu</dd> </dl> 
        :return: list[InlineResponse20010]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_adverts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_adverts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v1_adverts_get_with_http_info(self, **kwargs):  # noqa: E501
        """Spisok mediakampanii  # noqa: E501

        Metod predostavlaet spisok vseh [mediakampanii](/openapi/promotion#tag/Media/paths/~1adv~1v1~1advert/get) prodavca po ih tipam i statusam.  <div class=\"description_limit\">     Maksimum 10 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_adverts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int status: <dl> <dt>Status mediakampanii:</dt>   <dd><code>1</code> - hernovik</dd>   <dd><code>2</code> - moderacia   <dd><code>3</code> - otkloneno (s vozmohnostu vernut na moderaciu)</dd>   <dd><code>4</code> - odobreno</dd>   <dd><code>5</code> - zaplanirovano</dd>   <dd><code>6</code> - na pokazah</dd>   <dd><code>7</code> - zaverheno</dd>   <dd><code>8</code> - otkazalsa</dd>   <dd><code>9</code> - priostanovlena prodavcom</dd>   <dd><code>10</code> - pauza po dnevnomu limitu</dd>   <dd><code>11</code> - pauza po rashodu budheta</dd> </dl> 
        :param int type: <dl> <dt>Tip mediakampanii:</dt> <dd><code>1</code> - razmehenie po dnam</dd> <dd><code>2</code> - razmehenie po prosmotram</dd> </dl> 
        :param int limit: Kolihestvo kampanii v otvete
        :param int offset: Smehenie otnositelno pervoi mediakampanii
        :param str order: <dl> <dt>Poradok vyvoda otveta:</dt> <dd><code>create</code> - po vremeni sozdania mediakampanii</dd> <dd><code>id</code> - po ID mediakampanii</dd> </dl> 
        :param str direction: <dl> <dt>Poradok sortirovki:</dt> <dd><code>desc</code> - ot bolhego k menhemu</dd> <dd><code>asc</code> - ot menhego k bolhemu</dd> </dl> 
        :return: list[InlineResponse20010]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'type', 'limit', 'offset', 'order', 'direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_adverts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/adverts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20010]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_count_get(self, **kwargs):  # noqa: E501
        """Kolihestvo mediakampanii  # noqa: E501

        Metod predostavlaet kolihestvo [mediakampanii](/openapi/promotion#tag/Media/paths/~1adv~1v1~1advert/get) prodavca s gruppirovkoi po statusam.  <div class=\"description_limit\">     Maksimum 10 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v1_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """Kolihestvo mediakampanii  # noqa: E501

        Metod predostavlaet kolihestvo [mediakampanii](/openapi/promotion#tag/Media/paths/~1adv~1v1~1advert/get) prodavca s gruppirovkoi po statusam.  <div class=\"description_limit\">     Maksimum 10 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
