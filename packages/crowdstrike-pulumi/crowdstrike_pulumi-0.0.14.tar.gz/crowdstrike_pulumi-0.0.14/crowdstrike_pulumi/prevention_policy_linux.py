# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PreventionPolicyLinuxArgs', 'PreventionPolicyLinux']

@pulumi.input_type
class PreventionPolicyLinuxArgs:
    def __init__(__self__, *,
                 host_groups: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 ioa_rule_groups: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 cloud_anti_malware: Optional[pulumi.Input['PreventionPolicyLinuxCloudAntiMalwareArgs']] = None,
                 custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 drift_prevention: Optional[pulumi.Input[builtins.bool]] = None,
                 email_protocol_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 extended_command_line_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 filesystem_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 ftp_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 http_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 memory_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 network_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 on_write_script_file_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine: Optional[pulumi.Input[builtins.bool]] = None,
                 script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
                 sensor_anti_malware: Optional[pulumi.Input['PreventionPolicyLinuxSensorAntiMalwareArgs']] = None,
                 sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 tls_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a PreventionPolicyLinux resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        :param pulumi.Input['PreventionPolicyLinuxCloudAntiMalwareArgs'] cloud_anti_malware: Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        :param pulumi.Input[builtins.bool] custom_blocking: Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        :param pulumi.Input[builtins.str] description: Description of the prevention policy.
        :param pulumi.Input[builtins.bool] drift_prevention: Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
        :param pulumi.Input[builtins.bool] email_protocol_visibility: Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
        :param pulumi.Input[builtins.bool] enabled: Enable the prevention policy.
        :param pulumi.Input[builtins.bool] extended_command_line_visibility: Whether to enable the setting. Allows the sensor to monitor full CLI commands that include pipes and redirects. This is applicable only for User mode.
        :param pulumi.Input[builtins.bool] filesystem_visibility: Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
        :param pulumi.Input[builtins.bool] ftp_visibility: Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
        :param pulumi.Input[builtins.bool] http_visibility: Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
        :param pulumi.Input[builtins.bool] memory_visibility: Whether to enable the setting. When enabled, the sensor will inspect memory-related operations: mmap, mprotect, ptrace and reading/writing remote process memory and produce events.
        :param pulumi.Input[builtins.str] name: Name of the prevention policy.
        :param pulumi.Input[builtins.bool] network_visibility: Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
        :param pulumi.Input[builtins.bool] on_write_script_file_visibility: Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        :param pulumi.Input[builtins.bool] prevent_suspicious_processes: Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        :param pulumi.Input[builtins.bool] quarantine: Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        :param pulumi.Input[builtins.bool] script_based_execution_monitoring: Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        :param pulumi.Input['PreventionPolicyLinuxSensorAntiMalwareArgs'] sensor_anti_malware: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        :param pulumi.Input[builtins.bool] sensor_tampering_protection: Whether to enable the setting. Block attempts to tamper with the sensor by protecting critical components and resources. If disabled, the sensor still creates detections for tampering attempts but will not prevent the activity from occurring. Disabling is not recommended.
        :param pulumi.Input[builtins.bool] tls_visibility: Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
        :param pulumi.Input[builtins.bool] upload_unknown_detection_related_executables: Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] upload_unknown_executables: Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        """
        pulumi.set(__self__, "host_groups", host_groups)
        pulumi.set(__self__, "ioa_rule_groups", ioa_rule_groups)
        if cloud_anti_malware is not None:
            pulumi.set(__self__, "cloud_anti_malware", cloud_anti_malware)
        if custom_blocking is not None:
            pulumi.set(__self__, "custom_blocking", custom_blocking)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drift_prevention is not None:
            pulumi.set(__self__, "drift_prevention", drift_prevention)
        if email_protocol_visibility is not None:
            pulumi.set(__self__, "email_protocol_visibility", email_protocol_visibility)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if extended_command_line_visibility is not None:
            pulumi.set(__self__, "extended_command_line_visibility", extended_command_line_visibility)
        if filesystem_visibility is not None:
            pulumi.set(__self__, "filesystem_visibility", filesystem_visibility)
        if ftp_visibility is not None:
            pulumi.set(__self__, "ftp_visibility", ftp_visibility)
        if http_visibility is not None:
            pulumi.set(__self__, "http_visibility", http_visibility)
        if memory_visibility is not None:
            pulumi.set(__self__, "memory_visibility", memory_visibility)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_visibility is not None:
            pulumi.set(__self__, "network_visibility", network_visibility)
        if on_write_script_file_visibility is not None:
            pulumi.set(__self__, "on_write_script_file_visibility", on_write_script_file_visibility)
        if prevent_suspicious_processes is not None:
            pulumi.set(__self__, "prevent_suspicious_processes", prevent_suspicious_processes)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if script_based_execution_monitoring is not None:
            pulumi.set(__self__, "script_based_execution_monitoring", script_based_execution_monitoring)
        if sensor_anti_malware is not None:
            pulumi.set(__self__, "sensor_anti_malware", sensor_anti_malware)
        if sensor_tampering_protection is not None:
            pulumi.set(__self__, "sensor_tampering_protection", sensor_tampering_protection)
        if tls_visibility is not None:
            pulumi.set(__self__, "tls_visibility", tls_visibility)
        if upload_unknown_detection_related_executables is not None:
            pulumi.set(__self__, "upload_unknown_detection_related_executables", upload_unknown_detection_related_executables)
        if upload_unknown_executables is not None:
            pulumi.set(__self__, "upload_unknown_executables", upload_unknown_executables)

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        Host Group ids to attach to the prevention policy.
        """
        return pulumi.get(self, "host_groups")

    @host_groups.setter
    def host_groups(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "host_groups", value)

    @property
    @pulumi.getter(name="ioaRuleGroups")
    def ioa_rule_groups(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        IOA Rule Group to attach to the prevention policy.
        """
        return pulumi.get(self, "ioa_rule_groups")

    @ioa_rule_groups.setter
    def ioa_rule_groups(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ioa_rule_groups", value)

    @property
    @pulumi.getter(name="cloudAntiMalware")
    def cloud_anti_malware(self) -> Optional[pulumi.Input['PreventionPolicyLinuxCloudAntiMalwareArgs']]:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        """
        return pulumi.get(self, "cloud_anti_malware")

    @cloud_anti_malware.setter
    def cloud_anti_malware(self, value: Optional[pulumi.Input['PreventionPolicyLinuxCloudAntiMalwareArgs']]):
        pulumi.set(self, "cloud_anti_malware", value)

    @property
    @pulumi.getter(name="customBlocking")
    def custom_blocking(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        """
        return pulumi.get(self, "custom_blocking")

    @custom_blocking.setter
    def custom_blocking(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "custom_blocking", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of the prevention policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="driftPrevention")
    def drift_prevention(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
        """
        return pulumi.get(self, "drift_prevention")

    @drift_prevention.setter
    def drift_prevention(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "drift_prevention", value)

    @property
    @pulumi.getter(name="emailProtocolVisibility")
    def email_protocol_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
        """
        return pulumi.get(self, "email_protocol_visibility")

    @email_protocol_visibility.setter
    def email_protocol_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "email_protocol_visibility", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable the prevention policy.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="extendedCommandLineVisibility")
    def extended_command_line_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor full CLI commands that include pipes and redirects. This is applicable only for User mode.
        """
        return pulumi.get(self, "extended_command_line_visibility")

    @extended_command_line_visibility.setter
    def extended_command_line_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "extended_command_line_visibility", value)

    @property
    @pulumi.getter(name="filesystemVisibility")
    def filesystem_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
        """
        return pulumi.get(self, "filesystem_visibility")

    @filesystem_visibility.setter
    def filesystem_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "filesystem_visibility", value)

    @property
    @pulumi.getter(name="ftpVisibility")
    def ftp_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
        """
        return pulumi.get(self, "ftp_visibility")

    @ftp_visibility.setter
    def ftp_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ftp_visibility", value)

    @property
    @pulumi.getter(name="httpVisibility")
    def http_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
        """
        return pulumi.get(self, "http_visibility")

    @http_visibility.setter
    def http_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "http_visibility", value)

    @property
    @pulumi.getter(name="memoryVisibility")
    def memory_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. When enabled, the sensor will inspect memory-related operations: mmap, mprotect, ptrace and reading/writing remote process memory and produce events.
        """
        return pulumi.get(self, "memory_visibility")

    @memory_visibility.setter
    def memory_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "memory_visibility", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the prevention policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkVisibility")
    def network_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
        """
        return pulumi.get(self, "network_visibility")

    @network_visibility.setter
    def network_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "network_visibility", value)

    @property
    @pulumi.getter(name="onWriteScriptFileVisibility")
    def on_write_script_file_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        """
        return pulumi.get(self, "on_write_script_file_visibility")

    @on_write_script_file_visibility.setter
    def on_write_script_file_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "on_write_script_file_visibility", value)

    @property
    @pulumi.getter(name="preventSuspiciousProcesses")
    def prevent_suspicious_processes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        """
        return pulumi.get(self, "prevent_suspicious_processes")

    @prevent_suspicious_processes.setter
    def prevent_suspicious_processes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "prevent_suspicious_processes", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="scriptBasedExecutionMonitoring")
    def script_based_execution_monitoring(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        """
        return pulumi.get(self, "script_based_execution_monitoring")

    @script_based_execution_monitoring.setter
    def script_based_execution_monitoring(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "script_based_execution_monitoring", value)

    @property
    @pulumi.getter(name="sensorAntiMalware")
    def sensor_anti_malware(self) -> Optional[pulumi.Input['PreventionPolicyLinuxSensorAntiMalwareArgs']]:
        """
        For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        """
        return pulumi.get(self, "sensor_anti_malware")

    @sensor_anti_malware.setter
    def sensor_anti_malware(self, value: Optional[pulumi.Input['PreventionPolicyLinuxSensorAntiMalwareArgs']]):
        pulumi.set(self, "sensor_anti_malware", value)

    @property
    @pulumi.getter(name="sensorTamperingProtection")
    def sensor_tampering_protection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block attempts to tamper with the sensor by protecting critical components and resources. If disabled, the sensor still creates detections for tampering attempts but will not prevent the activity from occurring. Disabling is not recommended.
        """
        return pulumi.get(self, "sensor_tampering_protection")

    @sensor_tampering_protection.setter
    def sensor_tampering_protection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sensor_tampering_protection", value)

    @property
    @pulumi.getter(name="tlsVisibility")
    def tls_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
        """
        return pulumi.get(self, "tls_visibility")

    @tls_visibility.setter
    def tls_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "tls_visibility", value)

    @property
    @pulumi.getter(name="uploadUnknownDetectionRelatedExecutables")
    def upload_unknown_detection_related_executables(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_detection_related_executables")

    @upload_unknown_detection_related_executables.setter
    def upload_unknown_detection_related_executables(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upload_unknown_detection_related_executables", value)

    @property
    @pulumi.getter(name="uploadUnknownExecutables")
    def upload_unknown_executables(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_executables")

    @upload_unknown_executables.setter
    def upload_unknown_executables(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upload_unknown_executables", value)


@pulumi.input_type
class _PreventionPolicyLinuxState:
    def __init__(__self__, *,
                 cloud_anti_malware: Optional[pulumi.Input['PreventionPolicyLinuxCloudAntiMalwareArgs']] = None,
                 custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 drift_prevention: Optional[pulumi.Input[builtins.bool]] = None,
                 email_protocol_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 extended_command_line_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 filesystem_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 ftp_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 http_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 last_updated: Optional[pulumi.Input[builtins.str]] = None,
                 memory_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 network_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 on_write_script_file_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine: Optional[pulumi.Input[builtins.bool]] = None,
                 script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
                 sensor_anti_malware: Optional[pulumi.Input['PreventionPolicyLinuxSensorAntiMalwareArgs']] = None,
                 sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 tls_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering PreventionPolicyLinux resources.
        :param pulumi.Input['PreventionPolicyLinuxCloudAntiMalwareArgs'] cloud_anti_malware: Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        :param pulumi.Input[builtins.bool] custom_blocking: Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        :param pulumi.Input[builtins.str] description: Description of the prevention policy.
        :param pulumi.Input[builtins.bool] drift_prevention: Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
        :param pulumi.Input[builtins.bool] email_protocol_visibility: Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
        :param pulumi.Input[builtins.bool] enabled: Enable the prevention policy.
        :param pulumi.Input[builtins.bool] extended_command_line_visibility: Whether to enable the setting. Allows the sensor to monitor full CLI commands that include pipes and redirects. This is applicable only for User mode.
        :param pulumi.Input[builtins.bool] filesystem_visibility: Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
        :param pulumi.Input[builtins.bool] ftp_visibility: Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] http_visibility: Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] memory_visibility: Whether to enable the setting. When enabled, the sensor will inspect memory-related operations: mmap, mprotect, ptrace and reading/writing remote process memory and produce events.
        :param pulumi.Input[builtins.str] name: Name of the prevention policy.
        :param pulumi.Input[builtins.bool] network_visibility: Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
        :param pulumi.Input[builtins.bool] on_write_script_file_visibility: Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        :param pulumi.Input[builtins.bool] prevent_suspicious_processes: Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        :param pulumi.Input[builtins.bool] quarantine: Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        :param pulumi.Input[builtins.bool] script_based_execution_monitoring: Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        :param pulumi.Input['PreventionPolicyLinuxSensorAntiMalwareArgs'] sensor_anti_malware: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        :param pulumi.Input[builtins.bool] sensor_tampering_protection: Whether to enable the setting. Block attempts to tamper with the sensor by protecting critical components and resources. If disabled, the sensor still creates detections for tampering attempts but will not prevent the activity from occurring. Disabling is not recommended.
        :param pulumi.Input[builtins.bool] tls_visibility: Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
        :param pulumi.Input[builtins.bool] upload_unknown_detection_related_executables: Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] upload_unknown_executables: Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        """
        if cloud_anti_malware is not None:
            pulumi.set(__self__, "cloud_anti_malware", cloud_anti_malware)
        if custom_blocking is not None:
            pulumi.set(__self__, "custom_blocking", custom_blocking)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drift_prevention is not None:
            pulumi.set(__self__, "drift_prevention", drift_prevention)
        if email_protocol_visibility is not None:
            pulumi.set(__self__, "email_protocol_visibility", email_protocol_visibility)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if extended_command_line_visibility is not None:
            pulumi.set(__self__, "extended_command_line_visibility", extended_command_line_visibility)
        if filesystem_visibility is not None:
            pulumi.set(__self__, "filesystem_visibility", filesystem_visibility)
        if ftp_visibility is not None:
            pulumi.set(__self__, "ftp_visibility", ftp_visibility)
        if host_groups is not None:
            pulumi.set(__self__, "host_groups", host_groups)
        if http_visibility is not None:
            pulumi.set(__self__, "http_visibility", http_visibility)
        if ioa_rule_groups is not None:
            pulumi.set(__self__, "ioa_rule_groups", ioa_rule_groups)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if memory_visibility is not None:
            pulumi.set(__self__, "memory_visibility", memory_visibility)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_visibility is not None:
            pulumi.set(__self__, "network_visibility", network_visibility)
        if on_write_script_file_visibility is not None:
            pulumi.set(__self__, "on_write_script_file_visibility", on_write_script_file_visibility)
        if prevent_suspicious_processes is not None:
            pulumi.set(__self__, "prevent_suspicious_processes", prevent_suspicious_processes)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if script_based_execution_monitoring is not None:
            pulumi.set(__self__, "script_based_execution_monitoring", script_based_execution_monitoring)
        if sensor_anti_malware is not None:
            pulumi.set(__self__, "sensor_anti_malware", sensor_anti_malware)
        if sensor_tampering_protection is not None:
            pulumi.set(__self__, "sensor_tampering_protection", sensor_tampering_protection)
        if tls_visibility is not None:
            pulumi.set(__self__, "tls_visibility", tls_visibility)
        if upload_unknown_detection_related_executables is not None:
            pulumi.set(__self__, "upload_unknown_detection_related_executables", upload_unknown_detection_related_executables)
        if upload_unknown_executables is not None:
            pulumi.set(__self__, "upload_unknown_executables", upload_unknown_executables)

    @property
    @pulumi.getter(name="cloudAntiMalware")
    def cloud_anti_malware(self) -> Optional[pulumi.Input['PreventionPolicyLinuxCloudAntiMalwareArgs']]:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        """
        return pulumi.get(self, "cloud_anti_malware")

    @cloud_anti_malware.setter
    def cloud_anti_malware(self, value: Optional[pulumi.Input['PreventionPolicyLinuxCloudAntiMalwareArgs']]):
        pulumi.set(self, "cloud_anti_malware", value)

    @property
    @pulumi.getter(name="customBlocking")
    def custom_blocking(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        """
        return pulumi.get(self, "custom_blocking")

    @custom_blocking.setter
    def custom_blocking(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "custom_blocking", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of the prevention policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="driftPrevention")
    def drift_prevention(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
        """
        return pulumi.get(self, "drift_prevention")

    @drift_prevention.setter
    def drift_prevention(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "drift_prevention", value)

    @property
    @pulumi.getter(name="emailProtocolVisibility")
    def email_protocol_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
        """
        return pulumi.get(self, "email_protocol_visibility")

    @email_protocol_visibility.setter
    def email_protocol_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "email_protocol_visibility", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable the prevention policy.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="extendedCommandLineVisibility")
    def extended_command_line_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor full CLI commands that include pipes and redirects. This is applicable only for User mode.
        """
        return pulumi.get(self, "extended_command_line_visibility")

    @extended_command_line_visibility.setter
    def extended_command_line_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "extended_command_line_visibility", value)

    @property
    @pulumi.getter(name="filesystemVisibility")
    def filesystem_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
        """
        return pulumi.get(self, "filesystem_visibility")

    @filesystem_visibility.setter
    def filesystem_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "filesystem_visibility", value)

    @property
    @pulumi.getter(name="ftpVisibility")
    def ftp_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
        """
        return pulumi.get(self, "ftp_visibility")

    @ftp_visibility.setter
    def ftp_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ftp_visibility", value)

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Host Group ids to attach to the prevention policy.
        """
        return pulumi.get(self, "host_groups")

    @host_groups.setter
    def host_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "host_groups", value)

    @property
    @pulumi.getter(name="httpVisibility")
    def http_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
        """
        return pulumi.get(self, "http_visibility")

    @http_visibility.setter
    def http_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "http_visibility", value)

    @property
    @pulumi.getter(name="ioaRuleGroups")
    def ioa_rule_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        IOA Rule Group to attach to the prevention policy.
        """
        return pulumi.get(self, "ioa_rule_groups")

    @ioa_rule_groups.setter
    def ioa_rule_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ioa_rule_groups", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter(name="memoryVisibility")
    def memory_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. When enabled, the sensor will inspect memory-related operations: mmap, mprotect, ptrace and reading/writing remote process memory and produce events.
        """
        return pulumi.get(self, "memory_visibility")

    @memory_visibility.setter
    def memory_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "memory_visibility", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the prevention policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkVisibility")
    def network_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
        """
        return pulumi.get(self, "network_visibility")

    @network_visibility.setter
    def network_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "network_visibility", value)

    @property
    @pulumi.getter(name="onWriteScriptFileVisibility")
    def on_write_script_file_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        """
        return pulumi.get(self, "on_write_script_file_visibility")

    @on_write_script_file_visibility.setter
    def on_write_script_file_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "on_write_script_file_visibility", value)

    @property
    @pulumi.getter(name="preventSuspiciousProcesses")
    def prevent_suspicious_processes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        """
        return pulumi.get(self, "prevent_suspicious_processes")

    @prevent_suspicious_processes.setter
    def prevent_suspicious_processes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "prevent_suspicious_processes", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="scriptBasedExecutionMonitoring")
    def script_based_execution_monitoring(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        """
        return pulumi.get(self, "script_based_execution_monitoring")

    @script_based_execution_monitoring.setter
    def script_based_execution_monitoring(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "script_based_execution_monitoring", value)

    @property
    @pulumi.getter(name="sensorAntiMalware")
    def sensor_anti_malware(self) -> Optional[pulumi.Input['PreventionPolicyLinuxSensorAntiMalwareArgs']]:
        """
        For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        """
        return pulumi.get(self, "sensor_anti_malware")

    @sensor_anti_malware.setter
    def sensor_anti_malware(self, value: Optional[pulumi.Input['PreventionPolicyLinuxSensorAntiMalwareArgs']]):
        pulumi.set(self, "sensor_anti_malware", value)

    @property
    @pulumi.getter(name="sensorTamperingProtection")
    def sensor_tampering_protection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Block attempts to tamper with the sensor by protecting critical components and resources. If disabled, the sensor still creates detections for tampering attempts but will not prevent the activity from occurring. Disabling is not recommended.
        """
        return pulumi.get(self, "sensor_tampering_protection")

    @sensor_tampering_protection.setter
    def sensor_tampering_protection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sensor_tampering_protection", value)

    @property
    @pulumi.getter(name="tlsVisibility")
    def tls_visibility(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
        """
        return pulumi.get(self, "tls_visibility")

    @tls_visibility.setter
    def tls_visibility(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "tls_visibility", value)

    @property
    @pulumi.getter(name="uploadUnknownDetectionRelatedExecutables")
    def upload_unknown_detection_related_executables(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_detection_related_executables")

    @upload_unknown_detection_related_executables.setter
    def upload_unknown_detection_related_executables(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upload_unknown_detection_related_executables", value)

    @property
    @pulumi.getter(name="uploadUnknownExecutables")
    def upload_unknown_executables(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_executables")

    @upload_unknown_executables.setter
    def upload_unknown_executables(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "upload_unknown_executables", value)


class PreventionPolicyLinux(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyLinuxCloudAntiMalwareArgs', 'PreventionPolicyLinuxCloudAntiMalwareArgsDict']]] = None,
                 custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 drift_prevention: Optional[pulumi.Input[builtins.bool]] = None,
                 email_protocol_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 extended_command_line_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 filesystem_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 ftp_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 http_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 memory_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 network_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 on_write_script_file_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine: Optional[pulumi.Input[builtins.bool]] = None,
                 script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
                 sensor_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyLinuxSensorAntiMalwareArgs', 'PreventionPolicyLinuxSensorAntiMalwareArgsDict']]] = None,
                 sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 tls_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        This resource allows you to manage prevention policies for Linux hosts. Prevention policies allow you to manage what activity will trigger detections and preventions on your hosts.

        ## API Scopes

        The following API scopes are required:

        - Prevention policies | Read & Write

        ## Example Usage

        ```python
        import pulumi
        import crowdstrike_pulumi as crowdstrike

        example = crowdstrike.PreventionPolicyLinux("example",
            enabled=True,
            description="Made with Pulumi",
            host_groups=[],
            ioa_rule_groups=[],
            cloud_anti_malware={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            sensor_anti_malware={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            quarantine=True,
            custom_blocking=True,
            prevent_suspicious_processes=True,
            script_based_execution_monitoring=True,
            upload_unknown_executables=True,
            upload_unknown_detection_related_executables=True,
            drift_prevention=True,
            email_protocol_visibility=True,
            filesystem_visibility=True,
            ftp_visibility=True,
            http_visibility=True,
            network_visibility=True,
            tls_visibility=True,
            sensor_tampering_protection=True,
            on_write_script_file_visibility=True,
            memory_visibility=True,
            extended_command_line_visibility=True)
        pulumi.export("preventionPolicyLinux", example)
        ```

        ## Import

        prevention policy can be imported by specifying the policy id.

        ```sh
        $ pulumi import crowdstrike:index/preventionPolicyLinux:PreventionPolicyLinux example 7fb858a949034a0cbca175f660f1e769
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['PreventionPolicyLinuxCloudAntiMalwareArgs', 'PreventionPolicyLinuxCloudAntiMalwareArgsDict']] cloud_anti_malware: Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        :param pulumi.Input[builtins.bool] custom_blocking: Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        :param pulumi.Input[builtins.str] description: Description of the prevention policy.
        :param pulumi.Input[builtins.bool] drift_prevention: Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
        :param pulumi.Input[builtins.bool] email_protocol_visibility: Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
        :param pulumi.Input[builtins.bool] enabled: Enable the prevention policy.
        :param pulumi.Input[builtins.bool] extended_command_line_visibility: Whether to enable the setting. Allows the sensor to monitor full CLI commands that include pipes and redirects. This is applicable only for User mode.
        :param pulumi.Input[builtins.bool] filesystem_visibility: Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
        :param pulumi.Input[builtins.bool] ftp_visibility: Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] http_visibility: Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] memory_visibility: Whether to enable the setting. When enabled, the sensor will inspect memory-related operations: mmap, mprotect, ptrace and reading/writing remote process memory and produce events.
        :param pulumi.Input[builtins.str] name: Name of the prevention policy.
        :param pulumi.Input[builtins.bool] network_visibility: Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
        :param pulumi.Input[builtins.bool] on_write_script_file_visibility: Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        :param pulumi.Input[builtins.bool] prevent_suspicious_processes: Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        :param pulumi.Input[builtins.bool] quarantine: Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        :param pulumi.Input[builtins.bool] script_based_execution_monitoring: Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        :param pulumi.Input[Union['PreventionPolicyLinuxSensorAntiMalwareArgs', 'PreventionPolicyLinuxSensorAntiMalwareArgsDict']] sensor_anti_malware: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        :param pulumi.Input[builtins.bool] sensor_tampering_protection: Whether to enable the setting. Block attempts to tamper with the sensor by protecting critical components and resources. If disabled, the sensor still creates detections for tampering attempts but will not prevent the activity from occurring. Disabling is not recommended.
        :param pulumi.Input[builtins.bool] tls_visibility: Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
        :param pulumi.Input[builtins.bool] upload_unknown_detection_related_executables: Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] upload_unknown_executables: Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PreventionPolicyLinuxArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to manage prevention policies for Linux hosts. Prevention policies allow you to manage what activity will trigger detections and preventions on your hosts.

        ## API Scopes

        The following API scopes are required:

        - Prevention policies | Read & Write

        ## Example Usage

        ```python
        import pulumi
        import crowdstrike_pulumi as crowdstrike

        example = crowdstrike.PreventionPolicyLinux("example",
            enabled=True,
            description="Made with Pulumi",
            host_groups=[],
            ioa_rule_groups=[],
            cloud_anti_malware={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            sensor_anti_malware={
                "detection": "MODERATE",
                "prevention": "CAUTIOUS",
            },
            quarantine=True,
            custom_blocking=True,
            prevent_suspicious_processes=True,
            script_based_execution_monitoring=True,
            upload_unknown_executables=True,
            upload_unknown_detection_related_executables=True,
            drift_prevention=True,
            email_protocol_visibility=True,
            filesystem_visibility=True,
            ftp_visibility=True,
            http_visibility=True,
            network_visibility=True,
            tls_visibility=True,
            sensor_tampering_protection=True,
            on_write_script_file_visibility=True,
            memory_visibility=True,
            extended_command_line_visibility=True)
        pulumi.export("preventionPolicyLinux", example)
        ```

        ## Import

        prevention policy can be imported by specifying the policy id.

        ```sh
        $ pulumi import crowdstrike:index/preventionPolicyLinux:PreventionPolicyLinux example 7fb858a949034a0cbca175f660f1e769
        ```

        :param str resource_name: The name of the resource.
        :param PreventionPolicyLinuxArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PreventionPolicyLinuxArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyLinuxCloudAntiMalwareArgs', 'PreventionPolicyLinuxCloudAntiMalwareArgsDict']]] = None,
                 custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 drift_prevention: Optional[pulumi.Input[builtins.bool]] = None,
                 email_protocol_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 extended_command_line_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 filesystem_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 ftp_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 http_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 memory_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 network_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 on_write_script_file_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
                 quarantine: Optional[pulumi.Input[builtins.bool]] = None,
                 script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
                 sensor_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyLinuxSensorAntiMalwareArgs', 'PreventionPolicyLinuxSensorAntiMalwareArgsDict']]] = None,
                 sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
                 tls_visibility: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PreventionPolicyLinuxArgs.__new__(PreventionPolicyLinuxArgs)

            __props__.__dict__["cloud_anti_malware"] = cloud_anti_malware
            __props__.__dict__["custom_blocking"] = custom_blocking
            __props__.__dict__["description"] = description
            __props__.__dict__["drift_prevention"] = drift_prevention
            __props__.__dict__["email_protocol_visibility"] = email_protocol_visibility
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["extended_command_line_visibility"] = extended_command_line_visibility
            __props__.__dict__["filesystem_visibility"] = filesystem_visibility
            __props__.__dict__["ftp_visibility"] = ftp_visibility
            if host_groups is None and not opts.urn:
                raise TypeError("Missing required property 'host_groups'")
            __props__.__dict__["host_groups"] = host_groups
            __props__.__dict__["http_visibility"] = http_visibility
            if ioa_rule_groups is None and not opts.urn:
                raise TypeError("Missing required property 'ioa_rule_groups'")
            __props__.__dict__["ioa_rule_groups"] = ioa_rule_groups
            __props__.__dict__["memory_visibility"] = memory_visibility
            __props__.__dict__["name"] = name
            __props__.__dict__["network_visibility"] = network_visibility
            __props__.__dict__["on_write_script_file_visibility"] = on_write_script_file_visibility
            __props__.__dict__["prevent_suspicious_processes"] = prevent_suspicious_processes
            __props__.__dict__["quarantine"] = quarantine
            __props__.__dict__["script_based_execution_monitoring"] = script_based_execution_monitoring
            __props__.__dict__["sensor_anti_malware"] = sensor_anti_malware
            __props__.__dict__["sensor_tampering_protection"] = sensor_tampering_protection
            __props__.__dict__["tls_visibility"] = tls_visibility
            __props__.__dict__["upload_unknown_detection_related_executables"] = upload_unknown_detection_related_executables
            __props__.__dict__["upload_unknown_executables"] = upload_unknown_executables
            __props__.__dict__["last_updated"] = None
        super(PreventionPolicyLinux, __self__).__init__(
            'crowdstrike:index/preventionPolicyLinux:PreventionPolicyLinux',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloud_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyLinuxCloudAntiMalwareArgs', 'PreventionPolicyLinuxCloudAntiMalwareArgsDict']]] = None,
            custom_blocking: Optional[pulumi.Input[builtins.bool]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            drift_prevention: Optional[pulumi.Input[builtins.bool]] = None,
            email_protocol_visibility: Optional[pulumi.Input[builtins.bool]] = None,
            enabled: Optional[pulumi.Input[builtins.bool]] = None,
            extended_command_line_visibility: Optional[pulumi.Input[builtins.bool]] = None,
            filesystem_visibility: Optional[pulumi.Input[builtins.bool]] = None,
            ftp_visibility: Optional[pulumi.Input[builtins.bool]] = None,
            host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            http_visibility: Optional[pulumi.Input[builtins.bool]] = None,
            ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            last_updated: Optional[pulumi.Input[builtins.str]] = None,
            memory_visibility: Optional[pulumi.Input[builtins.bool]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            network_visibility: Optional[pulumi.Input[builtins.bool]] = None,
            on_write_script_file_visibility: Optional[pulumi.Input[builtins.bool]] = None,
            prevent_suspicious_processes: Optional[pulumi.Input[builtins.bool]] = None,
            quarantine: Optional[pulumi.Input[builtins.bool]] = None,
            script_based_execution_monitoring: Optional[pulumi.Input[builtins.bool]] = None,
            sensor_anti_malware: Optional[pulumi.Input[Union['PreventionPolicyLinuxSensorAntiMalwareArgs', 'PreventionPolicyLinuxSensorAntiMalwareArgsDict']]] = None,
            sensor_tampering_protection: Optional[pulumi.Input[builtins.bool]] = None,
            tls_visibility: Optional[pulumi.Input[builtins.bool]] = None,
            upload_unknown_detection_related_executables: Optional[pulumi.Input[builtins.bool]] = None,
            upload_unknown_executables: Optional[pulumi.Input[builtins.bool]] = None) -> 'PreventionPolicyLinux':
        """
        Get an existing PreventionPolicyLinux resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['PreventionPolicyLinuxCloudAntiMalwareArgs', 'PreventionPolicyLinuxCloudAntiMalwareArgsDict']] cloud_anti_malware: Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        :param pulumi.Input[builtins.bool] custom_blocking: Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        :param pulumi.Input[builtins.str] description: Description of the prevention policy.
        :param pulumi.Input[builtins.bool] drift_prevention: Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
        :param pulumi.Input[builtins.bool] email_protocol_visibility: Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
        :param pulumi.Input[builtins.bool] enabled: Enable the prevention policy.
        :param pulumi.Input[builtins.bool] extended_command_line_visibility: Whether to enable the setting. Allows the sensor to monitor full CLI commands that include pipes and redirects. This is applicable only for User mode.
        :param pulumi.Input[builtins.bool] filesystem_visibility: Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
        :param pulumi.Input[builtins.bool] ftp_visibility: Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] http_visibility: Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        :param pulumi.Input[builtins.bool] memory_visibility: Whether to enable the setting. When enabled, the sensor will inspect memory-related operations: mmap, mprotect, ptrace and reading/writing remote process memory and produce events.
        :param pulumi.Input[builtins.str] name: Name of the prevention policy.
        :param pulumi.Input[builtins.bool] network_visibility: Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
        :param pulumi.Input[builtins.bool] on_write_script_file_visibility: Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        :param pulumi.Input[builtins.bool] prevent_suspicious_processes: Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        :param pulumi.Input[builtins.bool] quarantine: Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        :param pulumi.Input[builtins.bool] script_based_execution_monitoring: Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        :param pulumi.Input[Union['PreventionPolicyLinuxSensorAntiMalwareArgs', 'PreventionPolicyLinuxSensorAntiMalwareArgsDict']] sensor_anti_malware: For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        :param pulumi.Input[builtins.bool] sensor_tampering_protection: Whether to enable the setting. Block attempts to tamper with the sensor by protecting critical components and resources. If disabled, the sensor still creates detections for tampering attempts but will not prevent the activity from occurring. Disabling is not recommended.
        :param pulumi.Input[builtins.bool] tls_visibility: Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
        :param pulumi.Input[builtins.bool] upload_unknown_detection_related_executables: Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        :param pulumi.Input[builtins.bool] upload_unknown_executables: Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PreventionPolicyLinuxState.__new__(_PreventionPolicyLinuxState)

        __props__.__dict__["cloud_anti_malware"] = cloud_anti_malware
        __props__.__dict__["custom_blocking"] = custom_blocking
        __props__.__dict__["description"] = description
        __props__.__dict__["drift_prevention"] = drift_prevention
        __props__.__dict__["email_protocol_visibility"] = email_protocol_visibility
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["extended_command_line_visibility"] = extended_command_line_visibility
        __props__.__dict__["filesystem_visibility"] = filesystem_visibility
        __props__.__dict__["ftp_visibility"] = ftp_visibility
        __props__.__dict__["host_groups"] = host_groups
        __props__.__dict__["http_visibility"] = http_visibility
        __props__.__dict__["ioa_rule_groups"] = ioa_rule_groups
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["memory_visibility"] = memory_visibility
        __props__.__dict__["name"] = name
        __props__.__dict__["network_visibility"] = network_visibility
        __props__.__dict__["on_write_script_file_visibility"] = on_write_script_file_visibility
        __props__.__dict__["prevent_suspicious_processes"] = prevent_suspicious_processes
        __props__.__dict__["quarantine"] = quarantine
        __props__.__dict__["script_based_execution_monitoring"] = script_based_execution_monitoring
        __props__.__dict__["sensor_anti_malware"] = sensor_anti_malware
        __props__.__dict__["sensor_tampering_protection"] = sensor_tampering_protection
        __props__.__dict__["tls_visibility"] = tls_visibility
        __props__.__dict__["upload_unknown_detection_related_executables"] = upload_unknown_detection_related_executables
        __props__.__dict__["upload_unknown_executables"] = upload_unknown_executables
        return PreventionPolicyLinux(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloudAntiMalware")
    def cloud_anti_malware(self) -> pulumi.Output['outputs.PreventionPolicyLinuxCloudAntiMalware']:
        """
        Use cloud-based machine learning informed by global analysis of executables to detect and prevent known malware for your online hosts.
        """
        return pulumi.get(self, "cloud_anti_malware")

    @property
    @pulumi.getter(name="customBlocking")
    def custom_blocking(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Block processes matching hashes that you add to IOC Management with the action set to "Block" or "Block, hide detection".
        """
        return pulumi.get(self, "custom_blocking")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Description of the prevention policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="driftPrevention")
    def drift_prevention(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Block new processes originating from files written in a container. This prevents a container from drifting from its immutable runtime state.
        """
        return pulumi.get(self, "drift_prevention")

    @property
    @pulumi.getter(name="emailProtocolVisibility")
    def email_protocol_visibility(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Allows the sensor to monitor SMTP, IMAP, and POP3 traffic for malicious patterns and improved detections.
        """
        return pulumi.get(self, "email_protocol_visibility")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Enable the prevention policy.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="extendedCommandLineVisibility")
    def extended_command_line_visibility(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Allows the sensor to monitor full CLI commands that include pipes and redirects. This is applicable only for User mode.
        """
        return pulumi.get(self, "extended_command_line_visibility")

    @property
    @pulumi.getter(name="filesystemVisibility")
    def filesystem_visibility(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Allows the sensor to monitor filesystem activity for additional telemetry and improved detections.
        """
        return pulumi.get(self, "filesystem_visibility")

    @property
    @pulumi.getter(name="ftpVisibility")
    def ftp_visibility(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Allows the sensor to monitor unencrypted FTP traffic for malicious patterns and improved detections.
        """
        return pulumi.get(self, "ftp_visibility")

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Host Group ids to attach to the prevention policy.
        """
        return pulumi.get(self, "host_groups")

    @property
    @pulumi.getter(name="httpVisibility")
    def http_visibility(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Allows the sensor to monitor unencrypted HTTP traffic for malicious patterns and improved detections.
        """
        return pulumi.get(self, "http_visibility")

    @property
    @pulumi.getter(name="ioaRuleGroups")
    def ioa_rule_groups(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        IOA Rule Group to attach to the prevention policy.
        """
        return pulumi.get(self, "ioa_rule_groups")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter(name="memoryVisibility")
    def memory_visibility(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. When enabled, the sensor will inspect memory-related operations: mmap, mprotect, ptrace and reading/writing remote process memory and produce events.
        """
        return pulumi.get(self, "memory_visibility")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the prevention policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkVisibility")
    def network_visibility(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Allows the sensor to monitor network activity for additional telemetry and improved detections.
        """
        return pulumi.get(self, "network_visibility")

    @property
    @pulumi.getter(name="onWriteScriptFileVisibility")
    def on_write_script_file_visibility(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Provides improved visibility into various script files being written to disk in addition to clouding a portion of their content.
        """
        return pulumi.get(self, "on_write_script_file_visibility")

    @property
    @pulumi.getter(name="preventSuspiciousProcesses")
    def prevent_suspicious_processes(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Block processes that CrowdStrike analysts classify as suspicious. These are focused on dynamic IOAs, such as malware, exploits and other threats.
        """
        return pulumi.get(self, "prevent_suspicious_processes")

    @property
    @pulumi.getter
    def quarantine(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Quarantine executable files after theyâ€™re prevented by NGAV. When this is enabled, we recommend setting anti-malware prevention levels to Moderate or higher and not using other antivirus solutions.
        """
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="scriptBasedExecutionMonitoring")
    def script_based_execution_monitoring(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Provides visibility into suspicious scripts, including shell and other scripting languages.
        """
        return pulumi.get(self, "script_based_execution_monitoring")

    @property
    @pulumi.getter(name="sensorAntiMalware")
    def sensor_anti_malware(self) -> pulumi.Output['outputs.PreventionPolicyLinuxSensorAntiMalware']:
        """
        For offline and online hosts, use sensor-based machine learning to identify and analyze unknown executables as they run to detect and prevent malware.
        """
        return pulumi.get(self, "sensor_anti_malware")

    @property
    @pulumi.getter(name="sensorTamperingProtection")
    def sensor_tampering_protection(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Block attempts to tamper with the sensor by protecting critical components and resources. If disabled, the sensor still creates detections for tampering attempts but will not prevent the activity from occurring. Disabling is not recommended.
        """
        return pulumi.get(self, "sensor_tampering_protection")

    @property
    @pulumi.getter(name="tlsVisibility")
    def tls_visibility(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Allows the sensor to monitor TLS traffic for malicious patterns and improved detections.
        """
        return pulumi.get(self, "tls_visibility")

    @property
    @pulumi.getter(name="uploadUnknownDetectionRelatedExecutables")
    def upload_unknown_detection_related_executables(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Upload all unknown detection-related executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_detection_related_executables")

    @property
    @pulumi.getter(name="uploadUnknownExecutables")
    def upload_unknown_executables(self) -> pulumi.Output[builtins.bool]:
        """
        Whether to enable the setting. Upload all unknown executables for advanced analysis in the cloud.
        """
        return pulumi.get(self, "upload_unknown_executables")

