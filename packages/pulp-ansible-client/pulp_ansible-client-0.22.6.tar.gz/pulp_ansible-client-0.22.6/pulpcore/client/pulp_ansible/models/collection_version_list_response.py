# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulp_ansible.configuration import Configuration


class CollectionVersionListResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'str',
        'href': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'requires_ansible': 'str',
        'marks': 'list[str]'
    }

    attribute_map = {
        'version': 'version',
        'href': 'href',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'requires_ansible': 'requires_ansible',
        'marks': 'marks'
    }

    def __init__(self, version=None, href=None, created_at=None, updated_at=None, requires_ansible=None, marks=None, local_vars_configuration=None):  # noqa: E501
        """CollectionVersionListResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._href = None
        self._created_at = None
        self._updated_at = None
        self._requires_ansible = None
        self._marks = None
        self.discriminator = None

        self.version = version
        if href is not None:
            self.href = href
        self.created_at = created_at
        self.updated_at = updated_at
        self.requires_ansible = requires_ansible
        if marks is not None:
            self.marks = marks

    @property
    def version(self):
        """Gets the version of this CollectionVersionListResponse.  # noqa: E501


        :return: The version of this CollectionVersionListResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CollectionVersionListResponse.


        :param version: The version of this CollectionVersionListResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                version is not None and len(version) > 128):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `128`")  # noqa: E501

        self._version = version

    @property
    def href(self):
        """Gets the href of this CollectionVersionListResponse.  # noqa: E501

        Get href.  # noqa: E501

        :return: The href of this CollectionVersionListResponse.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this CollectionVersionListResponse.

        Get href.  # noqa: E501

        :param href: The href of this CollectionVersionListResponse.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def created_at(self):
        """Gets the created_at of this CollectionVersionListResponse.  # noqa: E501


        :return: The created_at of this CollectionVersionListResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CollectionVersionListResponse.


        :param created_at: The created_at of this CollectionVersionListResponse.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CollectionVersionListResponse.  # noqa: E501


        :return: The updated_at of this CollectionVersionListResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CollectionVersionListResponse.


        :param updated_at: The updated_at of this CollectionVersionListResponse.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def requires_ansible(self):
        """Gets the requires_ansible of this CollectionVersionListResponse.  # noqa: E501


        :return: The requires_ansible of this CollectionVersionListResponse.  # noqa: E501
        :rtype: str
        """
        return self._requires_ansible

    @requires_ansible.setter
    def requires_ansible(self, requires_ansible):
        """Sets the requires_ansible of this CollectionVersionListResponse.


        :param requires_ansible: The requires_ansible of this CollectionVersionListResponse.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                requires_ansible is not None and len(requires_ansible) > 255):
            raise ValueError("Invalid value for `requires_ansible`, length must be less than or equal to `255`")  # noqa: E501

        self._requires_ansible = requires_ansible

    @property
    def marks(self):
        """Gets the marks of this CollectionVersionListResponse.  # noqa: E501

        Get a list of mark values filtering only those in the current repo.  # noqa: E501

        :return: The marks of this CollectionVersionListResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._marks

    @marks.setter
    def marks(self, marks):
        """Sets the marks of this CollectionVersionListResponse.

        Get a list of mark values filtering only those in the current repo.  # noqa: E501

        :param marks: The marks of this CollectionVersionListResponse.  # noqa: E501
        :type: list[str]
        """

        self._marks = marks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionVersionListResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CollectionVersionListResponse):
            return True

        return self.to_dict() != other.to_dict()
