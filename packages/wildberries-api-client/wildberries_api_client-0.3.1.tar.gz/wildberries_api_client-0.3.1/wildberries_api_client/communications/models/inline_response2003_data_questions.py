# coding: utf-8

"""
    Obhenie s pokupatelami

    <div class=\"description_important\">       Uznat bolhe ob obhenii s pokupatelami mohno v <a href=\"https://seller.wildberries.ru/instructions/category/f7f6c465-dd12-422d-80a0-a6d9562115d5?goBackOption=prevRoute&categoryId=30817062-14cc-4a82-bc78-3600c2b0685b\">spravohnom centre</a> </div>  herez metody obhenia s pokupatelem vy mohete rabotat s:   1. [Voprosami](/openapi/user-communication#tag/Voprosy) i [otzyvami](/openapi/user-communication#tag/Otzyvy) pokupatelei   2. [hablonami otvetov](/openapi/user-communication#tag/Shablony-otvetov) na voprosy i otzyvy   3. [hatami s pokupatelami](/openapi/user-communication#tag/Chat-s-pokupatelyami)   4. [Zaavkami pokupatelei na vozvrat](/openapi/user-communication#tag/Vozvraty-pokupatelyami)   # noqa: E501

    OpenAPI spec version: communication
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2003DataQuestions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'text': 'str',
        'created_date': 'datetime',
        'state': 'str',
        'answer': 'InlineResponse2003DataAnswer',
        'product_details': 'InlineResponse2003DataProductDetails',
        'was_viewed': 'bool',
        'is_warned': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'text': 'text',
        'created_date': 'createdDate',
        'state': 'state',
        'answer': 'answer',
        'product_details': 'productDetails',
        'was_viewed': 'wasViewed',
        'is_warned': 'isWarned'
    }

    def __init__(self, id=None, text=None, created_date=None, state=None, answer=None, product_details=None, was_viewed=None, is_warned=None):  # noqa: E501
        """InlineResponse2003DataQuestions - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._text = None
        self._created_date = None
        self._state = None
        self._answer = None
        self._product_details = None
        self._was_viewed = None
        self._is_warned = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if text is not None:
            self.text = text
        if created_date is not None:
            self.created_date = created_date
        if state is not None:
            self.state = state
        if answer is not None:
            self.answer = answer
        if product_details is not None:
            self.product_details = product_details
        if was_viewed is not None:
            self.was_viewed = was_viewed
        if is_warned is not None:
            self.is_warned = is_warned

    @property
    def id(self):
        """Gets the id of this InlineResponse2003DataQuestions.  # noqa: E501

        id voprosa  # noqa: E501

        :return: The id of this InlineResponse2003DataQuestions.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2003DataQuestions.

        id voprosa  # noqa: E501

        :param id: The id of this InlineResponse2003DataQuestions.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def text(self):
        """Gets the text of this InlineResponse2003DataQuestions.  # noqa: E501

        Tekst voprosa  # noqa: E501

        :return: The text of this InlineResponse2003DataQuestions.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this InlineResponse2003DataQuestions.

        Tekst voprosa  # noqa: E501

        :param text: The text of this InlineResponse2003DataQuestions.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def created_date(self):
        """Gets the created_date of this InlineResponse2003DataQuestions.  # noqa: E501

        Data i vrema sozdania voprosa  # noqa: E501

        :return: The created_date of this InlineResponse2003DataQuestions.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this InlineResponse2003DataQuestions.

        Data i vrema sozdania voprosa  # noqa: E501

        :param created_date: The created_date of this InlineResponse2003DataQuestions.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def state(self):
        """Gets the state of this InlineResponse2003DataQuestions.  # noqa: E501

        Status voprosa:   - `none` - vopros otklonen prodavcom (takoi vopros ne otobrahaetsa na portale pokupatelei)   - `wbRu` - otvet predostavlen, vopros otobrahaetsa na saite pokupatelei   - `suppliersPortalSynch` - novyi vopros   # noqa: E501

        :return: The state of this InlineResponse2003DataQuestions.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse2003DataQuestions.

        Status voprosa:   - `none` - vopros otklonen prodavcom (takoi vopros ne otobrahaetsa na portale pokupatelei)   - `wbRu` - otvet predostavlen, vopros otobrahaetsa na saite pokupatelei   - `suppliersPortalSynch` - novyi vopros   # noqa: E501

        :param state: The state of this InlineResponse2003DataQuestions.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def answer(self):
        """Gets the answer of this InlineResponse2003DataQuestions.  # noqa: E501


        :return: The answer of this InlineResponse2003DataQuestions.  # noqa: E501
        :rtype: InlineResponse2003DataAnswer
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this InlineResponse2003DataQuestions.


        :param answer: The answer of this InlineResponse2003DataQuestions.  # noqa: E501
        :type: InlineResponse2003DataAnswer
        """

        self._answer = answer

    @property
    def product_details(self):
        """Gets the product_details of this InlineResponse2003DataQuestions.  # noqa: E501


        :return: The product_details of this InlineResponse2003DataQuestions.  # noqa: E501
        :rtype: InlineResponse2003DataProductDetails
        """
        return self._product_details

    @product_details.setter
    def product_details(self, product_details):
        """Sets the product_details of this InlineResponse2003DataQuestions.


        :param product_details: The product_details of this InlineResponse2003DataQuestions.  # noqa: E501
        :type: InlineResponse2003DataProductDetails
        """

        self._product_details = product_details

    @property
    def was_viewed(self):
        """Gets the was_viewed of this InlineResponse2003DataQuestions.  # noqa: E501

        Prosmotren li vopros  # noqa: E501

        :return: The was_viewed of this InlineResponse2003DataQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._was_viewed

    @was_viewed.setter
    def was_viewed(self, was_viewed):
        """Sets the was_viewed of this InlineResponse2003DataQuestions.

        Prosmotren li vopros  # noqa: E501

        :param was_viewed: The was_viewed of this InlineResponse2003DataQuestions.  # noqa: E501
        :type: bool
        """

        self._was_viewed = was_viewed

    @property
    def is_warned(self):
        """Gets the is_warned of this InlineResponse2003DataQuestions.  # noqa: E501

        Priznak podozritelnogo voprosa.<br>  Esli `true`, to vopros opublikovan, no na portale prodavcov vy uvidite banner **Soobhenie podozritelnoe**   # noqa: E501

        :return: The is_warned of this InlineResponse2003DataQuestions.  # noqa: E501
        :rtype: bool
        """
        return self._is_warned

    @is_warned.setter
    def is_warned(self, is_warned):
        """Sets the is_warned of this InlineResponse2003DataQuestions.

        Priznak podozritelnogo voprosa.<br>  Esli `true`, to vopros opublikovan, no na portale prodavcov vy uvidite banner **Soobhenie podozritelnoe**   # noqa: E501

        :param is_warned: The is_warned of this InlineResponse2003DataQuestions.  # noqa: E501
        :type: bool
        """

        self._is_warned = is_warned

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003DataQuestions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003DataQuestions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
