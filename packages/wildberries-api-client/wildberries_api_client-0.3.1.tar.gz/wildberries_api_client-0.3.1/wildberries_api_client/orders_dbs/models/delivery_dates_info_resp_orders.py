# coding: utf-8

"""
    Zakazy DBS

    <div class=\"description_important\">       Uznat bolhe o zakazah DBS mohno v <a href=\"https://seller.wildberries.ru/instructions/category/6572e024-7428-4db1-86a8-a4c7dbebbfcf?goBackOption=prevRoute&categoryId=5a8e1202-0865-45b7-acae-5d0afc7add56\">spravohnom centre</a> </div>  Upravlenie [sborohnymi zadaniami](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) i [metadannymi](/openapi/orders-dbs#tag/Metadannye-DBS) zakazov DBS (Delivery by Seller).   # noqa: E501

    OpenAPI spec version: order
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeliveryDatesInfoRespOrders(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'd_time_from': 'str',
        'd_time_to': 'str',
        'd_time_from_old': 'str',
        'd_time_to_old': 'str',
        'd_date_old': 'str',
        'd_date': 'str',
        'id': 'int'
    }

    attribute_map = {
        'd_time_from': 'dTimeFrom',
        'd_time_to': 'dTimeTo',
        'd_time_from_old': 'dTimeFromOld',
        'd_time_to_old': 'dTimeToOld',
        'd_date_old': 'dDateOld',
        'd_date': 'dDate',
        'id': 'id'
    }

    def __init__(self, d_time_from=None, d_time_to=None, d_time_from_old=None, d_time_to_old=None, d_date_old=None, d_date=None, id=None):  # noqa: E501
        """DeliveryDatesInfoRespOrders - a model defined in Swagger"""  # noqa: E501
        self._d_time_from = None
        self._d_time_to = None
        self._d_time_from_old = None
        self._d_time_to_old = None
        self._d_date_old = None
        self._d_date = None
        self._id = None
        self.discriminator = None
        if d_time_from is not None:
            self.d_time_from = d_time_from
        if d_time_to is not None:
            self.d_time_to = d_time_to
        if d_time_from_old is not None:
            self.d_time_from_old = d_time_from_old
        if d_time_to_old is not None:
            self.d_time_to_old = d_time_to_old
        if d_date_old is not None:
            self.d_date_old = d_date_old
        if d_date is not None:
            self.d_date = d_date
        if id is not None:
            self.id = id

    @property
    def d_time_from(self):
        """Gets the d_time_from of this DeliveryDatesInfoRespOrders.  # noqa: E501

        Aktualnoe vrema dostavki \"s\"  # noqa: E501

        :return: The d_time_from of this DeliveryDatesInfoRespOrders.  # noqa: E501
        :rtype: str
        """
        return self._d_time_from

    @d_time_from.setter
    def d_time_from(self, d_time_from):
        """Sets the d_time_from of this DeliveryDatesInfoRespOrders.

        Aktualnoe vrema dostavki \"s\"  # noqa: E501

        :param d_time_from: The d_time_from of this DeliveryDatesInfoRespOrders.  # noqa: E501
        :type: str
        """

        self._d_time_from = d_time_from

    @property
    def d_time_to(self):
        """Gets the d_time_to of this DeliveryDatesInfoRespOrders.  # noqa: E501

        Aktualnoe vrema dostavki \"po\"  # noqa: E501

        :return: The d_time_to of this DeliveryDatesInfoRespOrders.  # noqa: E501
        :rtype: str
        """
        return self._d_time_to

    @d_time_to.setter
    def d_time_to(self, d_time_to):
        """Sets the d_time_to of this DeliveryDatesInfoRespOrders.

        Aktualnoe vrema dostavki \"po\"  # noqa: E501

        :param d_time_to: The d_time_to of this DeliveryDatesInfoRespOrders.  # noqa: E501
        :type: str
        """

        self._d_time_to = d_time_to

    @property
    def d_time_from_old(self):
        """Gets the d_time_from_old of this DeliveryDatesInfoRespOrders.  # noqa: E501

        Prehnee vrema dostavki \"s\". Budet dostupno tolko pervye sutki posle izmenenia  # noqa: E501

        :return: The d_time_from_old of this DeliveryDatesInfoRespOrders.  # noqa: E501
        :rtype: str
        """
        return self._d_time_from_old

    @d_time_from_old.setter
    def d_time_from_old(self, d_time_from_old):
        """Sets the d_time_from_old of this DeliveryDatesInfoRespOrders.

        Prehnee vrema dostavki \"s\". Budet dostupno tolko pervye sutki posle izmenenia  # noqa: E501

        :param d_time_from_old: The d_time_from_old of this DeliveryDatesInfoRespOrders.  # noqa: E501
        :type: str
        """

        self._d_time_from_old = d_time_from_old

    @property
    def d_time_to_old(self):
        """Gets the d_time_to_old of this DeliveryDatesInfoRespOrders.  # noqa: E501

        Prehnee vrema dostavki \"po\". Budet dostupno tolko pervye sutki posle izmenenia  # noqa: E501

        :return: The d_time_to_old of this DeliveryDatesInfoRespOrders.  # noqa: E501
        :rtype: str
        """
        return self._d_time_to_old

    @d_time_to_old.setter
    def d_time_to_old(self, d_time_to_old):
        """Sets the d_time_to_old of this DeliveryDatesInfoRespOrders.

        Prehnee vrema dostavki \"po\". Budet dostupno tolko pervye sutki posle izmenenia  # noqa: E501

        :param d_time_to_old: The d_time_to_old of this DeliveryDatesInfoRespOrders.  # noqa: E501
        :type: str
        """

        self._d_time_to_old = d_time_to_old

    @property
    def d_date_old(self):
        """Gets the d_date_old of this DeliveryDatesInfoRespOrders.  # noqa: E501

        Prehnaa data dostavki. Budet dostupna tolko pervye sutki posle izmenenia  # noqa: E501

        :return: The d_date_old of this DeliveryDatesInfoRespOrders.  # noqa: E501
        :rtype: str
        """
        return self._d_date_old

    @d_date_old.setter
    def d_date_old(self, d_date_old):
        """Sets the d_date_old of this DeliveryDatesInfoRespOrders.

        Prehnaa data dostavki. Budet dostupna tolko pervye sutki posle izmenenia  # noqa: E501

        :param d_date_old: The d_date_old of this DeliveryDatesInfoRespOrders.  # noqa: E501
        :type: str
        """

        self._d_date_old = d_date_old

    @property
    def d_date(self):
        """Gets the d_date of this DeliveryDatesInfoRespOrders.  # noqa: E501

        Aktualnaa data dostavki  # noqa: E501

        :return: The d_date of this DeliveryDatesInfoRespOrders.  # noqa: E501
        :rtype: str
        """
        return self._d_date

    @d_date.setter
    def d_date(self, d_date):
        """Sets the d_date of this DeliveryDatesInfoRespOrders.

        Aktualnaa data dostavki  # noqa: E501

        :param d_date: The d_date of this DeliveryDatesInfoRespOrders.  # noqa: E501
        :type: str
        """

        self._d_date = d_date

    @property
    def id(self):
        """Gets the id of this DeliveryDatesInfoRespOrders.  # noqa: E501

        ID sborohnogo zadania  # noqa: E501

        :return: The id of this DeliveryDatesInfoRespOrders.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeliveryDatesInfoRespOrders.

        ID sborohnogo zadania  # noqa: E501

        :param id: The id of this DeliveryDatesInfoRespOrders.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeliveryDatesInfoRespOrders, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeliveryDatesInfoRespOrders):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
