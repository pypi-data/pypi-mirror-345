# coding: utf-8

"""
    Obhenie s pokupatelami

    <div class=\"description_important\">       Uznat bolhe ob obhenii s pokupatelami mohno v <a href=\"https://seller.wildberries.ru/instructions/category/f7f6c465-dd12-422d-80a0-a6d9562115d5?goBackOption=prevRoute&categoryId=30817062-14cc-4a82-bc78-3600c2b0685b\">spravohnom centre</a> </div>  herez metody obhenia s pokupatelem vy mohete rabotat s:   1. [Voprosami](/openapi/user-communication#tag/Voprosy) i [otzyvami](/openapi/user-communication#tag/Otzyvy) pokupatelei   2. [hablonami otvetov](/openapi/user-communication#tag/Shablony-otvetov) na voprosy i otzyvy   3. [hatami s pokupatelami](/openapi/user-communication#tag/Chat-s-pokupatelyami)   4. [Zaavkami pokupatelei na vozvrat](/openapi/user-communication#tag/Vozvraty-pokupatelyami)   # noqa: E501

    OpenAPI spec version: communication
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.communications.api_client import ApiClient


class VozvratyPokupatelamiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_claim_patch(self, body, **kwargs):  # noqa: E501
        """Otvet na zaavku pokupatela  # noqa: E501

        Metod otpravlaet otvet na [zaavku](/openapi/user-communication#tag/Vozvraty-pokupatelyami/paths/~1api~1v1~1claims/get) pokupatela na vozvrat tovarov.  <div class=\"description_limit\">     Maksimum 20 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_claim_patch(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: Otvet na zaavku (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_claim_patch_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_claim_patch_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_claim_patch_with_http_info(self, body, **kwargs):  # noqa: E501
        """Otvet na zaavku pokupatela  # noqa: E501

        Metod otpravlaet otvet na [zaavku](/openapi/user-communication#tag/Vozvraty-pokupatelyami/paths/~1api~1v1~1claims/get) pokupatela na vozvrat tovarov.  <div class=\"description_limit\">     Maksimum 20 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_claim_patch_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: Otvet na zaavku (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_claim_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_claim_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/claim', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_claims_get(self, is_archive, **kwargs):  # noqa: E501
        """Zaavki pokupatelei na vozvrat  # noqa: E501

        Metod predostavlaet zaavki pokupatelei na vozvrat tovarov za poslednie 14 dnei. Vy mohete [otvehat na eti zaavki](/openapi/user-communication#tag/Vozvraty-pokupatelyami/paths/~1api~1v1~1claim/patch).  <div class=\"description_limit\">     Maksimum 20 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_claims_get(is_archive, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_archive: Sostoanie zaavki:   * `false` — na rassmotrenii   * `true` — v arhive  (required)
        :param str id: ID zaavki
        :param int limit: Kolihestvo zaavok v otvete. Po umolhaniu `50`
        :param int offset: Posle kakogo elementa vydavat dannye. Po umolhaniu `0`
        :param int nm_id: Artikul WB
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_claims_get_with_http_info(is_archive, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_claims_get_with_http_info(is_archive, **kwargs)  # noqa: E501
            return data

    def api_v1_claims_get_with_http_info(self, is_archive, **kwargs):  # noqa: E501
        """Zaavki pokupatelei na vozvrat  # noqa: E501

        Metod predostavlaet zaavki pokupatelei na vozvrat tovarov za poslednie 14 dnei. Vy mohete [otvehat na eti zaavki](/openapi/user-communication#tag/Vozvraty-pokupatelyami/paths/~1api~1v1~1claim/patch).  <div class=\"description_limit\">     Maksimum 20 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_claims_get_with_http_info(is_archive, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_archive: Sostoanie zaavki:   * `false` — na rassmotrenii   * `true` — v arhive  (required)
        :param str id: ID zaavki
        :param int limit: Kolihestvo zaavok v otvete. Po umolhaniu `50`
        :param int offset: Posle kakogo elementa vydavat dannye. Po umolhaniu `0`
        :param int nm_id: Artikul WB
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_archive', 'id', 'limit', 'offset', 'nm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_claims_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_archive' is set
        if ('is_archive' not in params or
                params['is_archive'] is None):
            raise ValueError("Missing the required parameter `is_archive` when calling `api_v1_claims_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_archive' in params:
            query_params.append(('is_archive', params['is_archive']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'nm_id' in params:
            query_params.append(('nm_id', params['nm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/claims', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
