# coding: utf-8

"""
    Wildberries cifrovoi

    Po voprosam raboty s WBD API, obrahaites v <a href=\"https://digital.wildberries.ru/support\" target=\"_blank\">tehniheskuu podderhku</a>.   # noqa: E501

    OpenAPI spec version: wbd
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.wbd.api_client import ApiClient


class KontentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def content_author_get(self, **kwargs):  # noqa: E501
        """Poluhit spisok svoego kontenta  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit spisok svoego kontenta s ispolzovaniem filtracii.  **Opisanie parametrov filtracii:**  - `search` — Poisk kontenta po nazvaniu. Ukahite hast ili polnoe nazvanie kontenta dla poiska. - `category` — Filtracia kontenta po kategorii. Spisok kategorii nahoditsa v [tablice](#content-categories), kolonka — \"`catalog_id` — Identificirovat kategorii\". - `status` — Filtracia kontenta po statusu. Vozmohnye znahenia:     - `0` — Sozdan     - `1` — Zagruheno na server     - `2` — Opublikovan     - `3` — Ohibka v obrabotke ili publikacii     - `4` — Obrabatyvaetsa     - `5` — Otpravleno na server - `sort` — Sortirovka kontenta po date sozdania ili obnovlenia. Ukahite `created` dla sortirovki po date sozdania i `updated` dla sortirovki po date obnovlenia. - `sort_dir` — Napravlenie sortirovki. Ukahite `asc` dla sortirovki po vozrastaniu ili `desc` dla sortirovki po ubyvaniu.              - `skip` — Smehenie. Pozvolaet **propustit** opredelennoe kolihestvo kontenta v rezultiruuhem nabore.</br> **Naprimer**, esli `skip` ravno 20, to vyborka nahnetsa s 21-i zapisi.                 - `take` — Kolihestvo kontenta, kotoroe nuhno vernut v otvete.</br> **Naprimer**, esli `take` ravno 10, to v otvete budet ne bolee 10 zapisei.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_author_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: Poisk po nazvaniu kontenta
        :param int category: Filtracia po kategorii: - `1` — Videokontent - `2` — Audiokontent - `4` — Dokument 
        :param int status: Filtracia po statusu: - `0` — Sozdan - `1` — Zagruheno na server - `2` — Opublikovan - `3` — Ohibka v obrabotke ili publikacii - `4` — Obrabatyvaetsa - `5` — Otpravleno na server 
        :param str sort: Sortirovka kontenta po date sozdania ili obnovlenia
        :param str sort_dir: Napravlenie sortirovki: - `asc` — po vozrastaniu - `desc` — po ubyvaniu 
        :param int skip: Smehenie. Kolihestvo predlohenii, kotorye nuhno propustit v rezultiruuhem nabore.
        :param int take: Kolihestvo kontenta dla poluhenia
        :return: ContentList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_author_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_author_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_author_get_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit spisok svoego kontenta  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit spisok svoego kontenta s ispolzovaniem filtracii.  **Opisanie parametrov filtracii:**  - `search` — Poisk kontenta po nazvaniu. Ukahite hast ili polnoe nazvanie kontenta dla poiska. - `category` — Filtracia kontenta po kategorii. Spisok kategorii nahoditsa v [tablice](#content-categories), kolonka — \"`catalog_id` — Identificirovat kategorii\". - `status` — Filtracia kontenta po statusu. Vozmohnye znahenia:     - `0` — Sozdan     - `1` — Zagruheno na server     - `2` — Opublikovan     - `3` — Ohibka v obrabotke ili publikacii     - `4` — Obrabatyvaetsa     - `5` — Otpravleno na server - `sort` — Sortirovka kontenta po date sozdania ili obnovlenia. Ukahite `created` dla sortirovki po date sozdania i `updated` dla sortirovki po date obnovlenia. - `sort_dir` — Napravlenie sortirovki. Ukahite `asc` dla sortirovki po vozrastaniu ili `desc` dla sortirovki po ubyvaniu.              - `skip` — Smehenie. Pozvolaet **propustit** opredelennoe kolihestvo kontenta v rezultiruuhem nabore.</br> **Naprimer**, esli `skip` ravno 20, to vyborka nahnetsa s 21-i zapisi.                 - `take` — Kolihestvo kontenta, kotoroe nuhno vernut v otvete.</br> **Naprimer**, esli `take` ravno 10, to v otvete budet ne bolee 10 zapisei.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_author_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: Poisk po nazvaniu kontenta
        :param int category: Filtracia po kategorii: - `1` — Videokontent - `2` — Audiokontent - `4` — Dokument 
        :param int status: Filtracia po statusu: - `0` — Sozdan - `1` — Zagruheno na server - `2` — Opublikovan - `3` — Ohibka v obrabotke ili publikacii - `4` — Obrabatyvaetsa - `5` — Otpravleno na server 
        :param str sort: Sortirovka kontenta po date sozdania ili obnovlenia
        :param str sort_dir: Napravlenie sortirovki: - `asc` — po vozrastaniu - `desc` — po ubyvaniu 
        :param int skip: Smehenie. Kolihestvo predlohenii, kotorye nuhno propustit v rezultiruuhem nabore.
        :param int take: Kolihestvo kontenta dla poluhenia
        :return: ContentList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'category', 'status', 'sort', 'sort_dir', 'skip', 'take']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_author_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('sort_dir', params['sort_dir']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/content/author', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContentList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_delete(self, body, **kwargs):  # noqa: E501
        """Udalit kontent  # noqa: E501

        Maksimum 50 zaprosov v sekundu  Metod pozvolaet udalit kontent po ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ContentDeleteBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """Udalit kontent  # noqa: E501

        Maksimum 50 zaprosov v sekundu  Metod pozvolaet udalit kontent po ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ContentDeleteBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/content/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_download_get(self, uri, **kwargs):  # noqa: E501
        """Skahat kontent  # noqa: E501

        Maksimum 10 zaprosov v sekundu  Metod pozvolaet skahat kontent po URI.</br>  ### Poluhenie URI-adresa kontenta: 1. Vospolzuites odnim iz metodov dla poluhenia informacii o kontente.</br>     - [Poluhit informaciu o kontente](#operation/contentIdGet)</br>     - [Poluhit spisok svoego kontenta](#operation/contentAuthorGet)</br> 2. V informacii o kontente vozmite URI-adres iz pola `uri` ili `files`.</br>   ### Skahivanie kontenta hastami: Vy mohete skahat fail hastami s ispolzovaniem zagolovka `Range`.  **Primer**: `Range: bytes=0-524287999`  Otvet soderhit zagolovok `Content-Range` s informaciei o skahennom faile.  **Primer**: `Content-Range: bytes 0-524287999/1073741824`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_download_get(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: URI-adres kontenta (required)
        :param str range: Pozvolat skahivat fail hastami.  **Primer**: `bytes=0-524287999` 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_download_get_with_http_info(uri, **kwargs)  # noqa: E501
        else:
            (data) = self.content_download_get_with_http_info(uri, **kwargs)  # noqa: E501
            return data

    def content_download_get_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Skahat kontent  # noqa: E501

        Maksimum 10 zaprosov v sekundu  Metod pozvolaet skahat kontent po URI.</br>  ### Poluhenie URI-adresa kontenta: 1. Vospolzuites odnim iz metodov dla poluhenia informacii o kontente.</br>     - [Poluhit informaciu o kontente](#operation/contentIdGet)</br>     - [Poluhit spisok svoego kontenta](#operation/contentAuthorGet)</br> 2. V informacii o kontente vozmite URI-adres iz pola `uri` ili `files`.</br>   ### Skahivanie kontenta hastami: Vy mohete skahat fail hastami s ispolzovaniem zagolovka `Range`.  **Primer**: `Range: bytes=0-524287999`  Otvet soderhit zagolovok `Content-Range` s informaciei o skahennom faile.  **Primer**: `Content-Range: bytes 0-524287999/1073741824`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_download_get_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: URI-adres kontenta (required)
        :param str range: Pozvolat skahivat fail hastami.  **Primer**: `bytes=0-524287999` 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'range']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_download_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `content_download_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        if 'range' in params:
            header_params['Range'] = params['range']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/content/download/{uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_gallery(self, files, **kwargs):  # noqa: E501
        """Zagruzit mediafaily dla predlohenia  # noqa: E501

        Maksimum 10 zaprosov v sekundu  Metod pozvolaet zagruhat mediafaily na server.  Posle uspehnoi zagruzki vozvrahaet spisok URI-adresov, kotorye mohno ispolzovat dla dobavlenia dopolnitelnyh mediafailov v predlohenie.  Dannyi metod pomohet vam dobavit dopolnitelnye mediafaily pri sozdanii ili obnovlenii predlohenia. - [Sozdat novoe predlohenie](#operation/offerCreate) - [Redaktirovat predlohenie](#operation/offerUpdate)   <div class=\"description_important\">   Ogranihenia po razmeru:   <ul>       <li>izobrahenie: <b>5 Mb</b></li>       <li>video: <b>50 Mb</b></li>       <li>obhii razmer vseh failov: <b>100 Mb</b></li>   </ul>   Dopustimye formaty:    <ul>       <li>izobrahenie: <b>.png, .jpeg</b></li>         <li>video: <b>.mp4</b></li>         </ul>   Mohno peredat <b>do 8 mediafailov</b>. </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_gallery(files, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] files: (required)
        :return: UploadGalleryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_gallery_with_http_info(files, **kwargs)  # noqa: E501
        else:
            (data) = self.content_gallery_with_http_info(files, **kwargs)  # noqa: E501
            return data

    def content_gallery_with_http_info(self, files, **kwargs):  # noqa: E501
        """Zagruzit mediafaily dla predlohenia  # noqa: E501

        Maksimum 10 zaprosov v sekundu  Metod pozvolaet zagruhat mediafaily na server.  Posle uspehnoi zagruzki vozvrahaet spisok URI-adresov, kotorye mohno ispolzovat dla dobavlenia dopolnitelnyh mediafailov v predlohenie.  Dannyi metod pomohet vam dobavit dopolnitelnye mediafaily pri sozdanii ili obnovlenii predlohenia. - [Sozdat novoe predlohenie](#operation/offerCreate) - [Redaktirovat predlohenie](#operation/offerUpdate)   <div class=\"description_important\">   Ogranihenia po razmeru:   <ul>       <li>izobrahenie: <b>5 Mb</b></li>       <li>video: <b>50 Mb</b></li>       <li>obhii razmer vseh failov: <b>100 Mb</b></li>   </ul>   Dopustimye formaty:    <ul>       <li>izobrahenie: <b>.png, .jpeg</b></li>         <li>video: <b>.mp4</b></li>         </ul>   Mohno peredat <b>do 8 mediafailov</b>. </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_gallery_with_http_info(files, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] files: (required)
        :return: UploadGalleryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['files']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_gallery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'files' is set
        if ('files' not in params or
                params['files'] is None):
            raise ValueError("Missing the required parameter `files` when calling `content_gallery`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'files' in params:
            form_params.append(('files', params['files']))  # noqa: E501
            collection_formats['files'] = 'multi'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/content/gallery', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadGalleryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_id_get(self, content_id, **kwargs):  # noqa: E501
        """Poluhit informaciu o kontente  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit informaciu o konkretnom kontente.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_id_get(content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int content_id: ID kontenta (required)
        :return: Content
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_id_get_with_http_info(content_id, **kwargs)  # noqa: E501
        else:
            (data) = self.content_id_get_with_http_info(content_id, **kwargs)  # noqa: E501
            return data

    def content_id_get_with_http_info(self, content_id, **kwargs):  # noqa: E501
        """Poluhit informaciu o kontente  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit informaciu o konkretnom kontente.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_id_get_with_http_info(content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int content_id: ID kontenta (required)
        :return: Content
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_id' is set
        if ('content_id' not in params or
                params['content_id'] is None):
            raise ValueError("Missing the required parameter `content_id` when calling `content_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_id' in params:
            path_params['content_id'] = params['content_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/content/author/{content_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Content',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_update(self, body, content_id, **kwargs):  # noqa: E501
        """Redaktirovat kontent  # noqa: E501

        Maksimum 50 zaprosov v sekundu  Metod pozvolaet redaktirovat informaciu o kontente.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_update(body, content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateContentRequest body: (required)
        :param int content_id: ID kontenta (required)
        :return: Content
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_update_with_http_info(body, content_id, **kwargs)  # noqa: E501
        else:
            (data) = self.content_update_with_http_info(body, content_id, **kwargs)  # noqa: E501
            return data

    def content_update_with_http_info(self, body, content_id, **kwargs):  # noqa: E501
        """Redaktirovat kontent  # noqa: E501

        Maksimum 50 zaprosov v sekundu  Metod pozvolaet redaktirovat informaciu o kontente.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_update_with_http_info(body, content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateContentRequest body: (required)
        :param int content_id: ID kontenta (required)
        :return: Content
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'content_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_update`")  # noqa: E501
        # verify the required parameter 'content_id' is set
        if ('content_id' not in params or
                params['content_id'] is None):
            raise ValueError("Missing the required parameter `content_id` when calling `content_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_id' in params:
            path_params['content_id'] = params['content_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/content/author/{content_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Content',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_upload_chunk(self, body, x_content_type, x_wbd_part_index, x_wbd_content_uuid, **kwargs):  # noqa: E501
        """Zagruzit kontent (fail)  # noqa: E501

        Maksimum 10 zaprosov v sekundu  Metod pozvolaet zagruzit kontent (fail) po hastam.  ### Kratkaa instrukcia po primeneniu: 1. Razbeite fail na hasti razmerom ne bolee 2 Mb. 2. Dla kahdoi hasti faila: - Ubedites, hto zagolovok `X-Content-Type` sootvetstvuet tipu vahego kontenta (naprimer, `video/mp4`, `audio/mpeg`, `application/pdf` i t.d.). - Ustanovite zagolovok `X-Wbd-Part-Index` v sootvetstvii s indeksom tekuhei hasti (nahinaa s 1). - Ukahite `uuid` kontenta v zagolovke `X-Wbd-Content-Uuid`, kotoryi vy poluhili pri [inicializacii novogo kontenta](#operation/contentUploadInit). - Otpravte baity (hast faila) v tele zaprosa. 3. Povtoraite hag 2 dla vseh hastei faila do zaverhenia zagruzki.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_upload_chunk(body, x_content_type, x_wbd_part_index, x_wbd_content_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: (required)
        :param str x_content_type: Tip faila (required)
        :param int x_wbd_part_index: Indeks freima (hasti kontenta) (required)
        :param str x_wbd_content_uuid: Unikalnyi ID poluhennyi v [inicializacii novogo kontenta](#operation/contentUploadInit) (required)
        :return: UploadChunkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_upload_chunk_with_http_info(body, x_content_type, x_wbd_part_index, x_wbd_content_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.content_upload_chunk_with_http_info(body, x_content_type, x_wbd_part_index, x_wbd_content_uuid, **kwargs)  # noqa: E501
            return data

    def content_upload_chunk_with_http_info(self, body, x_content_type, x_wbd_part_index, x_wbd_content_uuid, **kwargs):  # noqa: E501
        """Zagruzit kontent (fail)  # noqa: E501

        Maksimum 10 zaprosov v sekundu  Metod pozvolaet zagruzit kontent (fail) po hastam.  ### Kratkaa instrukcia po primeneniu: 1. Razbeite fail na hasti razmerom ne bolee 2 Mb. 2. Dla kahdoi hasti faila: - Ubedites, hto zagolovok `X-Content-Type` sootvetstvuet tipu vahego kontenta (naprimer, `video/mp4`, `audio/mpeg`, `application/pdf` i t.d.). - Ustanovite zagolovok `X-Wbd-Part-Index` v sootvetstvii s indeksom tekuhei hasti (nahinaa s 1). - Ukahite `uuid` kontenta v zagolovke `X-Wbd-Content-Uuid`, kotoryi vy poluhili pri [inicializacii novogo kontenta](#operation/contentUploadInit). - Otpravte baity (hast faila) v tele zaprosa. 3. Povtoraite hag 2 dla vseh hastei faila do zaverhenia zagruzki.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_upload_chunk_with_http_info(body, x_content_type, x_wbd_part_index, x_wbd_content_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: (required)
        :param str x_content_type: Tip faila (required)
        :param int x_wbd_part_index: Indeks freima (hasti kontenta) (required)
        :param str x_wbd_content_uuid: Unikalnyi ID poluhennyi v [inicializacii novogo kontenta](#operation/contentUploadInit) (required)
        :return: UploadChunkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_content_type', 'x_wbd_part_index', 'x_wbd_content_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_upload_chunk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_upload_chunk`")  # noqa: E501
        # verify the required parameter 'x_content_type' is set
        if ('x_content_type' not in params or
                params['x_content_type'] is None):
            raise ValueError("Missing the required parameter `x_content_type` when calling `content_upload_chunk`")  # noqa: E501
        # verify the required parameter 'x_wbd_part_index' is set
        if ('x_wbd_part_index' not in params or
                params['x_wbd_part_index'] is None):
            raise ValueError("Missing the required parameter `x_wbd_part_index` when calling `content_upload_chunk`")  # noqa: E501
        # verify the required parameter 'x_wbd_content_uuid' is set
        if ('x_wbd_content_uuid' not in params or
                params['x_wbd_content_uuid'] is None):
            raise ValueError("Missing the required parameter `x_wbd_content_uuid` when calling `content_upload_chunk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_content_type' in params:
            header_params['X-Content-Type'] = params['x_content_type']  # noqa: E501
        if 'x_wbd_part_index' in params:
            header_params['X-Wbd-Part-Index'] = params['x_wbd_part_index']  # noqa: E501
        if 'x_wbd_content_uuid' in params:
            header_params['X-Wbd-Content-Uuid'] = params['x_wbd_content_uuid']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/content/upload/chunk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadChunkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_upload_illustration(self, body, x_content_type, **kwargs):  # noqa: E501
        """Zagruzit oblohku kontenta  # noqa: E501

        Maksimum 10 zaprosov v sekundu  Metod pozvolaet zagruzit oblohku kontenta.  <div class=\"description_important\">   Maksimalnyi razmer faila: 5 Mb.</br>   Dopustimye formaty: .png, .jpeg</br>   Rekomendacii:   <ul>       <li>Sootnohenie storon 1:1</li>         </ul> </div>  ### Kratkaa instrukcia po primeneniu: 1. Ubedites, hto vah fail sootvetstvuet ukazannym ograniheniam i rekomendaciam. 2. Vyzovite etot metod. 3. Pri zagruzke oblohki vy poluhite spisok URI adresov dla novogo kontenta. 4. Vospolzuites metodom [Inicializirovat novyi kontent](#operation/contentUploadInit) i peredaite spisok URI adresov v pole `meta` v formate **JSON** ispolzua sleduuhii primer.  **Primer:**</br> ```json {     \"meta\": {         \"thumbnail\": [             \"vol6/529/013cfs7f229183179aj53d2b3bbb839a/480.jpg\",             \"vol6/529/013cfs7f229183179aj53d2b3bbb839a/1280.jpg\",             \"vol6/529/013cfs7f229183179aj53d2b3bbb839a/1920.jpg\"         ]     } } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_upload_illustration(body, x_content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: (required)
        :param str x_content_type: Tip faila (required)
        :return: IllustrationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_upload_illustration_with_http_info(body, x_content_type, **kwargs)  # noqa: E501
        else:
            (data) = self.content_upload_illustration_with_http_info(body, x_content_type, **kwargs)  # noqa: E501
            return data

    def content_upload_illustration_with_http_info(self, body, x_content_type, **kwargs):  # noqa: E501
        """Zagruzit oblohku kontenta  # noqa: E501

        Maksimum 10 zaprosov v sekundu  Metod pozvolaet zagruzit oblohku kontenta.  <div class=\"description_important\">   Maksimalnyi razmer faila: 5 Mb.</br>   Dopustimye formaty: .png, .jpeg</br>   Rekomendacii:   <ul>       <li>Sootnohenie storon 1:1</li>         </ul> </div>  ### Kratkaa instrukcia po primeneniu: 1. Ubedites, hto vah fail sootvetstvuet ukazannym ograniheniam i rekomendaciam. 2. Vyzovite etot metod. 3. Pri zagruzke oblohki vy poluhite spisok URI adresov dla novogo kontenta. 4. Vospolzuites metodom [Inicializirovat novyi kontent](#operation/contentUploadInit) i peredaite spisok URI adresov v pole `meta` v formate **JSON** ispolzua sleduuhii primer.  **Primer:**</br> ```json {     \"meta\": {         \"thumbnail\": [             \"vol6/529/013cfs7f229183179aj53d2b3bbb839a/480.jpg\",             \"vol6/529/013cfs7f229183179aj53d2b3bbb839a/1280.jpg\",             \"vol6/529/013cfs7f229183179aj53d2b3bbb839a/1920.jpg\"         ]     } } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_upload_illustration_with_http_info(body, x_content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: (required)
        :param str x_content_type: Tip faila (required)
        :return: IllustrationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_upload_illustration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_upload_illustration`")  # noqa: E501
        # verify the required parameter 'x_content_type' is set
        if ('x_content_type' not in params or
                params['x_content_type'] is None):
            raise ValueError("Missing the required parameter `x_content_type` when calling `content_upload_illustration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_content_type' in params:
            header_params['X-Content-Type'] = params['x_content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/content/illustration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IllustrationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_upload_init(self, body, **kwargs):  # noqa: E501
        """Inicializirovat novyi kontent  # noqa: E501

        Maksimum 10 zaprosov v sekundu  Metod pozvolaet inicializirovat (zagruzit) informaciu novogo kontenta.   Tipy kontenta i trebovania k nim vy mohete posmotret v oglavlenii [Rabota s kontentom](#tag/Rabota-s-kontentom).  ### Podgotovka faila k posleduuhei zagruzki: - Vam neobhodimo razbit fail na hasti (freimy) ne bolee 2 Mb. - Peredat razmer (v baitah) kahdoi hasti i poradkovyi nomer v pole `parts`  **Primer:**</br> Fail razmerom 5 Mb, nuhno razbit na 3 hasti — 2 Mb, 2 Mb i 1 Mb. ```json {     \"parts\": [         {           \"index\": 1,           \"size\": 2097152         },         {           \"index\": 2,           \"size\": 2097152         },         {           \"index\": 3,           \"size\": 1048576         }     ], } ``` V metode [Zagruzit kontent (fail)](#operation/contentUploadChunk) vam nuhno budet zagruzit 3 hasti faila s ukazaniem ih poradkovogo nomera herez `X-Wbd-Part-Index`.  ### Obazatelnye pola v metadannyh (`meta`) dla zagruzki kontenta:  Obhie pola: - `thumbnail` - `rating`    Audiokontent: - `author`      Dokument: - `author` - `pages`  ### Kratkaa instrukcia po primeneniu: 1. Podgotovte metadannye i informaciu o vahem kontente. 2. Ubedites, hto vah kontent sootvetstvuet [trebovaniam](#content-requirements) (format i razmer faila). 3. Vyzovite etot metod dla inicializacii novogo kontenta. 4. V otvete vy poluhite `uuid` kontenta, neobhodimyi dla posleduuhei zagruzki samogo faila. 5. Ispolzuite metod [Zagruzit fail kontenta](#operation/contentUploadChunk), htoby zagruzit fail.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_upload_init(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadInitRequest body: (required)
        :return: UploadInitResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_upload_init_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_upload_init_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_upload_init_with_http_info(self, body, **kwargs):  # noqa: E501
        """Inicializirovat novyi kontent  # noqa: E501

        Maksimum 10 zaprosov v sekundu  Metod pozvolaet inicializirovat (zagruzit) informaciu novogo kontenta.   Tipy kontenta i trebovania k nim vy mohete posmotret v oglavlenii [Rabota s kontentom](#tag/Rabota-s-kontentom).  ### Podgotovka faila k posleduuhei zagruzki: - Vam neobhodimo razbit fail na hasti (freimy) ne bolee 2 Mb. - Peredat razmer (v baitah) kahdoi hasti i poradkovyi nomer v pole `parts`  **Primer:**</br> Fail razmerom 5 Mb, nuhno razbit na 3 hasti — 2 Mb, 2 Mb i 1 Mb. ```json {     \"parts\": [         {           \"index\": 1,           \"size\": 2097152         },         {           \"index\": 2,           \"size\": 2097152         },         {           \"index\": 3,           \"size\": 1048576         }     ], } ``` V metode [Zagruzit kontent (fail)](#operation/contentUploadChunk) vam nuhno budet zagruzit 3 hasti faila s ukazaniem ih poradkovogo nomera herez `X-Wbd-Part-Index`.  ### Obazatelnye pola v metadannyh (`meta`) dla zagruzki kontenta:  Obhie pola: - `thumbnail` - `rating`    Audiokontent: - `author`      Dokument: - `author` - `pages`  ### Kratkaa instrukcia po primeneniu: 1. Podgotovte metadannye i informaciu o vahem kontente. 2. Ubedites, hto vah kontent sootvetstvuet [trebovaniam](#content-requirements) (format i razmer faila). 3. Vyzovite etot metod dla inicializacii novogo kontenta. 4. V otvete vy poluhite `uuid` kontenta, neobhodimyi dla posleduuhei zagruzki samogo faila. 5. Ispolzuite metod [Zagruzit fail kontenta](#operation/contentUploadChunk), htoby zagruzit fail.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_upload_init_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadInitRequest body: (required)
        :return: UploadInitResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_upload_init" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_upload_init`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/content/upload/init', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadInitResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
