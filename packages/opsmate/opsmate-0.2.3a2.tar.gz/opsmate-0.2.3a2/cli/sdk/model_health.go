/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opsmatesdk

import (
	"encoding/json"
)

// checks if the Health type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Health{}

// Health struct for Health
type Health struct {
	Status *string `json:"status,omitempty"`
}

// NewHealth instantiates a new Health object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealth() *Health {
	this := Health{}
	var status string = "ok"
	this.Status = &status
	return &this
}

// NewHealthWithDefaults instantiates a new Health object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthWithDefaults() *Health {
	this := Health{}
	var status string = "ok"
	this.Status = &status
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Health) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Health) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Health) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Health) SetStatus(v string) {
	o.Status = &v
}

func (o Health) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Health) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableHealth struct {
	value *Health
	isSet bool
}

func (v NullableHealth) Get() *Health {
	return v.value
}

func (v *NullableHealth) Set(val *Health) {
	v.value = val
	v.isSet = true
}

func (v NullableHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealth(val *Health) *NullableHealth {
	return &NullableHealth{value: val, isSet: true}
}

func (v NullableHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


