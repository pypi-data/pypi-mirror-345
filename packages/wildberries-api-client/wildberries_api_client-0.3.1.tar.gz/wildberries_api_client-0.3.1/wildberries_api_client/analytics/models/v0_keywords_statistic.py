# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V0KeywordsStatistic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clicks': 'int',
        'ctr': 'float',
        'keyword': 'str',
        'sum': 'float',
        'views': 'int'
    }

    attribute_map = {
        'clicks': 'clicks',
        'ctr': 'ctr',
        'keyword': 'keyword',
        'sum': 'sum',
        'views': 'views'
    }

    def __init__(self, clicks=None, ctr=None, keyword=None, sum=None, views=None):  # noqa: E501
        """V0KeywordsStatistic - a model defined in Swagger"""  # noqa: E501
        self._clicks = None
        self._ctr = None
        self._keyword = None
        self._sum = None
        self._views = None
        self.discriminator = None
        self.clicks = clicks
        self.ctr = ctr
        self.keyword = keyword
        self.sum = sum
        self.views = views

    @property
    def clicks(self):
        """Gets the clicks of this V0KeywordsStatistic.  # noqa: E501

        Kolihestvo klikov  # noqa: E501

        :return: The clicks of this V0KeywordsStatistic.  # noqa: E501
        :rtype: int
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this V0KeywordsStatistic.

        Kolihestvo klikov  # noqa: E501

        :param clicks: The clicks of this V0KeywordsStatistic.  # noqa: E501
        :type: int
        """
        if clicks is None:
            raise ValueError("Invalid value for `clicks`, must not be `None`")  # noqa: E501

        self._clicks = clicks

    @property
    def ctr(self):
        """Gets the ctr of this V0KeywordsStatistic.  # noqa: E501

        CTR (Click-Through Rate) — pokazatel klikabelnosti  # noqa: E501

        :return: The ctr of this V0KeywordsStatistic.  # noqa: E501
        :rtype: float
        """
        return self._ctr

    @ctr.setter
    def ctr(self, ctr):
        """Sets the ctr of this V0KeywordsStatistic.

        CTR (Click-Through Rate) — pokazatel klikabelnosti  # noqa: E501

        :param ctr: The ctr of this V0KeywordsStatistic.  # noqa: E501
        :type: float
        """
        if ctr is None:
            raise ValueError("Invalid value for `ctr`, must not be `None`")  # noqa: E501

        self._ctr = ctr

    @property
    def keyword(self):
        """Gets the keyword of this V0KeywordsStatistic.  # noqa: E501

        Kluhevaa fraza  # noqa: E501

        :return: The keyword of this V0KeywordsStatistic.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this V0KeywordsStatistic.

        Kluhevaa fraza  # noqa: E501

        :param keyword: The keyword of this V0KeywordsStatistic.  # noqa: E501
        :type: str
        """
        if keyword is None:
            raise ValueError("Invalid value for `keyword`, must not be `None`")  # noqa: E501

        self._keyword = keyword

    @property
    def sum(self):
        """Gets the sum of this V0KeywordsStatistic.  # noqa: E501

        Summa zatrat po kluhevoi fraze  # noqa: E501

        :return: The sum of this V0KeywordsStatistic.  # noqa: E501
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this V0KeywordsStatistic.

        Summa zatrat po kluhevoi fraze  # noqa: E501

        :param sum: The sum of this V0KeywordsStatistic.  # noqa: E501
        :type: float
        """
        if sum is None:
            raise ValueError("Invalid value for `sum`, must not be `None`")  # noqa: E501

        self._sum = sum

    @property
    def views(self):
        """Gets the views of this V0KeywordsStatistic.  # noqa: E501

        Kolihestvo pokazov  # noqa: E501

        :return: The views of this V0KeywordsStatistic.  # noqa: E501
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this V0KeywordsStatistic.

        Kolihestvo pokazov  # noqa: E501

        :param views: The views of this V0KeywordsStatistic.  # noqa: E501
        :type: int
        """
        if views is None:
            raise ValueError("Invalid value for `views`, must not be `None`")  # noqa: E501

        self._views = views

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V0KeywordsStatistic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V0KeywordsStatistic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
