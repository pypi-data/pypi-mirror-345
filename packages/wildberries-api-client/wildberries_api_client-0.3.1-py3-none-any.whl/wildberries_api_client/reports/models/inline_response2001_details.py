# coding: utf-8

"""
    Othety

    <div class=\"description_important\">     Uznat bolhe ob othetah mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/5f2162c5-069b-416d-a4e1-48da2a76e6b0\">spravohnom centre</a> </div>  S pomohu etih metodov vy mohete poluhit [osnovnye othety](/openapi/reports#tag/Osnovnye-otchyoty) i othety o:   1. [Ostatkah na skladah](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah)   2. [Tovarah s obazatelnoi markirovkoi](/openapi/reports#tag/Otchyot-o-tovarah-c-obyazatelnoj-markirovkoj)   3. [Uderhaniah](/openapi/reports#tag/Otchyoty-ob-uderzhaniyah)   4. [Platnoi priemke](/openapi/reports#tag/Platnaya-priyomka)   5. [Platnom hranenii](/openapi/reports#tag/Platnoe-hranenie)   6. [Prodahah po regionam](/openapi/reports#tag/Prodazhi-po-regionam)   7. [Dole brenda v prodahah](/openapi/reports#tag/Dolya-brenda-v-prodazhah)   8. [Skrytyh tovarah](/openapi/reports#tag/Skrytye-tovary)   9. [Vozvratah i peremehenii tovarov](/openapi/reports#tag/Otchyot-o-vozvratah-i-peremeshenii-tovarov)   10. [Dinamike oborahivaemosti](/openapi/reports#tag/Dinamika-oborachivaemosti)   # noqa: E501

    OpenAPI spec version: reports
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001Details(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nm_id': 'int',
        'sum': 'int',
        'currency': 'str',
        'date_from': 'str',
        'date_to': 'str'
    }

    attribute_map = {
        'nm_id': 'nmID',
        'sum': 'sum',
        'currency': 'currency',
        'date_from': 'dateFrom',
        'date_to': 'dateTo'
    }

    def __init__(self, nm_id=None, sum=None, currency=None, date_from=None, date_to=None):  # noqa: E501
        """InlineResponse2001Details - a model defined in Swagger"""  # noqa: E501
        self._nm_id = None
        self._sum = None
        self._currency = None
        self._date_from = None
        self._date_to = None
        self.discriminator = None
        if nm_id is not None:
            self.nm_id = nm_id
        if sum is not None:
            self.sum = sum
        if currency is not None:
            self.currency = currency
        if date_from is not None:
            self.date_from = date_from
        if date_to is not None:
            self.date_to = date_to

    @property
    def nm_id(self):
        """Gets the nm_id of this InlineResponse2001Details.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this InlineResponse2001Details.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this InlineResponse2001Details.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this InlineResponse2001Details.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def sum(self):
        """Gets the sum of this InlineResponse2001Details.  # noqa: E501

        Summa zakaza  # noqa: E501

        :return: The sum of this InlineResponse2001Details.  # noqa: E501
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this InlineResponse2001Details.

        Summa zakaza  # noqa: E501

        :param sum: The sum of this InlineResponse2001Details.  # noqa: E501
        :type: int
        """

        self._sum = sum

    @property
    def currency(self):
        """Gets the currency of this InlineResponse2001Details.  # noqa: E501

        Valuta zakaza  # noqa: E501

        :return: The currency of this InlineResponse2001Details.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InlineResponse2001Details.

        Valuta zakaza  # noqa: E501

        :param currency: The currency of this InlineResponse2001Details.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def date_from(self):
        """Gets the date_from of this InlineResponse2001Details.  # noqa: E501

        Nahalo othetnogo perioda  # noqa: E501

        :return: The date_from of this InlineResponse2001Details.  # noqa: E501
        :rtype: str
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this InlineResponse2001Details.

        Nahalo othetnogo perioda  # noqa: E501

        :param date_from: The date_from of this InlineResponse2001Details.  # noqa: E501
        :type: str
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this InlineResponse2001Details.  # noqa: E501

        Konec othetnogo perioda  # noqa: E501

        :return: The date_to of this InlineResponse2001Details.  # noqa: E501
        :rtype: str
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this InlineResponse2001Details.

        Konec othetnogo perioda  # noqa: E501

        :param date_to: The date_to of this InlineResponse2001Details.  # noqa: E501
        :type: str
        """

        self._date_to = date_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001Details, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001Details):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
