# coding: utf-8

"""
    Obhenie s pokupatelami

    <div class=\"description_important\">       Uznat bolhe ob obhenii s pokupatelami mohno v <a href=\"https://seller.wildberries.ru/instructions/category/f7f6c465-dd12-422d-80a0-a6d9562115d5?goBackOption=prevRoute&categoryId=30817062-14cc-4a82-bc78-3600c2b0685b\">spravohnom centre</a> </div>  herez metody obhenia s pokupatelem vy mohete rabotat s:   1. [Voprosami](/openapi/user-communication#tag/Voprosy) i [otzyvami](/openapi/user-communication#tag/Otzyvy) pokupatelei   2. [hablonami otvetov](/openapi/user-communication#tag/Shablony-otvetov) na voprosy i otzyvy   3. [hatami s pokupatelami](/openapi/user-communication#tag/Chat-s-pokupatelyami)   4. [Zaavkami pokupatelei na vozvrat](/openapi/user-communication#tag/Vozvraty-pokupatelyami)   # noqa: E501

    OpenAPI spec version: communication
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.communications.api_client import ApiClient


class OtzyvyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_feedback_get(self, id, **kwargs):  # noqa: E501
        """Poluhit otzyv po ID  # noqa: E501

        Metod predostavlaet dannye [otzyva](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks/get) po ego ID.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedback_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID otzyva (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedback_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedback_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v1_feedback_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Poluhit otzyv po ID  # noqa: E501

        Metod predostavlaet dannye [otzyva](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks/get) po ego ID.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedback_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID otzyva (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedback_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v1_feedback_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedback', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_actions_post(self, **kwargs):  # noqa: E501
        """Pohalovatsa na otzyv, soobhit o probleme s tovarom  # noqa: E501

        Metod pozvolaet:   - podat halobu na [otzyv](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks/get)   - soobhit o [probleme s tovarom](user-communication#tag/Otzyvy/paths/~1api~1v1~1supplier-valuations/get) iz otzyva  <div class=\"description_important\">   ID otzyva ne validiruetsa. Esli v zaprose vy peredali nekorrektnyi ID, vy ne poluhite ohibku. </div>  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_actions_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeedbacksActionsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_actions_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_actions_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_actions_post_with_http_info(self, **kwargs):  # noqa: E501
        """Pohalovatsa na otzyv, soobhit o probleme s tovarom  # noqa: E501

        Metod pozvolaet:   - podat halobu na [otzyv](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks/get)   - soobhit o [probleme s tovarom](user-communication#tag/Otzyvy/paths/~1api~1v1~1supplier-valuations/get) iz otzyva  <div class=\"description_important\">   ID otzyva ne validiruetsa. Esli v zaprose vy peredali nekorrektnyi ID, vy ne poluhite ohibku. </div>  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_actions_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeedbacksActionsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_actions_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/actions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_answer_patch(self, **kwargs):  # noqa: E501
        """Otredaktirovat otvet na otzyv  # noqa: E501

        Metod pozvolaet otredaktirovat uhe otpravlennyi [otvet na otzyv](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks~1answer/post) pokupatela. <br><br> Otredaktirovat otvet mohno tolko odin raz v tehenie 60 dnei c momenta otpravki.  <div class=\"description_important\">   ID otzyva ne validiruetsa. Esli v zaprose vy peredali nekorrektnyi ID, vy ne poluhite ohibku. </div>  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund.  </div>     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_answer_patch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeedbacksAnswerBody1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_answer_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_answer_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_answer_patch_with_http_info(self, **kwargs):  # noqa: E501
        """Otredaktirovat otvet na otzyv  # noqa: E501

        Metod pozvolaet otredaktirovat uhe otpravlennyi [otvet na otzyv](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks~1answer/post) pokupatela. <br><br> Otredaktirovat otvet mohno tolko odin raz v tehenie 60 dnei c momenta otpravki.  <div class=\"description_important\">   ID otzyva ne validiruetsa. Esli v zaprose vy peredali nekorrektnyi ID, vy ne poluhite ohibku. </div>  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund.  </div>     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_answer_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeedbacksAnswerBody1 body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_answer_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/answer', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_answer_post(self, **kwargs):  # noqa: E501
        """Otvetit na otzyv  # noqa: E501

        Metod pozvolaet otvetit na [otzyv](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks/get) pokupatela.  <div class=\"description_important\">   ID otzyva ne validiruetsa. Esli v zaprose vy peredali nekorrektnyi ID, vy ne poluhite ohibku. </div>   <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_answer_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeedbacksAnswerBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_answer_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_answer_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_answer_post_with_http_info(self, **kwargs):  # noqa: E501
        """Otvetit na otzyv  # noqa: E501

        Metod pozvolaet otvetit na [otzyv](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks/get) pokupatela.  <div class=\"description_important\">   ID otzyva ne validiruetsa. Esli v zaprose vy peredali nekorrektnyi ID, vy ne poluhite ohibku. </div>   <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_answer_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeedbacksAnswerBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_answer_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/answer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_archive_get(self, take, skip, **kwargs):  # noqa: E501
        """Spisok arhivnyh otzyvov  # noqa: E501

        Metod predostavlaet spisok arhivnyh [otzyvov](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks/get). <br><br> Otzyv stanovitsa arhivnym, esli:   - na otzyv poluhen otvet   - na otzyv ne poluhen otvet v tehenie 30 dnei   - v otzyve net teksta i foto  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_archive_get(take, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int take: Kolihestvo otzyvov (max. 5 000) (required)
        :param int skip: Kolihestvo otzyvov dla propuska (required)
        :param int nm_id: Artikul WB
        :param str order: Sortirovka otzyvov po date (dateAsc/dateDesc)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_archive_get_with_http_info(take, skip, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_archive_get_with_http_info(take, skip, **kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_archive_get_with_http_info(self, take, skip, **kwargs):  # noqa: E501
        """Spisok arhivnyh otzyvov  # noqa: E501

        Metod predostavlaet spisok arhivnyh [otzyvov](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks/get). <br><br> Otzyv stanovitsa arhivnym, esli:   - na otzyv poluhen otvet   - na otzyv ne poluhen otvet v tehenie 30 dnei   - v otzyve net teksta i foto  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_archive_get_with_http_info(take, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int take: Kolihestvo otzyvov (max. 5 000) (required)
        :param int skip: Kolihestvo otzyvov dla propuska (required)
        :param int nm_id: Artikul WB
        :param str order: Sortirovka otzyvov po date (dateAsc/dateDesc)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['take', 'skip', 'nm_id', 'order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_archive_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'take' is set
        if ('take' not in params or
                params['take'] is None):
            raise ValueError("Missing the required parameter `take` when calling `api_v1_feedbacks_archive_get`")  # noqa: E501
        # verify the required parameter 'skip' is set
        if ('skip' not in params or
                params['skip'] is None):
            raise ValueError("Missing the required parameter `skip` when calling `api_v1_feedbacks_archive_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nm_id' in params:
            query_params.append(('nmId', params['nm_id']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/archive', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_count_get(self, **kwargs):  # noqa: E501
        """Kolihestvo otzyvov  # noqa: E501

        Metod predostavlaet kolihestvo obrabotannyh ili neobrabotannyh [otzyvov](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks/get) za zadannyi period.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int date_from: Data nahala perioda v formate Unix timestamp
        :param int date_to: Data konca perioda v formate Unix timestamp
        :param bool is_answered: Obrabotannye otzyvy(`true`) ili neobrabotannye otzyvy(`false`).<br> Esli ne ukazat, vernutsa obrabotannye otzyvy. 
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """Kolihestvo otzyvov  # noqa: E501

        Metod predostavlaet kolihestvo obrabotannyh ili neobrabotannyh [otzyvov](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks/get) za zadannyi period.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int date_from: Data nahala perioda v formate Unix timestamp
        :param int date_to: Data konca perioda v formate Unix timestamp
        :param bool is_answered: Obrabotannye otzyvy(`true`) ili neobrabotannye otzyvy(`false`).<br> Esli ne ukazat, vernutsa obrabotannye otzyvy. 
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_from', 'date_to', 'is_answered']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501
        if 'is_answered' in params:
            query_params.append(('isAnswered', params['is_answered']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_count_unanswered_get(self, **kwargs):  # noqa: E501
        """Neobrabotannye otzyvy  # noqa: E501

        Metod predostavlaet:   - kolihestvo neobrabotannyh [otzyvov](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks/get) za segodna i za vse vrema   - srednuu ocenku vseh otzyvov  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_count_unanswered_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_count_unanswered_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_count_unanswered_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_count_unanswered_get_with_http_info(self, **kwargs):  # noqa: E501
        """Neobrabotannye otzyvy  # noqa: E501

        Metod predostavlaet:   - kolihestvo neobrabotannyh [otzyvov](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks/get) za segodna i za vse vrema   - srednuu ocenku vseh otzyvov  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_count_unanswered_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_count_unanswered_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/count-unanswered', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_get(self, is_answered, take, skip, **kwargs):  # noqa: E501
        """Spisok otzyvov  # noqa: E501

        Metod predostavlaet spisok otzyvov po zadannym filtram. Vy mohete:   - poluhit dannye obrabotannyh i neobrabotannyh otzyvov   - sortirovat otzyvy po date   - nastroit paginaciu i kolihestvo otzyvov v otvete  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_get(is_answered, take, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_answered: Obrabotannye otzyvy (`true`) ili neobrabotannye otzyvy(`false`) (required)
        :param int take: Kolihestvo otzyvov (max. 5 000) (required)
        :param int skip: Kolihestvo otzyvov dla propuska (max. 199990) (required)
        :param int nm_id: Artikul WB
        :param str order: Sortirovka otzyvov po date (dateAsc/dateDesc)
        :param int date_from: Data nahala perioda v formate Unix timestamp
        :param int date_to: Data konca perioda v formate Unix timestamp
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_get_with_http_info(is_answered, take, skip, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_get_with_http_info(is_answered, take, skip, **kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_get_with_http_info(self, is_answered, take, skip, **kwargs):  # noqa: E501
        """Spisok otzyvov  # noqa: E501

        Metod predostavlaet spisok otzyvov po zadannym filtram. Vy mohete:   - poluhit dannye obrabotannyh i neobrabotannyh otzyvov   - sortirovat otzyvy po date   - nastroit paginaciu i kolihestvo otzyvov v otvete  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_get_with_http_info(is_answered, take, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_answered: Obrabotannye otzyvy (`true`) ili neobrabotannye otzyvy(`false`) (required)
        :param int take: Kolihestvo otzyvov (max. 5 000) (required)
        :param int skip: Kolihestvo otzyvov dla propuska (max. 199990) (required)
        :param int nm_id: Artikul WB
        :param str order: Sortirovka otzyvov po date (dateAsc/dateDesc)
        :param int date_from: Data nahala perioda v formate Unix timestamp
        :param int date_to: Data konca perioda v formate Unix timestamp
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_answered', 'take', 'skip', 'nm_id', 'order', 'date_from', 'date_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_answered' is set
        if ('is_answered' not in params or
                params['is_answered'] is None):
            raise ValueError("Missing the required parameter `is_answered` when calling `api_v1_feedbacks_get`")  # noqa: E501
        # verify the required parameter 'take' is set
        if ('take' not in params or
                params['take'] is None):
            raise ValueError("Missing the required parameter `take` when calling `api_v1_feedbacks_get`")  # noqa: E501
        # verify the required parameter 'skip' is set
        if ('skip' not in params or
                params['skip'] is None):
            raise ValueError("Missing the required parameter `skip` when calling `api_v1_feedbacks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_answered' in params:
            query_params.append(('isAnswered', params['is_answered']))  # noqa: E501
        if 'nm_id' in params:
            query_params.append(('nmId', params['nm_id']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_order_return_post(self, body, **kwargs):  # noqa: E501
        """Vozvrat tovara po ID otzyva  # noqa: E501

        Metod zaprahivaet vozvrat tovara, po kotoromu ostavlen [otzyv](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks/get).  <br><br> Vozvrat dostupen dla otzyvov s polem `\"isAbleReturnProductOrders\": true`.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_order_return_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderReturnBody body: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_order_return_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_order_return_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_order_return_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Vozvrat tovara po ID otzyva  # noqa: E501

        Metod zaprahivaet vozvrat tovara, po kotoromu ostavlen [otzyv](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks/get).  <br><br> Vozvrat dostupen dla otzyvov s polem `\"isAbleReturnProductOrders\": true`.  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_order_return_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderReturnBody body: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_order_return_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_feedbacks_order_return_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/order/return', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_supplier_valuations_get(self, **kwargs):  # noqa: E501
        """Poluhit spiski prihin halob na otzyv i problem s tovarom  # noqa: E501

        Metod predostavlaet spiski prihin [halob na otzyv i problem s tovarom](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks~1actions/post).  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_supplier_valuations_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_locale: Vybor azyka znahenii polei otveta (`ru` - russkii, `en` - angliiskii, `zh` - kitaiskii)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_supplier_valuations_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_supplier_valuations_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_supplier_valuations_get_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit spiski prihin halob na otzyv i problem s tovarom  # noqa: E501

        Metod predostavlaet spiski prihin [halob na otzyv i problem s tovarom](/openapi/user-communication#tag/Otzyvy/paths/~1api~1v1~1feedbacks~1actions/post).  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Voprosy i otzyvy</a> na odin akkaunt prodavca.<br>   Esli prevysit limit v 3 zaprosa v sekundu, otpravka zaprosov budet zablokirovana na 60 sekund </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_supplier_valuations_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_locale: Vybor azyka znahenii polei otveta (`ru` - russkii, `en` - angliiskii, `zh` - kitaiskii)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_supplier_valuations_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_locale' in params:
            header_params['X-Locale'] = params['x_locale']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/supplier-valuations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
