# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchReportPositionClusters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_hundred': 'SearchReportPositionClustersFirstHundred',
        'second_hundred': 'SearchReportPositionClustersSecondHundred',
        'below': 'SearchReportPositionClustersBelow'
    }

    attribute_map = {
        'first_hundred': 'firstHundred',
        'second_hundred': 'secondHundred',
        'below': 'below'
    }

    def __init__(self, first_hundred=None, second_hundred=None, below=None):  # noqa: E501
        """SearchReportPositionClusters - a model defined in Swagger"""  # noqa: E501
        self._first_hundred = None
        self._second_hundred = None
        self._below = None
        self.discriminator = None
        self.first_hundred = first_hundred
        self.second_hundred = second_hundred
        self.below = below

    @property
    def first_hundred(self):
        """Gets the first_hundred of this SearchReportPositionClusters.  # noqa: E501


        :return: The first_hundred of this SearchReportPositionClusters.  # noqa: E501
        :rtype: SearchReportPositionClustersFirstHundred
        """
        return self._first_hundred

    @first_hundred.setter
    def first_hundred(self, first_hundred):
        """Sets the first_hundred of this SearchReportPositionClusters.


        :param first_hundred: The first_hundred of this SearchReportPositionClusters.  # noqa: E501
        :type: SearchReportPositionClustersFirstHundred
        """
        if first_hundred is None:
            raise ValueError("Invalid value for `first_hundred`, must not be `None`")  # noqa: E501

        self._first_hundred = first_hundred

    @property
    def second_hundred(self):
        """Gets the second_hundred of this SearchReportPositionClusters.  # noqa: E501


        :return: The second_hundred of this SearchReportPositionClusters.  # noqa: E501
        :rtype: SearchReportPositionClustersSecondHundred
        """
        return self._second_hundred

    @second_hundred.setter
    def second_hundred(self, second_hundred):
        """Sets the second_hundred of this SearchReportPositionClusters.


        :param second_hundred: The second_hundred of this SearchReportPositionClusters.  # noqa: E501
        :type: SearchReportPositionClustersSecondHundred
        """
        if second_hundred is None:
            raise ValueError("Invalid value for `second_hundred`, must not be `None`")  # noqa: E501

        self._second_hundred = second_hundred

    @property
    def below(self):
        """Gets the below of this SearchReportPositionClusters.  # noqa: E501


        :return: The below of this SearchReportPositionClusters.  # noqa: E501
        :rtype: SearchReportPositionClustersBelow
        """
        return self._below

    @below.setter
    def below(self, below):
        """Sets the below of this SearchReportPositionClusters.


        :param below: The below of this SearchReportPositionClusters.  # noqa: E501
        :type: SearchReportPositionClustersBelow
        """
        if below is None:
            raise ValueError("Invalid value for `below`, must not be `None`")  # noqa: E501

        self._below = below

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchReportPositionClusters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchReportPositionClusters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
