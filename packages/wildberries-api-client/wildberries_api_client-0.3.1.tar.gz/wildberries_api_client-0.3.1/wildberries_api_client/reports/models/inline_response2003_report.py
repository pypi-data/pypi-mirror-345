# coding: utf-8

"""
    Othety

    <div class=\"description_important\">     Uznat bolhe ob othetah mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/5f2162c5-069b-416d-a4e1-48da2a76e6b0\">spravohnom centre</a> </div>  S pomohu etih metodov vy mohete poluhit [osnovnye othety](/openapi/reports#tag/Osnovnye-otchyoty) i othety o:   1. [Ostatkah na skladah](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah)   2. [Tovarah s obazatelnoi markirovkoi](/openapi/reports#tag/Otchyot-o-tovarah-c-obyazatelnoj-markirovkoj)   3. [Uderhaniah](/openapi/reports#tag/Otchyoty-ob-uderzhaniyah)   4. [Platnoi priemke](/openapi/reports#tag/Platnaya-priyomka)   5. [Platnom hranenii](/openapi/reports#tag/Platnoe-hranenie)   6. [Prodahah po regionam](/openapi/reports#tag/Prodazhi-po-regionam)   7. [Dole brenda v prodahah](/openapi/reports#tag/Dolya-brenda-v-prodazhah)   8. [Skrytyh tovarah](/openapi/reports#tag/Skrytye-tovary)   9. [Vozvratah i peremehenii tovarov](/openapi/reports#tag/Otchyot-o-vozvratah-i-peremeshenii-tovarov)   10. [Dinamike oborahivaemosti](/openapi/reports#tag/Dinamika-oborachivaemosti)   # noqa: E501

    OpenAPI spec version: reports
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2003Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_height': 'float',
        'actual_length': 'float',
        'actual_volume': 'float',
        'actual_width': 'float',
        '_date': 'str',
        'dimension_difference': 'float',
        'height': 'float',
        'length': 'float',
        'log_warehouse_coef': 'float',
        'nm_id': 'int',
        'photo_urls': 'str',
        'title': 'str',
        'volume': 'float',
        'width': 'float'
    }

    attribute_map = {
        'actual_height': 'actualHeight',
        'actual_length': 'actualLength',
        'actual_volume': 'actualVolume',
        'actual_width': 'actualWidth',
        '_date': 'date',
        'dimension_difference': 'dimensionDifference',
        'height': 'height',
        'length': 'length',
        'log_warehouse_coef': 'logWarehouseCoef',
        'nm_id': 'nmID',
        'photo_urls': 'photoUrls',
        'title': 'title',
        'volume': 'volume',
        'width': 'width'
    }

    def __init__(self, actual_height=None, actual_length=None, actual_volume=None, actual_width=None, _date=None, dimension_difference=None, height=None, length=None, log_warehouse_coef=None, nm_id=None, photo_urls=None, title=None, volume=None, width=None):  # noqa: E501
        """InlineResponse2003Report - a model defined in Swagger"""  # noqa: E501
        self._actual_height = None
        self._actual_length = None
        self._actual_volume = None
        self._actual_width = None
        self.__date = None
        self._dimension_difference = None
        self._height = None
        self._length = None
        self._log_warehouse_coef = None
        self._nm_id = None
        self._photo_urls = None
        self._title = None
        self._volume = None
        self._width = None
        self.discriminator = None
        if actual_height is not None:
            self.actual_height = actual_height
        if actual_length is not None:
            self.actual_length = actual_length
        if actual_volume is not None:
            self.actual_volume = actual_volume
        if actual_width is not None:
            self.actual_width = actual_width
        if _date is not None:
            self._date = _date
        if dimension_difference is not None:
            self.dimension_difference = dimension_difference
        if height is not None:
            self.height = height
        if length is not None:
            self.length = length
        if log_warehouse_coef is not None:
            self.log_warehouse_coef = log_warehouse_coef
        if nm_id is not None:
            self.nm_id = nm_id
        if photo_urls is not None:
            self.photo_urls = photo_urls
        if title is not None:
            self.title = title
        if volume is not None:
            self.volume = volume
        if width is not None:
            self.width = width

    @property
    def actual_height(self):
        """Gets the actual_height of this InlineResponse2003Report.  # noqa: E501

        Faktiheskaa vysota, sm  # noqa: E501

        :return: The actual_height of this InlineResponse2003Report.  # noqa: E501
        :rtype: float
        """
        return self._actual_height

    @actual_height.setter
    def actual_height(self, actual_height):
        """Sets the actual_height of this InlineResponse2003Report.

        Faktiheskaa vysota, sm  # noqa: E501

        :param actual_height: The actual_height of this InlineResponse2003Report.  # noqa: E501
        :type: float
        """

        self._actual_height = actual_height

    @property
    def actual_length(self):
        """Gets the actual_length of this InlineResponse2003Report.  # noqa: E501

        Faktiheskaa dlina, sm  # noqa: E501

        :return: The actual_length of this InlineResponse2003Report.  # noqa: E501
        :rtype: float
        """
        return self._actual_length

    @actual_length.setter
    def actual_length(self, actual_length):
        """Sets the actual_length of this InlineResponse2003Report.

        Faktiheskaa dlina, sm  # noqa: E501

        :param actual_length: The actual_length of this InlineResponse2003Report.  # noqa: E501
        :type: float
        """

        self._actual_length = actual_length

    @property
    def actual_volume(self):
        """Gets the actual_volume of this InlineResponse2003Report.  # noqa: E501

        Faktiheskii obem, l  # noqa: E501

        :return: The actual_volume of this InlineResponse2003Report.  # noqa: E501
        :rtype: float
        """
        return self._actual_volume

    @actual_volume.setter
    def actual_volume(self, actual_volume):
        """Sets the actual_volume of this InlineResponse2003Report.

        Faktiheskii obem, l  # noqa: E501

        :param actual_volume: The actual_volume of this InlineResponse2003Report.  # noqa: E501
        :type: float
        """

        self._actual_volume = actual_volume

    @property
    def actual_width(self):
        """Gets the actual_width of this InlineResponse2003Report.  # noqa: E501

        Faktiheskaa hirina, sm  # noqa: E501

        :return: The actual_width of this InlineResponse2003Report.  # noqa: E501
        :rtype: float
        """
        return self._actual_width

    @actual_width.setter
    def actual_width(self, actual_width):
        """Sets the actual_width of this InlineResponse2003Report.

        Faktiheskaa hirina, sm  # noqa: E501

        :param actual_width: The actual_width of this InlineResponse2003Report.  # noqa: E501
        :type: float
        """

        self._actual_width = actual_width

    @property
    def _date(self):
        """Gets the _date of this InlineResponse2003Report.  # noqa: E501

        Data izmerenia v formate RFC 3339. Dla rasheta ispolzuutsa izmerenia za 30 dnei, do nahala othetnoi nedeli  # noqa: E501

        :return: The _date of this InlineResponse2003Report.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse2003Report.

        Data izmerenia v formate RFC 3339. Dla rasheta ispolzuutsa izmerenia za 30 dnei, do nahala othetnoi nedeli  # noqa: E501

        :param _date: The _date of this InlineResponse2003Report.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def dimension_difference(self):
        """Gets the dimension_difference of this InlineResponse2003Report.  # noqa: E501

        Raznica v gabaritah, %  # noqa: E501

        :return: The dimension_difference of this InlineResponse2003Report.  # noqa: E501
        :rtype: float
        """
        return self._dimension_difference

    @dimension_difference.setter
    def dimension_difference(self, dimension_difference):
        """Sets the dimension_difference of this InlineResponse2003Report.

        Raznica v gabaritah, %  # noqa: E501

        :param dimension_difference: The dimension_difference of this InlineResponse2003Report.  # noqa: E501
        :type: float
        """

        self._dimension_difference = dimension_difference

    @property
    def height(self):
        """Gets the height of this InlineResponse2003Report.  # noqa: E501

        Vysota iz kartohki, sm  # noqa: E501

        :return: The height of this InlineResponse2003Report.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this InlineResponse2003Report.

        Vysota iz kartohki, sm  # noqa: E501

        :param height: The height of this InlineResponse2003Report.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def length(self):
        """Gets the length of this InlineResponse2003Report.  # noqa: E501

        Dlina iz kartohki, sm  # noqa: E501

        :return: The length of this InlineResponse2003Report.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this InlineResponse2003Report.

        Dlina iz kartohki, sm  # noqa: E501

        :param length: The length of this InlineResponse2003Report.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def log_warehouse_coef(self):
        """Gets the log_warehouse_coef of this InlineResponse2003Report.  # noqa: E501

        Koefficient logistiki i hranenia dla tovara  # noqa: E501

        :return: The log_warehouse_coef of this InlineResponse2003Report.  # noqa: E501
        :rtype: float
        """
        return self._log_warehouse_coef

    @log_warehouse_coef.setter
    def log_warehouse_coef(self, log_warehouse_coef):
        """Sets the log_warehouse_coef of this InlineResponse2003Report.

        Koefficient logistiki i hranenia dla tovara  # noqa: E501

        :param log_warehouse_coef: The log_warehouse_coef of this InlineResponse2003Report.  # noqa: E501
        :type: float
        """

        self._log_warehouse_coef = log_warehouse_coef

    @property
    def nm_id(self):
        """Gets the nm_id of this InlineResponse2003Report.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this InlineResponse2003Report.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this InlineResponse2003Report.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this InlineResponse2003Report.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def photo_urls(self):
        """Gets the photo_urls of this InlineResponse2003Report.  # noqa: E501

        Foto izmerenii  # noqa: E501

        :return: The photo_urls of this InlineResponse2003Report.  # noqa: E501
        :rtype: str
        """
        return self._photo_urls

    @photo_urls.setter
    def photo_urls(self, photo_urls):
        """Sets the photo_urls of this InlineResponse2003Report.

        Foto izmerenii  # noqa: E501

        :param photo_urls: The photo_urls of this InlineResponse2003Report.  # noqa: E501
        :type: str
        """

        self._photo_urls = photo_urls

    @property
    def title(self):
        """Gets the title of this InlineResponse2003Report.  # noqa: E501

        Naimenovanie tovara  # noqa: E501

        :return: The title of this InlineResponse2003Report.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse2003Report.

        Naimenovanie tovara  # noqa: E501

        :param title: The title of this InlineResponse2003Report.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def volume(self):
        """Gets the volume of this InlineResponse2003Report.  # noqa: E501

        Obem iz kartohki, l  # noqa: E501

        :return: The volume of this InlineResponse2003Report.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this InlineResponse2003Report.

        Obem iz kartohki, l  # noqa: E501

        :param volume: The volume of this InlineResponse2003Report.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def width(self):
        """Gets the width of this InlineResponse2003Report.  # noqa: E501

        hirina iz kartohki, sm  # noqa: E501

        :return: The width of this InlineResponse2003Report.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this InlineResponse2003Report.

        hirina iz kartohki, sm  # noqa: E501

        :param width: The width of this InlineResponse2003Report.  # noqa: E501
        :type: float
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
