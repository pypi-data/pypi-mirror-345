# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _spaudio_c
else:
    import _spaudio_c

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def spGetNumAudioDriver():
    return _spaudio_c.spGetNumAudioDriver()

def xspGetAudioDriverName(index):
    return _spaudio_c.xspGetAudioDriverName(index)

def spGetNumAudioDriverDevice(driver_name):
    return _spaudio_c.spGetNumAudioDriverDevice(driver_name)

def xspGetAudioDriverDeviceName(driver_name, index):
    return _spaudio_c.xspGetAudioDriverDeviceName(driver_name, index)

def spInitAudioDriver(driver_name):
    return _spaudio_c.spInitAudioDriver(driver_name)

def _spFreeAudioDriver(audio):
    return _spaudio_c._spFreeAudioDriver(audio)

def xspGetAudioDeviceName(audio, device_index):
    return _spaudio_c.xspGetAudioDeviceName(audio, device_index)

def spSelectAudioDevice(audio, device_index):
    return _spaudio_c.spSelectAudioDevice(audio, device_index)

def spSetAudioSampleRate(audio, samp_rate):
    return _spaudio_c.spSetAudioSampleRate(audio, samp_rate)

def spSetAudioChannel(audio, num_channel):
    return _spaudio_c.spSetAudioChannel(audio, num_channel)

def spSetAudioBufferSize(audio, buffer_size):
    return _spaudio_c.spSetAudioBufferSize(audio, buffer_size)

def spSetAudioNumBuffer(audio, num_buffer):
    return _spaudio_c.spSetAudioNumBuffer(audio, num_buffer)

def spSetAudioBlockingMode(audio, block_mode):
    return _spaudio_c.spSetAudioBlockingMode(audio, block_mode)

def spSetAudioSampleBit(audio, samp_bit):
    return _spaudio_c.spSetAudioSampleBit(audio, samp_bit)

def spGetNumAudioDevice(audio):
    return _spaudio_c.spGetNumAudioDevice(audio)

def spGetAudioSampleRate(audio):
    return _spaudio_c.spGetAudioSampleRate(audio)

def spGetAudioChannel(audio):
    return _spaudio_c.spGetAudioChannel(audio)

def spGetAudioBufferSize(audio):
    return _spaudio_c.spGetAudioBufferSize(audio)

def spGetAudioNumBuffer(audio):
    return _spaudio_c.spGetAudioNumBuffer(audio)

def spGetAudioBlockingMode(audio):
    return _spaudio_c.spGetAudioBlockingMode(audio)

def spGetAudioSampleBit(audio):
    return _spaudio_c.spGetAudioSampleBit(audio)

def spGetAudioSpecifiedSampleBit(audio):
    return _spaudio_c.spGetAudioSpecifiedSampleBit(audio)

def spGetAudioOutputPosition(audio, OUTPUT):
    return _spaudio_c.spGetAudioOutputPosition(audio, OUTPUT)

def spOpenAudioDevice(audio, mode):
    return _spaudio_c.spOpenAudioDevice(audio, mode)

def spCloseAudioDevice(audio):
    return _spaudio_c.spCloseAudioDevice(audio)

def spStopAudio(audio):
    return _spaudio_c.spStopAudio(audio)

def spSyncAudio(audio):
    return _spaudio_c.spSyncAudio(audio)

def spWriteAudioBuffer_(audio, buffer, offset_byte, length_byte):
    return _spaudio_c.spWriteAudioBuffer_(audio, buffer, offset_byte, length_byte)

def spWriteAudioDoubleBufferWeighted_(audio, buffer, weight, offset, length):
    return _spaudio_c.spWriteAudioDoubleBufferWeighted_(audio, buffer, weight, offset, length)

def spReadAudioBuffer_(audio, buffer, offset_byte, length_byte):
    return _spaudio_c.spReadAudioBuffer_(audio, buffer, offset_byte, length_byte)

def spReadAudioDoubleBufferWeighted_(audio, buffer, weight, offset, length):
    return _spaudio_c.spReadAudioDoubleBufferWeighted_(audio, buffer, weight, offset, length)

def spSetAudioCallbackFunc_(audio, call_type, obj):
    return _spaudio_c.spSetAudioCallbackFunc_(audio, call_type, obj)


