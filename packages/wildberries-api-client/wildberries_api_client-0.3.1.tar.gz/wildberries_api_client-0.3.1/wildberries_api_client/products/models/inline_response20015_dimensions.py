# coding: utf-8

"""
    Rabota s tovarami

    <div class=\"description_ref\">     Uznat, kak ispolzovat metody v biznes-keisah, mohno v <a href=\"https://dev.wildberries.ru/news/101\">instrukcii po rabote s tovarami</a> </div>  Rabota s tovarami vkluhaet v seba:   1. [Sozdanie](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) i [redaktirovanie](/openapi/work-with-products#tag/Kartochki-tovarov) kartohek tovarov: v tom hisle, poluhenie [kategorii, predmetov i harakteristik tovarov](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) i zagruzku [mediafailov](/openapi/work-with-products#tag/Mediafajly).   2. Nastroiku [arlykov](/openapi/work-with-products#tag/Yarlyki) dla udobnogo poiska tovarov.   3. Ustanovku [cen i skidok](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Upravlenie [ostatkami tovarov](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) i [skladami](/openapi/work-with-products#tag/Sklady-prodavca), esli vy rabotaete po modeli prodah so sklada prodavca.   # noqa: E501

    OpenAPI spec version: products
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20015Dimensions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'length': 'int',
        'width': 'int',
        'height': 'int',
        'weight_brutto': 'float',
        'is_valid': 'bool'
    }

    attribute_map = {
        'length': 'length',
        'width': 'width',
        'height': 'height',
        'weight_brutto': 'weightBrutto',
        'is_valid': 'isValid'
    }

    def __init__(self, length=None, width=None, height=None, weight_brutto=None, is_valid=None):  # noqa: E501
        """InlineResponse20015Dimensions - a model defined in Swagger"""  # noqa: E501
        self._length = None
        self._width = None
        self._height = None
        self._weight_brutto = None
        self._is_valid = None
        self.discriminator = None
        if length is not None:
            self.length = length
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if weight_brutto is not None:
            self.weight_brutto = weight_brutto
        if is_valid is not None:
            self.is_valid = is_valid

    @property
    def length(self):
        """Gets the length of this InlineResponse20015Dimensions.  # noqa: E501

        Dlina, sm  # noqa: E501

        :return: The length of this InlineResponse20015Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this InlineResponse20015Dimensions.

        Dlina, sm  # noqa: E501

        :param length: The length of this InlineResponse20015Dimensions.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def width(self):
        """Gets the width of this InlineResponse20015Dimensions.  # noqa: E501

        hirina, sm  # noqa: E501

        :return: The width of this InlineResponse20015Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this InlineResponse20015Dimensions.

        hirina, sm  # noqa: E501

        :param width: The width of this InlineResponse20015Dimensions.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this InlineResponse20015Dimensions.  # noqa: E501

        Vysota, sm  # noqa: E501

        :return: The height of this InlineResponse20015Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this InlineResponse20015Dimensions.

        Vysota, sm  # noqa: E501

        :param height: The height of this InlineResponse20015Dimensions.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def weight_brutto(self):
        """Gets the weight_brutto of this InlineResponse20015Dimensions.  # noqa: E501

        Ves, kg. Kolihestvo znakov posle zapatoi <=3  # noqa: E501

        :return: The weight_brutto of this InlineResponse20015Dimensions.  # noqa: E501
        :rtype: float
        """
        return self._weight_brutto

    @weight_brutto.setter
    def weight_brutto(self, weight_brutto):
        """Sets the weight_brutto of this InlineResponse20015Dimensions.

        Ves, kg. Kolihestvo znakov posle zapatoi <=3  # noqa: E501

        :param weight_brutto: The weight_brutto of this InlineResponse20015Dimensions.  # noqa: E501
        :type: float
        """

        self._weight_brutto = weight_brutto

    @property
    def is_valid(self):
        """Gets the is_valid of this InlineResponse20015Dimensions.  # noqa: E501

        Potencialnaa nekorrektnost gabaritov tovara:    - `true` — ne vyavlena. `\"isValid\":true` ne garantiruet, hto razmery ukazany korrektno. V otdelnyh sluhaah (naprimer, pri sozdanii novoi kategorii tovarov) `\"isValid\":true` budet vozvrahatsa pri lubyh znaheniah, krome nulevyh.  - `false` — ukazannye gabarity znahitelno otlihautsa ot srednih po kategorii (predmetu). Rekomenduetsa pereproverit, pravilno li ukazany razmery tovara v upakovke **v santimetrah**. Funkcionalnost kartohki tovara, v tom hisle nahislenie logistiki i hranenia, pri etom ogranihena ne budet. Logistika i hranenie prodolhaut nahislatsa — po tekuhim gabaritam. Takhe `\"isValid\":false` vozvrahaetsa pri otsutstvii znahenii ili nulevom znahenii luboi storony.   # noqa: E501

        :return: The is_valid of this InlineResponse20015Dimensions.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this InlineResponse20015Dimensions.

        Potencialnaa nekorrektnost gabaritov tovara:    - `true` — ne vyavlena. `\"isValid\":true` ne garantiruet, hto razmery ukazany korrektno. V otdelnyh sluhaah (naprimer, pri sozdanii novoi kategorii tovarov) `\"isValid\":true` budet vozvrahatsa pri lubyh znaheniah, krome nulevyh.  - `false` — ukazannye gabarity znahitelno otlihautsa ot srednih po kategorii (predmetu). Rekomenduetsa pereproverit, pravilno li ukazany razmery tovara v upakovke **v santimetrah**. Funkcionalnost kartohki tovara, v tom hisle nahislenie logistiki i hranenia, pri etom ogranihena ne budet. Logistika i hranenie prodolhaut nahislatsa — po tekuhim gabaritam. Takhe `\"isValid\":false` vozvrahaetsa pri otsutstvii znahenii ili nulevom znahenii luboi storony.   # noqa: E501

        :param is_valid: The is_valid of this InlineResponse20015Dimensions.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20015Dimensions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20015Dimensions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
