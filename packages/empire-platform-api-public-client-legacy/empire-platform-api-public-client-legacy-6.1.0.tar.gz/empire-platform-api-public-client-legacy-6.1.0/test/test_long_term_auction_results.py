# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from empire_platform_api_public_client_legacy.models.long_term_auction_results import LongTermAuctionResults  # noqa: E501

class TestLongTermAuctionResults(unittest.TestCase):
    """LongTermAuctionResults unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LongTermAuctionResults:
        """Test LongTermAuctionResults
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LongTermAuctionResults`
        """
        model = LongTermAuctionResults()  # noqa: E501
        if include_optional:
            return LongTermAuctionResults(
                congestion_rent = empire_platform_api_public_client_legacy.models.auction_result_congestion_rent.AuctionResultCongestionRent(
                    oc_revenue = 1.337, 
                    returns_revenue = 1.337, 
                    total_revenue = 1.337, ),
                bids = [
                    empire_platform_api_public_client_legacy.models.long_term_auction_results_bids.LongTermAuctionResults_bids(
                        value = empire_platform_api_public_client_legacy.models.bid_value.BidValue(
                            price = 1.337, 
                            capacity = 56, ), 
                        allocated_capacity = 56, 
                        status = 'NOT_CLEARED_YET', )
                    ],
                total_requested_capacity = 56,
                total_allocated_capacity = 56,
                allocated_capacity = [
                    empire_platform_api_public_client_legacy.models.long_term_auction_results_allocated_capacity.LongTermAuctionResults_allocatedCapacity(
                        participant = empire_platform_api_public_client_legacy.models.auction_result_participant.AuctionResultParticipant(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            name = '', 
                            eic_code = '---7S--058SL--92', ), 
                        requested_capacity = 56, 
                        allocated_trs = 56, )
                    ],
                marginal_price = 1.337,
                reserve_price = 1.337
            )
        else:
            return LongTermAuctionResults(
                bids = [
                    empire_platform_api_public_client_legacy.models.long_term_auction_results_bids.LongTermAuctionResults_bids(
                        value = empire_platform_api_public_client_legacy.models.bid_value.BidValue(
                            price = 1.337, 
                            capacity = 56, ), 
                        allocated_capacity = 56, 
                        status = 'NOT_CLEARED_YET', )
                    ],
                total_requested_capacity = 56,
                total_allocated_capacity = 56,
                allocated_capacity = [
                    empire_platform_api_public_client_legacy.models.long_term_auction_results_allocated_capacity.LongTermAuctionResults_allocatedCapacity(
                        participant = empire_platform_api_public_client_legacy.models.auction_result_participant.AuctionResultParticipant(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            name = '', 
                            eic_code = '---7S--058SL--92', ), 
                        requested_capacity = 56, 
                        allocated_trs = 56, )
                    ],
                marginal_price = 1.337,
        )
        """

    def testLongTermAuctionResults(self):
        """Test LongTermAuctionResults"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
