# coding: utf-8

"""
    Wildberries cifrovoi

    Po voprosam raboty s WBD API, obrahaites v <a href=\"https://digital.wildberries.ru/support\" target=\"_blank\">tehniheskuu podderhku</a>.   # noqa: E501

    OpenAPI spec version: wbd
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UploadInitRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'catalog_id': 'int',
        'content_type': 'str',
        'parts': 'list[ChunkPart]',
        'meta': 'ContentMeta'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'catalog_id': 'catalog_id',
        'content_type': 'content_type',
        'parts': 'parts',
        'meta': 'meta'
    }

    def __init__(self, title=None, description=None, catalog_id=None, content_type=None, parts=None, meta=None):  # noqa: E501
        """UploadInitRequest - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._description = None
        self._catalog_id = None
        self._content_type = None
        self._parts = None
        self._meta = None
        self.discriminator = None
        self.title = title
        self.description = description
        self.catalog_id = catalog_id
        self.content_type = content_type
        self.parts = parts
        self.meta = meta

    @property
    def title(self):
        """Gets the title of this UploadInitRequest.  # noqa: E501

        Nazvanie kontenta.</br>Maksimalnaa dlina — **500 simvolov.**  # noqa: E501

        :return: The title of this UploadInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UploadInitRequest.

        Nazvanie kontenta.</br>Maksimalnaa dlina — **500 simvolov.**  # noqa: E501

        :param title: The title of this UploadInitRequest.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this UploadInitRequest.  # noqa: E501

        Opisanie kontenta.</br>Maksimalnaa dlina — **1000 simvolov.**  # noqa: E501

        :return: The description of this UploadInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UploadInitRequest.

        Opisanie kontenta.</br>Maksimalnaa dlina — **1000 simvolov.**  # noqa: E501

        :param description: The description of this UploadInitRequest.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def catalog_id(self):
        """Gets the catalog_id of this UploadInitRequest.  # noqa: E501

        ID kategorii kontenta: - `1` — Videokontent  - `2` — Audiokontent - `4` — Dokument   # noqa: E501

        :return: The catalog_id of this UploadInitRequest.  # noqa: E501
        :rtype: int
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this UploadInitRequest.

        ID kategorii kontenta: - `1` — Videokontent  - `2` — Audiokontent - `4` — Dokument   # noqa: E501

        :param catalog_id: The catalog_id of this UploadInitRequest.  # noqa: E501
        :type: int
        """
        if catalog_id is None:
            raise ValueError("Invalid value for `catalog_id`, must not be `None`")  # noqa: E501
        allowed_values = [1, 2, 4]  # noqa: E501
        if catalog_id not in allowed_values:
            raise ValueError(
                "Invalid value for `catalog_id` ({0}), must be one of {1}"  # noqa: E501
                .format(catalog_id, allowed_values)
            )

        self._catalog_id = catalog_id

    @property
    def content_type(self):
        """Gets the content_type of this UploadInitRequest.  # noqa: E501

        Tip faila: - Videokontent:     - `video/mp4` - Audiokontent:     - `audio/mpeg` - Dokument:     - `application/pdf`     - `application/epub+zip`     - `text/plain`   # noqa: E501

        :return: The content_type of this UploadInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this UploadInitRequest.

        Tip faila: - Videokontent:     - `video/mp4` - Audiokontent:     - `audio/mpeg` - Dokument:     - `application/pdf`     - `application/epub+zip`     - `text/plain`   # noqa: E501

        :param content_type: The content_type of this UploadInitRequest.  # noqa: E501
        :type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501
        allowed_values = ["video/mp4", "audio/mpeg", "text/plain", "application/pdf", "application/epub+zip"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"  # noqa: E501
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def parts(self):
        """Gets the parts of this UploadInitRequest.  # noqa: E501

        Dla optimalnoi skorosti zagruzki kontenta sleduet razbit fail na freimy po 2 Mb. V massive ukazyvautsa indeks kahdogo freima i ego razmer.</br>   # noqa: E501

        :return: The parts of this UploadInitRequest.  # noqa: E501
        :rtype: list[ChunkPart]
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this UploadInitRequest.

        Dla optimalnoi skorosti zagruzki kontenta sleduet razbit fail na freimy po 2 Mb. V massive ukazyvautsa indeks kahdogo freima i ego razmer.</br>   # noqa: E501

        :param parts: The parts of this UploadInitRequest.  # noqa: E501
        :type: list[ChunkPart]
        """
        if parts is None:
            raise ValueError("Invalid value for `parts`, must not be `None`")  # noqa: E501

        self._parts = parts

    @property
    def meta(self):
        """Gets the meta of this UploadInitRequest.  # noqa: E501


        :return: The meta of this UploadInitRequest.  # noqa: E501
        :rtype: ContentMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this UploadInitRequest.


        :param meta: The meta of this UploadInitRequest.  # noqa: E501
        :type: ContentMeta
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UploadInitRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadInitRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
