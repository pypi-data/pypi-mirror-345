# coding: utf-8

"""
    Marketing i prodvihenie

    <div class=\"description_important\">       Uznat bolhe o marketinge i prodvihenii mohno v <a href=\"https://seller.wildberries.ru/instructions/category/59d92bd3-6ea0-40f2-b762-ca8835d7d42e?goBackOption=prevRoute&categoryId=479385c6-de01-4b4d-ad4e-ed941e65582e\">spravohnom centre</a> </div>    Metody marketinga i prodvihenia pozvolaut:   1. Poluhat informaciu o [reklamnyh kampaniah](/openapi/promotion#tag/Kampanii) i [mediakampaniah](/openapi/promotion#tag/Media).   2. [Sozdavat](/openapi/promotion#tag/Sozdanie-kampanij) i [upravlat](/openapi/promotion#tag/Upravlenie-kampaniyami) kampaniami.   3. Nastraivat [parametry kampanii](/openapi/promotion#tag/Parametry-kampanij) â€” klastery fraz, prodvigaemye tovary i tak dalee.   4. Upravlat [finansami kampanii](/openapi/promotion#tag/Finansy).   5. Rabotat s [kalendarem akcii](/openapi/promotion#tag/Kalendar-akcij).  Dannye sinhroniziruutsa s bazoi raz v 3 minuty. Statusy kampanii menautsa raz v minutu. Stavki kampanii menautsa raz v 30 sekund.   # noqa: E501

    OpenAPI spec version: promotion
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.promotion.api_client import ApiClient


class ParametryKampaniiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adv_v1_auto_getnmtoadd_get(self, id, **kwargs):  # noqa: E501
        """Spisok kartohek tovarov dla avtomatiheskoi kampanii  # noqa: E501

        Metod formiruet [spisok kartohek tovarov](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v2~1supplier~1nms/post), kotorye mohno dobavit v avtomatiheskuu kampaniu.<br><br>  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_auto_getnmtoadd_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_auto_getnmtoadd_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_auto_getnmtoadd_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def adv_v1_auto_getnmtoadd_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Spisok kartohek tovarov dla avtomatiheskoi kampanii  # noqa: E501

        Metod formiruet [spisok kartohek tovarov](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v2~1supplier~1nms/post), kotorye mohno dobavit v avtomatiheskuu kampaniu.<br><br>  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_auto_getnmtoadd_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_auto_getnmtoadd_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_auto_getnmtoadd_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/auto/getnmtoadd', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_auto_set_excluded_post(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz dla avtomatiheskoi kampanii  # noqa: E501

        Metod ustanavlivaet i udalaet minus-frazy dla [avtomatiheskoi kampanii](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v1~1save-ad/post).<br><br>  Dannye frazy mohno vybrat iz spiska zaprosov, po kotorym pokupateli nahodili vah tovar. Spisok zaprosov mohno poluhit v [statistike kluhevyh fraz](/openapi/analytics#tag/Statistika-po-prodvizheniyu/paths/~1adv~1v0~1stats~1keywords/get).<br>  Otpravka pustogo massiva udalaet vse minus-frazy iz kampanii.  <div class=\"description_limit\">     Maksimum 1 zapros v 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_auto_set_excluded_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoSetexcludedBody body: (required)
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_auto_set_excluded_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_auto_set_excluded_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def adv_v1_auto_set_excluded_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz dla avtomatiheskoi kampanii  # noqa: E501

        Metod ustanavlivaet i udalaet minus-frazy dla [avtomatiheskoi kampanii](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v1~1save-ad/post).<br><br>  Dannye frazy mohno vybrat iz spiska zaprosov, po kotorym pokupateli nahodili vah tovar. Spisok zaprosov mohno poluhit v [statistike kluhevyh fraz](/openapi/analytics#tag/Statistika-po-prodvizheniyu/paths/~1adv~1v0~1stats~1keywords/get).<br>  Otpravka pustogo massiva udalaet vse minus-frazy iz kampanii.  <div class=\"description_limit\">     Maksimum 1 zapros v 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_auto_set_excluded_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoSetexcludedBody body: (required)
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_auto_set_excluded_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_auto_set_excluded_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_auto_set_excluded_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/auto/set-excluded', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_auto_updatenm_post(self, body, id, **kwargs):  # noqa: E501
        """Izmenenie spiska kartohek tovarov v avtomatiheskoi kampanii  # noqa: E501

        Metod dobavlaet i udalaet kartohki tovarov v avtomatiheskoi kampanii.<br><br>  <div class=\"description_important\">   Dobavit mohno tolko te kartohki tovarov, kotorye vernutsa v <a href=\"/openapi/promotion#tag/Parametry-avtomaticheskih-kampanij/paths/~1adv~1v1~1auto~1getnmtoadd/get\">spiske kartohek tovarov dla avtomatiheskoi kampanii</a>.<br>Udalit edinstvennuu kartohku tovara iz kampanii nelza. </div>  Proverki po parametru `delete` ne predusmotreno.  Esli prihel otvet so status-kodom `200`, a izmenenii ne proizohlo, proverte, htoby zapros sootvetstvoval dokumentacii.  <div class=\"description_limit\">     Maksimum 60 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_auto_updatenm_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoUpdatenmBody body: (required)
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_auto_updatenm_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_auto_updatenm_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def adv_v1_auto_updatenm_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Izmenenie spiska kartohek tovarov v avtomatiheskoi kampanii  # noqa: E501

        Metod dobavlaet i udalaet kartohki tovarov v avtomatiheskoi kampanii.<br><br>  <div class=\"description_important\">   Dobavit mohno tolko te kartohki tovarov, kotorye vernutsa v <a href=\"/openapi/promotion#tag/Parametry-avtomaticheskih-kampanij/paths/~1adv~1v1~1auto~1getnmtoadd/get\">spiske kartohek tovarov dla avtomatiheskoi kampanii</a>.<br>Udalit edinstvennuu kartohku tovara iz kampanii nelza. </div>  Proverki po parametru `delete` ne predusmotreno.  Esli prihel otvet so status-kodom `200`, a izmenenii ne proizohlo, proverte, htoby zapros sootvetstvoval dokumentacii.  <div class=\"description_limit\">     Maksimum 60 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_auto_updatenm_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoUpdatenmBody body: (required)
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_auto_updatenm_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_auto_updatenm_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_auto_updatenm_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/auto/updatenm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_search_set_excluded_post(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz v poiske  # noqa: E501

        Metod ustanavlivaet i udalaet minus-frazy v poiske, v [kampaniah](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v2~1seacat~1save-ad/post) Aukcion.<br><br>  Dannye frazy mohno vybrat iz spiska zaprosov, po kotorym pokupateli nahodili vah tovar. Spisok zaprosov mohno poluhit v [statistike kluhevyh fraz](/openapi/analytics#tag/Statistika-po-prodvizheniyu/paths/~1adv~1v0~1stats~1keywords/get).<br>Maksimalno dopustimoe kolihestvo minus-fraz v kampanii â€” 1000.<br>  Otpravka pustogo massiva udalaet vse minus-frazy iz poiska iz kampanii.  <div class=\"description_limit\">     Maksimum 2 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_excluded_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetexcludedBody body: (required)
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_search_set_excluded_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_search_set_excluded_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def adv_v1_search_set_excluded_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz v poiske  # noqa: E501

        Metod ustanavlivaet i udalaet minus-frazy v poiske, v [kampaniah](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v2~1seacat~1save-ad/post) Aukcion.<br><br>  Dannye frazy mohno vybrat iz spiska zaprosov, po kotorym pokupateli nahodili vah tovar. Spisok zaprosov mohno poluhit v [statistike kluhevyh fraz](/openapi/analytics#tag/Statistika-po-prodvizheniyu/paths/~1adv~1v0~1stats~1keywords/get).<br>Maksimalno dopustimoe kolihestvo minus-fraz v kampanii â€” 1000.<br>  Otpravka pustogo massiva udalaet vse minus-frazy iz poiska iz kampanii.  <div class=\"description_limit\">     Maksimum 2 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_excluded_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetexcludedBody body: (required)
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_search_set_excluded_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_search_set_excluded_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_search_set_excluded_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/search/set-excluded', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_search_set_phrase_post(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz frazovogo sootvetstvia  # noqa: E501

        Metod ustanavlivaet i udalaet minus-frazy frazovogo sootvetstvia v [kampaniah](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v2~1seacat~1save-ad/post) Aukcion. Frazovoe sootvetstvie â€” eto kogda poiskovyi zapros soderhit v sebe minus-frazu.<br><br>  Dannye minus-frazy nuhno vvesti vruhnuu. Maksimalno dopustimoe kolihestvo minus-fraz v kampanii â€” 1000.<br>  Otpravka pustogo massiva udalaet vse minus-frazy frazovogo sootvetstvia iz kampanii.  <div class=\"description_limit\">     Maksimum 2 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_phrase_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetphraseBody body: (required)
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_search_set_phrase_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_search_set_phrase_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def adv_v1_search_set_phrase_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz frazovogo sootvetstvia  # noqa: E501

        Metod ustanavlivaet i udalaet minus-frazy frazovogo sootvetstvia v [kampaniah](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v2~1seacat~1save-ad/post) Aukcion. Frazovoe sootvetstvie â€” eto kogda poiskovyi zapros soderhit v sebe minus-frazu.<br><br>  Dannye minus-frazy nuhno vvesti vruhnuu. Maksimalno dopustimoe kolihestvo minus-fraz v kampanii â€” 1000.<br>  Otpravka pustogo massiva udalaet vse minus-frazy frazovogo sootvetstvia iz kampanii.  <div class=\"description_limit\">     Maksimum 2 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_phrase_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetphraseBody body: (required)
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_search_set_phrase_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_search_set_phrase_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_search_set_phrase_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/search/set-phrase', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_search_set_plus_get(self, id, **kwargs):  # noqa: E501
        """Upravlenie aktivnostu fiksirovannyh fraz  # noqa: E501

        Metod delaet aktivnymi ili neaktivnymi fiksirovannye frazy v [kampaniah](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v2~1seacat~1save-ad/post) Aukcion. Fiksirovannye frazy nuhny, htoby tovar otobrahalsa v poiske tolko po opredelennym poiskovym zaprosam.<br><br>  Ustanovit ili udalit fiksirovannye frazy mohno herez [otdelnyi metod](/openapi/promotion#tag/Parametry-kampanij/paths/~1adv~1v1~1search~1set-plus/post).  <div class=\"description_limit\">     Maksimum 1 zapros v 500 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">millisekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_plus_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :param bool fixed: Novoe sostoanie (`false` - sdelat neaktivnymi, `true` - sdelat aktivnymi)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_search_set_plus_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_search_set_plus_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def adv_v1_search_set_plus_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Upravlenie aktivnostu fiksirovannyh fraz  # noqa: E501

        Metod delaet aktivnymi ili neaktivnymi fiksirovannye frazy v [kampaniah](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v2~1seacat~1save-ad/post) Aukcion. Fiksirovannye frazy nuhny, htoby tovar otobrahalsa v poiske tolko po opredelennym poiskovym zaprosam.<br><br>  Ustanovit ili udalit fiksirovannye frazy mohno herez [otdelnyi metod](/openapi/promotion#tag/Parametry-kampanij/paths/~1adv~1v1~1search~1set-plus/post).  <div class=\"description_limit\">     Maksimum 1 zapros v 500 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">millisekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_plus_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :param bool fixed: Novoe sostoanie (`false` - sdelat neaktivnymi, `true` - sdelat aktivnymi)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fixed']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_search_set_plus_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_search_set_plus_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'fixed' in params:
            query_params.append(('fixed', params['fixed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/search/set-plus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_search_set_plus_post(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie fiksirovannyh fraz  # noqa: E501

        Metod ustanavlivaet i udalaet fiksirovannye frazy v [kampaniah](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v2~1seacat~1save-ad/post) Aukcion. Fiksirovannye frazy mohno vybrat v spiske kluhevyh fraz kampanii, kotoryi formiruetsa posle zapuska.<br><br>  Otpravka pustogo massiva v metode udalaet vse fiksirovannye frazy i otkluhaet [aktivnost](/openapi/promotion#tag/Parametry-kampanij/paths/~1adv~1v1~1search~1set-plus/get) vseh fiksirovannyh fraz kampanii.  <div class=\"description_limit\">     Maksimum 1 zapros v 500 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">millisekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_plus_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetplusBody body: (required)
        :param int id: ID kampanii (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_search_set_plus_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_search_set_plus_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def adv_v1_search_set_plus_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie fiksirovannyh fraz  # noqa: E501

        Metod ustanavlivaet i udalaet fiksirovannye frazy v [kampaniah](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v2~1seacat~1save-ad/post) Aukcion. Fiksirovannye frazy mohno vybrat v spiske kluhevyh fraz kampanii, kotoryi formiruetsa posle zapuska.<br><br>  Otpravka pustogo massiva v metode udalaet vse fiksirovannye frazy i otkluhaet [aktivnost](/openapi/promotion#tag/Parametry-kampanij/paths/~1adv~1v1~1search~1set-plus/get) vseh fiksirovannyh fraz kampanii.  <div class=\"description_limit\">     Maksimum 1 zapros v 500 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">millisekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_plus_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetplusBody body: (required)
        :param int id: ID kampanii (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_search_set_plus_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_search_set_plus_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_search_set_plus_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/search/set-plus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_search_set_strong_post(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz tohnogo sootvetstvia  # noqa: E501

        Metod ustanavlivaet i udalaet minus-frazy tohnogo sootvetstvia v [kampaniah](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v2~1seacat~1save-ad/post) Aukcion. Tohnoe sootvetstvie â€” eto kogda poiskovyi zapros polnostu sootvetstvuet minus-fraze.<br><br>  Dannye minus-frazy nuhno vvesti vruhnuu. Maksimalno dopustimoe kolihestvo minus-fraz v kampanii â€” 1000.<br>  Otpravka pustogo massiva udalaet vse minus-frazy tohnogo sootvetstvia iz kampanii.  <div class=\"description_limit\">     Maksimum 2 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_strong_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetstrongBody body: (required)
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_search_set_strong_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_search_set_strong_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def adv_v1_search_set_strong_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Ustanovka/udalenie minus-fraz tohnogo sootvetstvia  # noqa: E501

        Metod ustanavlivaet i udalaet minus-frazy tohnogo sootvetstvia v [kampaniah](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v2~1seacat~1save-ad/post) Aukcion. Tohnoe sootvetstvie â€” eto kogda poiskovyi zapros polnostu sootvetstvuet minus-fraze.<br><br>  Dannye minus-frazy nuhno vvesti vruhnuu. Maksimalno dopustimoe kolihestvo minus-fraz v kampanii â€” 1000.<br>  Otpravka pustogo massiva udalaet vse minus-frazy tohnogo sootvetstvia iz kampanii.  <div class=\"description_limit\">     Maksimum 2 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_search_set_strong_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchSetstrongBody body: (required)
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_search_set_strong_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_search_set_strong_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_search_set_strong_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/search/set-strong', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
