# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from empire_platform_api_public_client_legacy.models.platform_appearance import PlatformAppearance
from empire_platform_api_public_client_legacy.models.timescale_preferences import TimescalePreferences
from empire_platform_api_public_client_legacy.models.user_preferences_general_notifications import UserPreferencesGeneralNotifications
from empire_platform_api_public_client_legacy.models.user_preferences_subscription_notifications import UserPreferencesSubscriptionNotifications

class UserPreferences(BaseModel):
    """
    UserPreferences
    """
    general_notifications: UserPreferencesGeneralNotifications = Field(default=..., alias="generalNotifications")
    subscription_notifications: UserPreferencesSubscriptionNotifications = Field(default=..., alias="subscriptionNotifications")
    appearance: PlatformAppearance = Field(...)
    timescale_preferences: TimescalePreferences = Field(default=..., alias="timescalePreferences")
    __properties = ["generalNotifications", "subscriptionNotifications", "appearance", "timescalePreferences"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserPreferences:
        """Create an instance of UserPreferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of general_notifications
        if self.general_notifications:
            _dict['generalNotifications'] = self.general_notifications.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_notifications
        if self.subscription_notifications:
            _dict['subscriptionNotifications'] = self.subscription_notifications.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timescale_preferences
        if self.timescale_preferences:
            _dict['timescalePreferences'] = self.timescale_preferences.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserPreferences:
        """Create an instance of UserPreferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserPreferences.parse_obj(obj)

        _obj = UserPreferences.parse_obj({
            "general_notifications": UserPreferencesGeneralNotifications.from_dict(obj.get("generalNotifications")) if obj.get("generalNotifications") is not None else None,
            "subscription_notifications": UserPreferencesSubscriptionNotifications.from_dict(obj.get("subscriptionNotifications")) if obj.get("subscriptionNotifications") is not None else None,
            "appearance": obj.get("appearance"),
            "timescale_preferences": TimescalePreferences.from_dict(obj.get("timescalePreferences")) if obj.get("timescalePreferences") is not None else None
        })
        return _obj


