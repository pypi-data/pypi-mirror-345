rule depth:
    input:
        bam =  rules.Map_On_Assembly.output.merged
    output:
        depth = f"{output_directory}/05_depth/{{smp}}.{{RUN}}.cov"
    envmodules: config['module_file']
    shell:
        """
        samtools depth -a {input.bam} -o {output.depth}
        """

checkpoint split_contig:
    input:
        blast = rules.extract_viral_ids.output.taxo
    output:
        directory = directory(f"{output_directory}/05_depth/01_split_cont_{{RUN}}")
    envmodules: config['module_file']
    shell:
        """
        mkdir -p {output}
        split -l 10000 {input.blast} {output.directory}/split.
        """

rule Depth_vir:
    input:
        viral_cont_IDS = f"{output_directory}/05_depth/01_split_cont_{{RUN}}/split.{{i}}",
        depth = rules.depth.output.depth
    output:
        split_cov = f"{output_directory}/05_depth/02_split_cont_cov_{{RUN}}/{{i}}.{{smp}}.cov"
    envmodules: config['module_file']
    shell:
        """
        for i in `cat {input.viral_cont_IDS}` ; do rg -w $i {input.depth}  ; done > {output.split_cov} || true
        """

rule merge_depth:
    input:
        file = expand("{output_directory}/05_depth/02_split_cont_cov_{{RUN}}/{{i}}.{smp}.cov", smp=SAMPLES, output_directory=output_directory),
    output:
        coverage =  f"{output_directory}/05_depth/02_split_cont_cov_{{RUN}}/coverage_{{i}}.cov"
    params:
        split = "{i}",
        script = f"{scriptdir}merge_cov.py",
        dir = f"{output_directory}/05_depth/02_split_cont_cov_{{RUN}}/"
    envmodules: config['module_file']
    shell:
        """
        python {params.script} {params.dir} {params.split} {output.coverage}
        """

rule stats_depth:
    input:
        coverage = rules.merge_depth.output.coverage
    output:
        stat_cov = f"{output_directory}/05_depth/03_split_cont_stat_{{RUN}}/stats_coverage_{{i}}.cov"
    params:
        script = f"{scriptdir}stats_coverage.py"
    envmodules: config['module_file']
    shell:
        """
        python {params.script} {input.coverage} {output.stat_cov}
        """

rule range_depth:
    input:
        coverage = rules.merge_depth.output.coverage
    output:
        cov_10x = f"{output_directory}/05_depth/04_split_cont_10X_{{RUN}}/range_10x_coverage_{{i}}.cov"
    params:
        script = f"{scriptdir}count_range_cov.py"
    envmodules: config['module_file']
    shell:
        """
        python {params.script} {input.coverage} {output.cov_10x}
        """


def aggregate_input_depth_10x(wildcards):
    checkpoint_output = checkpoints.split_contig.get(**wildcards).output[0]
    return expand("{output_directory}/05_depth/04_split_cont_10X_{{RUN}}/range_10x_coverage_{i}.cov",
        i=glob_wildcards(os.path.join(checkpoint_output,'split.{i}')).i ,
        output_directory = output_directory)


def aggregate_input_depth_stats(wildcards):
    checkpoint_output = checkpoints.split_contig.get(**wildcards).output[0]
    return expand("{output_directory}/05_depth/03_split_cont_stat_{{RUN}}/stats_coverage_{i}.cov",
        i=glob_wildcards(os.path.join(checkpoint_output,'split.{i}')).i,
        output_directory = output_directory)


rule results_depth:
    input:
        depthstat = aggregate_input_depth_stats,
        depth10x = aggregate_input_depth_10x
    output:
        stats_deph = f"{output_directory}/06_final_data/{{RUN}}_stats_coverage.cov",
        range_10x = f"{output_directory}/06_final_data/{{RUN}}_range_10x_coverage.cov"
    envmodules: config['module_file']
    shell:
        """
        echo "contig,min_coverage,max_coverage, mean_coverage,median_coverage" > {output.stats_deph}
        cat {input.depthstat} >> {output.stats_deph}
        echo "contig,start,end" > {output.range_10x}
        cat  {input.depth10x} >> {output.range_10x}
        """
