Metadata-Version: 2.4
Name: resourcetools
Version: 1.0.0
Summary: A lightweight Python package for managing application resources (icons, images, translations, etc.) in a clean, importlib-compatible way â€” ideal for PySide6 and other GUI or CLI apps.
Author-email: Rafal Padkowski <rafaelp@poczta.onet.pl>
License-Expression: MIT
License-File: LICENSE
Requires-Python: >=3.9
Description-Content-Type: text/markdown

# resourcetools

A lightweight Python package for managing application resources (icons, images, translations, etc.) using `importlib.resources`.

Ideal for PySide6 and other GUI or CLI applications.

## ðŸ”§ Features

- Safe, Pythonic access to resource files inside packages
- Uses `importlib.resources` (Python 3.9+)
- Extensible `ResourceGetter` class
- Supports logical grouping (e.g. icons, images, translations)
- Compatible with zipped packages, wheels, and editable installs
- Designed to support PySide6/Qt apps, but fully framework-agnostic

## ðŸ“¦ Installation

```bash
pip install resourcetools
```

## ðŸš€ Usage

### 1. Structure your local resources

Your application should have a structure like:

```
your_app/
â””â”€â”€ resources/
    â”œâ”€â”€ __init__.py
    â”œâ”€â”€ icons/
    â”œâ”€â”€ images/
    â””â”€â”€ translations/
```

Only `__init__.py` in `resources/` is required to make it a proper package.
No code logic is needed in resources/ â€” just the files.

### 2. Initialize `resourcetools` in your app

```python
# your_app/app.py
import resourcetools

import your_app.resources as app_resources


resourcetools.initialize(resource_package=app_resources)
```

### 3. Use resource getters to access files

```python
import importlib.resources

from PySide6.QtGui import QPixmap
from resourcetools import Image

with importlib.resources.as_file(Image("image.png")) as real_path:
            pixmap: QPixmap = QPixmap(str(real_path))

```

## ðŸ“š API Reference

initialize(resource_package: ModuleType)

Sets the base resource package to use for Icon, Image, and Translations.

Icon(filename: str) -> Traversable

Returns a Traversable object (e.g. file path) to an icon file.

Same for:

    Image(filename: str)

    Translations(filename: str)

## âœ… Why `importlib.resources`?

- Built into the Python standard library
- Zip-safe (works with packages in wheels or zipapps)
- Avoids hardcoded filesystem paths

## ðŸ§ª Compatibility

- Python 3.9+
- Works with importlib.resources standard API
- No external dependencies

## ðŸ“œ License

MIT License

