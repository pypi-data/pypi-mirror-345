# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonReportFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nm_i_ds': 'list[int]',
        'subject_i_ds': 'list[int]',
        'brand_names': 'list[str]',
        'tag_i_ds': 'list[int]',
        'current_period': 'PeriodSt',
        'stock_type': 'StockType',
        'skip_deleted_nm': 'bool',
        'availability_filters': 'AvailabilityFilters',
        'order_by': 'TableOrderBy'
    }

    attribute_map = {
        'nm_i_ds': 'nmIDs',
        'subject_i_ds': 'subjectIDs',
        'brand_names': 'brandNames',
        'tag_i_ds': 'tagIDs',
        'current_period': 'currentPeriod',
        'stock_type': 'stockType',
        'skip_deleted_nm': 'skipDeletedNm',
        'availability_filters': 'availabilityFilters',
        'order_by': 'orderBy'
    }

    def __init__(self, nm_i_ds=None, subject_i_ds=None, brand_names=None, tag_i_ds=None, current_period=None, stock_type=None, skip_deleted_nm=None, availability_filters=None, order_by=None):  # noqa: E501
        """CommonReportFilters - a model defined in Swagger"""  # noqa: E501
        self._nm_i_ds = None
        self._subject_i_ds = None
        self._brand_names = None
        self._tag_i_ds = None
        self._current_period = None
        self._stock_type = None
        self._skip_deleted_nm = None
        self._availability_filters = None
        self._order_by = None
        self.discriminator = None
        if nm_i_ds is not None:
            self.nm_i_ds = nm_i_ds
        if subject_i_ds is not None:
            self.subject_i_ds = subject_i_ds
        if brand_names is not None:
            self.brand_names = brand_names
        if tag_i_ds is not None:
            self.tag_i_ds = tag_i_ds
        self.current_period = current_period
        self.stock_type = stock_type
        self.skip_deleted_nm = skip_deleted_nm
        self.availability_filters = availability_filters
        self.order_by = order_by

    @property
    def nm_i_ds(self):
        """Gets the nm_i_ds of this CommonReportFilters.  # noqa: E501

        Spisok artikulov WB dla filtracii  # noqa: E501

        :return: The nm_i_ds of this CommonReportFilters.  # noqa: E501
        :rtype: list[int]
        """
        return self._nm_i_ds

    @nm_i_ds.setter
    def nm_i_ds(self, nm_i_ds):
        """Sets the nm_i_ds of this CommonReportFilters.

        Spisok artikulov WB dla filtracii  # noqa: E501

        :param nm_i_ds: The nm_i_ds of this CommonReportFilters.  # noqa: E501
        :type: list[int]
        """

        self._nm_i_ds = nm_i_ds

    @property
    def subject_i_ds(self):
        """Gets the subject_i_ds of this CommonReportFilters.  # noqa: E501

        Spisok ID predmetov dla filtracii  # noqa: E501

        :return: The subject_i_ds of this CommonReportFilters.  # noqa: E501
        :rtype: list[int]
        """
        return self._subject_i_ds

    @subject_i_ds.setter
    def subject_i_ds(self, subject_i_ds):
        """Sets the subject_i_ds of this CommonReportFilters.

        Spisok ID predmetov dla filtracii  # noqa: E501

        :param subject_i_ds: The subject_i_ds of this CommonReportFilters.  # noqa: E501
        :type: list[int]
        """

        self._subject_i_ds = subject_i_ds

    @property
    def brand_names(self):
        """Gets the brand_names of this CommonReportFilters.  # noqa: E501

        Spisok brendov dla filtracii  # noqa: E501

        :return: The brand_names of this CommonReportFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._brand_names

    @brand_names.setter
    def brand_names(self, brand_names):
        """Sets the brand_names of this CommonReportFilters.

        Spisok brendov dla filtracii  # noqa: E501

        :param brand_names: The brand_names of this CommonReportFilters.  # noqa: E501
        :type: list[str]
        """

        self._brand_names = brand_names

    @property
    def tag_i_ds(self):
        """Gets the tag_i_ds of this CommonReportFilters.  # noqa: E501

        Spisok ID arlykov dla filtracii  # noqa: E501

        :return: The tag_i_ds of this CommonReportFilters.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_i_ds

    @tag_i_ds.setter
    def tag_i_ds(self, tag_i_ds):
        """Sets the tag_i_ds of this CommonReportFilters.

        Spisok ID arlykov dla filtracii  # noqa: E501

        :param tag_i_ds: The tag_i_ds of this CommonReportFilters.  # noqa: E501
        :type: list[int]
        """

        self._tag_i_ds = tag_i_ds

    @property
    def current_period(self):
        """Gets the current_period of this CommonReportFilters.  # noqa: E501


        :return: The current_period of this CommonReportFilters.  # noqa: E501
        :rtype: PeriodSt
        """
        return self._current_period

    @current_period.setter
    def current_period(self, current_period):
        """Sets the current_period of this CommonReportFilters.


        :param current_period: The current_period of this CommonReportFilters.  # noqa: E501
        :type: PeriodSt
        """
        if current_period is None:
            raise ValueError("Invalid value for `current_period`, must not be `None`")  # noqa: E501

        self._current_period = current_period

    @property
    def stock_type(self):
        """Gets the stock_type of this CommonReportFilters.  # noqa: E501


        :return: The stock_type of this CommonReportFilters.  # noqa: E501
        :rtype: StockType
        """
        return self._stock_type

    @stock_type.setter
    def stock_type(self, stock_type):
        """Sets the stock_type of this CommonReportFilters.


        :param stock_type: The stock_type of this CommonReportFilters.  # noqa: E501
        :type: StockType
        """
        if stock_type is None:
            raise ValueError("Invalid value for `stock_type`, must not be `None`")  # noqa: E501

        self._stock_type = stock_type

    @property
    def skip_deleted_nm(self):
        """Gets the skip_deleted_nm of this CommonReportFilters.  # noqa: E501

        Skryt udalennye tovary  # noqa: E501

        :return: The skip_deleted_nm of this CommonReportFilters.  # noqa: E501
        :rtype: bool
        """
        return self._skip_deleted_nm

    @skip_deleted_nm.setter
    def skip_deleted_nm(self, skip_deleted_nm):
        """Sets the skip_deleted_nm of this CommonReportFilters.

        Skryt udalennye tovary  # noqa: E501

        :param skip_deleted_nm: The skip_deleted_nm of this CommonReportFilters.  # noqa: E501
        :type: bool
        """
        if skip_deleted_nm is None:
            raise ValueError("Invalid value for `skip_deleted_nm`, must not be `None`")  # noqa: E501

        self._skip_deleted_nm = skip_deleted_nm

    @property
    def availability_filters(self):
        """Gets the availability_filters of this CommonReportFilters.  # noqa: E501


        :return: The availability_filters of this CommonReportFilters.  # noqa: E501
        :rtype: AvailabilityFilters
        """
        return self._availability_filters

    @availability_filters.setter
    def availability_filters(self, availability_filters):
        """Sets the availability_filters of this CommonReportFilters.


        :param availability_filters: The availability_filters of this CommonReportFilters.  # noqa: E501
        :type: AvailabilityFilters
        """
        if availability_filters is None:
            raise ValueError("Invalid value for `availability_filters`, must not be `None`")  # noqa: E501

        self._availability_filters = availability_filters

    @property
    def order_by(self):
        """Gets the order_by of this CommonReportFilters.  # noqa: E501


        :return: The order_by of this CommonReportFilters.  # noqa: E501
        :rtype: TableOrderBy
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this CommonReportFilters.


        :param order_by: The order_by of this CommonReportFilters.  # noqa: E501
        :type: TableOrderBy
        """
        if order_by is None:
            raise ValueError("Invalid value for `order_by`, must not be `None`")  # noqa: E501

        self._order_by = order_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonReportFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonReportFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
