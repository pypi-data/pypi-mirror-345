# coding: utf-8

"""
    Wildberries cifrovoi

    Po voprosam raboty s WBD API, obrahaites v <a href=\"https://digital.wildberries.ru/support\" target=\"_blank\">tehniheskuu podderhku</a>.   # noqa: E501

    OpenAPI spec version: wbd
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.wbd.api_client import ApiClient


class KluhiAktivaciiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_keys_by_i_ds(self, ids, **kwargs):  # noqa: E501
        """Udalit kluhi aktivacii  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet udalit kluhi aktivacii po ih identifikatoram  <div class=\"description_important\">   Dostup k metodu predostavlaetsa herez zaavku v <a href=\"https://digital.wildberries.ru/support\" target=\"_black\">tehniheskuu podderhku</a>. </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_keys_by_i_ds(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: Spisok identifikatorov kluhei (required)
        :return: KeysDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_keys_by_i_ds_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_keys_by_i_ds_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def delete_keys_by_i_ds_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Udalit kluhi aktivacii  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet udalit kluhi aktivacii po ih identifikatoram  <div class=\"description_important\">   Dostup k metodu predostavlaetsa herez zaavku v <a href=\"https://digital.wildberries.ru/support\" target=\"_black\">tehniheskuu podderhku</a>. </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_keys_by_i_ds_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] ids: Spisok identifikatorov kluhei (required)
        :return: KeysDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_keys_by_i_ds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `delete_keys_by_i_ds`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/keys-api/keys', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeysDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_redeemed_keys(self, **kwargs):  # noqa: E501
        """Poluhit kuplennye kluhi  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit spisok kuplennyh kluhei s ispolzovaniem filtracii.  ### Opisanie parametrov filtracii:  - `offer_id` — Filtracia po ID predlohenia. Pozvolaet vybrat kluhi, svazannye s opredelennym predloheniem. - `skip` — Smehenie. Ukazyvaet, skolko zapisei nuhno propustit v rezultiruuhem nabore.<br/> **Naprimer**, esli `skip` ravno 20, to vyborka nahnetsa s 21-i zapisi. - `take` — Kolihestvo zapisei dla poluhenia. Ukazyvaet, skolko kluhei dolhno byt vozvraheno v otvete.<br/> **Naprimer**, esli `take` ravno 10, to v otvete budet ne bolee 10 zapisei. - `date_from` — Filtracia po date pokupki nahinaa s ukazannoi daty (vkluhitelno).<br/> Format daty: **RFC3339**. - `date_to` — Filtracia po date pokupki do ukazannoi daty (ne vkluhitelno).<br/>  Format daty: **RFC3339**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_redeemed_keys(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offer_id: Filtracia po ID predlohenia. Pozvolaet vybrat kluhi, svazannye s opredelennym predloheniem.
        :param int skip: Smehenie. Ukazyvaet, skolko zapisei nuhno propustit v rezultiruuhem nabore. Ispolzuetsa dla realizacii paginacii.
        :param int take: Kolihestvo zapisei dla poluhenia. Ukazyvaet, skolko kluhei dolhno byt vozvraheno v otvete.
        :param str date_from: Filtracia po date pokupki nahinaa s ukazannoi daty (vkluhitelno).  Format daty: **RFC3339** (`2023-06-17T19:20:30Z`). 
        :param str date_to: Filtracia po date pokupki do ukazannoi daty (ne vkluhitelno).  Format daty: **RFC3339** (`2024-10-18T19:20:30Z`). 
        :return: KeysRedeemedResponseList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_redeemed_keys_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_redeemed_keys_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_redeemed_keys_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit kuplennye kluhi  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit spisok kuplennyh kluhei s ispolzovaniem filtracii.  ### Opisanie parametrov filtracii:  - `offer_id` — Filtracia po ID predlohenia. Pozvolaet vybrat kluhi, svazannye s opredelennym predloheniem. - `skip` — Smehenie. Ukazyvaet, skolko zapisei nuhno propustit v rezultiruuhem nabore.<br/> **Naprimer**, esli `skip` ravno 20, to vyborka nahnetsa s 21-i zapisi. - `take` — Kolihestvo zapisei dla poluhenia. Ukazyvaet, skolko kluhei dolhno byt vozvraheno v otvete.<br/> **Naprimer**, esli `take` ravno 10, to v otvete budet ne bolee 10 zapisei. - `date_from` — Filtracia po date pokupki nahinaa s ukazannoi daty (vkluhitelno).<br/> Format daty: **RFC3339**. - `date_to` — Filtracia po date pokupki do ukazannoi daty (ne vkluhitelno).<br/>  Format daty: **RFC3339**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_redeemed_keys_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offer_id: Filtracia po ID predlohenia. Pozvolaet vybrat kluhi, svazannye s opredelennym predloheniem.
        :param int skip: Smehenie. Ukazyvaet, skolko zapisei nuhno propustit v rezultiruuhem nabore. Ispolzuetsa dla realizacii paginacii.
        :param int take: Kolihestvo zapisei dla poluhenia. Ukazyvaet, skolko kluhei dolhno byt vozvraheno v otvete.
        :param str date_from: Filtracia po date pokupki nahinaa s ukazannoi daty (vkluhitelno).  Format daty: **RFC3339** (`2023-06-17T19:20:30Z`). 
        :param str date_to: Filtracia po date pokupki do ukazannoi daty (ne vkluhitelno).  Format daty: **RFC3339** (`2024-10-18T19:20:30Z`). 
        :return: KeysRedeemedResponseList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offer_id', 'skip', 'take', 'date_from', 'date_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_redeemed_keys" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offer_id' in params:
            query_params.append(('offer_id', params['offer_id']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('date_from', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('date_to', params['date_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/keys-api/keys/redeemed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeysRedeemedResponseList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def load_keys(self, body, **kwargs):  # noqa: E501
        """Dobavit kluhi aktivacii  # noqa: E501

        Maksimum 50 zaprosov v sekundu  Metod pozvolaet dobavit kluhi dla predlohenia po ID.  <div class=\"description_important\">   Predlohenie dolhno byt iz kategorii (<code>section</code>):   <ul>       <li>Kluhi aktivacii — <code>3</code></li>       <li>Kupony i razvlehenia — <code>12</code></li>       <li>Podarohnye sertifikaty — <code>13</code></li>   </ul> </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_keys(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KeysLoadRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.load_keys_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.load_keys_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def load_keys_with_http_info(self, body, **kwargs):  # noqa: E501
        """Dobavit kluhi aktivacii  # noqa: E501

        Maksimum 50 zaprosov v sekundu  Metod pozvolaet dobavit kluhi dla predlohenia po ID.  <div class=\"description_important\">   Predlohenie dolhno byt iz kategorii (<code>section</code>):   <ul>       <li>Kluhi aktivacii — <code>3</code></li>       <li>Kupony i razvlehenia — <code>12</code></li>       <li>Podarohnye sertifikaty — <code>13</code></li>   </ul> </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_keys_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KeysLoadRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method load_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `load_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/keys-api/keys', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def offer_keys_count_get(self, offer_id, **kwargs):  # noqa: E501
        """Poluhit kolihestvo kluhei dla predlohenia  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit informaciu o kolihestve kluhei u konkretnogo predlohenia.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offer_keys_count_get(offer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offer_id: ID predlohenia (required)
        :return: KeysCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.offer_keys_count_get_with_http_info(offer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.offer_keys_count_get_with_http_info(offer_id, **kwargs)  # noqa: E501
            return data

    def offer_keys_count_get_with_http_info(self, offer_id, **kwargs):  # noqa: E501
        """Poluhit kolihestvo kluhei dla predlohenia  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit informaciu o kolihestve kluhei u konkretnogo predlohenia.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offer_keys_count_get_with_http_info(offer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offer_id: ID predlohenia (required)
        :return: KeysCountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offer_keys_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'offer_id' is set
        if ('offer_id' not in params or
                params['offer_id'] is None):
            raise ValueError("Missing the required parameter `offer_id` when calling `offer_keys_count_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'offer_id' in params:
            path_params['offer_id'] = params['offer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/offer/keys/{offer_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeysCountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def offer_keys_get(self, offer_id, **kwargs):  # noqa: E501
        """Poluhit spisok kluhei  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit spisok zagruhennyh vami kluhei dla konkretnogo predlohenia.  <div class=\"description_important\">   Dostup k metodu predostavlaetsa herez zaavku v <a href=\"https://digital.wildberries.ru/support\" target=\"_black\">tehniheskuu podderhku</a>. </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offer_keys_get(offer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offer_id: ID predlohenia (required)
        :param int take: Kolihestvo zapisei dla poluhenia. Ukazyvaet, skolko kluhei dolhno byt vozvraheno v otvete
        :param int skip: Smehenie. Ukazyvaet, skolko zapisei nuhno propustit v rezultiruuhem nabore. Ispolzuetsa dla realizacii paginacii
        :param bool deleted: Ukazyvaet, budut li v otvete prisutstvovat udalennye kluhi
        :param bool sold: Ukazyvaet, budut li v otvete prisutstvovat prodannye kluhi
        :param bool reserved: Ukazyvaet, budut li v otvete prisutstvovat zarezervirovannye kluhi
        :param bool expired: Ukazyvaet, budut li v otvete prisutstvovat kluhi s istekhim srokom deĭstvia
        :return: KeysResponseList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.offer_keys_get_with_http_info(offer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.offer_keys_get_with_http_info(offer_id, **kwargs)  # noqa: E501
            return data

    def offer_keys_get_with_http_info(self, offer_id, **kwargs):  # noqa: E501
        """Poluhit spisok kluhei  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit spisok zagruhennyh vami kluhei dla konkretnogo predlohenia.  <div class=\"description_important\">   Dostup k metodu predostavlaetsa herez zaavku v <a href=\"https://digital.wildberries.ru/support\" target=\"_black\">tehniheskuu podderhku</a>. </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offer_keys_get_with_http_info(offer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offer_id: ID predlohenia (required)
        :param int take: Kolihestvo zapisei dla poluhenia. Ukazyvaet, skolko kluhei dolhno byt vozvraheno v otvete
        :param int skip: Smehenie. Ukazyvaet, skolko zapisei nuhno propustit v rezultiruuhem nabore. Ispolzuetsa dla realizacii paginacii
        :param bool deleted: Ukazyvaet, budut li v otvete prisutstvovat udalennye kluhi
        :param bool sold: Ukazyvaet, budut li v otvete prisutstvovat prodannye kluhi
        :param bool reserved: Ukazyvaet, budut li v otvete prisutstvovat zarezervirovannye kluhi
        :param bool expired: Ukazyvaet, budut li v otvete prisutstvovat kluhi s istekhim srokom deĭstvia
        :return: KeysResponseList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offer_id', 'take', 'skip', 'deleted', 'sold', 'reserved', 'expired']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offer_keys_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'offer_id' is set
        if ('offer_id' not in params or
                params['offer_id'] is None):
            raise ValueError("Missing the required parameter `offer_id` when calling `offer_keys_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'offer_id' in params:
            path_params['offer_id'] = params['offer_id']  # noqa: E501

        query_params = []
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))  # noqa: E501
        if 'sold' in params:
            query_params.append(('sold', params['sold']))  # noqa: E501
        if 'reserved' in params:
            query_params.append(('reserved', params['reserved']))  # noqa: E501
        if 'expired' in params:
            query_params.append(('expired', params['expired']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/offer/keys/{offer_id}/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeysResponseList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
