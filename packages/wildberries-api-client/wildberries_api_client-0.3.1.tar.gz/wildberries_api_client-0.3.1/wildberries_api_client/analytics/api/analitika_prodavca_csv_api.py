# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.analytics.api_client import ApiClient


class AnalitikaProdavcaCSVApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_nm_report_downloads_file_download_id_get(self, download_id, **kwargs):  # noqa: E501
        """Poluhit othet  # noqa: E501

        Metod predostavlaet othet s rashirennoi analitikoi prodavca po ID [zadania na generaciu](/openapi/analytics#tag/Analitika-prodavca-CSV/paths/~1api~1v2~1nm-report~1downloads/post). <br><br> Mohno poluhit othet, kotoryi sgenerirovan za poslednie 48 hasov.<br>Othet budet zagruhen vnutri arhiva ZIP v formate CSV.  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_downloads_file_download_id_get(download_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str download_id: ID otheta (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_nm_report_downloads_file_download_id_get_with_http_info(download_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_nm_report_downloads_file_download_id_get_with_http_info(download_id, **kwargs)  # noqa: E501
            return data

    def api_v2_nm_report_downloads_file_download_id_get_with_http_info(self, download_id, **kwargs):  # noqa: E501
        """Poluhit othet  # noqa: E501

        Metod predostavlaet othet s rashirennoi analitikoi prodavca po ID [zadania na generaciu](/openapi/analytics#tag/Analitika-prodavca-CSV/paths/~1api~1v2~1nm-report~1downloads/post). <br><br> Mohno poluhit othet, kotoryi sgenerirovan za poslednie 48 hasov.<br>Othet budet zagruhen vnutri arhiva ZIP v formate CSV.  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_downloads_file_download_id_get_with_http_info(download_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str download_id: ID otheta (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['download_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_nm_report_downloads_file_download_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'download_id' is set
        if ('download_id' not in params or
                params['download_id'] is None):
            raise ValueError("Missing the required parameter `download_id` when calling `api_v2_nm_report_downloads_file_download_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'download_id' in params:
            path_params['downloadId'] = params['download_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/nm-report/downloads/file/{downloadId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_nm_report_downloads_get(self, **kwargs):  # noqa: E501
        """Poluhit spisok othetov  # noqa: E501

        Metod predostavlaet spisok othetov s rashirennoi analitikoi prodavca. Otvet soderhit ID [sozdannyh othetov](/openapi/analytics#tag/Analitika-prodavca-CSV/paths/~1api~1v2~1nm-report~1downloads/post) i statusy generacii.  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_downloads_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] filter_download_ids: ID otheta
        :return: NmReportGetReportsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_nm_report_downloads_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_nm_report_downloads_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_nm_report_downloads_get_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit spisok othetov  # noqa: E501

        Metod predostavlaet spisok othetov s rashirennoi analitikoi prodavca. Otvet soderhit ID [sozdannyh othetov](/openapi/analytics#tag/Analitika-prodavca-CSV/paths/~1api~1v2~1nm-report~1downloads/post) i statusy generacii.  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_downloads_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] filter_download_ids: ID otheta
        :return: NmReportGetReportsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_download_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_nm_report_downloads_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter_download_ids' in params:
            query_params.append(('filter[downloadIds]', params['filter_download_ids']))  # noqa: E501
            collection_formats['filter[downloadIds]'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/nm-report/downloads', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NmReportGetReportsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_nm_report_downloads_post(self, **kwargs):  # noqa: E501
        """Sozdat othet  # noqa: E501

        Metod sozdaet zadanie na generaciu otheta s rashirennoi analitikoi prodavca.<br><br>  Vy mohete sozdat CSV-versii othetov po [voronke prodah](/openapi/analytics#tag/Voronka-prodazh) ili [parametram poiska](/openapi/analytics#tag/Poiskovye-zaprosy) s gruppirovkoi po:   * artikulam WB   * predmetam, brendam i arlykam  V othetah po voronke prodah mohno gruppirovat dannye po dnam, nedelam ili mesacam.<br><br>  Takhe mohete sozdat CSV-versii othetov po [tekstam poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy/paths/~1api~1v2~1search-report~1product~1search-texts/post) i [istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov).<br><br>  Esli ne udalos [poluhit othet](/openapi/analytics#tag/Analitika-prodavca-CSV/paths/~1api~1v2~1nm-report~1downloads~1file~1%7BdownloadId%7D/get), mohno sozdat [povtornoe zadanie na generaciu](/openapi/analytics#tag/Analitika-prodavca-CSV/paths/~1api~1v2~1nm-report~1downloads~1retry/post). Takhe mohno [poluhit spisok i proverit statusy](/openapi/analytics#tag/Analitika-prodavca-CSV/paths/~1api~1v2~1nm-report~1downloads/get) othetov.  <div class=\"description_important\">     Othet po <a href=\"https://seller.wildberries.ru/content-analytics/history-remains\">istorii ostatkov</a> — model <code>StocksReportReq</code> — mohno sozdat bez podpiski <a href=\"https://seller.wildberries.ru/monetization/jam\">Dhem</a> </div>  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca, pri etom v sutki mohno sgenerirovat maksimum 20 othetov (shitautsa tolko uspehnye generacii) </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_downloads_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmreportDownloadsBody body:
        :return: NmReportCreateReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_nm_report_downloads_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_nm_report_downloads_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v2_nm_report_downloads_post_with_http_info(self, **kwargs):  # noqa: E501
        """Sozdat othet  # noqa: E501

        Metod sozdaet zadanie na generaciu otheta s rashirennoi analitikoi prodavca.<br><br>  Vy mohete sozdat CSV-versii othetov po [voronke prodah](/openapi/analytics#tag/Voronka-prodazh) ili [parametram poiska](/openapi/analytics#tag/Poiskovye-zaprosy) s gruppirovkoi po:   * artikulam WB   * predmetam, brendam i arlykam  V othetah po voronke prodah mohno gruppirovat dannye po dnam, nedelam ili mesacam.<br><br>  Takhe mohete sozdat CSV-versii othetov po [tekstam poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy/paths/~1api~1v2~1search-report~1product~1search-texts/post) i [istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov).<br><br>  Esli ne udalos [poluhit othet](/openapi/analytics#tag/Analitika-prodavca-CSV/paths/~1api~1v2~1nm-report~1downloads~1file~1%7BdownloadId%7D/get), mohno sozdat [povtornoe zadanie na generaciu](/openapi/analytics#tag/Analitika-prodavca-CSV/paths/~1api~1v2~1nm-report~1downloads~1retry/post). Takhe mohno [poluhit spisok i proverit statusy](/openapi/analytics#tag/Analitika-prodavca-CSV/paths/~1api~1v2~1nm-report~1downloads/get) othetov.  <div class=\"description_important\">     Othet po <a href=\"https://seller.wildberries.ru/content-analytics/history-remains\">istorii ostatkov</a> — model <code>StocksReportReq</code> — mohno sozdat bez podpiski <a href=\"https://seller.wildberries.ru/monetization/jam\">Dhem</a> </div>  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca, pri etom v sutki mohno sgenerirovat maksimum 20 othetov (shitautsa tolko uspehnye generacii) </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_downloads_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmreportDownloadsBody body:
        :return: NmReportCreateReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_nm_report_downloads_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/nm-report/downloads', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NmReportCreateReportResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_nm_report_downloads_retry_post(self, body, **kwargs):  # noqa: E501
        """Sgenerirovat othet povtorno  # noqa: E501

        Metod sozdaet povtornoe [zadanie na generaciu](/openapi/analytics#tag/Analitika-prodavca-CSV/paths/~1api~1v2~1nm-report~1downloads/post) otheta s rashirennoi analitikoi prodavca. Neobhodimo, esli pri generacii otheta vy [poluhili status](/openapi/analytics#tag/Analitika-prodavca-CSV/paths/~1api~1v2~1nm-report~1downloads/get) `FAILED`.  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_downloads_retry_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportRetryReportRequest body: (required)
        :return: NmReportRetryReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_nm_report_downloads_retry_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_nm_report_downloads_retry_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_nm_report_downloads_retry_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Sgenerirovat othet povtorno  # noqa: E501

        Metod sozdaet povtornoe [zadanie na generaciu](/openapi/analytics#tag/Analitika-prodavca-CSV/paths/~1api~1v2~1nm-report~1downloads/post) otheta s rashirennoi analitikoi prodavca. Neobhodimo, esli pri generacii otheta vy [poluhili status](/openapi/analytics#tag/Analitika-prodavca-CSV/paths/~1api~1v2~1nm-report~1downloads/get) `FAILED`.  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_downloads_retry_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportRetryReportRequest body: (required)
        :return: NmReportRetryReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_nm_report_downloads_retry_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_nm_report_downloads_retry_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/nm-report/downloads/retry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NmReportRetryReportResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
