# coding: utf-8

"""
    Zakazy Samovyvoz

    Upravlenie [sborohnymi zadaniami](/openapi/in-store-pickup#tag/Sborochnye-zadaniya-Samovyvoz) i [metadannymi](/openapi/in-store-pickup#tag/Metadannye-Samovyvoz) zakazov shemy Samovyvoz.   # noqa: E501

    OpenAPI spec version: instorepickup
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiBaseMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gtin': 'ApiBaseMetaGtin',
        'imei': 'ApiBaseMetaImei',
        'sgtin': 'ApiBaseMetaSgtin',
        'uin': 'ApiBaseMetaUin'
    }

    attribute_map = {
        'gtin': 'gtin',
        'imei': 'imei',
        'sgtin': 'sgtin',
        'uin': 'uin'
    }

    def __init__(self, gtin=None, imei=None, sgtin=None, uin=None):  # noqa: E501
        """ApiBaseMeta - a model defined in Swagger"""  # noqa: E501
        self._gtin = None
        self._imei = None
        self._sgtin = None
        self._uin = None
        self.discriminator = None
        if gtin is not None:
            self.gtin = gtin
        if imei is not None:
            self.imei = imei
        if sgtin is not None:
            self.sgtin = sgtin
        if uin is not None:
            self.uin = uin

    @property
    def gtin(self):
        """Gets the gtin of this ApiBaseMeta.  # noqa: E501


        :return: The gtin of this ApiBaseMeta.  # noqa: E501
        :rtype: ApiBaseMetaGtin
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this ApiBaseMeta.


        :param gtin: The gtin of this ApiBaseMeta.  # noqa: E501
        :type: ApiBaseMetaGtin
        """

        self._gtin = gtin

    @property
    def imei(self):
        """Gets the imei of this ApiBaseMeta.  # noqa: E501


        :return: The imei of this ApiBaseMeta.  # noqa: E501
        :rtype: ApiBaseMetaImei
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """Sets the imei of this ApiBaseMeta.


        :param imei: The imei of this ApiBaseMeta.  # noqa: E501
        :type: ApiBaseMetaImei
        """

        self._imei = imei

    @property
    def sgtin(self):
        """Gets the sgtin of this ApiBaseMeta.  # noqa: E501


        :return: The sgtin of this ApiBaseMeta.  # noqa: E501
        :rtype: ApiBaseMetaSgtin
        """
        return self._sgtin

    @sgtin.setter
    def sgtin(self, sgtin):
        """Sets the sgtin of this ApiBaseMeta.


        :param sgtin: The sgtin of this ApiBaseMeta.  # noqa: E501
        :type: ApiBaseMetaSgtin
        """

        self._sgtin = sgtin

    @property
    def uin(self):
        """Gets the uin of this ApiBaseMeta.  # noqa: E501


        :return: The uin of this ApiBaseMeta.  # noqa: E501
        :rtype: ApiBaseMetaUin
        """
        return self._uin

    @uin.setter
    def uin(self, uin):
        """Sets the uin of this ApiBaseMeta.


        :param uin: The uin of this ApiBaseMeta.  # noqa: E501
        :type: ApiBaseMetaUin
        """

        self._uin = uin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiBaseMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiBaseMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
