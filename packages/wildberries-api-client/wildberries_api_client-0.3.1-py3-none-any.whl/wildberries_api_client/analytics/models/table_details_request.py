# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableDetailsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_period': 'Period',
        'past_period': 'PastPeriod',
        'subject_id': 'int',
        'brand_name': 'str',
        'tag_id': 'int',
        'nm_ids': 'list[int]',
        'order_by': 'OrderBy',
        'position_cluster': 'str',
        'limit': 'int',
        'offset': 'int'
    }

    attribute_map = {
        'current_period': 'currentPeriod',
        'past_period': 'pastPeriod',
        'subject_id': 'subjectId',
        'brand_name': 'brandName',
        'tag_id': 'tagId',
        'nm_ids': 'nmIds',
        'order_by': 'orderBy',
        'position_cluster': 'positionCluster',
        'limit': 'limit',
        'offset': 'offset'
    }

    def __init__(self, current_period=None, past_period=None, subject_id=None, brand_name=None, tag_id=None, nm_ids=None, order_by=None, position_cluster=None, limit=None, offset=None):  # noqa: E501
        """TableDetailsRequest - a model defined in Swagger"""  # noqa: E501
        self._current_period = None
        self._past_period = None
        self._subject_id = None
        self._brand_name = None
        self._tag_id = None
        self._nm_ids = None
        self._order_by = None
        self._position_cluster = None
        self._limit = None
        self._offset = None
        self.discriminator = None
        self.current_period = current_period
        if past_period is not None:
            self.past_period = past_period
        if subject_id is not None:
            self.subject_id = subject_id
        if brand_name is not None:
            self.brand_name = brand_name
        if tag_id is not None:
            self.tag_id = tag_id
        if nm_ids is not None:
            self.nm_ids = nm_ids
        self.order_by = order_by
        self.position_cluster = position_cluster
        self.limit = limit
        self.offset = offset

    @property
    def current_period(self):
        """Gets the current_period of this TableDetailsRequest.  # noqa: E501


        :return: The current_period of this TableDetailsRequest.  # noqa: E501
        :rtype: Period
        """
        return self._current_period

    @current_period.setter
    def current_period(self, current_period):
        """Sets the current_period of this TableDetailsRequest.


        :param current_period: The current_period of this TableDetailsRequest.  # noqa: E501
        :type: Period
        """
        if current_period is None:
            raise ValueError("Invalid value for `current_period`, must not be `None`")  # noqa: E501

        self._current_period = current_period

    @property
    def past_period(self):
        """Gets the past_period of this TableDetailsRequest.  # noqa: E501


        :return: The past_period of this TableDetailsRequest.  # noqa: E501
        :rtype: PastPeriod
        """
        return self._past_period

    @past_period.setter
    def past_period(self, past_period):
        """Sets the past_period of this TableDetailsRequest.


        :param past_period: The past_period of this TableDetailsRequest.  # noqa: E501
        :type: PastPeriod
        """

        self._past_period = past_period

    @property
    def subject_id(self):
        """Gets the subject_id of this TableDetailsRequest.  # noqa: E501

        ID predmeta  # noqa: E501

        :return: The subject_id of this TableDetailsRequest.  # noqa: E501
        :rtype: int
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this TableDetailsRequest.

        ID predmeta  # noqa: E501

        :param subject_id: The subject_id of this TableDetailsRequest.  # noqa: E501
        :type: int
        """

        self._subject_id = subject_id

    @property
    def brand_name(self):
        """Gets the brand_name of this TableDetailsRequest.  # noqa: E501

        Nazvanie tovara  # noqa: E501

        :return: The brand_name of this TableDetailsRequest.  # noqa: E501
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this TableDetailsRequest.

        Nazvanie tovara  # noqa: E501

        :param brand_name: The brand_name of this TableDetailsRequest.  # noqa: E501
        :type: str
        """

        self._brand_name = brand_name

    @property
    def tag_id(self):
        """Gets the tag_id of this TableDetailsRequest.  # noqa: E501

        ID arlyka  # noqa: E501

        :return: The tag_id of this TableDetailsRequest.  # noqa: E501
        :rtype: int
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """Sets the tag_id of this TableDetailsRequest.

        ID arlyka  # noqa: E501

        :param tag_id: The tag_id of this TableDetailsRequest.  # noqa: E501
        :type: int
        """

        self._tag_id = tag_id

    @property
    def nm_ids(self):
        """Gets the nm_ids of this TableDetailsRequest.  # noqa: E501

        Spisok artikulov WB  # noqa: E501

        :return: The nm_ids of this TableDetailsRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._nm_ids

    @nm_ids.setter
    def nm_ids(self, nm_ids):
        """Sets the nm_ids of this TableDetailsRequest.

        Spisok artikulov WB  # noqa: E501

        :param nm_ids: The nm_ids of this TableDetailsRequest.  # noqa: E501
        :type: list[int]
        """

        self._nm_ids = nm_ids

    @property
    def order_by(self):
        """Gets the order_by of this TableDetailsRequest.  # noqa: E501


        :return: The order_by of this TableDetailsRequest.  # noqa: E501
        :rtype: OrderBy
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this TableDetailsRequest.


        :param order_by: The order_by of this TableDetailsRequest.  # noqa: E501
        :type: OrderBy
        """
        if order_by is None:
            raise ValueError("Invalid value for `order_by`, must not be `None`")  # noqa: E501

        self._order_by = order_by

    @property
    def position_cluster(self):
        """Gets the position_cluster of this TableDetailsRequest.  # noqa: E501

        Tovary s kakoi srednei poziciei v poiske pokazyvat v othete:   - `all` — vse   - `firstHundred` — ot 1 do 100   - `secondHundred` — ot 101 do 200   - `below` — ot 201 i nihe   # noqa: E501

        :return: The position_cluster of this TableDetailsRequest.  # noqa: E501
        :rtype: str
        """
        return self._position_cluster

    @position_cluster.setter
    def position_cluster(self, position_cluster):
        """Sets the position_cluster of this TableDetailsRequest.

        Tovary s kakoi srednei poziciei v poiske pokazyvat v othete:   - `all` — vse   - `firstHundred` — ot 1 do 100   - `secondHundred` — ot 101 do 200   - `below` — ot 201 i nihe   # noqa: E501

        :param position_cluster: The position_cluster of this TableDetailsRequest.  # noqa: E501
        :type: str
        """
        if position_cluster is None:
            raise ValueError("Invalid value for `position_cluster`, must not be `None`")  # noqa: E501
        allowed_values = ["all", "firstHundred", "secondHundred", "below"]  # noqa: E501
        if position_cluster not in allowed_values:
            raise ValueError(
                "Invalid value for `position_cluster` ({0}), must be one of {1}"  # noqa: E501
                .format(position_cluster, allowed_values)
            )

        self._position_cluster = position_cluster

    @property
    def limit(self):
        """Gets the limit of this TableDetailsRequest.  # noqa: E501

        Kolihestvo tovarov v otvete  # noqa: E501

        :return: The limit of this TableDetailsRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this TableDetailsRequest.

        Kolihestvo tovarov v otvete  # noqa: E501

        :param limit: The limit of this TableDetailsRequest.  # noqa: E501
        :type: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this TableDetailsRequest.  # noqa: E501

        Posle kakogo elementa vydavat dannye  # noqa: E501

        :return: The offset of this TableDetailsRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this TableDetailsRequest.

        Posle kakogo elementa vydavat dannye  # noqa: E501

        :param offset: The offset of this TableDetailsRequest.  # noqa: E501
        :type: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableDetailsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableDetailsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
