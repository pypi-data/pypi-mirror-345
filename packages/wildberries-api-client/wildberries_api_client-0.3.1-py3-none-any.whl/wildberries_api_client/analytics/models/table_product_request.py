# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from wildberries_api_client.analytics.models.common_product_filters import CommonProductFilters  # noqa: F401,E501

class TableProductRequest(CommonProductFilters):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'int',
        'offset': 'int'
    }
    if hasattr(CommonProductFilters, "swagger_types"):
        swagger_types.update(CommonProductFilters.swagger_types)

    attribute_map = {
        'limit': 'limit',
        'offset': 'offset'
    }
    if hasattr(CommonProductFilters, "attribute_map"):
        attribute_map.update(CommonProductFilters.attribute_map)

    def __init__(self, limit=100, offset=None, *args, **kwargs):  # noqa: E501
        """TableProductRequest - a model defined in Swagger"""  # noqa: E501
        self._limit = None
        self._offset = None
        self.discriminator = None
        if limit is not None:
            self.limit = limit
        self.offset = offset
        CommonProductFilters.__init__(self, *args, **kwargs)

    @property
    def limit(self):
        """Gets the limit of this TableProductRequest.  # noqa: E501

        Kolihestvo tovarov v otvete  # noqa: E501

        :return: The limit of this TableProductRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this TableProductRequest.

        Kolihestvo tovarov v otvete  # noqa: E501

        :param limit: The limit of this TableProductRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this TableProductRequest.  # noqa: E501

        Posle kakogo elementa vydavat dannye  # noqa: E501

        :return: The offset of this TableProductRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this TableProductRequest.

        Posle kakogo elementa vydavat dannye  # noqa: E501

        :param offset: The offset of this TableProductRequest.  # noqa: E501
        :type: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableProductRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableProductRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
