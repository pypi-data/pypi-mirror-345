# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableProductItemSt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nm_id': 'int',
        'is_deleted': 'bool',
        'subject_name': 'str',
        'name': 'str',
        'vendor_code': 'str',
        'brand_name': 'str',
        'main_photo': 'str',
        'has_sizes': 'bool',
        'metrics': 'AllOfTableProductItemStMetrics'
    }

    attribute_map = {
        'nm_id': 'nmID',
        'is_deleted': 'isDeleted',
        'subject_name': 'subjectName',
        'name': 'name',
        'vendor_code': 'vendorCode',
        'brand_name': 'brandName',
        'main_photo': 'mainPhoto',
        'has_sizes': 'hasSizes',
        'metrics': 'metrics'
    }

    def __init__(self, nm_id=None, is_deleted=None, subject_name=None, name=None, vendor_code=None, brand_name=None, main_photo=None, has_sizes=None, metrics=None):  # noqa: E501
        """TableProductItemSt - a model defined in Swagger"""  # noqa: E501
        self._nm_id = None
        self._is_deleted = None
        self._subject_name = None
        self._name = None
        self._vendor_code = None
        self._brand_name = None
        self._main_photo = None
        self._has_sizes = None
        self._metrics = None
        self.discriminator = None
        self.nm_id = nm_id
        self.is_deleted = is_deleted
        self.subject_name = subject_name
        self.name = name
        self.vendor_code = vendor_code
        self.brand_name = brand_name
        self.main_photo = main_photo
        self.has_sizes = has_sizes
        self.metrics = metrics

    @property
    def nm_id(self):
        """Gets the nm_id of this TableProductItemSt.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this TableProductItemSt.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this TableProductItemSt.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this TableProductItemSt.  # noqa: E501
        :type: int
        """
        if nm_id is None:
            raise ValueError("Invalid value for `nm_id`, must not be `None`")  # noqa: E501

        self._nm_id = nm_id

    @property
    def is_deleted(self):
        """Gets the is_deleted of this TableProductItemSt.  # noqa: E501

        avlaetsa li tovar udalennym  # noqa: E501

        :return: The is_deleted of this TableProductItemSt.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this TableProductItemSt.

        avlaetsa li tovar udalennym  # noqa: E501

        :param is_deleted: The is_deleted of this TableProductItemSt.  # noqa: E501
        :type: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")  # noqa: E501

        self._is_deleted = is_deleted

    @property
    def subject_name(self):
        """Gets the subject_name of this TableProductItemSt.  # noqa: E501

        Nazvanie predmeta  # noqa: E501

        :return: The subject_name of this TableProductItemSt.  # noqa: E501
        :rtype: str
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this TableProductItemSt.

        Nazvanie predmeta  # noqa: E501

        :param subject_name: The subject_name of this TableProductItemSt.  # noqa: E501
        :type: str
        """
        if subject_name is None:
            raise ValueError("Invalid value for `subject_name`, must not be `None`")  # noqa: E501

        self._subject_name = subject_name

    @property
    def name(self):
        """Gets the name of this TableProductItemSt.  # noqa: E501

        Nazvanie tovara  # noqa: E501

        :return: The name of this TableProductItemSt.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TableProductItemSt.

        Nazvanie tovara  # noqa: E501

        :param name: The name of this TableProductItemSt.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def vendor_code(self):
        """Gets the vendor_code of this TableProductItemSt.  # noqa: E501

        Artikul prodavca  # noqa: E501

        :return: The vendor_code of this TableProductItemSt.  # noqa: E501
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code):
        """Sets the vendor_code of this TableProductItemSt.

        Artikul prodavca  # noqa: E501

        :param vendor_code: The vendor_code of this TableProductItemSt.  # noqa: E501
        :type: str
        """
        if vendor_code is None:
            raise ValueError("Invalid value for `vendor_code`, must not be `None`")  # noqa: E501

        self._vendor_code = vendor_code

    @property
    def brand_name(self):
        """Gets the brand_name of this TableProductItemSt.  # noqa: E501

        Brend  # noqa: E501

        :return: The brand_name of this TableProductItemSt.  # noqa: E501
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this TableProductItemSt.

        Brend  # noqa: E501

        :param brand_name: The brand_name of this TableProductItemSt.  # noqa: E501
        :type: str
        """
        if brand_name is None:
            raise ValueError("Invalid value for `brand_name`, must not be `None`")  # noqa: E501

        self._brand_name = brand_name

    @property
    def main_photo(self):
        """Gets the main_photo of this TableProductItemSt.  # noqa: E501

        Ssylka na glavnoe foto  # noqa: E501

        :return: The main_photo of this TableProductItemSt.  # noqa: E501
        :rtype: str
        """
        return self._main_photo

    @main_photo.setter
    def main_photo(self, main_photo):
        """Sets the main_photo of this TableProductItemSt.

        Ssylka na glavnoe foto  # noqa: E501

        :param main_photo: The main_photo of this TableProductItemSt.  # noqa: E501
        :type: str
        """
        if main_photo is None:
            raise ValueError("Invalid value for `main_photo`, must not be `None`")  # noqa: E501

        self._main_photo = main_photo

    @property
    def has_sizes(self):
        """Gets the has_sizes of this TableProductItemSt.  # noqa: E501

        avlaetsa li tovar razmernym. Nerazmernyi tovar imeet edinstvennyi razmer, s `\"techSize\":\"0\"`  # noqa: E501

        :return: The has_sizes of this TableProductItemSt.  # noqa: E501
        :rtype: bool
        """
        return self._has_sizes

    @has_sizes.setter
    def has_sizes(self, has_sizes):
        """Sets the has_sizes of this TableProductItemSt.

        avlaetsa li tovar razmernym. Nerazmernyi tovar imeet edinstvennyi razmer, s `\"techSize\":\"0\"`  # noqa: E501

        :param has_sizes: The has_sizes of this TableProductItemSt.  # noqa: E501
        :type: bool
        """
        if has_sizes is None:
            raise ValueError("Invalid value for `has_sizes`, must not be `None`")  # noqa: E501

        self._has_sizes = has_sizes

    @property
    def metrics(self):
        """Gets the metrics of this TableProductItemSt.  # noqa: E501

        Metriki tovara  # noqa: E501

        :return: The metrics of this TableProductItemSt.  # noqa: E501
        :rtype: AllOfTableProductItemStMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this TableProductItemSt.

        Metriki tovara  # noqa: E501

        :param metrics: The metrics of this TableProductItemSt.  # noqa: E501
        :type: AllOfTableProductItemStMetrics
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501

        self._metrics = metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableProductItemSt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableProductItemSt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
