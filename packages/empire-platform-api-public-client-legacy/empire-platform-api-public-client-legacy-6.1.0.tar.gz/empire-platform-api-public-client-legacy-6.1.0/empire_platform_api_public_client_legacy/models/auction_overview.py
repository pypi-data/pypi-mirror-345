# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from empire_platform_api_public_client_legacy.models.auction import Auction
from empire_platform_api_public_client_legacy.models.buy_now_offer_overview_item import BuyNowOfferOverviewItem

class AuctionOverview(BaseModel):
    """
    AuctionOverview
    """
    auctions: conlist(Auction) = Field(...)
    buy_now_offers: conlist(BuyNowOfferOverviewItem) = Field(default=..., alias="buyNowOffers")
    __properties = ["auctions", "buyNowOffers"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuctionOverview:
        """Create an instance of AuctionOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in auctions (list)
        _items = []
        if self.auctions:
            for _item in self.auctions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['auctions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in buy_now_offers (list)
        _items = []
        if self.buy_now_offers:
            for _item in self.buy_now_offers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['buyNowOffers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuctionOverview:
        """Create an instance of AuctionOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuctionOverview.parse_obj(obj)

        _obj = AuctionOverview.parse_obj({
            "auctions": [Auction.from_dict(_item) for _item in obj.get("auctions")] if obj.get("auctions") is not None else None,
            "buy_now_offers": [BuyNowOfferOverviewItem.from_dict(_item) for _item in obj.get("buyNowOffers")] if obj.get("buyNowOffers") is not None else None
        })
        return _obj


