# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSensorUpdatePolicyBuildsResult',
    'AwaitableGetSensorUpdatePolicyBuildsResult',
    'get_sensor_update_policy_builds',
    'get_sensor_update_policy_builds_output',
]

@pulumi.output_type
class GetSensorUpdatePolicyBuildsResult:
    """
    A collection of values returned by getSensorUpdatePolicyBuilds.
    """
    def __init__(__self__, id=None, linux=None, linux_arm64=None, mac=None, windows=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if linux and not isinstance(linux, dict):
            raise TypeError("Expected argument 'linux' to be a dict")
        pulumi.set(__self__, "linux", linux)
        if linux_arm64 and not isinstance(linux_arm64, dict):
            raise TypeError("Expected argument 'linux_arm64' to be a dict")
        pulumi.set(__self__, "linux_arm64", linux_arm64)
        if mac and not isinstance(mac, dict):
            raise TypeError("Expected argument 'mac' to be a dict")
        pulumi.set(__self__, "mac", mac)
        if windows and not isinstance(windows, dict):
            raise TypeError("Expected argument 'windows' to be a dict")
        pulumi.set(__self__, "windows", windows)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Placeholder identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def linux(self) -> 'outputs.GetSensorUpdatePolicyBuildsLinuxResult':
        """
        Builds for the Linux platform.
        """
        return pulumi.get(self, "linux")

    @property
    @pulumi.getter(name="linuxArm64")
    def linux_arm64(self) -> 'outputs.GetSensorUpdatePolicyBuildsLinuxArm64Result':
        """
        Builds for the Linux platform (arm64).
        """
        return pulumi.get(self, "linux_arm64")

    @property
    @pulumi.getter
    def mac(self) -> 'outputs.GetSensorUpdatePolicyBuildsMacResult':
        """
        Builds for the Mac platform.
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def windows(self) -> 'outputs.GetSensorUpdatePolicyBuildsWindowsResult':
        """
        Builds for the Windows platform.
        """
        return pulumi.get(self, "windows")


class AwaitableGetSensorUpdatePolicyBuildsResult(GetSensorUpdatePolicyBuildsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSensorUpdatePolicyBuildsResult(
            id=self.id,
            linux=self.linux,
            linux_arm64=self.linux_arm64,
            mac=self.mac,
            windows=self.windows)


def get_sensor_update_policy_builds(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSensorUpdatePolicyBuildsResult:
    """
    This data source provides information about the latest sensor builds for each platform.

    ## API Scopes

    The following API scopes are required:

    - Sensor update policies | Write

    ## Example Usage

    ```python
    import pulumi
    import pulumi_crowdstrike as crowdstrike

    builds = crowdstrike.get_sensor_update_policy_builds()
    pulumi.export("latestWindowsBuild", builds.windows.latest)
    pulumi.export("n1LinuxBuild", builds.linux.n1)
    pulumi.export("n2MacBuild", builds.mac.n2)
    pulumi.export("latestLinuxArm64Build", builds.linux_arm64.latest)
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('crowdstrike:index/getSensorUpdatePolicyBuilds:getSensorUpdatePolicyBuilds', __args__, opts=opts, typ=GetSensorUpdatePolicyBuildsResult).value

    return AwaitableGetSensorUpdatePolicyBuildsResult(
        id=pulumi.get(__ret__, 'id'),
        linux=pulumi.get(__ret__, 'linux'),
        linux_arm64=pulumi.get(__ret__, 'linux_arm64'),
        mac=pulumi.get(__ret__, 'mac'),
        windows=pulumi.get(__ret__, 'windows'))
def get_sensor_update_policy_builds_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSensorUpdatePolicyBuildsResult]:
    """
    This data source provides information about the latest sensor builds for each platform.

    ## API Scopes

    The following API scopes are required:

    - Sensor update policies | Write

    ## Example Usage

    ```python
    import pulumi
    import pulumi_crowdstrike as crowdstrike

    builds = crowdstrike.get_sensor_update_policy_builds()
    pulumi.export("latestWindowsBuild", builds.windows.latest)
    pulumi.export("n1LinuxBuild", builds.linux.n1)
    pulumi.export("n2MacBuild", builds.mac.n2)
    pulumi.export("latestLinuxArm64Build", builds.linux_arm64.latest)
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('crowdstrike:index/getSensorUpdatePolicyBuilds:getSensorUpdatePolicyBuilds', __args__, opts=opts, typ=GetSensorUpdatePolicyBuildsResult)
    return __ret__.apply(lambda __response__: GetSensorUpdatePolicyBuildsResult(
        id=pulumi.get(__response__, 'id'),
        linux=pulumi.get(__response__, 'linux'),
        linux_arm64=pulumi.get(__response__, 'linux_arm64'),
        mac=pulumi.get(__response__, 'mac'),
        windows=pulumi.get(__response__, 'windows')))
