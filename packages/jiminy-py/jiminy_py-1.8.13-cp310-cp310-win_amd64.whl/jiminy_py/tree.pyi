from _typeshed import Incomplete
from collections.abc import Sequence, ValuesView
from typing import Any, Callable, Iterable, TypeVar

ValueT = TypeVar('ValueT')
StructNested: Incomplete

def issubclass_mapping(cls) -> bool: ...
def issubclass_sequence(cls) -> bool: ...
def issubclass_hashable(cls) -> bool: ...
def flatten_with_path_up_to(data_shallow: StructNested[Any], data_nested: StructNested[Any]) -> tuple[tuple[tuple[str | int, ...], Any], ...]: ...
def flatten_with_path(data_nested: StructNested[Any]) -> tuple[tuple[tuple[str | int, ...], Any], ...]: ...
def flatten_up_to(data_shallow: Any, data_nested: Any) -> tuple[Any, ...]: ...
def flatten(data_nested: Any) -> tuple[Any, ...]: ...
def unflatten_as(data_nested: StructNested[Any], data_leaves: Sequence | Iterable | ValuesView) -> StructNested[Any]: ...
def map_structure(fn: Callable, *data_nested: StructNested[Any]) -> StructNested[Any]: ...
def deepcopy(data: Any) -> Any: ...
