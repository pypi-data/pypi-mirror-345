# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from empire_platform_api_public_client_legacy.models.error_code import ErrorCode
from empire_platform_api_public_client_legacy.models.nested_error import NestedError

class ErrorResponse(BaseModel):
    """
    ErrorResponse
    """
    code: ErrorCode = Field(...)
    message: Optional[StrictStr] = None
    nested_errors: Optional[conlist(NestedError)] = Field(default=None, alias="nestedErrors")
    params: Optional[Any] = None
    request_id: Optional[StrictStr] = Field(default=None, alias="requestId")
    debug_error: Optional[StrictStr] = Field(default=None, alias="debugError")
    __properties = ["code", "message", "nestedErrors", "params", "requestId", "debugError"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ErrorResponse:
        """Create an instance of ErrorResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in nested_errors (list)
        _items = []
        if self.nested_errors:
            for _item in self.nested_errors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nestedErrors'] = _items
        # set to None if params (nullable) is None
        # and __fields_set__ contains the field
        if self.params is None and "params" in self.__fields_set__:
            _dict['params'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ErrorResponse:
        """Create an instance of ErrorResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ErrorResponse.parse_obj(obj)

        _obj = ErrorResponse.parse_obj({
            "code": obj.get("code"),
            "message": obj.get("message"),
            "nested_errors": [NestedError.from_dict(_item) for _item in obj.get("nestedErrors")] if obj.get("nestedErrors") is not None else None,
            "request_id": obj.get("requestId"),
            "debug_error": obj.get("debugError")
        })
        return _obj


