# coding: utf-8

"""
    Marketing i prodvihenie

    <div class=\"description_important\">       Uznat bolhe o marketinge i prodvihenii mohno v <a href=\"https://seller.wildberries.ru/instructions/category/59d92bd3-6ea0-40f2-b762-ca8835d7d42e?goBackOption=prevRoute&categoryId=479385c6-de01-4b4d-ad4e-ed941e65582e\">spravohnom centre</a> </div>    Metody marketinga i prodvihenia pozvolaut:   1. Poluhat informaciu o [reklamnyh kampaniah](/openapi/promotion#tag/Kampanii) i [mediakampaniah](/openapi/promotion#tag/Media).   2. [Sozdavat](/openapi/promotion#tag/Sozdanie-kampanij) i [upravlat](/openapi/promotion#tag/Upravlenie-kampaniyami) kampaniami.   3. Nastraivat [parametry kampanii](/openapi/promotion#tag/Parametry-kampanij) â€” klastery fraz, prodvigaemye tovary i tak dalee.   4. Upravlat [finansami kampanii](/openapi/promotion#tag/Finansy).   5. Rabotat s [kalendarem akcii](/openapi/promotion#tag/Kalendar-akcij).  Dannye sinhroniziruutsa s bazoi raz v 3 minuty. Statusy kampanii menautsa raz v minutu. Stavki kampanii menautsa raz v 30 sekund.   # noqa: E501

    OpenAPI spec version: promotion
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20011Extended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reason': 'str',
        'expenses': 'int',
        '_from': 'datetime',
        'to': 'datetime',
        'updated_at': 'datetime',
        'price': 'int',
        'budget': 'int',
        'operation': 'int',
        'contract_id': 'int'
    }

    attribute_map = {
        'reason': 'reason',
        'expenses': 'expenses',
        '_from': 'from',
        'to': 'to',
        'updated_at': 'updated_at',
        'price': 'price',
        'budget': 'budget',
        'operation': 'operation',
        'contract_id': 'contract_id'
    }

    def __init__(self, reason=None, expenses=None, _from=None, to=None, updated_at=None, price=None, budget=None, operation=None, contract_id=None):  # noqa: E501
        """InlineResponse20011Extended - a model defined in Swagger"""  # noqa: E501
        self._reason = None
        self._expenses = None
        self.__from = None
        self._to = None
        self._updated_at = None
        self._price = None
        self._budget = None
        self._operation = None
        self._contract_id = None
        self.discriminator = None
        if reason is not None:
            self.reason = reason
        if expenses is not None:
            self.expenses = expenses
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if updated_at is not None:
            self.updated_at = updated_at
        if price is not None:
            self.price = price
        if budget is not None:
            self.budget = budget
        if operation is not None:
            self.operation = operation
        if contract_id is not None:
            self.contract_id = contract_id

    @property
    def reason(self):
        """Gets the reason of this InlineResponse20011Extended.  # noqa: E501

        Kommentarii moderatora  # noqa: E501

        :return: The reason of this InlineResponse20011Extended.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this InlineResponse20011Extended.

        Kommentarii moderatora  # noqa: E501

        :param reason: The reason of this InlineResponse20011Extended.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def expenses(self):
        """Gets the expenses of this InlineResponse20011Extended.  # noqa: E501

        Zatraty  # noqa: E501

        :return: The expenses of this InlineResponse20011Extended.  # noqa: E501
        :rtype: int
        """
        return self._expenses

    @expenses.setter
    def expenses(self, expenses):
        """Sets the expenses of this InlineResponse20011Extended.

        Zatraty  # noqa: E501

        :param expenses: The expenses of this InlineResponse20011Extended.  # noqa: E501
        :type: int
        """

        self._expenses = expenses

    @property
    def _from(self):
        """Gets the _from of this InlineResponse20011Extended.  # noqa: E501

        Nahalo pokazov mediakampanii  # noqa: E501

        :return: The _from of this InlineResponse20011Extended.  # noqa: E501
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this InlineResponse20011Extended.

        Nahalo pokazov mediakampanii  # noqa: E501

        :param _from: The _from of this InlineResponse20011Extended.  # noqa: E501
        :type: datetime
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this InlineResponse20011Extended.  # noqa: E501

        Konec pokazov mediakampanii  # noqa: E501

        :return: The to of this InlineResponse20011Extended.  # noqa: E501
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this InlineResponse20011Extended.

        Konec pokazov mediakampanii  # noqa: E501

        :param to: The to of this InlineResponse20011Extended.  # noqa: E501
        :type: datetime
        """

        self._to = to

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse20011Extended.  # noqa: E501

        Vrema izmenenia mediakampanii  # noqa: E501

        :return: The updated_at of this InlineResponse20011Extended.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse20011Extended.

        Vrema izmenenia mediakampanii  # noqa: E501

        :param updated_at: The updated_at of this InlineResponse20011Extended.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def price(self):
        """Gets the price of this InlineResponse20011Extended.  # noqa: E501

        Stoimost razmehenia po dnam (dla tipa 1)  # noqa: E501

        :return: The price of this InlineResponse20011Extended.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this InlineResponse20011Extended.

        Stoimost razmehenia po dnam (dla tipa 1)  # noqa: E501

        :param price: The price of this InlineResponse20011Extended.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def budget(self):
        """Gets the budget of this InlineResponse20011Extended.  # noqa: E501

        Ostatok budheta (dla tipa 2)  # noqa: E501

        :return: The budget of this InlineResponse20011Extended.  # noqa: E501
        :rtype: int
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this InlineResponse20011Extended.

        Ostatok budheta (dla tipa 2)  # noqa: E501

        :param budget: The budget of this InlineResponse20011Extended.  # noqa: E501
        :type: int
        """

        self._budget = budget

    @property
    def operation(self):
        """Gets the operation of this InlineResponse20011Extended.  # noqa: E501

        Istohnik spisania (1 - balans, 2 - shet)  # noqa: E501

        :return: The operation of this InlineResponse20011Extended.  # noqa: E501
        :rtype: int
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this InlineResponse20011Extended.

        Istohnik spisania (1 - balans, 2 - shet)  # noqa: E501

        :param operation: The operation of this InlineResponse20011Extended.  # noqa: E501
        :type: int
        """

        self._operation = operation

    @property
    def contract_id(self):
        """Gets the contract_id of this InlineResponse20011Extended.  # noqa: E501

        ID kontrakta (dla prodavcov na kontrakte)  # noqa: E501

        :return: The contract_id of this InlineResponse20011Extended.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this InlineResponse20011Extended.

        ID kontrakta (dla prodavcov na kontrakte)  # noqa: E501

        :param contract_id: The contract_id of this InlineResponse20011Extended.  # noqa: E501
        :type: int
        """

        self._contract_id = contract_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20011Extended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20011Extended):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
