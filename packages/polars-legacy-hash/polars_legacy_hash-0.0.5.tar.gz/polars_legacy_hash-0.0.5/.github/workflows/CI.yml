name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read


jobs:
  linux_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ x86_64 ]
        polars_version: ["polars==0.20.10", "polars==1.0.0", "polars==1.5", "polars", "polars-u64-idx"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Rust
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        run: rustup show
      - uses: mozilla-actions/sccache-action@v0.0.9
      - run: uv sync
      - run: uv run maturin develop
      - run: uv pip install ${{ matrix.polars_version }}
        # modified from the uv env state, invoke directly so uv doesn't re-sync
      - run: uv run --no-sync python -m pytest tests
        # run linting only on the latest polars version
      - run: uv run --no-sync python -m mypy polars_legacy_hash
        if: matrix.polars_version == 'polars'
      - run: uv run --no-sync python -m ruff check --diff .
        if: matrix.polars_version == 'polars'
      - run: uv run --no-sync python -m ruff format --check --diff
        if: matrix.polars_version == 'polars'


  build_wheels_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # target: [x86_64, x86, aarch64, armv7, ppc64le] # fails s390x
        target: [ x86_64 ] # fails s390x
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path Cargo.toml
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ runner.os }}-${{ matrix.target }}
          path: dist

  build_wheels_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [ x64, x86 ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ runner.os }}-${{ matrix.target }}
          path: dist
  build_wheels_macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [ x86_64, aarch64 ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ runner.os }}-${{ matrix.target }}
          path: dist

  build_sdist:
    runs-on: ubuntu-latest
    strategy:
        matrix:
          target: [ x86_64 ]
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ runner.os }}-${{ matrix.target }}-sdist
          path: dist

  test_wheels:
    name: Test wheels

    needs: [build_wheels_windows, build_wheels_linux]
    strategy:
      matrix:
        python-version: [ '3.10' ]
        include:
          - os: windows-latest
            architecture: x64
#          - os: ubuntu-latest
#            architecture: x86_64

    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-${{ runner.os }}-${{ matrix.architecture }}
          path: dist/

      - run: uv venv
      - run: uv pip install pytest polars
      - name: Install built wheel
        shell: bash
        run: |
          uv pip install dist/wheels-${{ runner.os }}-${{ matrix.architecture }}/*.whl
      - run: uv run python -c "import polars_legacy_hash"
      - name: Run tests
        run: |
          uv run --no-sync pytest tests

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ linux_tests, build_wheels_linux, build_wheels_macos, build_wheels_windows, build_sdist, test_wheels ]
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          pattern: wheels*
          merge-multiple: true

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing *
