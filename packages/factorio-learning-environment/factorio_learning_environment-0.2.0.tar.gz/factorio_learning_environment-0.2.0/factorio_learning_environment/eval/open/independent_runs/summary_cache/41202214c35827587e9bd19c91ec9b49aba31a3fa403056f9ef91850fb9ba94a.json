{"content": "### EXISTING STRUCTURES\n\n#### Electricity generator at position(-0.5, 2.5)\nConsists of offshore pump(position (-9.5, -0.5)), boiler(position (-5.0, 2.5)), steam engine(position (-0.5, 2.5)) and associated pipes and power poles.\n\n#### Electricity generator at position(3.5, 9.5)\nConsists of offshore pump(position (-9.5, 1.5)), boiler(position (-1.0, 9.5)), steam engine(position (3.5, 9.5)) and associated pipes and power poles.\n\n#### Crude oil mine at oil refinery at position(17.5, 40.5)\nConsists of pumpjack(position (17.5, 40.5)) and associated power poles and pipes connected to storage tank at position(5.5, 0.5).\n\n#### Oil refinery at position(10.5, 0.5)\nConsists of oil refinery(position (10.5, 0.5)), storage tank(position (5.5, 0.5)), chemical plant(position (15.5, 0.5)) and associated pipes and power poles.\n\n#### Plastic bar production system at position(15.5, 0.5)\nConsists of chemical plant(position (15.5, 0.5)), inserter(position (15.5, -3.5)) that takes plastic bars from chemical plant, inserter(position (19.5, 0.5)) that supplies coal to the chemical plant, chest(position (18.5, 0.5)) that stores coal, chest(position (15.5, -4.5)) that stores plastic bars and associated power poles.\n\n### ERROR TIPS\n\n* Errors when using undefined variables:\n  - Ensure that variables are defined before using them. \n  - Check the scope of the variables and make sure they are accessible where they are being used.\n* Errors when getting entities at specific positions:\n  - Verify that the entity exists at the specified position before attempting to retrieve it.\n  - Check the type of entity being retrieved to ensure it matches the expected type.\n* Errors when placing entities:\n  - Ensure the target position is within the allowed distance.\n  - Check if the target position is occupied by another entity or is unplaceable (e.g., water).\n  - Verify that the direction argument is of the correct type (Direction object).\n* Errors when placing entities next to other entities:\n  - Ensure there is enough space next to the reference entity.\n  - Check for collisions with existing entities.\n  - Consider increasing the spacing or changing the direction to avoid collisions.\n* Errors when connecting entities with pipes:\n  - Ensure the source entity has the required fluid before connecting it to the target entity.\n  - Verify that the target entity is capable of receiving the fluid from the source entity.\n* Errors when inserting items into entities:\n  - Ensure the entity is capable of accepting the item.\n  - Verify that the entity has available space for the item.\n* Syntax errors:\n  - Check for incorrect syntax, such as using starred expressions in incorrect contexts.\n* Name errors:\n  - Ensure that names are defined before using them.\n* Errors when placing entities too far away:\n  - Move closer to the target position before attempting to place the entity.\n* Errors when inserting items into inserter:\n  - Check if the inserter has available space for the item and if it is capable of accepting the item.\n* Errors when entities are not receiving power:\n  - Check the power connections and ensure that the entities are properly connected to a power source.\n\n### NAMESPACE\n\n* Important variables:\n  - `storage_tank`: StorageTank (assigned in Step 17)\n  - `pumpjack`: PumpJack (assigned in Step 2)\n  - `storage_tank_position`: Position (assigned in Step 16)\n  - `chemical_plant`: ChemicalPlant (assigned in Step 24)\n  - `coal_inserter`: Inserter (assigned in Step 34)\n  - `output_inserter`: Inserter (assigned in Step 48)\n  - `output_chest`: Chest (assigned in Step 54)\n  - `entity`: Not defined (error occurred in Step 63)\n* Utility functions:\n  - `connect_entities(entities, prototype)`: Connects entities with the given prototype (e.g., Pipe, PowerPole). Returns a list of connected entities.\n    - Success mode: Entities are connected successfully.\n    - Failure mode: Entities are not connected due to incorrect prototype or entities not being adjacent, or source entity not having the required fluid.\n  - `get_entity(prototype, position)`: Retrieves an entity of the given prototype at the specified position. Returns the entity if found.\n    - Success mode: Entity is retrieved successfully.\n    - Failure mode: Entity is not found at the specified position, resulting in an Exception"}