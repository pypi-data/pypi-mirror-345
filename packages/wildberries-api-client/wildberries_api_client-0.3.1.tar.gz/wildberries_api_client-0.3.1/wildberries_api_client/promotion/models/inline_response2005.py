# coding: utf-8

"""
    Marketing i prodvihenie

    <div class=\"description_important\">       Uznat bolhe o marketinge i prodvihenii mohno v <a href=\"https://seller.wildberries.ru/instructions/category/59d92bd3-6ea0-40f2-b762-ca8835d7d42e?goBackOption=prevRoute&categoryId=479385c6-de01-4b4d-ad4e-ed941e65582e\">spravohnom centre</a> </div>    Metody marketinga i prodvihenia pozvolaut:   1. Poluhat informaciu o [reklamnyh kampaniah](/openapi/promotion#tag/Kampanii) i [mediakampaniah](/openapi/promotion#tag/Media).   2. [Sozdavat](/openapi/promotion#tag/Sozdanie-kampanij) i [upravlat](/openapi/promotion#tag/Upravlenie-kampaniyami) kampaniami.   3. Nastraivat [parametry kampanii](/openapi/promotion#tag/Parametry-kampanij) — klastery fraz, prodvigaemye tovary i tak dalee.   4. Upravlat [finansami kampanii](/openapi/promotion#tag/Finansy).   5. Rabotat s [kalendarem akcii](/openapi/promotion#tag/Kalendar-akcij).  Dannye sinhroniziruutsa s bazoi raz v 3 minuty. Statusy kampanii menautsa raz v minutu. Stavki kampanii menautsa raz v 30 sekund.   # noqa: E501

    OpenAPI spec version: promotion
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2005(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cash': 'int',
        'netting': 'int',
        'total': 'int'
    }

    attribute_map = {
        'cash': 'cash',
        'netting': 'netting',
        'total': 'total'
    }

    def __init__(self, cash=None, netting=None, total=None):  # noqa: E501
        """InlineResponse2005 - a model defined in Swagger"""  # noqa: E501
        self._cash = None
        self._netting = None
        self._total = None
        self.discriminator = None
        if cash is not None:
            self.cash = cash
        if netting is not None:
            self.netting = netting
        if total is not None:
            self.total = total

    @property
    def cash(self):
        """Gets the cash of this InlineResponse2005.  # noqa: E501

        Pole ne ispolzuetsa. Znahenie vsegda 0.  # noqa: E501

        :return: The cash of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this InlineResponse2005.

        Pole ne ispolzuetsa. Znahenie vsegda 0.  # noqa: E501

        :param cash: The cash of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._cash = cash

    @property
    def netting(self):
        """Gets the netting of this InlineResponse2005.  # noqa: E501

        Pole ne ispolzuetsa. Znahenie vsegda 0.  # noqa: E501

        :return: The netting of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._netting

    @netting.setter
    def netting(self, netting):
        """Sets the netting of this InlineResponse2005.

        Pole ne ispolzuetsa. Znahenie vsegda 0.  # noqa: E501

        :param netting: The netting of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._netting = netting

    @property
    def total(self):
        """Gets the total of this InlineResponse2005.  # noqa: E501

        Budhet kampanii, ₽  # noqa: E501

        :return: The total of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InlineResponse2005.

        Budhet kampanii, ₽  # noqa: E501

        :param total: The total of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
