import socket
from scapy.all import *
from scapy.layers.inet import IP, UDP, ICMP, TCP

# Deprecated
def scan_tcp_port_v0_1_5(ip: str, port: int, timeout: float = 0.5) -> bool:
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(timeout)
            return sock.connect_ex((ip, port)) == 0
    except Exception:
        return False
    
def scan_tcp_port(ip: str, port: int, timeout: float = 0.5) -> bool:
    """
    Scan a TCP port using Scapy (SYN scan method)
    
    Args:
        ip: Target IP address
        port: Target port number
        timeout: Timeout in seconds
        
    Returns:
        bool: True if port is open, False otherwise
    """
    pkt = IP(dst=ip)/TCP(dport=port, flags="S")
    ans = sr1(pkt, timeout=timeout, verbose=0)
    
    if ans is None:
        # No response (filtered or closed)
        print(f"[-] {ip}:{port}     CLOSED/FILTERED")
        return False  
    elif ans.haslayer(TCP):
        if ans[TCP].flags & 0x12:
            # SYN-ACK (0x12) means port is open  
            # Send RST to close the connection (stealthy)
            rst_pkt = IP(dst=ip)/TCP(dport=port, flags="R")
            send(rst_pkt, verbose=0)
            print(f"[+] {ip}:{port}     OPEN")
            return True
    elif ans.haslayer(ICMP):
        # ICMP error (usually means filtered)
        print(f"[-] {ip}:{port}     FILTERED")
        return False
    
    print(f"[-] {ip}:{port}     UNKNOWN")
    return False
    
def scan_udp_port(ip: str, port=53, timeout: float=2) -> bool:
    udp_pkt = IP(dst=ip) / UDP(dport=port)
    ans = sr1(udp_pkt, timeout=timeout, verbose=0)
    if ans is None:
        # possibly open/filtered by firewall
        print(f"[?] {ip}:{port}     OPEN/FILTERED")
        return False
    elif ans.haslayer(ICMP):
        icmp_type = ans[ICMP].type
        icmp_code = ans[ICMP].code
        if icmp_type == 3 and icmp_code == 3:
            print(f"[-] {ip}:{port}     CLOSED")
            return False
        else:
            # host unreachable
            print(f"[-] {ip}:{port}     FILTERED")  
            return False
    else:
        # receive response except icmp
        print(f"[+] {ip}:{port}     OPEN")  
        return True