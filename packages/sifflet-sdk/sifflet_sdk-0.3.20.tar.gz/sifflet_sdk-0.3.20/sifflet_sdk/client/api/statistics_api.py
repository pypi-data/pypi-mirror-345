"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from sifflet_sdk.client.api_client import ApiClient
from sifflet_sdk.client.api_client import Endpoint as _Endpoint
from sifflet_sdk.client.model.api_problem_schema import ApiProblemSchema
from sifflet_sdk.client.model.data_quality_rule_summary_dto import (
    DataQualityRuleSummaryDto,
)
from sifflet_sdk.client.model.data_stack_summary_dto import DataStackSummaryDto
from sifflet_sdk.client.model.incident_heat_map_dto import IncidentHeatMapDto
from sifflet_sdk.client.model.incident_summary_dto import IncidentSummaryDto
from sifflet_sdk.client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class StatisticsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_data_stack_endpoint = _Endpoint(
            settings={
                "response_type": (DataStackSummaryDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/statistics/data-stack",
                "operation_id": "get_data_stack",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "domain",
                    "tag",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "domain": (str,),
                    "tag": ([str],),
                },
                "attribute_map": {
                    "domain": "domain",
                    "tag": "tag",
                },
                "location_map": {
                    "domain": "query",
                    "tag": "query",
                },
                "collection_format_map": {
                    "tag": "multi",
                },
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_incidents_heatmap_endpoint = _Endpoint(
            settings={
                "response_type": (IncidentHeatMapDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/statistics/incidents-heatmap",
                "operation_id": "get_incidents_heatmap",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "history_days",
                    "domain",
                    "tag",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "history_days": (int,),
                    "domain": (str,),
                    "tag": ([str],),
                },
                "attribute_map": {
                    "history_days": "historyDays",
                    "domain": "domain",
                    "tag": "tag",
                },
                "location_map": {
                    "history_days": "query",
                    "domain": "query",
                    "tag": "query",
                },
                "collection_format_map": {
                    "tag": "multi",
                },
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_incidents_summary_endpoint = _Endpoint(
            settings={
                "response_type": (IncidentSummaryDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/statistics/incidents-summary",
                "operation_id": "get_incidents_summary",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "domain",
                    "tag",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "domain": (str,),
                    "tag": ([str],),
                },
                "attribute_map": {
                    "domain": "domain",
                    "tag": "tag",
                },
                "location_map": {
                    "domain": "query",
                    "tag": "query",
                },
                "collection_format_map": {
                    "tag": "multi",
                },
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_rules_summary_endpoint = _Endpoint(
            settings={
                "response_type": (DataQualityRuleSummaryDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/statistics/rules-summary",
                "operation_id": "get_rules_summary",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "domain",
                    "tag",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "domain": (str,),
                    "tag": ([str],),
                },
                "attribute_map": {
                    "domain": "domain",
                    "tag": "tag",
                },
                "location_map": {
                    "domain": "query",
                    "tag": "query",
                },
                "collection_format_map": {
                    "tag": "multi",
                },
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )

    def get_data_stack(self, **kwargs):
        """Fetch data stack info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_data_stack(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            domain (str): Domain used for stats. [optional]
            tag ([str]): UUIDs of Tags used for stats. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DataStackSummaryDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.get_data_stack_endpoint.call_with_http_info(**kwargs)

    def get_incidents_heatmap(self, **kwargs):
        """Fetch incidents heatmap  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_incidents_heatmap(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            history_days (int): Historical depth for stats. [optional] if omitted the server will use the default value of 90
            domain (str): Domain used for stats. [optional]
            tag ([str]): UUIDs of Tags used for stats. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IncidentHeatMapDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.get_incidents_heatmap_endpoint.call_with_http_info(**kwargs)

    def get_incidents_summary(self, **kwargs):
        """Fetch incidents summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_incidents_summary(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            domain (str): Domain used for stats. [optional]
            tag ([str]): UUIDs of Tags used for stats. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IncidentSummaryDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.get_incidents_summary_endpoint.call_with_http_info(**kwargs)

    def get_rules_summary(self, **kwargs):
        """Fetch rules summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_rules_summary(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            domain (str): Domain used for stats. [optional]
            tag ([str]): UUIDs of Tags used for stats. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DataQualityRuleSummaryDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.get_rules_summary_endpoint.call_with_http_info(**kwargs)
