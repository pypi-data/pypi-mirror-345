name: "React PHP Fullstack"
version: "1.0.0"
description: "Complete fullstack development environment with React frontend, PHP backend, and choice of database"
type: "stack"

# Define available variants
variants:
  - mysql
  - mariadb
  - postgresql

# Stack composition
components:
  welcome:
    source: "base/core/welcome"
    required: true

  backend:
    source: "base/backend/php"
    required: true

  database:
    source: "base/database/*" # Allow CLI to substitute appropriate database variant
    required: true
    variants:
      mysql: "base/database/mysql"
      mariadb: "base/database/mariadb"
      postgresql: "base/database/postgresql"

  frontend:
    type: "frontend"
    framework: "react"
    required: true
    config:
      port_range: "3000-3999"
      env_prefix: "FRONTEND"
      dev_server:
        host: "0.0.0.0"
        port: "${FRONTEND_PORT}"

# Stack-specific configuration
stack:
  type: "fullstack"
  frontend:
    framework: "react"
    version: "20"
    dev_server: true
  backend:
    api_prefix: "/api"
    cors_origin: "http://localhost:${FRONTEND_PORT}"

# Tags for searching
tags:
  - react
  - php
  - mysql
  - mariadb
  - postgresql
  - fullstack
  - api
  - development

# Welcome page configuration
welcome_page:
  sections:
    - title: "Frontend (React)"
      service: "frontend"
      url: "http://localhost:${FRONTEND_PORT}"
      dev_server: true
    - title: "Backend API"
      service: "backend"
      url: "http://localhost:${WEB_PORT}/api"
    - title: "Database"
      service: "db"
      port: "${DB_PORT}"
      type: "${DB_CONNECTION}"
      credentials:
        database: "${DB_DATABASE}"
        username: "${DB_USERNAME}"
        password: "${DB_PASSWORD}"
    - title: "Database Admin"
      service: "phpmyadmin"
      url: "http://localhost:${ADMIN_PORT}"

# Additional services
services:
  phpmyadmin:
    type: "web"
    port_range: "8080-8099"
    required: false
    env_prefix: "ADMIN"
    depends_on: ["database"]
    image: "phpmyadmin/phpmyadmin"
    env:
      PMA_HOST: "db"
      PMA_PORT: "3306"

# Files to be generated/processed
files:
  - source: "docker-compose.${DB_ENGINE}.yml"
    target: "docker-compose.yml"
  - source: "backend/bootstrap.php"
    target: "backend/bootstrap.php"
  - source: "README.md"
    target: "README.md"

# Network configuration
network:
  name: "app-network"
  driver: "bridge"

# Post-creation hooks
post_create:
  - working_dir: "."
    command: "mkdir -p frontend"
  - working_dir: "."
    command: "npx create-react-app frontend --template typescript"
  - working_dir: "frontend"
    command: "npm install axios"
  - working_dir: "backend"
    command: "composer install || echo 'Skipping composer install'"

# ------------------------------------------------------------------
# Declarative cleanup (v0.3)
# ------------------------------------------------------------------
post_copy:
  # Remove variant compose files we don't need
  - remove: "docker-compose.mysql.yml"
  - remove: "docker-compose.mariadb.yml"
  - remove: "docker-compose.postgresql.yml"

  # Delete empty database/ directory (each variant copies only needed files)
  - remove_dir: "database"

  # Ensure Nginx or backend config uses public directory
  - patch_file:
      path: "docker/nginx/conf.d/default.conf"
      replace: "root /var/www/html;"
      with: "root /var/www/html/public;"

  # Remove legacy .base compose file if exists
  - remove: "docker-compose.base.yml"

  # Delete obsolete www directory copied from backend component
  - remove_dir: "www"
