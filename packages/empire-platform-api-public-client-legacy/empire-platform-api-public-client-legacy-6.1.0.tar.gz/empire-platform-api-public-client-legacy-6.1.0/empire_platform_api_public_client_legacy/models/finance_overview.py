# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, confloat, conint
from empire_platform_api_public_client_legacy.models.credit_utilization_overview_data import CreditUtilizationOverviewData
from empire_platform_api_public_client_legacy.models.unpaid_invoices_overview_data import UnpaidInvoicesOverviewData

class FinanceOverview(BaseModel):
    """
    FinanceOverview
    """
    credit_cover: Union[confloat(multiple_of=0.01, strict=True), conint(strict=True)] = Field(default=..., alias="creditCover", description="Currency value in Euros (€), accepted with a precision of maximum 2 decimal places")
    unpaid_invoices: UnpaidInvoicesOverviewData = Field(default=..., alias="unpaidInvoices")
    credit_utilization: CreditUtilizationOverviewData = Field(default=..., alias="creditUtilization")
    credit_limit: Union[confloat(multiple_of=0.01, strict=True), conint(strict=True)] = Field(default=..., alias="creditLimit", description="Currency value in Euros (€), accepted with a precision of maximum 2 decimal places")
    __properties = ["creditCover", "unpaidInvoices", "creditUtilization", "creditLimit"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FinanceOverview:
        """Create an instance of FinanceOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of unpaid_invoices
        if self.unpaid_invoices:
            _dict['unpaidInvoices'] = self.unpaid_invoices.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_utilization
        if self.credit_utilization:
            _dict['creditUtilization'] = self.credit_utilization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FinanceOverview:
        """Create an instance of FinanceOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FinanceOverview.parse_obj(obj)

        _obj = FinanceOverview.parse_obj({
            "credit_cover": obj.get("creditCover"),
            "unpaid_invoices": UnpaidInvoicesOverviewData.from_dict(obj.get("unpaidInvoices")) if obj.get("unpaidInvoices") is not None else None,
            "credit_utilization": CreditUtilizationOverviewData.from_dict(obj.get("creditUtilization")) if obj.get("creditUtilization") is not None else None,
            "credit_limit": obj.get("creditLimit")
        })
        return _obj


