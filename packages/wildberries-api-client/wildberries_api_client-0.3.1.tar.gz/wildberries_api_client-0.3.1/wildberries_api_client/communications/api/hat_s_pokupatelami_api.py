# coding: utf-8

"""
    Obhenie s pokupatelami

    <div class=\"description_important\">       Uznat bolhe ob obhenii s pokupatelami mohno v <a href=\"https://seller.wildberries.ru/instructions/category/f7f6c465-dd12-422d-80a0-a6d9562115d5?goBackOption=prevRoute&categoryId=30817062-14cc-4a82-bc78-3600c2b0685b\">spravohnom centre</a> </div>  herez metody obhenia s pokupatelem vy mohete rabotat s:   1. [Voprosami](/openapi/user-communication#tag/Voprosy) i [otzyvami](/openapi/user-communication#tag/Otzyvy) pokupatelei   2. [hablonami otvetov](/openapi/user-communication#tag/Shablony-otvetov) na voprosy i otzyvy   3. [hatami s pokupatelami](/openapi/user-communication#tag/Chat-s-pokupatelyami)   4. [Zaavkami pokupatelei na vozvrat](/openapi/user-communication#tag/Vozvraty-pokupatelyami)   # noqa: E501

    OpenAPI spec version: communication
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.communications.api_client import ApiClient


class HatSPokupatelamiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_seller_chats_get(self, **kwargs):  # noqa: E501
        """Spisok hatov  # noqa: E501

        Metod predostavlaet spisok vseh hatov prodavca. Po etim dannym mohno poluhit [sobytia hatov](/openapi/user-communication#tag/Chat-s-pokupatelyami/paths/~1api~1v1~1seller~1events/get) ili [otpravit soobhenie pokupatelu](/openapi/user-communication#tag/Chat-s-pokupatelyami/paths/~1api~1v1~1seller~1message/post).  <div class=\"description_limit\">     Maksimum 10 zaprosov za 10 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_seller_chats_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ChatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_seller_chats_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_seller_chats_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_seller_chats_get_with_http_info(self, **kwargs):  # noqa: E501
        """Spisok hatov  # noqa: E501

        Metod predostavlaet spisok vseh hatov prodavca. Po etim dannym mohno poluhit [sobytia hatov](/openapi/user-communication#tag/Chat-s-pokupatelyami/paths/~1api~1v1~1seller~1events/get) ili [otpravit soobhenie pokupatelu](/openapi/user-communication#tag/Chat-s-pokupatelyami/paths/~1api~1v1~1seller~1message/post).  <div class=\"description_limit\">     Maksimum 10 zaprosov za 10 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_seller_chats_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ChatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_seller_chats_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/seller/chats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChatsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_seller_events_get(self, **kwargs):  # noqa: E501
        """Sobytia hatov  # noqa: E501

        Metod predostavlaet spisok sobytii vseh [hatov s pokupatelami](/openapi/user-communication#tag/Chat-s-pokupatelyami/paths/~1api~1v1~1seller~1chats/get).  htoby poluhit vse sobytia:   1. Sdelaite pervyi zapros bez parametra `next`.   2. Povtoraite zapros so znaheniem parametra `next` iz otveta na predyduhii zapros, poka `totalEvents` ne stanet ravnym `0`. Eto budet oznahat, hto vy poluhili vse sobytia.  <div class=\"description_limit\">     Maksimum 10 zaprosov za 10 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_seller_events_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int next: Paginator. S kakogo momenta poluhit sleduuhii paket dannyh.<br>Format Unix timestamp **s millisekundami** 
        :return: EventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_seller_events_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_seller_events_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_seller_events_get_with_http_info(self, **kwargs):  # noqa: E501
        """Sobytia hatov  # noqa: E501

        Metod predostavlaet spisok sobytii vseh [hatov s pokupatelami](/openapi/user-communication#tag/Chat-s-pokupatelyami/paths/~1api~1v1~1seller~1chats/get).  htoby poluhit vse sobytia:   1. Sdelaite pervyi zapros bez parametra `next`.   2. Povtoraite zapros so znaheniem parametra `next` iz otveta na predyduhii zapros, poka `totalEvents` ne stanet ravnym `0`. Eto budet oznahat, hto vy poluhili vse sobytia.  <div class=\"description_limit\">     Maksimum 10 zaprosov za 10 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_seller_events_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int next: Paginator. S kakogo momenta poluhit sleduuhii paket dannyh.<br>Format Unix timestamp **s millisekundami** 
        :return: EventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['next']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_seller_events_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'next' in params:
            query_params.append(('next', params['next']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/seller/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_seller_message_post(self, reply_sign, message, file, **kwargs):  # noqa: E501
        """Otpravit soobhenie  # noqa: E501

        Metod otpravlaet soobhenia v [hat s pokupatelem](/openapi/user-communication#tag/Chat-s-pokupatelyami/paths/~1api~1v1~1seller~1chats/get).  <div class=\"description_limit\">     Maksimum 10 zaprosov za 10 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_seller_message_post(reply_sign, message, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reply_sign: (required)
        :param str message: (required)
        :param list[str] file: (required)
        :return: MessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_seller_message_post_with_http_info(reply_sign, message, file, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_seller_message_post_with_http_info(reply_sign, message, file, **kwargs)  # noqa: E501
            return data

    def api_v1_seller_message_post_with_http_info(self, reply_sign, message, file, **kwargs):  # noqa: E501
        """Otpravit soobhenie  # noqa: E501

        Metod otpravlaet soobhenia v [hat s pokupatelem](/openapi/user-communication#tag/Chat-s-pokupatelyami/paths/~1api~1v1~1seller~1chats/get).  <div class=\"description_limit\">     Maksimum 10 zaprosov za 10 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_seller_message_post_with_http_info(reply_sign, message, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reply_sign: (required)
        :param str message: (required)
        :param list[str] file: (required)
        :return: MessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reply_sign', 'message', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_seller_message_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reply_sign' is set
        if ('reply_sign' not in params or
                params['reply_sign'] is None):
            raise ValueError("Missing the required parameter `reply_sign` when calling `api_v1_seller_message_post`")  # noqa: E501
        # verify the required parameter 'message' is set
        if ('message' not in params or
                params['message'] is None):
            raise ValueError("Missing the required parameter `message` when calling `api_v1_seller_message_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `api_v1_seller_message_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'reply_sign' in params:
            form_params.append(('replySign', params['reply_sign']))  # noqa: E501
        if 'message' in params:
            form_params.append(('message', params['message']))  # noqa: E501
        if 'file' in params:
            form_params.append(('file', params['file']))  # noqa: E501
            collection_formats['file'] = 'multi'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/seller/message', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
