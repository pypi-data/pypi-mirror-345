"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from sifflet_sdk.client.api_client import ApiClient
from sifflet_sdk.client.api_client import Endpoint as _Endpoint
from sifflet_sdk.client.model.api_problem_schema import ApiProblemSchema
from sifflet_sdk.client.model.o_auth_integration_redirect_dto import (
    OAuthIntegrationRedirectDto,
)
from sifflet_sdk.client.model.o_auth_integration_url_dto import OAuthIntegrationUrlDto
from sifflet_sdk.client.model.request_o_auth_integration_config_dto import (
    RequestOAuthIntegrationConfigDto,
)
from sifflet_sdk.client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class OAuthIntegrationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_o_auth_authorization_url_endpoint = _Endpoint(
            settings={
                "response_type": (OAuthIntegrationUrlDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/oauth/integrations/authorization-url",
                "operation_id": "get_o_auth_authorization_url",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "request_o_auth_integration_config_dto",
                ],
                "required": [
                    "request_o_auth_integration_config_dto",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "request_o_auth_integration_config_dto": (RequestOAuthIntegrationConfigDto,),
                },
                "attribute_map": {},
                "location_map": {
                    "request_o_auth_integration_config_dto": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.get_o_auth_integration_redirect_url_endpoint = _Endpoint(
            settings={
                "response_type": (OAuthIntegrationUrlDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/oauth/integrations/redirect-url",
                "operation_id": "get_o_auth_integration_redirect_url",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "provider",
                ],
                "required": [
                    "provider",
                ],
                "nullable": [],
                "enum": [
                    "provider",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("provider",): {"SERVICENOW": "SERVICENOW"},
                },
                "openapi_types": {
                    "provider": (str,),
                },
                "attribute_map": {
                    "provider": "provider",
                },
                "location_map": {
                    "provider": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.handle_o_auth_integration_redirect_endpoint = _Endpoint(
            settings={
                "response_type": None,
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/oauth/integrations/redirect",
                "operation_id": "handle_o_auth_integration_redirect",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "o_auth_integration_redirect_dto",
                ],
                "required": [
                    "o_auth_integration_redirect_dto",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "o_auth_integration_redirect_dto": (OAuthIntegrationRedirectDto,),
                },
                "attribute_map": {},
                "location_map": {
                    "o_auth_integration_redirect_dto": "body",
                },
                "collection_format_map": {},
            },
            headers_map={"accept": ["application/problem+json"], "content_type": ["application/json"]},
            api_client=api_client,
        )

    def get_o_auth_authorization_url(self, request_o_auth_integration_config_dto, **kwargs):
        """Get the OAuth Integration authorization URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_o_auth_authorization_url(request_o_auth_integration_config_dto, async_req=True)
        >>> result = thread.get()

        Args:
            request_o_auth_integration_config_dto (RequestOAuthIntegrationConfigDto):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            OAuthIntegrationUrlDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["request_o_auth_integration_config_dto"] = request_o_auth_integration_config_dto
        return self.get_o_auth_authorization_url_endpoint.call_with_http_info(**kwargs)

    def get_o_auth_integration_redirect_url(self, provider="SERVICENOW", **kwargs):
        """Get the OAuth Integration redirect URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_o_auth_integration_redirect_url(provider="SERVICENOW", async_req=True)
        >>> result = thread.get()

        Args:
            provider (str): defaults to "SERVICENOW", must be one of ["SERVICENOW"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            OAuthIntegrationUrlDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["provider"] = provider
        return self.get_o_auth_integration_redirect_url_endpoint.call_with_http_info(**kwargs)

    def handle_o_auth_integration_redirect(self, o_auth_integration_redirect_dto, **kwargs):
        """Handle the OAuth Integration redirect  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.handle_o_auth_integration_redirect(o_auth_integration_redirect_dto, async_req=True)
        >>> result = thread.get()

        Args:
            o_auth_integration_redirect_dto (OAuthIntegrationRedirectDto):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["o_auth_integration_redirect_dto"] = o_auth_integration_redirect_dto
        return self.handle_o_auth_integration_redirect_endpoint.call_with_http_info(**kwargs)
