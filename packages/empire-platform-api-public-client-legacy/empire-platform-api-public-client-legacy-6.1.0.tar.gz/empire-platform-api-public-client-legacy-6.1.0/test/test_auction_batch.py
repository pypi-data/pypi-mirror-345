# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from empire_platform_api_public_client_legacy.models.auction_batch import AuctionBatch  # noqa: E501

class TestAuctionBatch(unittest.TestCase):
    """AuctionBatch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AuctionBatch:
        """Test AuctionBatch
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AuctionBatch`
        """
        model = AuctionBatch()  # noqa: E501
        if include_optional:
            return AuctionBatch(
                entries = [
                    empire_platform_api_public_client_legacy.models.auction.Auction(
                        id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                        display_id = 'BDL-NL-GB-E-BASE---220305-01', 
                        product_type = 'LT_EXPLICIT_MULTI_ANNUAL', 
                        border_direction = 'GB_NL', 
                        status = 'CREATED', 
                        processing = True, 
                        delivery_period = empire_platform_api_public_client_legacy.models.mtu_period.MtuPeriod(
                            from_mtu_start = '2022-01-04T10:00:00.000Z', 
                            to_mtu_end = '2022-01-04T11:00:00.000Z', ), 
                        bidding_period = empire_platform_api_public_client_legacy.models.date_time_period.DateTimePeriod(
                            start = '2022-01-04T00:00:00.000Z', 
                            end = '2022-01-04T00:00:00.000Z', ), 
                        name = '2022 May Auction', 
                        pre_bidding_allowed = True, 
                        offered_capacity = 56, 
                        current_participant_bid_count = 0, 
                        returns_window_close = '2022-01-04T00:00:00.000Z', )
                    ],
                total_count = 0
            )
        else:
            return AuctionBatch(
                entries = [
                    empire_platform_api_public_client_legacy.models.auction.Auction(
                        id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                        display_id = 'BDL-NL-GB-E-BASE---220305-01', 
                        product_type = 'LT_EXPLICIT_MULTI_ANNUAL', 
                        border_direction = 'GB_NL', 
                        status = 'CREATED', 
                        processing = True, 
                        delivery_period = empire_platform_api_public_client_legacy.models.mtu_period.MtuPeriod(
                            from_mtu_start = '2022-01-04T10:00:00.000Z', 
                            to_mtu_end = '2022-01-04T11:00:00.000Z', ), 
                        bidding_period = empire_platform_api_public_client_legacy.models.date_time_period.DateTimePeriod(
                            start = '2022-01-04T00:00:00.000Z', 
                            end = '2022-01-04T00:00:00.000Z', ), 
                        name = '2022 May Auction', 
                        pre_bidding_allowed = True, 
                        offered_capacity = 56, 
                        current_participant_bid_count = 0, 
                        returns_window_close = '2022-01-04T00:00:00.000Z', )
                    ],
                total_count = 0,
        )
        """

    def testAuctionBatch(self):
        """Test AuctionBatch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
