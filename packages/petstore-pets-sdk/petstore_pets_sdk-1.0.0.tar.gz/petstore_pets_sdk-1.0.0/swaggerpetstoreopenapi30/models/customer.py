# -*- coding: utf-8 -*-

"""
swaggerpetstoreopenapi30

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from swaggerpetstoreopenapi30.api_helper import APIHelper
from swaggerpetstoreopenapi30.models.address import Address


class Customer(object):

    """Implementation of the 'Customer' model.

    Attributes:
        id (int): The model property of type int.
        username (str): The model property of type str.
        address (List[Address]): The model property of type List[Address].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "username": 'username',
        "address": 'address'
    }

    _optionals = [
        'id',
        'username',
        'address',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 username=APIHelper.SKIP,
                 address=APIHelper.SKIP):
        """Constructor for the Customer class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if username is not APIHelper.SKIP:
            self.username = username 
        if address is not APIHelper.SKIP:
            self.address = address 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        username = dictionary.get("username") if dictionary.get("username") else APIHelper.SKIP
        address = None
        if dictionary.get('address') is not None:
            address = [Address.from_dictionary(x) for x in dictionary.get('address')]
        else:
            address = APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   username,
                   address)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'username={(self.username if hasattr(self, "username") else None)!r}, '
                f'address={(self.address if hasattr(self, "address") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'username={(self.username if hasattr(self, "username") else None)!s}, '
                f'address={(self.address if hasattr(self, "address") else None)!s})')
