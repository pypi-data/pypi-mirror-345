# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchReportProductReq(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'report_type': 'str',
        'user_report_name': 'str',
        'params': 'SearchReportProductReqParams'
    }

    attribute_map = {
        'id': 'id',
        'report_type': 'reportType',
        'user_report_name': 'userReportName',
        'params': 'params'
    }

    def __init__(self, id=None, report_type=None, user_report_name=None, params=None):  # noqa: E501
        """SearchReportProductReq - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._report_type = None
        self._user_report_name = None
        self._params = None
        self.discriminator = None
        self.id = id
        self.report_type = report_type
        if user_report_name is not None:
            self.user_report_name = user_report_name
        self.params = params

    @property
    def id(self):
        """Gets the id of this SearchReportProductReq.  # noqa: E501

        ID otheta v UUID-formate. Generiruetsa prodavcom samostoatelno  # noqa: E501

        :return: The id of this SearchReportProductReq.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchReportProductReq.

        ID otheta v UUID-formate. Generiruetsa prodavcom samostoatelno  # noqa: E501

        :param id: The id of this SearchReportProductReq.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def report_type(self):
        """Gets the report_type of this SearchReportProductReq.  # noqa: E501

        Tip otheta — `SEARCH_QUERIES_PREMIUM_REPORT_PRODUCT`  # noqa: E501

        :return: The report_type of this SearchReportProductReq.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this SearchReportProductReq.

        Tip otheta — `SEARCH_QUERIES_PREMIUM_REPORT_PRODUCT`  # noqa: E501

        :param report_type: The report_type of this SearchReportProductReq.  # noqa: E501
        :type: str
        """
        if report_type is None:
            raise ValueError("Invalid value for `report_type`, must not be `None`")  # noqa: E501

        self._report_type = report_type

    @property
    def user_report_name(self):
        """Gets the user_report_name of this SearchReportProductReq.  # noqa: E501

        Nazvanie otheta. Esli ne ukazano, sformiruetsa avtomatiheski  # noqa: E501

        :return: The user_report_name of this SearchReportProductReq.  # noqa: E501
        :rtype: str
        """
        return self._user_report_name

    @user_report_name.setter
    def user_report_name(self, user_report_name):
        """Sets the user_report_name of this SearchReportProductReq.

        Nazvanie otheta. Esli ne ukazano, sformiruetsa avtomatiheski  # noqa: E501

        :param user_report_name: The user_report_name of this SearchReportProductReq.  # noqa: E501
        :type: str
        """

        self._user_report_name = user_report_name

    @property
    def params(self):
        """Gets the params of this SearchReportProductReq.  # noqa: E501


        :return: The params of this SearchReportProductReq.  # noqa: E501
        :rtype: SearchReportProductReqParams
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this SearchReportProductReq.


        :param params: The params of this SearchReportProductReq.  # noqa: E501
        :type: SearchReportProductReqParams
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")  # noqa: E501

        self._params = params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchReportProductReq, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchReportProductReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
