# coding: utf-8

"""
    Postavki FBW

    <div class=\"description_important\">       Uznat bolhe o postavkah FBW mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/5a8e1202-0865-45b7-acae-5d0afc7add56?goBackOption=prevRoute&categoryId=479385c6-de01-4b4d-ad4e-ed941e65582e\">spravohnom centre</a> </div>  Upravlenie informaciei dla formirovania postavok, skladskimi dannymi i statusami   # noqa: E501

    OpenAPI spec version: ordersfbw
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelsOptionsResultModelResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'barcode': 'str',
        'error': 'ModelsOptionsResultModelError',
        'is_error': 'bool',
        'warehouses': 'list[ModelsOptionsResultModelWarehouses]'
    }

    attribute_map = {
        'barcode': 'barcode',
        'error': 'error',
        'is_error': 'isError',
        'warehouses': 'warehouses'
    }

    def __init__(self, barcode=None, error=None, is_error=None, warehouses=None):  # noqa: E501
        """ModelsOptionsResultModelResult - a model defined in Swagger"""  # noqa: E501
        self._barcode = None
        self._error = None
        self._is_error = None
        self._warehouses = None
        self.discriminator = None
        if barcode is not None:
            self.barcode = barcode
        if error is not None:
            self.error = error
        if is_error is not None:
            self.is_error = is_error
        if warehouses is not None:
            self.warehouses = warehouses

    @property
    def barcode(self):
        """Gets the barcode of this ModelsOptionsResultModelResult.  # noqa: E501

        Barkod iz kartohki tovara  # noqa: E501

        :return: The barcode of this ModelsOptionsResultModelResult.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ModelsOptionsResultModelResult.

        Barkod iz kartohki tovara  # noqa: E501

        :param barcode: The barcode of this ModelsOptionsResultModelResult.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def error(self):
        """Gets the error of this ModelsOptionsResultModelResult.  # noqa: E501


        :return: The error of this ModelsOptionsResultModelResult.  # noqa: E501
        :rtype: ModelsOptionsResultModelError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ModelsOptionsResultModelResult.


        :param error: The error of this ModelsOptionsResultModelResult.  # noqa: E501
        :type: ModelsOptionsResultModelError
        """

        self._error = error

    @property
    def is_error(self):
        """Gets the is_error of this ModelsOptionsResultModelResult.  # noqa: E501

        Nalihie ohibki:   - `true` — ohibka est   - Pola net — ohibka otsutstvuet      # noqa: E501

        :return: The is_error of this ModelsOptionsResultModelResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_error

    @is_error.setter
    def is_error(self, is_error):
        """Sets the is_error of this ModelsOptionsResultModelResult.

        Nalihie ohibki:   - `true` — ohibka est   - Pola net — ohibka otsutstvuet      # noqa: E501

        :param is_error: The is_error of this ModelsOptionsResultModelResult.  # noqa: E501
        :type: bool
        """

        self._is_error = is_error

    @property
    def warehouses(self):
        """Gets the warehouses of this ModelsOptionsResultModelResult.  # noqa: E501

        Spisok skladov. Pri nalihii ohibki budet `null`  # noqa: E501

        :return: The warehouses of this ModelsOptionsResultModelResult.  # noqa: E501
        :rtype: list[ModelsOptionsResultModelWarehouses]
        """
        return self._warehouses

    @warehouses.setter
    def warehouses(self, warehouses):
        """Sets the warehouses of this ModelsOptionsResultModelResult.

        Spisok skladov. Pri nalihii ohibki budet `null`  # noqa: E501

        :param warehouses: The warehouses of this ModelsOptionsResultModelResult.  # noqa: E501
        :type: list[ModelsOptionsResultModelWarehouses]
        """

        self._warehouses = warehouses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsOptionsResultModelResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsOptionsResultModelResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
