# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.analytics.api_client import ApiClient


class VoronkaProdahApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_nm_report_detail_history_post(self, body, **kwargs):  # noqa: E501
        """Statistika kartohek tovarov po dnam  # noqa: E501

        Metod predostavlaet statistiku kartohek tovarov po dnam. Mohno poluhit dannye po dobavleniam v korzinu, zakazam, perehodam v kartohku tovara i tak dalee.<br><br>  Mohno poluhit dannye maksimum za poslednuu nedelu.   <div class=\"description_important\">     htoby poluhat <a href=\"/openapi/analytics#tag/Analitika-prodavca-CSV\">othety za period do goda</a>, podpihites na <a href='https://seller.wildberries.ru/monetization/jam'>rashirennuu analitiku Dhem</a> </div>  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_detail_history_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportDetailHistoryRequest body: (required)
        :return: NmReportDetailHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_nm_report_detail_history_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_nm_report_detail_history_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_nm_report_detail_history_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Statistika kartohek tovarov po dnam  # noqa: E501

        Metod predostavlaet statistiku kartohek tovarov po dnam. Mohno poluhit dannye po dobavleniam v korzinu, zakazam, perehodam v kartohku tovara i tak dalee.<br><br>  Mohno poluhit dannye maksimum za poslednuu nedelu.   <div class=\"description_important\">     htoby poluhat <a href=\"/openapi/analytics#tag/Analitika-prodavca-CSV\">othety za period do goda</a>, podpihites na <a href='https://seller.wildberries.ru/monetization/jam'>rashirennuu analitiku Dhem</a> </div>  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_detail_history_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportDetailHistoryRequest body: (required)
        :return: NmReportDetailHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_nm_report_detail_history_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_nm_report_detail_history_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/nm-report/detail/history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NmReportDetailHistoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_nm_report_detail_post(self, body, **kwargs):  # noqa: E501
        """Statistika kartohek tovarov za period  # noqa: E501

        Metod formiruet othet o tovarah, sravnivaa kluhevye pokazateli — naprimer, dobavlenia v korzinu, zakazy i perehody v kartohku tovara — za tekuhii period s analogihnym prohlym.<br><br>  Parametry `brandNames`,`objectIDs`, `tagIDs`, `nmIDs` mogut byt pustymi `[]`, togda v otvete vozvrahautsa vse kartohki prodavca.<br><br>  Esli vybrano neskolko parametrov, v otvete budut kartohki, v kotoryh est odnovremenno vse eti parametry. Esli kartohki ne podhodat po parametram zaprosa, vernetsa pustoi otvet `[]`.<br><br>  Mohno poluhit othet maksimum za poslednie 365 dnei.<br><br>  V dannyh predyduhego perioda:   * Dannye v `previousPeriod` ukazany za takoi he period, hto i v `selectedPeriod`.   * Esli data nahala  `previousPeriod` ranhe, hem god nazad ot tekuhei daty, ona budet privedena k vidu: `previousPeriod.begin = tekuhaa data — 365 dnei.`  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_detail_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportDetailRequest body: (required)
        :return: NmReportDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_nm_report_detail_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_nm_report_detail_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_nm_report_detail_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Statistika kartohek tovarov za period  # noqa: E501

        Metod formiruet othet o tovarah, sravnivaa kluhevye pokazateli — naprimer, dobavlenia v korzinu, zakazy i perehody v kartohku tovara — za tekuhii period s analogihnym prohlym.<br><br>  Parametry `brandNames`,`objectIDs`, `tagIDs`, `nmIDs` mogut byt pustymi `[]`, togda v otvete vozvrahautsa vse kartohki prodavca.<br><br>  Esli vybrano neskolko parametrov, v otvete budut kartohki, v kotoryh est odnovremenno vse eti parametry. Esli kartohki ne podhodat po parametram zaprosa, vernetsa pustoi otvet `[]`.<br><br>  Mohno poluhit othet maksimum za poslednie 365 dnei.<br><br>  V dannyh predyduhego perioda:   * Dannye v `previousPeriod` ukazany za takoi he period, hto i v `selectedPeriod`.   * Esli data nahala  `previousPeriod` ranhe, hem god nazad ot tekuhei daty, ona budet privedena k vidu: `previousPeriod.begin = tekuhaa data — 365 dnei.`  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_detail_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportDetailRequest body: (required)
        :return: NmReportDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_nm_report_detail_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_nm_report_detail_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/nm-report/detail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NmReportDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_nm_report_grouped_history_post(self, body, **kwargs):  # noqa: E501
        """Statistika grupp kartohek tovarov po dnam  # noqa: E501

        Metod predostavlaet statistiku kartohek tovarov po dnam. Kartohki tovarov sgruppirovany po predmetam, brendam i arlykam. Mohno poluhit dannye po dobavleniam v korzinu, zakazam, perehodam v kartohku tovara i tak dalee.<br><br>  Parametry `brandNames`, `objectIDs`, `tagIDs` mogut byt pustymi `[]`, togda gruppirovka proishodit po vsem kartohkam prodavca.<br><br>  Proizvedenie kolihestva predmetov, brendov, arlykov v zaprose mohet byt ne bolhe 16.<br><br>  Mohno poluhit dannye maksimum za poslednuu nedelu.   <div class=\"description_important\">     htoby poluhat <a href=\"/openapi/analytics#tag/Analitika-prodavca-CSV\">othety za period do goda</a>, podpihites na <a href='https://seller.wildberries.ru/monetization/jam'>rashirennuu analitiku Dhem</a> </div>  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_grouped_history_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportGroupedHistoryRequest body: (required)
        :return: NmReportGroupedHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_nm_report_grouped_history_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_nm_report_grouped_history_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_nm_report_grouped_history_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Statistika grupp kartohek tovarov po dnam  # noqa: E501

        Metod predostavlaet statistiku kartohek tovarov po dnam. Kartohki tovarov sgruppirovany po predmetam, brendam i arlykam. Mohno poluhit dannye po dobavleniam v korzinu, zakazam, perehodam v kartohku tovara i tak dalee.<br><br>  Parametry `brandNames`, `objectIDs`, `tagIDs` mogut byt pustymi `[]`, togda gruppirovka proishodit po vsem kartohkam prodavca.<br><br>  Proizvedenie kolihestva predmetov, brendov, arlykov v zaprose mohet byt ne bolhe 16.<br><br>  Mohno poluhit dannye maksimum za poslednuu nedelu.   <div class=\"description_important\">     htoby poluhat <a href=\"/openapi/analytics#tag/Analitika-prodavca-CSV\">othety za period do goda</a>, podpihites na <a href='https://seller.wildberries.ru/monetization/jam'>rashirennuu analitiku Dhem</a> </div>  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_grouped_history_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportGroupedHistoryRequest body: (required)
        :return: NmReportGroupedHistoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_nm_report_grouped_history_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_nm_report_grouped_history_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/nm-report/grouped/history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NmReportGroupedHistoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_nm_report_grouped_post(self, body, **kwargs):  # noqa: E501
        """Statistika grupp kartohek tovarov za period  # noqa: E501

        Metod budet otkluhen 29 aprela. Vmesto nego ispolzuite drugie metody Voronki prodah.  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_grouped_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportGroupedRequest body: (required)
        :return: NmReportGroupedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_nm_report_grouped_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_nm_report_grouped_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_nm_report_grouped_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Statistika grupp kartohek tovarov za period  # noqa: E501

        Metod budet otkluhen 29 aprela. Vmesto nego ispolzuite drugie metody Voronki prodah.  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_nm_report_grouped_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NmReportGroupedRequest body: (required)
        :return: NmReportGroupedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_nm_report_grouped_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_nm_report_grouped_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/nm-report/grouped', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NmReportGroupedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
