# coding: utf-8

"""
    Rabota s tovarami

    <div class=\"description_ref\">     Uznat, kak ispolzovat metody v biznes-keisah, mohno v <a href=\"https://dev.wildberries.ru/news/101\">instrukcii po rabote s tovarami</a> </div>  Rabota s tovarami vkluhaet v seba:   1. [Sozdanie](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) i [redaktirovanie](/openapi/work-with-products#tag/Kartochki-tovarov) kartohek tovarov: v tom hisle, poluhenie [kategorii, predmetov i harakteristik tovarov](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) i zagruzku [mediafailov](/openapi/work-with-products#tag/Mediafajly).   2. Nastroiku [arlykov](/openapi/work-with-products#tag/Yarlyki) dla udobnogo poiska tovarov.   3. Ustanovku [cen i skidok](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Upravlenie [ostatkami tovarov](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) i [skladami](/openapi/work-with-products#tag/Sklady-prodavca), esli vy rabotaete po modeli prodah so sklada prodavca.   # noqa: E501

    OpenAPI spec version: products
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.products.api_client import ApiClient


class CenyISkidkiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_buffer_goods_task_get(self, limit, upload_id, **kwargs):  # noqa: E501
        """Detalizacia neobrabotannoi zagruzki  # noqa: E501

        Metod predostavlaet informaciu o tovarah i ohibkah v tovarah iz zagruzki v obrabotke.  <div class=\"description_important\">   Neobrabotannaa zagruzka — eto zagruzka skidok dla <a href=\"/openapi/promotion#tag/Kalendar-akcij\">kalendara akcii</a>. Takie skidki primenatsa k tovaram tolko v moment nahala akcii. </div>  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_buffer_goods_task_get(limit, upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Skolko elementov vyvesti na odnoi stranice (paginacia). Maksimum 1 000 elementov (required)
        :param int upload_id: ID zagruzki (required)
        :param int offset: Posle kakogo elementa vydavat dannye
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_buffer_goods_task_get_with_http_info(limit, upload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_buffer_goods_task_get_with_http_info(limit, upload_id, **kwargs)  # noqa: E501
            return data

    def api_v2_buffer_goods_task_get_with_http_info(self, limit, upload_id, **kwargs):  # noqa: E501
        """Detalizacia neobrabotannoi zagruzki  # noqa: E501

        Metod predostavlaet informaciu o tovarah i ohibkah v tovarah iz zagruzki v obrabotke.  <div class=\"description_important\">   Neobrabotannaa zagruzka — eto zagruzka skidok dla <a href=\"/openapi/promotion#tag/Kalendar-akcij\">kalendara akcii</a>. Takie skidki primenatsa k tovaram tolko v moment nahala akcii. </div>  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_buffer_goods_task_get_with_http_info(limit, upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Skolko elementov vyvesti na odnoi stranice (paginacia). Maksimum 1 000 elementov (required)
        :param int upload_id: ID zagruzki (required)
        :param int offset: Posle kakogo elementa vydavat dannye
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'upload_id', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_buffer_goods_task_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `api_v2_buffer_goods_task_get`")  # noqa: E501
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in params or
                params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `api_v2_buffer_goods_task_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'upload_id' in params:
            query_params.append(('uploadID', params['upload_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/buffer/goods/task', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_buffer_tasks_get(self, upload_id, **kwargs):  # noqa: E501
        """Sostoanie neobrabotannoi zagruzki  # noqa: E501

        Metod predostavlaet informaciu pro zagruzku skidok v obrabotke.  <div class=\"description_important\">   Neobrabotannaa zagruzka — eto zagruzka skidok dla <a href=\"/openapi/promotion#tag/Kalendar-akcij\">kalendara akcii</a>. Takie skidki primenatsa k tovaram tolko v moment nahala akcii. </div>  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_buffer_tasks_get(upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int upload_id: ID zagruzki (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_buffer_tasks_get_with_http_info(upload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_buffer_tasks_get_with_http_info(upload_id, **kwargs)  # noqa: E501
            return data

    def api_v2_buffer_tasks_get_with_http_info(self, upload_id, **kwargs):  # noqa: E501
        """Sostoanie neobrabotannoi zagruzki  # noqa: E501

        Metod predostavlaet informaciu pro zagruzku skidok v obrabotke.  <div class=\"description_important\">   Neobrabotannaa zagruzka — eto zagruzka skidok dla <a href=\"/openapi/promotion#tag/Kalendar-akcij\">kalendara akcii</a>. Takie skidki primenatsa k tovaram tolko v moment nahala akcii. </div>  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_buffer_tasks_get_with_http_info(upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int upload_id: ID zagruzki (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upload_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_buffer_tasks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in params or
                params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `api_v2_buffer_tasks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'upload_id' in params:
            query_params.append(('uploadID', params['upload_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/buffer/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_history_goods_task_get(self, limit, upload_id, **kwargs):  # noqa: E501
        """Detalizacia obrabotannoi zagruzki  # noqa: E501

        Metod predostavlaet informaciu o tovarah i ob ohibkah v tovarah v obrabotannoi zagruzke.  <div class=\"description_important\">   Obrabotannaa zagruzka — eto zagruzka cen i skidok dla <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task/post\">tovarov</a> i <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1size/post\">razmerov tovarov</a>, a takhe skidok <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1club-discount/post\">WB Kluba</a>. </div>  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_history_goods_task_get(limit, upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Skolko elementov vyvesti na odnoi stranice (paginacia). Maksimum 1 000 elementov (required)
        :param int upload_id: ID zagruzki (required)
        :param int offset: Posle kakogo elementa vydavat dannye
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_history_goods_task_get_with_http_info(limit, upload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_history_goods_task_get_with_http_info(limit, upload_id, **kwargs)  # noqa: E501
            return data

    def api_v2_history_goods_task_get_with_http_info(self, limit, upload_id, **kwargs):  # noqa: E501
        """Detalizacia obrabotannoi zagruzki  # noqa: E501

        Metod predostavlaet informaciu o tovarah i ob ohibkah v tovarah v obrabotannoi zagruzke.  <div class=\"description_important\">   Obrabotannaa zagruzka — eto zagruzka cen i skidok dla <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task/post\">tovarov</a> i <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1size/post\">razmerov tovarov</a>, a takhe skidok <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1club-discount/post\">WB Kluba</a>. </div>  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_history_goods_task_get_with_http_info(limit, upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Skolko elementov vyvesti na odnoi stranice (paginacia). Maksimum 1 000 elementov (required)
        :param int upload_id: ID zagruzki (required)
        :param int offset: Posle kakogo elementa vydavat dannye
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'upload_id', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_history_goods_task_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `api_v2_history_goods_task_get`")  # noqa: E501
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in params or
                params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `api_v2_history_goods_task_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'upload_id' in params:
            query_params.append(('uploadID', params['upload_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/history/goods/task', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_history_tasks_get(self, upload_id, **kwargs):  # noqa: E501
        """Sostoanie obrabotannoi zagruzki  # noqa: E501

        Metod predostavlaet informaciu ob obrabotannoi zagruzke cen i skidok.  <div class=\"description_important\">   Obrabotannaa zagruzka — eto zagruzka cen i skidok dla <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task/post\">tovarov</a> i <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1size/post\">razmerov tovarov</a>, a takhe skidok <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1club-discount/post\">WB Kluba</a>. </div>  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_history_tasks_get(upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int upload_id: ID zagruzki (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_history_tasks_get_with_http_info(upload_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_history_tasks_get_with_http_info(upload_id, **kwargs)  # noqa: E501
            return data

    def api_v2_history_tasks_get_with_http_info(self, upload_id, **kwargs):  # noqa: E501
        """Sostoanie obrabotannoi zagruzki  # noqa: E501

        Metod predostavlaet informaciu ob obrabotannoi zagruzke cen i skidok.  <div class=\"description_important\">   Obrabotannaa zagruzka — eto zagruzka cen i skidok dla <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task/post\">tovarov</a> i <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1size/post\">razmerov tovarov</a>, a takhe skidok <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1club-discount/post\">WB Kluba</a>. </div>  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_history_tasks_get_with_http_info(upload_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int upload_id: ID zagruzki (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upload_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_history_tasks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in params or
                params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `api_v2_history_tasks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'upload_id' in params:
            query_params.append(('uploadID', params['upload_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/history/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_list_goods_filter_get(self, limit, **kwargs):  # noqa: E501
        """Poluhit tovary s cenami  # noqa: E501

        Metod predostavlaet informaciu o tovarah po ih artikulam: ceny, valutu, obhie skidki i skidki dla [WB Kluba](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1club-discount/post). <br><br> htoby poluhit informaciu obo vseh tovarah prodavca, ostavte artikul pustym, ustanovite `limit=1000`, v parametre `offset` ustanovite smehenie po kolihestvu zapisei. Kolihestvo nuhno rasshitat po formule: `offset` plus `limit` iz predyduhego zaprosa. Povtoraite zapros, poka vy ne poluhite otvet s pustym massivom.<br> htoby poluhit informaciu o razmerah tovara, ispolzuite [otdelnyi metod](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1list~1goods~1size~1nm/get).  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_list_goods_filter_get(limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Skolko elementov vyvesti na odnoi stranice (paginacia). Maksimum 1 000 elementov (required)
        :param int offset: Posle kakogo elementa vydavat dannye
        :param int filter_nm_id: Artikul WB, po kotoromu iskat tovar
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_list_goods_filter_get_with_http_info(limit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_list_goods_filter_get_with_http_info(limit, **kwargs)  # noqa: E501
            return data

    def api_v2_list_goods_filter_get_with_http_info(self, limit, **kwargs):  # noqa: E501
        """Poluhit tovary s cenami  # noqa: E501

        Metod predostavlaet informaciu o tovarah po ih artikulam: ceny, valutu, obhie skidki i skidki dla [WB Kluba](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1club-discount/post). <br><br> htoby poluhit informaciu obo vseh tovarah prodavca, ostavte artikul pustym, ustanovite `limit=1000`, v parametre `offset` ustanovite smehenie po kolihestvu zapisei. Kolihestvo nuhno rasshitat po formule: `offset` plus `limit` iz predyduhego zaprosa. Povtoraite zapros, poka vy ne poluhite otvet s pustym massivom.<br> htoby poluhit informaciu o razmerah tovara, ispolzuite [otdelnyi metod](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1list~1goods~1size~1nm/get).  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_list_goods_filter_get_with_http_info(limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Skolko elementov vyvesti na odnoi stranice (paginacia). Maksimum 1 000 elementov (required)
        :param int offset: Posle kakogo elementa vydavat dannye
        :param int filter_nm_id: Artikul WB, po kotoromu iskat tovar
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'filter_nm_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_list_goods_filter_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `api_v2_list_goods_filter_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'filter_nm_id' in params:
            query_params.append(('filterNmID', params['filter_nm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/list/goods/filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20023',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_list_goods_size_nm_get(self, limit, nm_id, **kwargs):  # noqa: E501
        """Poluhit razmery tovara s cenami  # noqa: E501

        Metod predostavlaet informaciu obo vseh razmerah odnogo tovaram: ceny, valutu, obhie skidki i skidki dla [WB Kluba](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1club-discount/post). <br><br> Rabotaet tolko dla tovarov iz kategorii, gde mohno ustanavlivat ceny otdelno dla raznyh razmerov. Dla takih tovarov `editableSizePrice: true`.  <br><br> htoby poluhit informaciu o samom tovare, ispolzuite [otdelnyi metod](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1list~1goods~1filter/get).  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_list_goods_size_nm_get(limit, nm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Skolko elementov vyvesti na odnoi stranice (paginacia). Maksimum 1 000 elementov (required)
        :param int nm_id: Artikul WB (required)
        :param int offset: Posle kakogo elementa vydavat dannye
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_list_goods_size_nm_get_with_http_info(limit, nm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_list_goods_size_nm_get_with_http_info(limit, nm_id, **kwargs)  # noqa: E501
            return data

    def api_v2_list_goods_size_nm_get_with_http_info(self, limit, nm_id, **kwargs):  # noqa: E501
        """Poluhit razmery tovara s cenami  # noqa: E501

        Metod predostavlaet informaciu obo vseh razmerah odnogo tovaram: ceny, valutu, obhie skidki i skidki dla [WB Kluba](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1club-discount/post). <br><br> Rabotaet tolko dla tovarov iz kategorii, gde mohno ustanavlivat ceny otdelno dla raznyh razmerov. Dla takih tovarov `editableSizePrice: true`.  <br><br> htoby poluhit informaciu o samom tovare, ispolzuite [otdelnyi metod](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1list~1goods~1filter/get).  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_list_goods_size_nm_get_with_http_info(limit, nm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Skolko elementov vyvesti na odnoi stranice (paginacia). Maksimum 1 000 elementov (required)
        :param int nm_id: Artikul WB (required)
        :param int offset: Posle kakogo elementa vydavat dannye
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'nm_id', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_list_goods_size_nm_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `api_v2_list_goods_size_nm_get`")  # noqa: E501
        # verify the required parameter 'nm_id' is set
        if ('nm_id' not in params or
                params['nm_id'] is None):
            raise ValueError("Missing the required parameter `nm_id` when calling `api_v2_list_goods_size_nm_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'nm_id' in params:
            query_params.append(('nmID', params['nm_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/list/goods/size/nm', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20024',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_quarantine_goods_get(self, limit, **kwargs):  # noqa: E501
        """Poluhit tovary v karantine  # noqa: E501

        Metod predostavlaet informaciu o tovarah v karantine. <br><br> Esli novaa cena tovara so skidkoi budet minimum v 3 raza menhe staroi, tovar popadet [v karantin](https://seller.wildberries.ru/discount-and-prices/quarantine) i budet prodavatsa po staroi cene. Ohibka ob etom budet v otvetah metodov [sostoanii zagruzok](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1tasks/get). <br><br> Vy mohete izmenit cenu ili skidku s pomohu API libo vyvesti tovar iz karantina [v lihnom kabinete](https://seller.wildberries.ru/discount-and-prices/quarantine). <br><br> Dla tovarov s [porazmernoi ustanovkoi cen](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1size/post) karantin ne primenaetsa.  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_quarantine_goods_get(limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Skolko elementov vyvesti na odnoi stranice (paginacia). Maksimum 1 000 elementov (required)
        :param int offset: Posle kakogo elementa vydavat dannye
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_quarantine_goods_get_with_http_info(limit, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_quarantine_goods_get_with_http_info(limit, **kwargs)  # noqa: E501
            return data

    def api_v2_quarantine_goods_get_with_http_info(self, limit, **kwargs):  # noqa: E501
        """Poluhit tovary v karantine  # noqa: E501

        Metod predostavlaet informaciu o tovarah v karantine. <br><br> Esli novaa cena tovara so skidkoi budet minimum v 3 raza menhe staroi, tovar popadet [v karantin](https://seller.wildberries.ru/discount-and-prices/quarantine) i budet prodavatsa po staroi cene. Ohibka ob etom budet v otvetah metodov [sostoanii zagruzok](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1tasks/get). <br><br> Vy mohete izmenit cenu ili skidku s pomohu API libo vyvesti tovar iz karantina [v lihnom kabinete](https://seller.wildberries.ru/discount-and-prices/quarantine). <br><br> Dla tovarov s [porazmernoi ustanovkoi cen](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1size/post) karantin ne primenaetsa.  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_quarantine_goods_get_with_http_info(limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Skolko elementov vyvesti na odnoi stranice (paginacia). Maksimum 1 000 elementov (required)
        :param int offset: Posle kakogo elementa vydavat dannye
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_quarantine_goods_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `api_v2_quarantine_goods_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/quarantine/goods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20025',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_upload_task_club_discount_post(self, body, **kwargs):  # noqa: E501
        """Ustanovit skidki WB Kluba  # noqa: E501

        Ustanavlivaet skidki dla tovarov v ramkah podpiski [WB Klub](https://seller.wildberries.ru/help-center/article/A-337).  <div class=\"description_important\">   Poluhit informaciu o processe ustanovki cen i skidok mohno s pomohu metodov <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1tasks/get\">sostoania</a> i <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1goods~1task/get\">detalizacii</a> obrabotannoi zagruzki. </div>  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_upload_task_club_discount_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: TaskCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_upload_task_club_discount_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_upload_task_club_discount_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_upload_task_club_discount_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Ustanovit skidki WB Kluba  # noqa: E501

        Ustanavlivaet skidki dla tovarov v ramkah podpiski [WB Klub](https://seller.wildberries.ru/help-center/article/A-337).  <div class=\"description_important\">   Poluhit informaciu o processe ustanovki cen i skidok mohno s pomohu metodov <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1tasks/get\">sostoania</a> i <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1goods~1task/get\">detalizacii</a> obrabotannoi zagruzki. </div>  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_upload_task_club_discount_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: TaskCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_upload_task_club_discount_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_upload_task_club_discount_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/upload/task/club-discount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskCreated',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_upload_task_post(self, body, **kwargs):  # noqa: E501
        """Ustanovit ceny i skidki  # noqa: E501

        Metod ustanavlivaet ceny i skidki dla tovarov.  <br><br> htoby ustanovit ceny i skidki dla razmerov tovara, ispolzuite [otdelnyi metod](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1size/post).  <div class=\"description_important\">   Poluhit informaciu o processe ustanovki cen i skidok mohno s pomohu metodov <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1tasks/get\">sostoania</a> i <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1goods~1task/get\">detalizacii</a> obrabotannoi zagruzki. </div>  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_upload_task_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: TaskCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_upload_task_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_upload_task_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_upload_task_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Ustanovit ceny i skidki  # noqa: E501

        Metod ustanavlivaet ceny i skidki dla tovarov.  <br><br> htoby ustanovit ceny i skidki dla razmerov tovara, ispolzuite [otdelnyi metod](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task~1size/post).  <div class=\"description_important\">   Poluhit informaciu o processe ustanovki cen i skidok mohno s pomohu metodov <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1tasks/get\">sostoania</a> i <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1goods~1task/get\">detalizacii</a> obrabotannoi zagruzki. </div>  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_upload_task_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: TaskCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_upload_task_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_upload_task_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/upload/task', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskCreated',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_upload_task_size_post(self, body, **kwargs):  # noqa: E501
        """Ustanovit ceny dla razmerov  # noqa: E501

        Metod ustanavlivaet ceny otdelno dla razmerov tovarov.  Rabotaet tolko dla tovarov iz kategorii, gde mohno ustanavlivat ceny otdelno dla raznyh razmerov. Dla [takih tovarov](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1list~1goods~1size~1nm/get) `editableSizePrice: true`.  htoby ustanovit ceny i skidki dla samih tovarov, ispolzuite [otdelnyi metod](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task/post).  <div class=\"description_important\">   Poluhit informaciu o processe ustanovki cen i skidok mohno s pomohu metodov <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1tasks/get\">sostoania</a> i <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1goods~1task/get\">detalizacii</a> obrabotannoi zagruzki. </div>  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_upload_task_size_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: TaskCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_upload_task_size_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_upload_task_size_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_upload_task_size_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Ustanovit ceny dla razmerov  # noqa: E501

        Metod ustanavlivaet ceny otdelno dla razmerov tovarov.  Rabotaet tolko dla tovarov iz kategorii, gde mohno ustanavlivat ceny otdelno dla raznyh razmerov. Dla [takih tovarov](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1list~1goods~1size~1nm/get) `editableSizePrice: true`.  htoby ustanovit ceny i skidki dla samih tovarov, ispolzuite [otdelnyi metod](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1upload~1task/post).  <div class=\"description_important\">   Poluhit informaciu o processe ustanovki cen i skidok mohno s pomohu metodov <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1tasks/get\">sostoania</a> i <a href=\"/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1goods~1task/get\">detalizacii</a> obrabotannoi zagruzki. </div>  <div class=\"description_limit\">   Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">ceny i skidki</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_upload_task_size_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: TaskCreated
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_upload_task_size_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_upload_task_size_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/upload/task/size', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskCreated',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
