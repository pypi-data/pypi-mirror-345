"""
This type stub file was generated by pyright.
"""

import numpy as np
from functools import cached_property
from typing import List, Union
from lancedb.pydantic import PYDANTIC_VERSION
from .base import TextEmbeddingFunction
from .registry import register
from .utils import TEXT

@register("bedrock-text")
class BedRockText(TextEmbeddingFunction):
    """
    Parameters
    ----------
    name: str, default "amazon.titan-embed-text-v1"
        The model ID of the bedrock model to use. Supported models for are:
        - amazon.titan-embed-text-v1
        - cohere.embed-english-v3
        - cohere.embed-multilingual-v3
    region: str, default "us-east-1"
        Optional name of the AWS Region in which the service should be called.
    profile_name: str, default None
        Optional name of the AWS profile to use for calling the Bedrock service.
        If not specified, the default profile will be used.
    assumed_role: str, default None
        Optional ARN of an AWS IAM role to assume for calling the Bedrock service.
        If not specified, the current active credentials will be used.
    role_session_name: str, default "lancedb-embeddings"
        Optional name of the AWS IAM role session to use for calling the Bedrock
        service. If not specified, "lancedb-embeddings" name will be used.

    Examples
    --------
    import lancedb
    import pandas as pd
    from lancedb.pydantic import LanceModel, Vector

    model = get_registry().get("bedrock-text").create()

    class TextModel(LanceModel):
        text: str = model.SourceField()
        vector: Vector(model.ndims()) = model.VectorField()

    df = pd.DataFrame({"text": ["hello world", "goodbye world"]})
    db = lancedb.connect("tmp_path")
    tbl = db.create_table("test", schema=TextModel, mode="overwrite")

    tbl.add(df)

    rs = tbl.search("hello").limit(1).to_pandas()
    """
    name: str = ...
    region: str = ...
    assumed_role: Union[str, None] = ...
    profile_name: Union[str, None] = ...
    role_session_name: str = ...
    source_input_type: str = ...
    query_input_type: str = ...
    if PYDANTIC_VERSION.major < 2:
        class Config:
            keep_untouched = ...
        
        
    else:
        model_config = ...
    def ndims(self): # -> Literal[1536, 1024]:
        ...
    
    def compute_query_embeddings(self, query: str, *args, **kwargs) -> List[List[float]]:
        ...
    
    def compute_source_embeddings(self, texts: TEXT, *args, **kwargs) -> List[List[float]]:
        ...
    
    def generate_embeddings(self, texts: Union[List[str], np.ndarray], *args, **kwargs) -> List[List[float]]:
        """
        Get the embeddings for the given texts

        Parameters
        ----------
        texts: list[str] or np.ndarray (of str)
            The texts to embed

        Returns
        -------
        list[list[float]]
            The embeddings for the given texts
        """
        ...
    
    @cached_property
    def client(self): # -> Any:
        """Create a boto3 client for Amazon Bedrock service

        Returns
        -------
        boto3.client
            The boto3 client for Amazon Bedrock service
        """
        ...
    


