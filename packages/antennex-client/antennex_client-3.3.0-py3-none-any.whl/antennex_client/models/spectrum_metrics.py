# coding: utf-8

"""
    ANTENNEX Reverberation Chamber API

    HTTP API for ANTENNEX The Wireless Connector(tm)

    The version of the OpenAPI document: 3.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SpectrumMetrics(BaseModel):
    """
    Calculated Metrics for a spectrum measurement
    """ # noqa: E501
    peak_power: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Peak power observed (dBm)", alias="peakPower")
    uncertainty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Uncertainty of measurement (dB). This uncertainty is equal to the stirring uncertainty of the calibration and measurement steps of the reverberation chamber, and does not contain uncertainties related to the spectrum analyser or external equipment measurements.")
    rbw: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The resolution bandwidth of the spectrum analyser in Hz used during the acquisition.", alias="RBW")
    __properties: ClassVar[List[str]] = ["peakPower", "uncertainty", "RBW"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpectrumMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpectrumMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "peakPower": obj.get("peakPower"),
            "uncertainty": obj.get("uncertainty"),
            "RBW": obj.get("RBW")
        })
        return _obj


