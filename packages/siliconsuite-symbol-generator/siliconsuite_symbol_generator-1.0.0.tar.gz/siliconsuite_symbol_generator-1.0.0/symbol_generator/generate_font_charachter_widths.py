import os
import re
from PIL import Image, ImageDraw, ImageFont

# Get the directory of the current script and of the fonts
script_directory = os.path.dirname(os.path.abspath(__file__))
font_directory   = script_directory

# Font families and weights with paths to the font files
fonts = {
  'helvetica': {
    'normal':      os.path.join(font_directory, "Helvetica/Helvetica.ttf"),
    'bold':        os.path.join(font_directory, "Helvetica/Helvetica-Bold.ttf"),
    'italic':      os.path.join(font_directory, "Helvetica/Helvetica-Oblique.ttf"),
    'bold-italic': os.path.join(font_directory, "Helvetica/Helvetica-BoldOblique.ttf")
  },
  'arial': {
    'normal':      os.path.join(font_directory, "Arial/ARIAL.TTF"),
    'bold':        os.path.join(font_directory, "Arial/ARIALBD.TTF"),
    'italic':      os.path.join(font_directory, "Arial/ARIALI.TTF"),
    'bold-italic': os.path.join(font_directory, "Arial/ARIALBI.TTF")
  },
  'consolas': {
    'normal':      os.path.join(font_directory, "Consolas/Consolas.ttf"),
    'bold':        os.path.join(font_directory, "Consolas/Consolas-Bold.ttf"),
    'italic':      os.path.join(font_directory, "Consolas/Consolas-Italic.ttf"),
    'bold-italic': os.path.join(font_directory, "Consolas/Consolas-ItalicBold.ttf")
  }
}

# Font sizes to measure
font_sizes = [4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20]

# Characters to measure
characters = [
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    ' ', '!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~'
]

# Use Pillow to get the width of a single character using the specified font
def get_text_width(character:str, font:ImageFont.FreeTypeFont) -> int:
    dummy_image  = Image.new('RGB', (1,1))
    draw_context = ImageDraw.Draw(dummy_image)
    width        = draw_context.textlength(text=character, font=font)
    return int(round(width))

# Initialize the main dictionary to store all font metrics
font_character_widths = {}

print("Measuring font character widths.")

# Iterate through each font family
for font_family, weights in fonts.items():
  print(f"  Processing font family: {font_family}.")
  font_character_widths[font_family] = {}
  # Iterate through each weight
  for font_weight, font_path in weights.items():
    print(f"    Processing font weight: {font_weight}.")
    font_character_widths[font_family][font_weight] = {}
    # Check if the font file exists before proceeding
    if not os.path.exists(font_path):
      print(f"      WARNING: Font file not found at {font_path}. Skipping weight '{font_weight}'.")
      continue # Skip this font weight if the file is missing
    # Iterate through each font size
    for font_size in font_sizes:
      print(f"      Processing font size: {font_size}.")
      font_character_widths[font_family][font_weight][font_size] = {}
      try:
        # Load the font file for the current size
        font_object = ImageFont.truetype(font_path, font_size)
        # Iterate through each character
        for character in characters:
          # Calculate the width of the character
          width = get_text_width(character, font_object)
          # Store the width in the data structure
          font_character_widths[font_family][font_weight][font_size][character] = width
      except Exception as exception:
        # Handle potential errors during font loading or processing
        print(f"      ERROR: could not process font {font_path} at size {font_size}: {exception}.")
        # Assign an empty dictionary to indicate failure for this size/weight
        font_character_widths[font_family][font_weight][font_size] = {}

# Define the path for the output Python file, relative to the script directory
output_file_path = os.path.join(script_directory, 'font_character_widths.py')
print(f"Writing font metrics to {output_file_path}.")

# Write the generated dictionary to the output file
try:
  with open(output_file_path, 'w', encoding='utf-8') as output_file:
    # Write the header to the output file
    output_file.write("# This file is auto-generated by font_charachter_widths.py.\n")
    output_file.write("# It contains pre-calculated character widths for various fonts and sizes.\n\n")
    # Format the font metrics data for better readability
    font_character_widths_string = f"font_character_widths = {font_character_widths}"
    font_character_widths_string = re.sub(r"\s*(\d+:)", r"\n\g<1>", font_character_widths_string)
    font_character_widths_string = re.sub(r"('[a-zA-Z][a-zA-Z0-9_-]+':)", r"\n\g<1>", font_character_widths_string)
    # Write the formatted font metrics data to the output file
    output_file.write(font_character_widths_string)
    output_file.write("\n")
  print("Successfully wrote font metrics.")
except IOError as exception:
  print(f"ERROR: could not write to output file {output_file_path}: {exception}.")
