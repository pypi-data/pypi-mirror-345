# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _spplugin_c
else:
    import _spplugin_c

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SP_PLUGIN_CR_NONE = _spplugin_c.SP_PLUGIN_CR_NONE
SP_PLUGIN_CR_ERROR = _spplugin_c.SP_PLUGIN_CR_ERROR
SP_PLUGIN_CR_OPTION = _spplugin_c.SP_PLUGIN_CR_OPTION
SP_PLUGIN_DEVICE_UNKNOWN = _spplugin_c.SP_PLUGIN_DEVICE_UNKNOWN
SP_PLUGIN_DEVICE_FILE = _spplugin_c.SP_PLUGIN_DEVICE_FILE
SP_PLUGIN_DEVICE_AUDIO = _spplugin_c.SP_PLUGIN_DEVICE_AUDIO
SP_PLUGIN_DEVICE_CD = _spplugin_c.SP_PLUGIN_DEVICE_CD
SP_PLUGIN_DEVICE_MIXER = _spplugin_c.SP_PLUGIN_DEVICE_MIXER
SP_PLUGIN_DEVICE_OTHERS = _spplugin_c.SP_PLUGIN_DEVICE_OTHERS
class spWaveInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    file_type = property(_spplugin_c.spWaveInfo_file_type_get, _spplugin_c.spWaveInfo_file_type_set)
    file_desc = property(_spplugin_c.spWaveInfo_file_desc_get, _spplugin_c.spWaveInfo_file_desc_set)
    file_filter = property(_spplugin_c.spWaveInfo_file_filter_get, _spplugin_c.spWaveInfo_file_filter_set)
    buffer_size = property(_spplugin_c.spWaveInfo_buffer_size_get, _spplugin_c.spWaveInfo_buffer_size_set)
    header_size = property(_spplugin_c.spWaveInfo_header_size_get, _spplugin_c.spWaveInfo_header_size_set)
    samp_bit = property(_spplugin_c.spWaveInfo_samp_bit_get, _spplugin_c.spWaveInfo_samp_bit_set)
    num_channel = property(_spplugin_c.spWaveInfo_num_channel_get, _spplugin_c.spWaveInfo_num_channel_set)
    samp_rate = property(_spplugin_c.spWaveInfo_samp_rate_get, _spplugin_c.spWaveInfo_samp_rate_set)
    bit_rate = property(_spplugin_c.spWaveInfo_bit_rate_get, _spplugin_c.spWaveInfo_bit_rate_set)
    length = property(_spplugin_c.spWaveInfo_length_get, _spplugin_c.spWaveInfo_length_set)

    def __init__(self):
        _spplugin_c.spWaveInfo_swiginit(self, _spplugin_c.new_spWaveInfo())
    __swig_destroy__ = _spplugin_c.delete_spWaveInfo

# Register spWaveInfo in _spplugin_c:
_spplugin_c.spWaveInfo_swigregister(spWaveInfo)

class spSongInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    info_mask = property(_spplugin_c.spSongInfo_info_mask_get, _spplugin_c.spSongInfo_info_mask_set)
    track = property(_spplugin_c.spSongInfo_track_get, _spplugin_c.spSongInfo_track_set)
    title = property(_spplugin_c.spSongInfo_title_get, _spplugin_c.spSongInfo_title_set)
    artist = property(_spplugin_c.spSongInfo_artist_get, _spplugin_c.spSongInfo_artist_set)
    album = property(_spplugin_c.spSongInfo_album_get, _spplugin_c.spSongInfo_album_set)
    genre = property(_spplugin_c.spSongInfo_genre_get, _spplugin_c.spSongInfo_genre_set)
    release = property(_spplugin_c.spSongInfo_release_get, _spplugin_c.spSongInfo_release_set)
    copyright = property(_spplugin_c.spSongInfo_copyright_get, _spplugin_c.spSongInfo_copyright_set)
    engineer = property(_spplugin_c.spSongInfo_engineer_get, _spplugin_c.spSongInfo_engineer_set)
    source = property(_spplugin_c.spSongInfo_source_get, _spplugin_c.spSongInfo_source_set)
    software = property(_spplugin_c.spSongInfo_software_get, _spplugin_c.spSongInfo_software_set)
    subject = property(_spplugin_c.spSongInfo_subject_get, _spplugin_c.spSongInfo_subject_set)
    comment = property(_spplugin_c.spSongInfo_comment_get, _spplugin_c.spSongInfo_comment_set)

    def __init__(self):
        _spplugin_c.spSongInfo_swiginit(self, _spplugin_c.new_spSongInfo())
    __swig_destroy__ = _spplugin_c.delete_spSongInfo

# Register spSongInfo in _spplugin_c:
_spplugin_c.spSongInfo_swigregister(spSongInfo)


def xspGetSongInfoStringField_(song_info, key):
    return _spplugin_c.xspGetSongInfoStringField_(song_info, key)

def xspGetWaveInfoStringField_(wave_info, index):
    return _spplugin_c.xspGetWaveInfoStringField_(wave_info, index)

def spGetDefaultDir():
    return _spplugin_c.spGetDefaultDir()

def spInitWaveInfo(wave_info):
    return _spplugin_c.spInitWaveInfo(wave_info)

def spInitSongInfo(song_info):
    return _spplugin_c.spInitSongInfo(song_info)

def spSetPluginSearchPath(pathlist):
    return _spplugin_c.spSetPluginSearchPath(pathlist)

def spAppendPluginSearchPath(pathlist):
    return _spplugin_c.spAppendPluginSearchPath(pathlist)

def spSearchPluginFile(index):
    return _spplugin_c.spSearchPluginFile(index)

def spLoadPlugin(plugin_name):
    return _spplugin_c.spLoadPlugin(plugin_name)

def spFreePlugin(plugin):
    return _spplugin_c.spFreePlugin(plugin)

def spGetPluginName(plugin):
    return _spplugin_c.spGetPluginName(plugin)

def spGetPluginId(plugin):
    return _spplugin_c.spGetPluginId(plugin)

def spGetPluginDescription(plugin):
    return _spplugin_c.spGetPluginDescription(plugin)

def spGetPluginInformation(plugin):
    return _spplugin_c.spGetPluginInformation(plugin)

def spGetPluginVersionId(plugin):
    return _spplugin_c.spGetPluginVersionId(plugin)

def spGetPluginVersion(plugin):
    return _spplugin_c.spGetPluginVersion(plugin)

def spOpenFilePluginAuto_(plugin_name, filename, mode, device_type, wave_info, song_info):
    return _spplugin_c.spOpenFilePluginAuto_(plugin_name, filename, mode, device_type, wave_info, song_info)

def spCloseFilePlugin(plugin):
    return _spplugin_c.spCloseFilePlugin(plugin)

def spSeekPlugin(plugin, pos):
    return _spplugin_c.spSeekPlugin(plugin, pos)

def spIsSongInfoNumberFieldKey_(key):
    return _spplugin_c.spIsSongInfoNumberFieldKey_(key)

def spGetSongInfoNumberField_(song_info, key):
    return _spplugin_c.spGetSongInfoNumberField_(song_info, key)

def spUpdateSongInfoNumberField_(song_info, key, value):
    return _spplugin_c.spUpdateSongInfoNumberField_(song_info, key, value)

def spUpdateSongInfoStringField_(song_info, key, value):
    return _spplugin_c.spUpdateSongInfoStringField_(song_info, key, value)

def spSetWaveInfoFileType_(wave_info, file_type):
    return _spplugin_c.spSetWaveInfoFileType_(wave_info, file_type)

def spWritePluginInByte_(plugin, buffer, offset_byte, length_byte):
    return _spplugin_c.spWritePluginInByte_(plugin, buffer, offset_byte, length_byte)

def spWritePluginDoubleWeighted_(plugin, buffer, weight, offset, length):
    return _spplugin_c.spWritePluginDoubleWeighted_(plugin, buffer, weight, offset, length)

def spReadPluginInByte_(plugin, buffer, offset_byte, length_byte):
    return _spplugin_c.spReadPluginInByte_(plugin, buffer, offset_byte, length_byte)

def spReadPluginDoubleWeighted_(plugin, buffer, weight, offset, length):
    return _spplugin_c.spReadPluginDoubleWeighted_(plugin, buffer, weight, offset, length)

def spCopyBuffer_(dest_buffer, dest_samp_byte, dest_big_endian_or_signed8bit, src_buffer, src_samp_byte, src_big_endian_or_signed8bit, mult2432):
    return _spplugin_c.spCopyBuffer_(dest_buffer, dest_samp_byte, dest_big_endian_or_signed8bit, src_buffer, src_samp_byte, src_big_endian_or_signed8bit, mult2432)


