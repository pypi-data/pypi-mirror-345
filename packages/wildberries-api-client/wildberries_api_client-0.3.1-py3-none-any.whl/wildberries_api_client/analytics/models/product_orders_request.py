# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductOrdersRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'period': 'PeriodOrdersRequest',
        'nm_id': 'int',
        'search_texts': 'list[str]'
    }

    attribute_map = {
        'period': 'period',
        'nm_id': 'nmId',
        'search_texts': 'searchTexts'
    }

    def __init__(self, period=None, nm_id=None, search_texts=None):  # noqa: E501
        """ProductOrdersRequest - a model defined in Swagger"""  # noqa: E501
        self._period = None
        self._nm_id = None
        self._search_texts = None
        self.discriminator = None
        self.period = period
        self.nm_id = nm_id
        self.search_texts = search_texts

    @property
    def period(self):
        """Gets the period of this ProductOrdersRequest.  # noqa: E501


        :return: The period of this ProductOrdersRequest.  # noqa: E501
        :rtype: PeriodOrdersRequest
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this ProductOrdersRequest.


        :param period: The period of this ProductOrdersRequest.  # noqa: E501
        :type: PeriodOrdersRequest
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501

        self._period = period

    @property
    def nm_id(self):
        """Gets the nm_id of this ProductOrdersRequest.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this ProductOrdersRequest.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this ProductOrdersRequest.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this ProductOrdersRequest.  # noqa: E501
        :type: int
        """
        if nm_id is None:
            raise ValueError("Invalid value for `nm_id`, must not be `None`")  # noqa: E501

        self._nm_id = nm_id

    @property
    def search_texts(self):
        """Gets the search_texts of this ProductOrdersRequest.  # noqa: E501

        Poiskovye zaprosy  # noqa: E501

        :return: The search_texts of this ProductOrdersRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._search_texts

    @search_texts.setter
    def search_texts(self, search_texts):
        """Sets the search_texts of this ProductOrdersRequest.

        Poiskovye zaprosy  # noqa: E501

        :param search_texts: The search_texts of this ProductOrdersRequest.  # noqa: E501
        :type: list[str]
        """
        if search_texts is None:
            raise ValueError("Invalid value for `search_texts`, must not be `None`")  # noqa: E501

        self._search_texts = search_texts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductOrdersRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductOrdersRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
