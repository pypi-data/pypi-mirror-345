# coding: utf-8

"""
    Rabota s tovarami

    <div class=\"description_ref\">     Uznat, kak ispolzovat metody v biznes-keisah, mohno v <a href=\"https://dev.wildberries.ru/news/101\">instrukcii po rabote s tovarami</a> </div>  Rabota s tovarami vkluhaet v seba:   1. [Sozdanie](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) i [redaktirovanie](/openapi/work-with-products#tag/Kartochki-tovarov) kartohek tovarov: v tom hisle, poluhenie [kategorii, predmetov i harakteristik tovarov](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) i zagruzku [mediafailov](/openapi/work-with-products#tag/Mediafajly).   2. Nastroiku [arlykov](/openapi/work-with-products#tag/Yarlyki) dla udobnogo poiska tovarov.   3. Ustanovku [cen i skidok](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Upravlenie [ostatkami tovarov](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) i [skladami](/openapi/work-with-products#tag/Sklady-prodavca), esli vy rabotaete po modeli prodah so sklada prodavca.   # noqa: E501

    OpenAPI spec version: products
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.products.api_client import ApiClient


class OstatkiNaSkladahProdavcaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v3_stocks_warehouse_id_delete(self, body, warehouse_id, **kwargs):  # noqa: E501
        """Udalit ostatki tovarov  # noqa: E501

        Metod udalaet zapis ob ostatkah tovarov prodavca iz [spiska ostatkov](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca/paths/~1api~1v3~1stocks~1%7BwarehouseId%7D/post).  <div class=\"description_important\">   <strong>Deistvie neobratimo</strong>. Udalennyi ostatok budet neobhodimo zagruzit povtorno dla vozobnovlenia prodah. </div>  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_stocks_warehouse_id_delete(body, warehouse_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StocksWarehouseIdBody2 body: (required)
        :param int warehouse_id: ID sklada prodavca (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_stocks_warehouse_id_delete_with_http_info(body, warehouse_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_stocks_warehouse_id_delete_with_http_info(body, warehouse_id, **kwargs)  # noqa: E501
            return data

    def api_v3_stocks_warehouse_id_delete_with_http_info(self, body, warehouse_id, **kwargs):  # noqa: E501
        """Udalit ostatki tovarov  # noqa: E501

        Metod udalaet zapis ob ostatkah tovarov prodavca iz [spiska ostatkov](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca/paths/~1api~1v3~1stocks~1%7BwarehouseId%7D/post).  <div class=\"description_important\">   <strong>Deistvie neobratimo</strong>. Udalennyi ostatok budet neobhodimo zagruzit povtorno dla vozobnovlenia prodah. </div>  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_stocks_warehouse_id_delete_with_http_info(body, warehouse_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StocksWarehouseIdBody2 body: (required)
        :param int warehouse_id: ID sklada prodavca (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'warehouse_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_stocks_warehouse_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v3_stocks_warehouse_id_delete`")  # noqa: E501
        # verify the required parameter 'warehouse_id' is set
        if ('warehouse_id' not in params or
                params['warehouse_id'] is None):
            raise ValueError("Missing the required parameter `warehouse_id` when calling `api_v3_stocks_warehouse_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'warehouse_id' in params:
            path_params['warehouseId'] = params['warehouse_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/stocks/{warehouseId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_stocks_warehouse_id_post(self, body, warehouse_id, **kwargs):  # noqa: E501
        """Poluhit ostatki tovarov  # noqa: E501

        Metod predostavlaet dannye ob ostatkah tovarov na [skladah prodavca](/openapi/work-with-products#tag/Sklady-prodavca).  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_stocks_warehouse_id_post(body, warehouse_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StocksWarehouseIdBody1 body: (required)
        :param int warehouse_id: ID sklada prodavca (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_stocks_warehouse_id_post_with_http_info(body, warehouse_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_stocks_warehouse_id_post_with_http_info(body, warehouse_id, **kwargs)  # noqa: E501
            return data

    def api_v3_stocks_warehouse_id_post_with_http_info(self, body, warehouse_id, **kwargs):  # noqa: E501
        """Poluhit ostatki tovarov  # noqa: E501

        Metod predostavlaet dannye ob ostatkah tovarov na [skladah prodavca](/openapi/work-with-products#tag/Sklady-prodavca).  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_stocks_warehouse_id_post_with_http_info(body, warehouse_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StocksWarehouseIdBody1 body: (required)
        :param int warehouse_id: ID sklada prodavca (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'warehouse_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_stocks_warehouse_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v3_stocks_warehouse_id_post`")  # noqa: E501
        # verify the required parameter 'warehouse_id' is set
        if ('warehouse_id' not in params or
                params['warehouse_id'] is None):
            raise ValueError("Missing the required parameter `warehouse_id` when calling `api_v3_stocks_warehouse_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'warehouse_id' in params:
            path_params['warehouseId'] = params['warehouse_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/stocks/{warehouseId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v3_stocks_warehouse_id_put(self, warehouse_id, **kwargs):  # noqa: E501
        """Obnovit ostatki tovarov  # noqa: E501

        Metod obnovlaet kolihestvo ostatkov tovarov prodavca [v spiske](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca/paths/~1api~1v3~1stocks~1%7BwarehouseId%7D/post).  <div class=\"description_important\">   Nazvania parametrov zaprosa ne validiruutsa. Pri otpravke nekorrektnyh nazvanii vy poluhite uspehnyi otvet (<code>204</code>), no ostatki ne obnovatsa. </div>  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_stocks_warehouse_id_put(warehouse_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int warehouse_id: ID sklada prodavca (required)
        :param StocksWarehouseIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v3_stocks_warehouse_id_put_with_http_info(warehouse_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v3_stocks_warehouse_id_put_with_http_info(warehouse_id, **kwargs)  # noqa: E501
            return data

    def api_v3_stocks_warehouse_id_put_with_http_info(self, warehouse_id, **kwargs):  # noqa: E501
        """Obnovit ostatki tovarov  # noqa: E501

        Metod obnovlaet kolihestvo ostatkov tovarov prodavca [v spiske](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca/paths/~1api~1v3~1stocks~1%7BwarehouseId%7D/post).  <div class=\"description_important\">   Nazvania parametrov zaprosa ne validiruutsa. Pri otpravke nekorrektnyh nazvanii vy poluhite uspehnyi otvet (<code>204</code>), no ostatki ne obnovatsa. </div>  <div class=\"description_limit\">     Maksimum 300 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Marketpleis</a> na odin akkaunt prodavca.   <br><br>   Odin zapros s kodom otveta <code>409</code> uhityvaetsa kak 5 zaprosov </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v3_stocks_warehouse_id_put_with_http_info(warehouse_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int warehouse_id: ID sklada prodavca (required)
        :param StocksWarehouseIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['warehouse_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v3_stocks_warehouse_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'warehouse_id' is set
        if ('warehouse_id' not in params or
                params['warehouse_id'] is None):
            raise ValueError("Missing the required parameter `warehouse_id` when calling `api_v3_stocks_warehouse_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'warehouse_id' in params:
            path_params['warehouseId'] = params['warehouse_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/stocks/{warehouseId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
