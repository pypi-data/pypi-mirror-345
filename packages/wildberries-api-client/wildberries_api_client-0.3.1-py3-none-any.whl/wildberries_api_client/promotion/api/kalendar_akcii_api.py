# coding: utf-8

"""
    Marketing i prodvihenie

    <div class=\"description_important\">       Uznat bolhe o marketinge i prodvihenii mohno v <a href=\"https://seller.wildberries.ru/instructions/category/59d92bd3-6ea0-40f2-b762-ca8835d7d42e?goBackOption=prevRoute&categoryId=479385c6-de01-4b4d-ad4e-ed941e65582e\">spravohnom centre</a> </div>    Metody marketinga i prodvihenia pozvolaut:   1. Poluhat informaciu o [reklamnyh kampaniah](/openapi/promotion#tag/Kampanii) i [mediakampaniah](/openapi/promotion#tag/Media).   2. [Sozdavat](/openapi/promotion#tag/Sozdanie-kampanij) i [upravlat](/openapi/promotion#tag/Upravlenie-kampaniyami) kampaniami.   3. Nastraivat [parametry kampanii](/openapi/promotion#tag/Parametry-kampanij) — klastery fraz, prodvigaemye tovary i tak dalee.   4. Upravlat [finansami kampanii](/openapi/promotion#tag/Finansy).   5. Rabotat s [kalendarem akcii](/openapi/promotion#tag/Kalendar-akcij).  Dannye sinhroniziruutsa s bazoi raz v 3 minuty. Statusy kampanii menautsa raz v minutu. Stavki kampanii menautsa raz v 30 sekund.   # noqa: E501

    OpenAPI spec version: promotion
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.promotion.api_client import ApiClient


class KalendarAkciiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_calendar_promotions_details_get(self, promotion_i_ds, **kwargs):  # noqa: E501
        """Detalnaa informacia ob akciah  # noqa: E501

        Metod predostavlaet podrobnuu informaciu ob [akcii](/openapi/promotion#tag/Kalendar-akcij/paths/~1api~1v1~1calendar~1promotions~1details/get) po ID.  <div class=\"description_limit\">     Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov <a href=\"/openapi/promotion#tag/Kalendar-akcij\">Kalendara akcii</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_calendar_promotions_details_get(promotion_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] promotion_i_ds: ID akcii, po kotorym nuhno vernut informaciu (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_calendar_promotions_details_get_with_http_info(promotion_i_ds, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_calendar_promotions_details_get_with_http_info(promotion_i_ds, **kwargs)  # noqa: E501
            return data

    def api_v1_calendar_promotions_details_get_with_http_info(self, promotion_i_ds, **kwargs):  # noqa: E501
        """Detalnaa informacia ob akciah  # noqa: E501

        Metod predostavlaet podrobnuu informaciu ob [akcii](/openapi/promotion#tag/Kalendar-akcij/paths/~1api~1v1~1calendar~1promotions~1details/get) po ID.  <div class=\"description_limit\">     Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov <a href=\"/openapi/promotion#tag/Kalendar-akcij\">Kalendara akcii</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_calendar_promotions_details_get_with_http_info(promotion_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] promotion_i_ds: ID akcii, po kotorym nuhno vernut informaciu (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['promotion_i_ds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_calendar_promotions_details_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'promotion_i_ds' is set
        if ('promotion_i_ds' not in params or
                params['promotion_i_ds'] is None):
            raise ValueError("Missing the required parameter `promotion_i_ds` when calling `api_v1_calendar_promotions_details_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'promotion_i_ds' in params:
            query_params.append(('promotionIDs', params['promotion_i_ds']))  # noqa: E501
            collection_formats['promotionIDs'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/calendar/promotions/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_calendar_promotions_get(self, start_date_time, end_date_time, all_promo, **kwargs):  # noqa: E501
        """Spisok akcii  # noqa: E501

        Metod predostavlaet spisok [akcii](/openapi/promotion#tag/Kalendar-akcij/paths/~1api~1v1~1calendar~1promotions~1details/get) v WB s datami i vremenem provedenia.  <div class=\"description_limit\">     Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov <a href=\"/openapi/promotion#tag/Kalendar-akcij\">Kalendara akcii</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_calendar_promotions_get(start_date_time, end_date_time, all_promo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date_time: Nahalo perioda, format `YYYY-MM-DDTHH:MM:SSZ` (required)
        :param str end_date_time: Konec perioda, format `YYYY-MM-DDTHH:MM:SSZ` (required)
        :param bool all_promo: Pokazat akcii:   - `false` — dostupnye dla uhastia   - `true` — vse akcii  (required)
        :param int limit: Kolihestvo zaprahivaemyh akcii
        :param int offset: Posle kakogo elementa vydavat dannye
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_calendar_promotions_get_with_http_info(start_date_time, end_date_time, all_promo, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_calendar_promotions_get_with_http_info(start_date_time, end_date_time, all_promo, **kwargs)  # noqa: E501
            return data

    def api_v1_calendar_promotions_get_with_http_info(self, start_date_time, end_date_time, all_promo, **kwargs):  # noqa: E501
        """Spisok akcii  # noqa: E501

        Metod predostavlaet spisok [akcii](/openapi/promotion#tag/Kalendar-akcij/paths/~1api~1v1~1calendar~1promotions~1details/get) v WB s datami i vremenem provedenia.  <div class=\"description_limit\">     Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov <a href=\"/openapi/promotion#tag/Kalendar-akcij\">Kalendara akcii</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_calendar_promotions_get_with_http_info(start_date_time, end_date_time, all_promo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date_time: Nahalo perioda, format `YYYY-MM-DDTHH:MM:SSZ` (required)
        :param str end_date_time: Konec perioda, format `YYYY-MM-DDTHH:MM:SSZ` (required)
        :param bool all_promo: Pokazat akcii:   - `false` — dostupnye dla uhastia   - `true` — vse akcii  (required)
        :param int limit: Kolihestvo zaprahivaemyh akcii
        :param int offset: Posle kakogo elementa vydavat dannye
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date_time', 'end_date_time', 'all_promo', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_calendar_promotions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date_time' is set
        if ('start_date_time' not in params or
                params['start_date_time'] is None):
            raise ValueError("Missing the required parameter `start_date_time` when calling `api_v1_calendar_promotions_get`")  # noqa: E501
        # verify the required parameter 'end_date_time' is set
        if ('end_date_time' not in params or
                params['end_date_time'] is None):
            raise ValueError("Missing the required parameter `end_date_time` when calling `api_v1_calendar_promotions_get`")  # noqa: E501
        # verify the required parameter 'all_promo' is set
        if ('all_promo' not in params or
                params['all_promo'] is None):
            raise ValueError("Missing the required parameter `all_promo` when calling `api_v1_calendar_promotions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date_time' in params:
            query_params.append(('startDateTime', params['start_date_time']))  # noqa: E501
        if 'end_date_time' in params:
            query_params.append(('endDateTime', params['end_date_time']))  # noqa: E501
        if 'all_promo' in params:
            query_params.append(('allPromo', params['all_promo']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/calendar/promotions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_calendar_promotions_nomenclatures_get(self, promotion_id, in_action, **kwargs):  # noqa: E501
        """Spisok tovarov dla uhastia v akcii  # noqa: E501

        Metod formiruet spisok tovarov, podhodahih dla uhastia v [akcii](/openapi/promotion#tag/Kalendar-akcij/paths/~1api~1v1~1calendar~1promotions~1details/get). Eti tovary mohno dobavit v akciu s pomohu [otdelnogo metoda](/openapi/promotion#tag/Kalendar-akcij/paths/~1api~1v1~1calendar~1promotions~1upload/post).  <div class=\"description_important\">    Dannyi metod neprimenim dla avtoakcii. </div>  <div class=\"description_limit\">     Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov <a href=\"/openapi/promotion#tag/Kalendar-akcij\">Kalendara akcii</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_calendar_promotions_nomenclatures_get(promotion_id, in_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int promotion_id: ID akcii (required)
        :param bool in_action: Uhastvuet v akcii:   - `true` — da   - `false` — net  (required)
        :param int limit: Kolihestvo zaprahivaemyh tovarov
        :param int offset: Posle kakogo elementa vydavat dannye
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_calendar_promotions_nomenclatures_get_with_http_info(promotion_id, in_action, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_calendar_promotions_nomenclatures_get_with_http_info(promotion_id, in_action, **kwargs)  # noqa: E501
            return data

    def api_v1_calendar_promotions_nomenclatures_get_with_http_info(self, promotion_id, in_action, **kwargs):  # noqa: E501
        """Spisok tovarov dla uhastia v akcii  # noqa: E501

        Metod formiruet spisok tovarov, podhodahih dla uhastia v [akcii](/openapi/promotion#tag/Kalendar-akcij/paths/~1api~1v1~1calendar~1promotions~1details/get). Eti tovary mohno dobavit v akciu s pomohu [otdelnogo metoda](/openapi/promotion#tag/Kalendar-akcij/paths/~1api~1v1~1calendar~1promotions~1upload/post).  <div class=\"description_important\">    Dannyi metod neprimenim dla avtoakcii. </div>  <div class=\"description_limit\">     Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov <a href=\"/openapi/promotion#tag/Kalendar-akcij\">Kalendara akcii</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_calendar_promotions_nomenclatures_get_with_http_info(promotion_id, in_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int promotion_id: ID akcii (required)
        :param bool in_action: Uhastvuet v akcii:   - `true` — da   - `false` — net  (required)
        :param int limit: Kolihestvo zaprahivaemyh tovarov
        :param int offset: Posle kakogo elementa vydavat dannye
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['promotion_id', 'in_action', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_calendar_promotions_nomenclatures_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'promotion_id' is set
        if ('promotion_id' not in params or
                params['promotion_id'] is None):
            raise ValueError("Missing the required parameter `promotion_id` when calling `api_v1_calendar_promotions_nomenclatures_get`")  # noqa: E501
        # verify the required parameter 'in_action' is set
        if ('in_action' not in params or
                params['in_action'] is None):
            raise ValueError("Missing the required parameter `in_action` when calling `api_v1_calendar_promotions_nomenclatures_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'promotion_id' in params:
            query_params.append(('promotionID', params['promotion_id']))  # noqa: E501
        if 'in_action' in params:
            query_params.append(('inAction', params['in_action']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/calendar/promotions/nomenclatures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_calendar_promotions_upload_post(self, body, **kwargs):  # noqa: E501
        """Dobavit tovar v akciu  # noqa: E501

        Metod sozdaet zadanie na zagruzku tovara v [akciu](/openapi/promotion#tag/Kalendar-akcij/paths/~1api~1v1~1calendar~1promotions~1details/get).<br> Sostoanie zagruzki mohno proverit s pomohu [otdelnyh metodov](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1tasks/get).  <div class=\"description_important\">    Dannyi metod neprimenim dla avtoakcii. </div>  <div class=\"description_limit\">     Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov <a href=\"/openapi/promotion#tag/Kalendar-akcij\">Kalendara akcii</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_calendar_promotions_upload_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_calendar_promotions_upload_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_calendar_promotions_upload_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_calendar_promotions_upload_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Dobavit tovar v akciu  # noqa: E501

        Metod sozdaet zadanie na zagruzku tovara v [akciu](/openapi/promotion#tag/Kalendar-akcij/paths/~1api~1v1~1calendar~1promotions~1details/get).<br> Sostoanie zagruzki mohno proverit s pomohu [otdelnyh metodov](/openapi/work-with-products#tag/Ceny-i-skidki/paths/~1api~1v2~1history~1tasks/get).  <div class=\"description_important\">    Dannyi metod neprimenim dla avtoakcii. </div>  <div class=\"description_limit\">     Maksimum 10 zaprosov za 6 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> dla vseh metodov <a href=\"/openapi/promotion#tag/Kalendar-akcij\">Kalendara akcii</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_calendar_promotions_upload_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_calendar_promotions_upload_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_calendar_promotions_upload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/calendar/promotions/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
