#Remove sequencing adapters based on 5' and 3' sequences (A3 and A5 in the config.yaml file)
#-n Trimming n adapter from each read ; -g Regular 5’ adapter; -a Regular 3’ adapter ; -j num core 0=auto number of available ; -o output
rule Remove_sequencing_adapters:
    input:
        fastq = f"{datadir}{{readfile}}{ext}"
    output:
       cutadapt_file =  temp(f"{output_directory}/01_read_processing/01_cutadapt/01_remove_sequencing_adapters/{{readfile}}.trimmed.fastq")
    log:
        log= f"{output_directory}/logs/01_read_processing/01_cutadapt/01_remove_sequencing_adapters/{{readfile}}_Remove_sequencing_adapters.log"
    params:
        A3 = config["A3"],
        A5 = config["A5"]
    envmodules: config['module_file']
    shell:
        """
        cutadapt -n 10 -g {params.A5} -a {params.A3} -j 0 --overlap 15  {input.fastq} -o {output.cutadapt_file} &> {log.log}
        """

# Quality trimming based on the --quality-cutoff (low-quality ends) -q parameter to change the cutoff
#and --minimum-length -m option to Discard processed reads that are shorter than the length specified.
# -q quality-cutoff 5',3' ; -j num core 0=auto number of available ; m minimum-length ; -o output
rule Quality_trimming:
    input:
        cutadapt_file = rules.Remove_sequencing_adapters.output.cutadapt_file
    output:
        fastq_trim = temp(f"{output_directory}/01_read_processing/01_cutadapt/02_triming/{{readfile}}.clean.fastq")
    log:
        f"{output_directory}/logs/01_read_processing/01_cutadapt/02_triming/{{readfile}}_triming.log"
    benchmark:
        f"{output_directory}/benchmarks/{{readfile}}.cutadapt_triming.benchmark.txt"
    envmodules: config['module_file']
    shell:
        """
        cutadapt -q 30,30 -j 0 -m 40 -o {output.fastq_trim} {input.cutadapt_file} &> {log}
        """

# Resynchronize 2 fastq or fastq.gz files (R1 and R2) after they have been trimmed and cleaned.
rule Repair_Pairs:
    input:
        R1 = f"{output_directory}/01_read_processing/01_cutadapt/02_triming/{{smp}}{ext_R1}.clean.fastq",
        R2 = f"{output_directory}/01_read_processing/01_cutadapt/02_triming/{{smp}}{ext_R2}.clean.fastq"
    output:
        R1= f"{output_directory}/01_read_processing/01_cutadapt/03_repair_pairs/{{smp}}{ext_R1}.clean.fastq_pairs_R1.fastq",
        R2=f"{output_directory}/01_read_processing/01_cutadapt/03_repair_pairs/{{smp}}{ext_R2}.clean.fastq_pairs_R2.fastq",
        WI=f"{output_directory}/01_read_processing/01_cutadapt/03_repair_pairs/{{smp}}{ext_R1}.clean.fastq_singles.fastq"
    params:
        f'{scriptdir}fastqCombinePairedEnd.py'
    log:
        f"{output_directory}/logs/01_read_processing/01_cutadapt/03_repair_pairs/{{smp}}_repair.log"
    benchmark:
        f"{output_directory}/benchmarks/{{smp}}.repair_pairs.benchmark.txt"
    envmodules: config['module_file']
    shell:
        """
        python2 {params} {input.R1} {input.R2} {output.R1} {output.R2} {output.WI} 2> {log}
        """

 # Host-homologous sequence cleaning by mapping (bwa) on ribosomal sequences.
rule Map_On_host:
    input:
        host = config["rRNA_host"],
        hostindex = config["rRNA_host"]+".bwt",
        R1 = rules.Repair_Pairs.output.R1,
        R2 = rules.Repair_Pairs.output.R2,
        WI = rules.Repair_Pairs.output.WI
    output:
        bam_pairs = temp(f"{output_directory}/01_read_processing/02_HostMapping/{{smp}}_dipteria_pairs.bam"),
        bam_WI = temp(f"{output_directory}/01_read_processing/02_HostMapping/{{smp}}_dipteria_widows.bam"),
        sam_pairs = temp(f"{output_directory}/01_read_processing/02_HostMapping/unmapped_{{smp}}_dipteria_pairs.sam"),
        sam_WI = temp(f"{output_directory}/01_read_processing/02_HostMapping/unmapped_{{smp}}_dipteria_widows.sam")
    log:
        f"{output_directory}/logs/01_read_processing/02_HostMapping/{{smp}}_bwa_pairs_on_dipt.log"
    benchmark:
        f"{output_directory}/benchmarks/{{smp}}.HostMapping.benchmark.txt"
    threads: threads_Map_On_host
    envmodules: config['module_file']
    shell:
        """
        if [ -s {input.R1} ] && [ -s {input.R2} ]
        then
            bwa mem -t {threads} {input.host} {input.R1} {input.R2} 2> {log} |samtools view -b - | tee {output.bam_pairs} | samtools view -f 0x4 -> {output.sam_pairs}
        else
            echo "{input.R1} or {input.R2} is empty."
            touch {output.bam_pairs}
            touch {output.sam_pairs}
        fi

        if [ -s {input.WI} ]
        then
        bwa mem -t {threads} {input.host} {input.WI} 2> {log} | samtools view -b - | tee {output.bam_WI} | samtools view -f 0x4 -> {output.sam_WI}
        else
            echo "{input.WI} is empty."
            touch {output.bam_WI}
            touch {output.sam_WI}
        fi
        """

# Extact samples squences with with no homologous sequences with the host.
rule Extract_Unmapped_host_Reads:
    input:
        sam_pairs = rules.Map_On_host.output.sam_pairs,
        sam_WI = rules.Map_On_host.output.sam_WI
    output:
        pairs_R1 = temp(f"{output_directory}/01_read_processing/03_filtered_fastq_host_mapping/filtered_diptera_{{smp}}_R1.fastq"),
        pairs_R2 = temp(f"{output_directory}/01_read_processing/03_filtered_fastq_host_mapping/filtered_diptera_{{smp}}_R2.fastq"),
        WI = temp(f"{output_directory}/01_read_processing/03_filtered_fastq_host_mapping/filtered_diptera_{{smp}}_widows.fastq")
    benchmark:
        f"{output_directory}/benchmarks/{{smp}}.filtered_fastq_host_mapping.benchmark.txt"
    envmodules: config['module_file']
    shell:
        """
        if [ -s {input.sam_pairs} ]
        then
            picard SamToFastq VALIDATION_STRINGENCY=SILENT I={input.sam_pairs} F={output.pairs_R1} F2={output.pairs_R2}
        else
            echo "{input.sam_pairs} or {input.sam_WI} is empty."
            touch {output.pairs_R1}
            touch {output.pairs_R2}
        fi
        if [ -s {input.sam_WI} ]
        then
            picard SamToFastq VALIDATION_STRINGENCY=SILENT I={input.sam_WI} F={output.WI}
        else
            echo "{input.sam_WI} is empty."
            touch {output.WI}
        fi
        """

# Bacterial-homologous sequences cleaning by mapping (bwa) on ribosomal sequences.
rule Map_On_bacteria:
    input:
        host = config["rRNA_bact"],
        hostindex = config["rRNA_bact"]+".bwt",
        pairs_R1 = rules.Extract_Unmapped_host_Reads.output.pairs_R1,
        pairs_R2 = rules.Extract_Unmapped_host_Reads.output.pairs_R2,
        WI = rules.Extract_Unmapped_host_Reads.output.WI
    output:
        bam_pairs = temp(f"{output_directory}/01_read_processing/04_Bacteria_mapping/{{smp}}_bacteria_pairs.bam"),
        bam_WI = temp(f"{output_directory}/01_read_processing/04_Bacteria_mapping/{{smp}}_bacteria_widows.bam"),
        sam_pairs = temp(f"{output_directory}/01_read_processing/04_Bacteria_mapping/{{smp}}_bacteria_pairs.sam"),
        sam_WI = temp(f"{output_directory}/01_read_processing/04_Bacteria_mapping/{{smp}}_bacteria_widows.sam")
    benchmark:
        f"{output_directory}/benchmarks/{{smp}}.Bacteria_mapping.benchmark.txt"
    log:
        f"{output_directory}/logs/01_read_processing/04_Bacteria_mapping/{{smp}}_Bacteria_mapping.log"
    threads: threads_Map_On_bacteria
    envmodules: config['module_file']
    shell:
        """

        if [ -s {input.pairs_R1} ] && [ -s {input.pairs_R2} ]
        then
            bwa mem -t {threads} {input.host} {input.pairs_R1} {input.pairs_R2} 2> {log} | samtools view -b -  | tee {output.bam_pairs} |  samtools view -f 0x4 -> {output.sam_pairs}
        else
            echo "{input.pairs_R1} or {input.pairs_R2} is empty."
            touch {output.bam_pairs}
            touch {output.sam_pairs}
        fi

        if [ -s {input.WI} ]
        then
        bwa mem -t {threads} {input.host} {input.WI} 2> {log} | samtools view -b - | tee {output.bam_WI} | samtools view -f 0x4 -> {output.sam_WI}
        else
            echo "{input.WI} is empty."
            touch {output.bam_WI}
            touch {output.sam_WI}
        fi
        """

# Extact samples squences with with no homologous sequences with bacteria.
rule Extract_Unmapped_bact_Reads:
    input:
        sam_pairs = rules.Map_On_bacteria.output.sam_pairs,
        sam_WI =  rules.Map_On_bacteria.output.sam_WI
    output:
        pairs_R1 = f"{output_directory}/01_read_processing/05_filtered_fastq_bacteria_mapping/filtered_bacteria_{{smp}}_R1.fastq",
        pairs_R2 = f"{output_directory}/01_read_processing/05_filtered_fastq_bacteria_mapping/filtered_bacteria_{{smp}}_R2.fastq",
        WI =  f"{output_directory}/01_read_processing/05_filtered_fastq_bacteria_mapping/filtered_bacteria_{{smp}}_widows.fastq"
    benchmark:
        f"{output_directory}/benchmarks/{{smp}}.filtered_fastq_bacteria_mapping.benchmark.txt"
    envmodules: config['module_file']
    shell:
        """
        if [ -s {input.sam_pairs} ]
        then
            picard  SamToFastq VALIDATION_STRINGENCY=SILENT I={input.sam_pairs} F={output.pairs_R1} F2={output.pairs_R2}
        else
            echo "{input.sam_pairs} is empty."
            touch {output.pairs_R1}
            touch {output.pairs_R2}
        fi
        if [ -s {input.sam_WI} ]
        then
            picard SamToFastq  VALIDATION_STRINGENCY=SILENT I={input.sam_WI} F={output.WI}
        else
            echo "{input.sam_WI} is empty."
            touch {output.WI}
        fi
        """

rule bwa_index:
    threads: 4
    input:
        reference_genome = config["host_genome"]
    output:
        index = f'{config["host_genome"]}.amb'
    log:
        f"{output_directory}/logs/01_read_processing/06_filtered_fastq_host_genome_mapping/host_genome_index.log"
    envmodules: config['module_file']
    shell:
        """
        bwa index {input.reference_genome} 2> {log}
        """

rule bwa_genome_host_mapping:
    threads: 4
    input:
        reference_genome = config["host_genome"],
        reference_genome_index = rules.bwa_index.output.index,
        R1 = rules.Extract_Unmapped_bact_Reads.output.pairs_R1,
        R2 = rules.Extract_Unmapped_bact_Reads.output.pairs_R2,
        WI = rules.Extract_Unmapped_bact_Reads.output.WI
    output:
        mapped_sam = temp(f"{output_directory}/01_read_processing/06_filtered_fastq_host_genome_mapping/filtered_bacteria_{{smp}}.sam"),
        WI_sam = temp(f"{output_directory}/01_read_processing/06_filtered_fastq_host_genome_mapping/filtered_bacteria_{{smp}}widows.sam")
    log:
        f"{output_directory}/logs/01_read_processing/06_filtered_fastq_host_genome_mapping/{{smp}}_host_genome_mapping.log"
    envmodules: config['module_file']
    shell:
        """
        if [ -s {input.R1} ] && [ -s {input.R2} ]
        then
            bwa mem -t {threads} {input.reference_genome} {input.R1} {input.R2} 2> {log} | samtools view -f 0x4 -> {output.mapped_sam}
        else
            echo "{input.R1} or {input.R2} is empty."
            touch {output.mapped_sam}
        fi

        if [ -s {input.WI} ]
        then
            bwa mem -t {threads} {input.reference_genome} {input.WI} 2> {log} | samtools view -f 0x4 -> {output.WI_sam}
        else
            echo "{input.WI} is empty."
            touch {output.WI_sam}
        fi
        """




rule Extract_Unmapped_genome_host_Reads:
    input:
        sam_pairs = rules.bwa_genome_host_mapping.output.mapped_sam,
        sam_WI =  rules.bwa_genome_host_mapping.output.WI_sam
    output:
        new_R1 =  temp(f"{output_directory}/01_read_processing/06_filtered_fastq_host_genome_mapping/filtered_bacteria_{{smp}}_R1.fastq"),
        new_R2 =  temp(f"{output_directory}/01_read_processing/06_filtered_fastq_host_genome_mapping/filtered_bacteria_{{smp}}_R2.fastq"),
        WI=  temp(f"{output_directory}/01_read_processing/06_filtered_fastq_host_genome_mapping/filtered_bacteria_{{smp}}_widows.fastq")
    benchmark:
        f"{output_directory}/benchmarks/{{smp}}.filtered_fastq_genome_host_mapping.benchmark.txt"
    envmodules: config['module_file']
    shell:
        """
        if [ -s {input.sam_pairs} ]
        then
            picard  SamToFastq VALIDATION_STRINGENCY=SILENT I={input.sam_pairs} F={output.new_R1} F2={output.new_R2}
        else
            echo "{input.sam_pairs} is empty."
            touch {output.new_R1}
            touch {output.new_R2}
        fi
        if [ -s {input.sam_WI} ]
        then
            picard SamToFastq  VALIDATION_STRINGENCY=SILENT I={input.sam_WI} F={output.WI}
        else
            echo "{input.sam_WI} is empty."
            touch {output.WI}
        fi
        """
 # Extract some stats (logs) from the cleaning steps

def stat_genome(wildcards):
    """ Change stat if they have no mapping on genome host"""
    dico_input = {}
    if config['host_genome'] == "":
        dico_input['stat_R1_genome'] = 'echo "host_genome_pair_R1 : 0"  >> {output.stat_conta};'
        dico_input['stat_R2_genome'] = 'echo "host_genome_pairs_R2 : 0" >> {output.stat_conta} ;'
        dico_input['stat_WI_genome'] = 'echo "host_genome_pair_wi : 0"  >> {output.stat_conta} ;'
    else:
        dico_input[
            'stat_R1_genome'] = """awk '{{s++}}END{{print "host_genome_pairs_R1 : " s/4}}' {input.genome_host_R1} >> {output.stat_conta};"""
        dico_input[
            'stat_R2_genome'] = """awk '{{s++}}END{{print "host_genome_pairs_R2 : " s/4}}' {input.genome_host_R2} >> {output.stat_conta};"""
        dico_input[
            'stat_WI_genome'] = """awk '{{s++}}END{{print "host_genome_pair_wi : " s/4}}' {input.genome_host_WI} >> {output.stat_conta};"""
    return (dico_input)

def input_genome(wildcards):
    """ Change input if they have no mapping on genome host"""
    dico_input = { 'host_pairs_R1': rules.Extract_Unmapped_host_Reads.output.pairs_R1,
        'host_pairs_R2': rules.Extract_Unmapped_host_Reads.output.pairs_R2,
        'host_WI': rules.Extract_Unmapped_host_Reads.output.WI,
        'bact_pairs_R1': rules.Extract_Unmapped_bact_Reads.output.pairs_R1,
        'bact_pairs_R2': rules.Extract_Unmapped_bact_Reads.output.pairs_R2,
        'bact_WI': rules.Extract_Unmapped_bact_Reads.output.WI ,
        'genome_host_R1': rules.Extract_Unmapped_bact_Reads.output.pairs_R1,
        'genome_host_R2': rules.Extract_Unmapped_bact_Reads.output.pairs_R2,
        'genome_host_WI': rules.Extract_Unmapped_bact_Reads.output.WI                   }
    if config['host_genome'] != "":
        dico_input['genome_host_R1'] = rules.Extract_Unmapped_genome_host_Reads.output.new_R1
        dico_input['genome_host_R2'] = rules.Extract_Unmapped_genome_host_Reads.output.new_R2
        dico_input['genome_host_WI'] = rules.Extract_Unmapped_genome_host_Reads.output.WI
    return(dico_input)

rule log_map_conta:
    input:
        unpack(input_genome)
    output:
        stat_conta = f"{output_directory}/logs/01_read_processing/Stats_contaminent_{{smp}}.txt"
    params:
        calc = "s/4" if config['host_genome'] != "" else "0"
    envmodules: config['module_file']
    shell:
        """
        awk '{{s++}}END{{print "Host_pair_R1 : " s/4}}' {input.host_pairs_R1} >> {output.stat_conta};
        awk '{{s++}}END{{print "Host_pairs_R2 : " s/4}}' {input.host_pairs_R2} >> {output.stat_conta};
        awk '{{s++}}END{{print "Host_pair_wi : " s/4}}' {input.host_WI} >> {output.stat_conta};
        awk '{{s++}}END{{print "bact_pair_R1 : " s/4}}' {input.bact_pairs_R1} >> {output.stat_conta};
        awk '{{s++}}END{{print "bact_pairs_R2 : " s/4}}' {input.bact_pairs_R2} >> {output.stat_conta};
        awk '{{s++}}END{{print "bact_pair_wi : " s/4}}' {input.bact_WI} >> {output.stat_conta};
        awk '{{s++}}END{{print "host_genome_pairs_R1 : " {params.calc}}}' {input.genome_host_R1} >> {output.stat_conta};
        awk '{{s++}}END{{print "host_genome_pairs_R2 : " {params.calc}}}' {input.genome_host_R2} >> {output.stat_conta};
        awk '{{s++}}END{{print "host_genome_pair_wi : " {params.calc}}}' {input.genome_host_WI} >> {output.stat_conta};
        """

def verif_mapping(wildcards):
    """Check if host genome mapping is enable"""
    dico_input = {}
    if config["host_genome"] == "":
        dico_input['pairs_R1'] = rules.Extract_Unmapped_bact_Reads.output.pairs_R1
        dico_input['pairs_R2'] = rules.Extract_Unmapped_bact_Reads.output.pairs_R2
    else:
        dico_input['pairs_R1'] = rules.Extract_Unmapped_genome_host_Reads.output.new_R1
        dico_input['pairs_R2'] = rules.Extract_Unmapped_genome_host_Reads.output.new_R2
    return(dico_input)

# Merge paired-end reads , 3 files where created on with de merde pairs and two for the unmerged R1 and R2
rule Merge_Pairs_With_Flash:
    input:
        unpack(verif_mapping)
    params:
        directory = f"{output_directory}/01_read_processing/07_flash_merge_pair/",
        prefix = f"{{smp}}",
        flash = scriptdir+"flash"
    output:
        ext = f"{output_directory}/01_read_processing/07_flash_merge_pair/{{smp}}.extendedFrags.fastq",
        R1 = f"{output_directory}/01_read_processing/07_flash_merge_pair/{{smp}}.notCombined_1.fastq",
        R2 = f"{output_directory}/01_read_processing/07_flash_merge_pair/{{smp}}.notCombined_2.fastq"
    benchmark:
        f"{output_directory}/benchmarks/{{smp}}.flash_merge.benchmark.txt"
    log:
        f"{output_directory}/logs/01_read_processing/07_flash_merge_pair/{{smp}}_flash.log"
    envmodules: config['module_file']
    shell:
        """
        flash -M 250 {input.pairs_R1} {input.pairs_R2} -d {params.directory} -o {params.prefix} &> {log}
        """

def input_wi(wildcards):
    """Check if host genome mapping is enable"""
    dico_input = {"Merged" : rules.Merge_Pairs_With_Flash.output.ext}
    if config["host_genome"] == "":
        dico_input['WI'] = rules.Extract_Unmapped_bact_Reads.output.WI
    else:
        dico_input['WI'] = rules.Extract_Unmapped_genome_host_Reads.output.WI
    return(dico_input)
# Create a single file for merge and windows reads
rule Concatenate_Widows_And_Merged:
    input:
       unpack(input_wi)
    output:
        final = f"{output_directory}/01_read_processing/08_concat_single/{{smp}}_widows.fastq"
    benchmark:
        f"{output_directory}/benchmarks/{{smp}}.concat_single.benchmark.txt"
    envmodules: config['module_file']
    shell:
        """
        cat {input.Merged} {input.WI} > {output.final}
        """


#At the end of this first cleaning step, three fastq files are produced. A merger reads and widows reads file (... merged_widows.fastq) and two files for unconcanate read  (...notCombined_1.fastq, ...notCombined_2.fastq")
