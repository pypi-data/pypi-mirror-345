# coding: utf-8

"""
    Zakazy FBS

    <div class=\"description_important\">       Uznat bolhe o zakazah FBS mohno v <a href=\"https://seller.wildberries.ru/instructions/category/b3e60238-fd4c-49ce-8668-ff688725a12d?goBackOption=prevRoute&categoryId=5a8e1202-0865-45b7-acae-5d0afc7add56\">spravohnom centre</a> </div>  V razdele zakazov FBS (Fulfillment by Seller) vam dostupny metody:   1. Upravlenia [sborohnymi zadaniami](/openapi/orders-fbs#tag/Sborochnye-zadaniya): informacia o sborohnyh zadaniah, metadannye, stikery i tak dalee.   2. Upravlenia [postavkami zakazov](/openapi/orders-fbs#tag/Postavki-FBS) prodavca na sklady WB.   3. Zakaza [propuskov](/openapi/orders-fbs#tag/Propuska) na sklady WB.   4. Dostavki zakazov [kurerom WB](/openapi/orders-fbs#tag/Dostavka-kurerom-WB-(DBW)) (DBW).   # noqa: E501

    OpenAPI spec version: order
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2007Statuses(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'code': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'code': 'code'
    }

    def __init__(self, _date=None, code=None):  # noqa: E501
        """InlineResponse2007Statuses - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._code = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if code is not None:
            self.code = code

    @property
    def _date(self):
        """Gets the _date of this InlineResponse2007Statuses.  # noqa: E501

        Data prisvoenia statusa  # noqa: E501

        :return: The _date of this InlineResponse2007Statuses.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse2007Statuses.

        Data prisvoenia statusa  # noqa: E501

        :param _date: The _date of this InlineResponse2007Statuses.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def code(self):
        """Gets the code of this InlineResponse2007Statuses.  # noqa: E501

        Status-kod sborohnogo zadania/zakaza:   - `accepted_by_carrier` — Tovar prinat perevozhikom   - `assembling` — Otpravlen na sborku   - `assembled` — Sobran na sklade   - `sorted` — Otsortirovan   - `replaced_at_warehouse` — Zamena na sklade   - `prepared_for_shipment` — Podgotovlen k otgruzke   - `in_search` — Na poiske   - `arrived_at_dct` — Postupil v raspredelitelnyi centr-tranzit   - `arrived_at_sct` — Postupil v sortirovohnyi centr-tranzit   - `arrived_at_dc` — Postupil v raspredelitelnyi centr   - `arrived_at_sc` — Postupil v sortirovohnyi centr   - `prepared_for_shipment_at_sc` — Podgotovlen k otgruzke v sortirovohnom centre   - `shipped_at_sc` — Otgruheno sortirovohnym centrom   - `shipped_at_dct` — Otgruhen raspredelitelnym centrom — tranzit   - `shipped_at_dc` — Otgruhen raspredelitelnym centrom   - `delivered_at_sc` — Dostavlen v sortirovohnyi/raspredelitelnyi centr (Sc/Rc)   - `on_way_to_sc` — V puti v sortirovohnyi centr   - `on_way_to_dc` — V puti v raspredelitelnyi centr   - `on_way_to_pp` — V puti na punkt vydahi   - `arrived_at_pp` — Pribyl na punkt vydahi   - `accepted_at_pp` — Priemka v punkte vydahi   - `ready_for_pick_up` — Gotov k vydahe   - `arrived_at_pp` — Postupil na punkt vydahi zakazov (PVZ)   - `received_by_client` — Poluhen klientom   - `delivered_at_parcel_locker` — Dostavlen v postamat   - `canceled_by_client` — Pokupatel otmenil zakaz pri poluhenii   - `cancel_after_expiration` — Otmena po sroku hranenia   - `at_courier` — Peredan kureru   - `moved_to_return_box` — Peremehen v vozvratnuu korobku   - `accepted_for_return` — Prinat k vozvratu na PVZ   - `created` — Oformlen   - `canceled_by_seller` — Otmenen prodavcom   - `dispatched_by_seller` — Otgruheno po dannym prodavca   - `delivered` — Zakaz vydan   - `on_way` — V puti   - `arrived_at_wb_wh` — Postupil na sklad WB   - `dispatched_from_wh` — Otpravlen so sklada   - `customs_clearance` — Tamohennoe oformlenie   - `customs_clearance_completed` — Vypuhen tamohnei   - `departed_from_origin_country` — Otpravlen iz strany prodavca   - `arrived_in_destination_country` — Pribytie v stranu naznahenia   - `on_way_to_wb_sc` — Otpravlen do sortirovohnogo centra (Sc) WB   - `accepted_at_wb_sc` — Prinat Sc WB   - `canceled` — Otmena   - `failed_to_reach_client` — Ne dozvonilis do klienta   # noqa: E501

        :return: The code of this InlineResponse2007Statuses.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this InlineResponse2007Statuses.

        Status-kod sborohnogo zadania/zakaza:   - `accepted_by_carrier` — Tovar prinat perevozhikom   - `assembling` — Otpravlen na sborku   - `assembled` — Sobran na sklade   - `sorted` — Otsortirovan   - `replaced_at_warehouse` — Zamena na sklade   - `prepared_for_shipment` — Podgotovlen k otgruzke   - `in_search` — Na poiske   - `arrived_at_dct` — Postupil v raspredelitelnyi centr-tranzit   - `arrived_at_sct` — Postupil v sortirovohnyi centr-tranzit   - `arrived_at_dc` — Postupil v raspredelitelnyi centr   - `arrived_at_sc` — Postupil v sortirovohnyi centr   - `prepared_for_shipment_at_sc` — Podgotovlen k otgruzke v sortirovohnom centre   - `shipped_at_sc` — Otgruheno sortirovohnym centrom   - `shipped_at_dct` — Otgruhen raspredelitelnym centrom — tranzit   - `shipped_at_dc` — Otgruhen raspredelitelnym centrom   - `delivered_at_sc` — Dostavlen v sortirovohnyi/raspredelitelnyi centr (Sc/Rc)   - `on_way_to_sc` — V puti v sortirovohnyi centr   - `on_way_to_dc` — V puti v raspredelitelnyi centr   - `on_way_to_pp` — V puti na punkt vydahi   - `arrived_at_pp` — Pribyl na punkt vydahi   - `accepted_at_pp` — Priemka v punkte vydahi   - `ready_for_pick_up` — Gotov k vydahe   - `arrived_at_pp` — Postupil na punkt vydahi zakazov (PVZ)   - `received_by_client` — Poluhen klientom   - `delivered_at_parcel_locker` — Dostavlen v postamat   - `canceled_by_client` — Pokupatel otmenil zakaz pri poluhenii   - `cancel_after_expiration` — Otmena po sroku hranenia   - `at_courier` — Peredan kureru   - `moved_to_return_box` — Peremehen v vozvratnuu korobku   - `accepted_for_return` — Prinat k vozvratu na PVZ   - `created` — Oformlen   - `canceled_by_seller` — Otmenen prodavcom   - `dispatched_by_seller` — Otgruheno po dannym prodavca   - `delivered` — Zakaz vydan   - `on_way` — V puti   - `arrived_at_wb_wh` — Postupil na sklad WB   - `dispatched_from_wh` — Otpravlen so sklada   - `customs_clearance` — Tamohennoe oformlenie   - `customs_clearance_completed` — Vypuhen tamohnei   - `departed_from_origin_country` — Otpravlen iz strany prodavca   - `arrived_in_destination_country` — Pribytie v stranu naznahenia   - `on_way_to_wb_sc` — Otpravlen do sortirovohnogo centra (Sc) WB   - `accepted_at_wb_sc` — Prinat Sc WB   - `canceled` — Otmena   - `failed_to_reach_client` — Ne dozvonilis do klienta   # noqa: E501

        :param code: The code of this InlineResponse2007Statuses.  # noqa: E501
        :type: str
        """

        self._code = code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2007Statuses, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2007Statuses):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
