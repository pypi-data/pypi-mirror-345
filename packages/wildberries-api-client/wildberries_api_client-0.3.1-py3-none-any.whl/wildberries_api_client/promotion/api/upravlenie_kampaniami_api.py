# coding: utf-8

"""
    Marketing i prodvihenie

    <div class=\"description_important\">       Uznat bolhe o marketinge i prodvihenii mohno v <a href=\"https://seller.wildberries.ru/instructions/category/59d92bd3-6ea0-40f2-b762-ca8835d7d42e?goBackOption=prevRoute&categoryId=479385c6-de01-4b4d-ad4e-ed941e65582e\">spravohnom centre</a> </div>    Metody marketinga i prodvihenia pozvolaut:   1. Poluhat informaciu o [reklamnyh kampaniah](/openapi/promotion#tag/Kampanii) i [mediakampaniah](/openapi/promotion#tag/Media).   2. [Sozdavat](/openapi/promotion#tag/Sozdanie-kampanij) i [upravlat](/openapi/promotion#tag/Upravlenie-kampaniyami) kampaniami.   3. Nastraivat [parametry kampanii](/openapi/promotion#tag/Parametry-kampanij) — klastery fraz, prodvigaemye tovary i tak dalee.   4. Upravlat [finansami kampanii](/openapi/promotion#tag/Finansy).   5. Rabotat s [kalendarem akcii](/openapi/promotion#tag/Kalendar-akcij).  Dannye sinhroniziruutsa s bazoi raz v 3 minuty. Statusy kampanii menautsa raz v minutu. Stavki kampanii menautsa raz v 30 sekund.   # noqa: E501

    OpenAPI spec version: promotion
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.promotion.api_client import ApiClient


class UpravlenieKampaniamiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adv_v0_bids_patch(self, body, **kwargs):  # noqa: E501
        """Izmenenie stavok kartohek tovarov  # noqa: E501

        Metod menaet stavki kartohek tovarov po artikulam WB v avtomatiheskih kampaniah i Aukcione. <br><br>  Dla kampanii v lubom statuse krome `-1`, `7` i `8` <br>  Minimalno dopustimye stavki dla kategorii tovarov i tipov kampanii sm. v otvete metoda [konfiguracionnyh znahenii](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v0~1config/get) <br> <div class=\"description_limit\">     Maksimum 5 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>             # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_bids_patch(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V0BidsBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_bids_patch_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_bids_patch_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def adv_v0_bids_patch_with_http_info(self, body, **kwargs):  # noqa: E501
        """Izmenenie stavok kartohek tovarov  # noqa: E501

        Metod menaet stavki kartohek tovarov po artikulam WB v avtomatiheskih kampaniah i Aukcione. <br><br>  Dla kampanii v lubom statuse krome `-1`, `7` i `8` <br>  Minimalno dopustimye stavki dla kategorii tovarov i tipov kampanii sm. v otvete metoda [konfiguracionnyh znahenii](/openapi/promotion#tag/Sozdanie-kampanij/paths/~1adv~1v0~1config/get) <br> <div class=\"description_limit\">     Maksimum 5 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>             # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_bids_patch_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V0BidsBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_bids_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v0_bids_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/bids', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v0_cpm_post(self, body, **kwargs):  # noqa: E501
        """Izmenenie stavki  # noqa: E501

        Menaet stavku u kampanii.   Stavku mohno izmenit v luboi moment do okonhania kampanii. Izmenennaa [informacia o stavkah kampanii](/openapi/promotion#tag/Kampanii/paths/~1adv~1v1~1promotion~1adverts/post) poavlaetsa v tehenie treh minut. <div class=\"description_important\">   Esli razmer stavki budet menhe dopustimogo, v otvete vy poluhite status-kod <code>422</code> — razmer stavki ne izmenen. </div>         Pri izmenenii stavki dla kampanii s tipom `9` — Aukcion:    1. Znahenie `type` vsegda budet `9`   1. Znahenie `instrument` vsegda budet `6` (<strong>ustarevhii tip kampanii</strong>).   1. Znahenie `param` vsegda beretsa iz pola `id` struktury `subject` v [informacii o kampanii](/openapi/promotion#tag/Kampanii/paths/~1adv~1v1~1promotion~1adverts/post).  <div class=\"description_limit\">     Maksimum 5 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_cpm_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V0CpmBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_cpm_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_cpm_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def adv_v0_cpm_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Izmenenie stavki  # noqa: E501

        Menaet stavku u kampanii.   Stavku mohno izmenit v luboi moment do okonhania kampanii. Izmenennaa [informacia o stavkah kampanii](/openapi/promotion#tag/Kampanii/paths/~1adv~1v1~1promotion~1adverts/post) poavlaetsa v tehenie treh minut. <div class=\"description_important\">   Esli razmer stavki budet menhe dopustimogo, v otvete vy poluhite status-kod <code>422</code> — razmer stavki ne izmenen. </div>         Pri izmenenii stavki dla kampanii s tipom `9` — Aukcion:    1. Znahenie `type` vsegda budet `9`   1. Znahenie `instrument` vsegda budet `6` (<strong>ustarevhii tip kampanii</strong>).   1. Znahenie `param` vsegda beretsa iz pola `id` struktury `subject` v [informacii o kampanii](/openapi/promotion#tag/Kampanii/paths/~1adv~1v1~1promotion~1adverts/post).  <div class=\"description_limit\">     Maksimum 5 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_cpm_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V0CpmBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_cpm_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v0_cpm_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/cpm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v0_delete_get(self, id, **kwargs):  # noqa: E501
        """Udalenie kampanii  # noqa: E501

        Metod udalaet [kampanii](/openapi/promotion#tag/Kampanii/paths/~1adv~1v1~1promotion~1adverts/post) v statuse `4` — gotova k zapusku.<br><br>  Posle udalenia kampania nekotoroe vrema budet nahoditsa v statuse `-1` — kampania v processe udalenia. Polnoe udalenie kampanii zanimaet ot 3 do 10 minut.  <div class=\"description_limit\">     Maksimum 5 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_delete_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_delete_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_delete_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def adv_v0_delete_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Udalenie kampanii  # noqa: E501

        Metod udalaet [kampanii](/openapi/promotion#tag/Kampanii/paths/~1adv~1v1~1promotion~1adverts/post) v statuse `4` — gotova k zapusku.<br><br>  Posle udalenia kampania nekotoroe vrema budet nahoditsa v statuse `-1` — kampania v processe udalenia. Polnoe udalenie kampanii zanimaet ot 3 do 10 minut.  <div class=\"description_limit\">     Maksimum 5 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_delete_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_delete_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v0_delete_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/delete', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v0_pause_get(self, id, **kwargs):  # noqa: E501
        """Pauza kampanii  # noqa: E501

        Metod stavit [kampanii](/openapi/promotion#tag/Kampanii/paths/~1adv~1v1~1promotion~1adverts/post) v statuse `9` — idut pokazy — na pauzu.  <div class=\"description_limit\">     Maksimum 5 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_pause_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_pause_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_pause_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def adv_v0_pause_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Pauza kampanii  # noqa: E501

        Metod stavit [kampanii](/openapi/promotion#tag/Kampanii/paths/~1adv~1v1~1promotion~1adverts/post) v statuse `9` — idut pokazy — na pauzu.  <div class=\"description_limit\">     Maksimum 5 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_pause_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_pause_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v0_pause_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/pause', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v0_rename_post(self, **kwargs):  # noqa: E501
        """Pereimenovanie kampanii  # noqa: E501

        Metod menaet nazvanie [kampanii](/openapi/promotion#tag/Kampanii/paths/~1adv~1v1~1promotion~1adverts/post). Eto mohno sdelat v luboi moment suhestvovania kampanii.  <div class=\"description_limit\">     Maksimum 5 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_rename_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V0RenameBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_rename_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_rename_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def adv_v0_rename_post_with_http_info(self, **kwargs):  # noqa: E501
        """Pereimenovanie kampanii  # noqa: E501

        Metod menaet nazvanie [kampanii](/openapi/promotion#tag/Kampanii/paths/~1adv~1v1~1promotion~1adverts/post). Eto mohno sdelat v luboi moment suhestvovania kampanii.  <div class=\"description_limit\">     Maksimum 5 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_rename_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V0RenameBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_rename_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/rename', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v0_start_get(self, id, **kwargs):  # noqa: E501
        """Zapusk kampanii  # noqa: E501

        Metod zapuskaet [kampanii](/openapi/promotion#tag/Kampanii/paths/~1adv~1v1~1promotion~1adverts/post) v statusah `4` — odobreno — ili `11` — pauza po rashodu budheta.  htoby zapustit kampaniu so statusom `4`, neobhodimo vypolnit dva uslovia:   1. Posle sozdania kampanii v kabinete **WB. Prodvihenie** nahat knopku **Primenit izmenenia**.   2. Ustanovit budhet — maksimalnuu summu zatrat na kampaniu.  htoby zapustit kampaniu so statusom `11`, [popolnite ee budhet](/openapi/promotion#tag/Finansy/paths/~1adv~1v1~1budget~1deposit/post).  <div class=\"description_limit\">     Maksimum 5 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_start_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_start_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_start_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def adv_v0_start_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Zapusk kampanii  # noqa: E501

        Metod zapuskaet [kampanii](/openapi/promotion#tag/Kampanii/paths/~1adv~1v1~1promotion~1adverts/post) v statusah `4` — odobreno — ili `11` — pauza po rashodu budheta.  htoby zapustit kampaniu so statusom `4`, neobhodimo vypolnit dva uslovia:   1. Posle sozdania kampanii v kabinete **WB. Prodvihenie** nahat knopku **Primenit izmenenia**.   2. Ustanovit budhet — maksimalnuu summu zatrat na kampaniu.  htoby zapustit kampaniu so statusom `11`, [popolnite ee budhet](/openapi/promotion#tag/Finansy/paths/~1adv~1v1~1budget~1deposit/post).  <div class=\"description_limit\">     Maksimum 5 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_start_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_start_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v0_start_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/start', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v0_stop_get(self, id, **kwargs):  # noqa: E501
        """Zaverhenie kampanii  # noqa: E501

        Metod zaverhaet [kampanii](/openapi/promotion#tag/Kampanii/paths/~1adv~1v1~1promotion~1adverts/post) v statusah:   - `4` — odobreno   - `9` — priostanovlena prodavcom   - `11` — pauza po rashodu budheta    <div class=\"description_limit\">     Maksimum 5 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_stop_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_stop_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_stop_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def adv_v0_stop_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Zaverhenie kampanii  # noqa: E501

        Metod zaverhaet [kampanii](/openapi/promotion#tag/Kampanii/paths/~1adv~1v1~1promotion~1adverts/post) v statusah:   - `4` — odobreno   - `9` — priostanovlena prodavcom   - `11` — pauza po rashodu budheta    <div class=\"description_limit\">     Maksimum 5 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_stop_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_stop_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v0_stop_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/stop', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
