# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NmReportGroupedHistoryResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'NmReportGroupedHistoryResponseObject',
        'brand_name': 'str',
        'tag': 'NmReportGroupedHistoryResponseTag',
        'history': 'list[NmReportGroupedHistoryResponseHistory]'
    }

    attribute_map = {
        'object': 'object',
        'brand_name': 'brandName',
        'tag': 'tag',
        'history': 'history'
    }

    def __init__(self, object=None, brand_name=None, tag=None, history=None):  # noqa: E501
        """NmReportGroupedHistoryResponseData - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._brand_name = None
        self._tag = None
        self._history = None
        self.discriminator = None
        if object is not None:
            self.object = object
        if brand_name is not None:
            self.brand_name = brand_name
        if tag is not None:
            self.tag = tag
        if history is not None:
            self.history = history

    @property
    def object(self):
        """Gets the object of this NmReportGroupedHistoryResponseData.  # noqa: E501


        :return: The object of this NmReportGroupedHistoryResponseData.  # noqa: E501
        :rtype: NmReportGroupedHistoryResponseObject
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this NmReportGroupedHistoryResponseData.


        :param object: The object of this NmReportGroupedHistoryResponseData.  # noqa: E501
        :type: NmReportGroupedHistoryResponseObject
        """

        self._object = object

    @property
    def brand_name(self):
        """Gets the brand_name of this NmReportGroupedHistoryResponseData.  # noqa: E501

        Brend  # noqa: E501

        :return: The brand_name of this NmReportGroupedHistoryResponseData.  # noqa: E501
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this NmReportGroupedHistoryResponseData.

        Brend  # noqa: E501

        :param brand_name: The brand_name of this NmReportGroupedHistoryResponseData.  # noqa: E501
        :type: str
        """

        self._brand_name = brand_name

    @property
    def tag(self):
        """Gets the tag of this NmReportGroupedHistoryResponseData.  # noqa: E501


        :return: The tag of this NmReportGroupedHistoryResponseData.  # noqa: E501
        :rtype: NmReportGroupedHistoryResponseTag
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this NmReportGroupedHistoryResponseData.


        :param tag: The tag of this NmReportGroupedHistoryResponseData.  # noqa: E501
        :type: NmReportGroupedHistoryResponseTag
        """

        self._tag = tag

    @property
    def history(self):
        """Gets the history of this NmReportGroupedHistoryResponseData.  # noqa: E501


        :return: The history of this NmReportGroupedHistoryResponseData.  # noqa: E501
        :rtype: list[NmReportGroupedHistoryResponseHistory]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this NmReportGroupedHistoryResponseData.


        :param history: The history of this NmReportGroupedHistoryResponseData.  # noqa: E501
        :type: list[NmReportGroupedHistoryResponseHistory]
        """

        self._history = history

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NmReportGroupedHistoryResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NmReportGroupedHistoryResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
