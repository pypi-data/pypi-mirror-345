# coding: utf-8

"""
    Zakazy DBS

    <div class=\"description_important\">       Uznat bolhe o zakazah DBS mohno v <a href=\"https://seller.wildberries.ru/instructions/category/6572e024-7428-4db1-86a8-a4c7dbebbfcf?goBackOption=prevRoute&categoryId=5a8e1202-0865-45b7-acae-5d0afc7add56\">spravohnom centre</a> </div>  Upravlenie [sborohnymi zadaniami](/openapi/orders-dbs#tag/Sborochnye-zadaniya-DBS) i [metadannymi](/openapi/orders-dbs#tag/Metadannye-DBS) zakazov DBS (Delivery by Seller).   # noqa: E501

    OpenAPI spec version: order
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderNewDBS(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'OrderNewDBSAddress',
        'sale_price': 'int',
        'required_meta': 'list[str]',
        'delivery_type': 'str',
        'comment': 'str',
        'options': 'OrderNewDBSOptions',
        'order_uid': 'str',
        'article': 'str',
        'color_code': 'str',
        'rid': 'str',
        'created_at': 'str',
        'skus': 'list[str]',
        'id': 'int',
        'warehouse_id': 'int',
        'nm_id': 'int',
        'chrt_id': 'int',
        'price': 'int',
        'converted_price': 'int',
        'currency_code': 'int',
        'converted_currency_code': 'int',
        'cargo_type': 'int',
        'is_zero_order': 'object'
    }

    attribute_map = {
        'address': 'address',
        'sale_price': 'salePrice',
        'required_meta': 'requiredMeta',
        'delivery_type': 'deliveryType',
        'comment': 'comment',
        'options': 'options',
        'order_uid': 'orderUid',
        'article': 'article',
        'color_code': 'colorCode',
        'rid': 'rid',
        'created_at': 'createdAt',
        'skus': 'skus',
        'id': 'id',
        'warehouse_id': 'warehouseId',
        'nm_id': 'nmId',
        'chrt_id': 'chrtId',
        'price': 'price',
        'converted_price': 'convertedPrice',
        'currency_code': 'currencyCode',
        'converted_currency_code': 'convertedCurrencyCode',
        'cargo_type': 'cargoType',
        'is_zero_order': 'isZeroOrder'
    }

    def __init__(self, address=None, sale_price=None, required_meta=None, delivery_type=None, comment=None, options=None, order_uid=None, article=None, color_code=None, rid=None, created_at=None, skus=None, id=None, warehouse_id=None, nm_id=None, chrt_id=None, price=None, converted_price=None, currency_code=None, converted_currency_code=None, cargo_type=None, is_zero_order=None):  # noqa: E501
        """OrderNewDBS - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._sale_price = None
        self._required_meta = None
        self._delivery_type = None
        self._comment = None
        self._options = None
        self._order_uid = None
        self._article = None
        self._color_code = None
        self._rid = None
        self._created_at = None
        self._skus = None
        self._id = None
        self._warehouse_id = None
        self._nm_id = None
        self._chrt_id = None
        self._price = None
        self._converted_price = None
        self._currency_code = None
        self._converted_currency_code = None
        self._cargo_type = None
        self._is_zero_order = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if sale_price is not None:
            self.sale_price = sale_price
        if required_meta is not None:
            self.required_meta = required_meta
        if delivery_type is not None:
            self.delivery_type = delivery_type
        if comment is not None:
            self.comment = comment
        if options is not None:
            self.options = options
        if order_uid is not None:
            self.order_uid = order_uid
        if article is not None:
            self.article = article
        if color_code is not None:
            self.color_code = color_code
        if rid is not None:
            self.rid = rid
        if created_at is not None:
            self.created_at = created_at
        if skus is not None:
            self.skus = skus
        if id is not None:
            self.id = id
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if nm_id is not None:
            self.nm_id = nm_id
        if chrt_id is not None:
            self.chrt_id = chrt_id
        if price is not None:
            self.price = price
        if converted_price is not None:
            self.converted_price = converted_price
        if currency_code is not None:
            self.currency_code = currency_code
        if converted_currency_code is not None:
            self.converted_currency_code = converted_currency_code
        if cargo_type is not None:
            self.cargo_type = cargo_type
        if is_zero_order is not None:
            self.is_zero_order = is_zero_order

    @property
    def address(self):
        """Gets the address of this OrderNewDBS.  # noqa: E501


        :return: The address of this OrderNewDBS.  # noqa: E501
        :rtype: OrderNewDBSAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this OrderNewDBS.


        :param address: The address of this OrderNewDBS.  # noqa: E501
        :type: OrderNewDBSAddress
        """

        self._address = address

    @property
    def sale_price(self):
        """Gets the sale_price of this OrderNewDBS.  # noqa: E501

        cena v valute prodahi s uhetom skidki prodavca, bez uheta skidki WB Kluba, umnohennaa na 100   # noqa: E501

        :return: The sale_price of this OrderNewDBS.  # noqa: E501
        :rtype: int
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price):
        """Sets the sale_price of this OrderNewDBS.

        cena v valute prodahi s uhetom skidki prodavca, bez uheta skidki WB Kluba, umnohennaa na 100   # noqa: E501

        :param sale_price: The sale_price of this OrderNewDBS.  # noqa: E501
        :type: int
        """

        self._sale_price = sale_price

    @property
    def required_meta(self):
        """Gets the required_meta of this OrderNewDBS.  # noqa: E501

        Perehen metadannyh, kotorye neobhodimo dobavit v sborohnoe zadanie.  <br> Na dannyi moment obazatelnym k dobavleniu avlaetsa tolko UIN, pri ego nalihii v perehne.                # noqa: E501

        :return: The required_meta of this OrderNewDBS.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_meta

    @required_meta.setter
    def required_meta(self, required_meta):
        """Sets the required_meta of this OrderNewDBS.

        Perehen metadannyh, kotorye neobhodimo dobavit v sborohnoe zadanie.  <br> Na dannyi moment obazatelnym k dobavleniu avlaetsa tolko UIN, pri ego nalihii v perehne.                # noqa: E501

        :param required_meta: The required_meta of this OrderNewDBS.  # noqa: E501
        :type: list[str]
        """

        self._required_meta = required_meta

    @property
    def delivery_type(self):
        """Gets the delivery_type of this OrderNewDBS.  # noqa: E501

        <dl> <dt>Tip dostavki:</dt> <dd><code>dbs</code> - dostavka silami prodavca</dd> <dd><code>edbs</code> - ekspress-dostavka silami prodavca</dd> </dl>   # noqa: E501

        :return: The delivery_type of this OrderNewDBS.  # noqa: E501
        :rtype: str
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this OrderNewDBS.

        <dl> <dt>Tip dostavki:</dt> <dd><code>dbs</code> - dostavka silami prodavca</dd> <dd><code>edbs</code> - ekspress-dostavka silami prodavca</dd> </dl>   # noqa: E501

        :param delivery_type: The delivery_type of this OrderNewDBS.  # noqa: E501
        :type: str
        """
        allowed_values = ["dbs", "edbs"]  # noqa: E501
        if delivery_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_type` ({0}), must be one of {1}"  # noqa: E501
                .format(delivery_type, allowed_values)
            )

        self._delivery_type = delivery_type

    @property
    def comment(self):
        """Gets the comment of this OrderNewDBS.  # noqa: E501

        Kommentarii pokupatela  # noqa: E501

        :return: The comment of this OrderNewDBS.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this OrderNewDBS.

        Kommentarii pokupatela  # noqa: E501

        :param comment: The comment of this OrderNewDBS.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def options(self):
        """Gets the options of this OrderNewDBS.  # noqa: E501


        :return: The options of this OrderNewDBS.  # noqa: E501
        :rtype: OrderNewDBSOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this OrderNewDBS.


        :param options: The options of this OrderNewDBS.  # noqa: E501
        :type: OrderNewDBSOptions
        """

        self._options = options

    @property
    def order_uid(self):
        """Gets the order_uid of this OrderNewDBS.  # noqa: E501

        Identifikator tranzakcii dla gruppirovki sborohnyh zadanii. Sborohnye zadania v odnoi korzine pokupatela budut imet odinakovyi orderUID  # noqa: E501

        :return: The order_uid of this OrderNewDBS.  # noqa: E501
        :rtype: str
        """
        return self._order_uid

    @order_uid.setter
    def order_uid(self, order_uid):
        """Sets the order_uid of this OrderNewDBS.

        Identifikator tranzakcii dla gruppirovki sborohnyh zadanii. Sborohnye zadania v odnoi korzine pokupatela budut imet odinakovyi orderUID  # noqa: E501

        :param order_uid: The order_uid of this OrderNewDBS.  # noqa: E501
        :type: str
        """

        self._order_uid = order_uid

    @property
    def article(self):
        """Gets the article of this OrderNewDBS.  # noqa: E501

        Artikul prodavca  # noqa: E501

        :return: The article of this OrderNewDBS.  # noqa: E501
        :rtype: str
        """
        return self._article

    @article.setter
    def article(self, article):
        """Sets the article of this OrderNewDBS.

        Artikul prodavca  # noqa: E501

        :param article: The article of this OrderNewDBS.  # noqa: E501
        :type: str
        """

        self._article = article

    @property
    def color_code(self):
        """Gets the color_code of this OrderNewDBS.  # noqa: E501

        Kod cveta (tolko dla koleruemyh tovarov)  # noqa: E501

        :return: The color_code of this OrderNewDBS.  # noqa: E501
        :rtype: str
        """
        return self._color_code

    @color_code.setter
    def color_code(self, color_code):
        """Sets the color_code of this OrderNewDBS.

        Kod cveta (tolko dla koleruemyh tovarov)  # noqa: E501

        :param color_code: The color_code of this OrderNewDBS.  # noqa: E501
        :type: str
        """

        self._color_code = color_code

    @property
    def rid(self):
        """Gets the rid of this OrderNewDBS.  # noqa: E501

        Identifikator sborohnogo zadania v sisteme Wildberries  # noqa: E501

        :return: The rid of this OrderNewDBS.  # noqa: E501
        :rtype: str
        """
        return self._rid

    @rid.setter
    def rid(self, rid):
        """Sets the rid of this OrderNewDBS.

        Identifikator sborohnogo zadania v sisteme Wildberries  # noqa: E501

        :param rid: The rid of this OrderNewDBS.  # noqa: E501
        :type: str
        """

        self._rid = rid

    @property
    def created_at(self):
        """Gets the created_at of this OrderNewDBS.  # noqa: E501

        Data sozdania sborohnogo zadania  # noqa: E501

        :return: The created_at of this OrderNewDBS.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OrderNewDBS.

        Data sozdania sborohnogo zadania  # noqa: E501

        :param created_at: The created_at of this OrderNewDBS.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def skus(self):
        """Gets the skus of this OrderNewDBS.  # noqa: E501

        Massiv barkodov tovara  # noqa: E501

        :return: The skus of this OrderNewDBS.  # noqa: E501
        :rtype: list[str]
        """
        return self._skus

    @skus.setter
    def skus(self, skus):
        """Sets the skus of this OrderNewDBS.

        Massiv barkodov tovara  # noqa: E501

        :param skus: The skus of this OrderNewDBS.  # noqa: E501
        :type: list[str]
        """

        self._skus = skus

    @property
    def id(self):
        """Gets the id of this OrderNewDBS.  # noqa: E501

        Identifikator sborohnogo zadania v servise Marketpleis  # noqa: E501

        :return: The id of this OrderNewDBS.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderNewDBS.

        Identifikator sborohnogo zadania v servise Marketpleis  # noqa: E501

        :param id: The id of this OrderNewDBS.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this OrderNewDBS.  # noqa: E501

        Identifikator sklada prodavca, na kotoryi postupilo sborohnoe zadanie  # noqa: E501

        :return: The warehouse_id of this OrderNewDBS.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this OrderNewDBS.

        Identifikator sklada prodavca, na kotoryi postupilo sborohnoe zadanie  # noqa: E501

        :param warehouse_id: The warehouse_id of this OrderNewDBS.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    @property
    def nm_id(self):
        """Gets the nm_id of this OrderNewDBS.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this OrderNewDBS.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this OrderNewDBS.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this OrderNewDBS.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def chrt_id(self):
        """Gets the chrt_id of this OrderNewDBS.  # noqa: E501

        Identifikator razmera WB  # noqa: E501

        :return: The chrt_id of this OrderNewDBS.  # noqa: E501
        :rtype: int
        """
        return self._chrt_id

    @chrt_id.setter
    def chrt_id(self, chrt_id):
        """Sets the chrt_id of this OrderNewDBS.

        Identifikator razmera WB  # noqa: E501

        :param chrt_id: The chrt_id of this OrderNewDBS.  # noqa: E501
        :type: int
        """

        self._chrt_id = chrt_id

    @property
    def price(self):
        """Gets the price of this OrderNewDBS.  # noqa: E501

        cena v valute prodahi s uhetom vseh skidok, umnohennaa na 100. Kod valuty prodahi v pole currencyCode.  # noqa: E501

        :return: The price of this OrderNewDBS.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderNewDBS.

        cena v valute prodahi s uhetom vseh skidok, umnohennaa na 100. Kod valuty prodahi v pole currencyCode.  # noqa: E501

        :param price: The price of this OrderNewDBS.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def converted_price(self):
        """Gets the converted_price of this OrderNewDBS.  # noqa: E501

        cena v valute strany prodavca s uhetom vseh skidok, krome summy po WB Kohelku, umnohennaa na 100. Predostavlaetsa v informacionnyh celah.  # noqa: E501

        :return: The converted_price of this OrderNewDBS.  # noqa: E501
        :rtype: int
        """
        return self._converted_price

    @converted_price.setter
    def converted_price(self, converted_price):
        """Sets the converted_price of this OrderNewDBS.

        cena v valute strany prodavca s uhetom vseh skidok, krome summy po WB Kohelku, umnohennaa na 100. Predostavlaetsa v informacionnyh celah.  # noqa: E501

        :param converted_price: The converted_price of this OrderNewDBS.  # noqa: E501
        :type: int
        """

        self._converted_price = converted_price

    @property
    def currency_code(self):
        """Gets the currency_code of this OrderNewDBS.  # noqa: E501

        Kod valuty prodahi  # noqa: E501

        :return: The currency_code of this OrderNewDBS.  # noqa: E501
        :rtype: int
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this OrderNewDBS.

        Kod valuty prodahi  # noqa: E501

        :param currency_code: The currency_code of this OrderNewDBS.  # noqa: E501
        :type: int
        """

        self._currency_code = currency_code

    @property
    def converted_currency_code(self):
        """Gets the converted_currency_code of this OrderNewDBS.  # noqa: E501

        Kod valuty strany prodavca  # noqa: E501

        :return: The converted_currency_code of this OrderNewDBS.  # noqa: E501
        :rtype: int
        """
        return self._converted_currency_code

    @converted_currency_code.setter
    def converted_currency_code(self, converted_currency_code):
        """Sets the converted_currency_code of this OrderNewDBS.

        Kod valuty strany prodavca  # noqa: E501

        :param converted_currency_code: The converted_currency_code of this OrderNewDBS.  # noqa: E501
        :type: int
        """

        self._converted_currency_code = converted_currency_code

    @property
    def cargo_type(self):
        """Gets the cargo_type of this OrderNewDBS.  # noqa: E501

        <dl> <dt>Tip tovara:</dt> <dd><code>1</code> - MGT (malogabaritnyi, to est obyhnyi tovar)</dd> <dd><code>2</code> - SGT (Sverhgabaritnyi tovar)</dd> <dd><code>3</code> - KGT+ (Krupnogabaritnyi tovar)</dd> </dl>   # noqa: E501

        :return: The cargo_type of this OrderNewDBS.  # noqa: E501
        :rtype: int
        """
        return self._cargo_type

    @cargo_type.setter
    def cargo_type(self, cargo_type):
        """Sets the cargo_type of this OrderNewDBS.

        <dl> <dt>Tip tovara:</dt> <dd><code>1</code> - MGT (malogabaritnyi, to est obyhnyi tovar)</dd> <dd><code>2</code> - SGT (Sverhgabaritnyi tovar)</dd> <dd><code>3</code> - KGT+ (Krupnogabaritnyi tovar)</dd> </dl>   # noqa: E501

        :param cargo_type: The cargo_type of this OrderNewDBS.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if cargo_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cargo_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cargo_type, allowed_values)
            )

        self._cargo_type = cargo_type

    @property
    def is_zero_order(self):
        """Gets the is_zero_order of this OrderNewDBS.  # noqa: E501

        Priznak zakaza, sdelannogo na nulevoi ostatok tovara. (<code>false</code> - zakaz sdelan na tovar s nenulevym ostatkom, <code>true</code> - zakaz sdelan na tovar s ostatkom ravnym nulu. Takoi zakaz mohno otmenit bez htrafa za otmenu)  # noqa: E501

        :return: The is_zero_order of this OrderNewDBS.  # noqa: E501
        :rtype: object
        """
        return self._is_zero_order

    @is_zero_order.setter
    def is_zero_order(self, is_zero_order):
        """Sets the is_zero_order of this OrderNewDBS.

        Priznak zakaza, sdelannogo na nulevoi ostatok tovara. (<code>false</code> - zakaz sdelan na tovar s nenulevym ostatkom, <code>true</code> - zakaz sdelan na tovar s ostatkom ravnym nulu. Takoi zakaz mohno otmenit bez htrafa za otmenu)  # noqa: E501

        :param is_zero_order: The is_zero_order of this OrderNewDBS.  # noqa: E501
        :type: object
        """

        self._is_zero_order = is_zero_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderNewDBS, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderNewDBS):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
