# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MainResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'common_info': 'CommonInfo',
        'position_info': 'PositionInfo',
        'visibility_info': 'VisibilityInfo',
        'groups': 'list[TableGroupItem]'
    }

    attribute_map = {
        'common_info': 'commonInfo',
        'position_info': 'positionInfo',
        'visibility_info': 'visibilityInfo',
        'groups': 'groups'
    }

    def __init__(self, common_info=None, position_info=None, visibility_info=None, groups=None):  # noqa: E501
        """MainResponse - a model defined in Swagger"""  # noqa: E501
        self._common_info = None
        self._position_info = None
        self._visibility_info = None
        self._groups = None
        self.discriminator = None
        self.common_info = common_info
        self.position_info = position_info
        self.visibility_info = visibility_info
        if groups is not None:
            self.groups = groups

    @property
    def common_info(self):
        """Gets the common_info of this MainResponse.  # noqa: E501


        :return: The common_info of this MainResponse.  # noqa: E501
        :rtype: CommonInfo
        """
        return self._common_info

    @common_info.setter
    def common_info(self, common_info):
        """Sets the common_info of this MainResponse.


        :param common_info: The common_info of this MainResponse.  # noqa: E501
        :type: CommonInfo
        """
        if common_info is None:
            raise ValueError("Invalid value for `common_info`, must not be `None`")  # noqa: E501

        self._common_info = common_info

    @property
    def position_info(self):
        """Gets the position_info of this MainResponse.  # noqa: E501


        :return: The position_info of this MainResponse.  # noqa: E501
        :rtype: PositionInfo
        """
        return self._position_info

    @position_info.setter
    def position_info(self, position_info):
        """Sets the position_info of this MainResponse.


        :param position_info: The position_info of this MainResponse.  # noqa: E501
        :type: PositionInfo
        """
        if position_info is None:
            raise ValueError("Invalid value for `position_info`, must not be `None`")  # noqa: E501

        self._position_info = position_info

    @property
    def visibility_info(self):
        """Gets the visibility_info of this MainResponse.  # noqa: E501


        :return: The visibility_info of this MainResponse.  # noqa: E501
        :rtype: VisibilityInfo
        """
        return self._visibility_info

    @visibility_info.setter
    def visibility_info(self, visibility_info):
        """Sets the visibility_info of this MainResponse.


        :param visibility_info: The visibility_info of this MainResponse.  # noqa: E501
        :type: VisibilityInfo
        """
        if visibility_info is None:
            raise ValueError("Invalid value for `visibility_info`, must not be `None`")  # noqa: E501

        self._visibility_info = visibility_info

    @property
    def groups(self):
        """Gets the groups of this MainResponse.  # noqa: E501

        Spisok elementov tablicy   # noqa: E501

        :return: The groups of this MainResponse.  # noqa: E501
        :rtype: list[TableGroupItem]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this MainResponse.

        Spisok elementov tablicy   # noqa: E501

        :param groups: The groups of this MainResponse.  # noqa: E501
        :type: list[TableGroupItem]
        """

        self._groups = groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MainResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MainResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
