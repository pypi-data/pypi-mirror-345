# coding: utf-8

"""
    Marketing i prodvihenie

    <div class=\"description_important\">       Uznat bolhe o marketinge i prodvihenii mohno v <a href=\"https://seller.wildberries.ru/instructions/category/59d92bd3-6ea0-40f2-b762-ca8835d7d42e?goBackOption=prevRoute&categoryId=479385c6-de01-4b4d-ad4e-ed941e65582e\">spravohnom centre</a> </div>    Metody marketinga i prodvihenia pozvolaut:   1. Poluhat informaciu o [reklamnyh kampaniah](/openapi/promotion#tag/Kampanii) i [mediakampaniah](/openapi/promotion#tag/Media).   2. [Sozdavat](/openapi/promotion#tag/Sozdanie-kampanij) i [upravlat](/openapi/promotion#tag/Upravlenie-kampaniyami) kampaniami.   3. Nastraivat [parametry kampanii](/openapi/promotion#tag/Parametry-kampanij) â€” klastery fraz, prodvigaemye tovary i tak dalee.   4. Upravlat [finansami kampanii](/openapi/promotion#tag/Finansy).   5. Rabotat s [kalendarem akcii](/openapi/promotion#tag/Kalendar-akcij).  Dannye sinhroniziruutsa s bazoi raz v 3 minuty. Statusy kampanii menautsa raz v minutu. Stavki kampanii menautsa raz v 30 sekund.   # noqa: E501

    OpenAPI spec version: promotion
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseInfoAdvert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_time': 'str',
        'create_time': 'str',
        'change_time': 'str',
        'start_time': 'str',
        'name': 'str',
        'params': 'list[ResponseInfoAdvertParams]',
        'daily_budget': 'int',
        'advert_id': 'int',
        'status': 'int',
        'type': 'int',
        'payment_type': 'str',
        'search_pluse_state': 'bool'
    }

    attribute_map = {
        'end_time': 'endTime',
        'create_time': 'createTime',
        'change_time': 'changeTime',
        'start_time': 'startTime',
        'name': 'name',
        'params': 'params',
        'daily_budget': 'dailyBudget',
        'advert_id': 'advertId',
        'status': 'status',
        'type': 'type',
        'payment_type': 'paymentType',
        'search_pluse_state': 'searchPluseState'
    }

    def __init__(self, end_time=None, create_time=None, change_time=None, start_time=None, name=None, params=None, daily_budget=None, advert_id=None, status=None, type=None, payment_type=None, search_pluse_state=None):  # noqa: E501
        """ResponseInfoAdvert - a model defined in Swagger"""  # noqa: E501
        self._end_time = None
        self._create_time = None
        self._change_time = None
        self._start_time = None
        self._name = None
        self._params = None
        self._daily_budget = None
        self._advert_id = None
        self._status = None
        self._type = None
        self._payment_type = None
        self._search_pluse_state = None
        self.discriminator = None
        if end_time is not None:
            self.end_time = end_time
        if create_time is not None:
            self.create_time = create_time
        if change_time is not None:
            self.change_time = change_time
        if start_time is not None:
            self.start_time = start_time
        if name is not None:
            self.name = name
        if params is not None:
            self.params = params
        if daily_budget is not None:
            self.daily_budget = daily_budget
        if advert_id is not None:
            self.advert_id = advert_id
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if payment_type is not None:
            self.payment_type = payment_type
        if search_pluse_state is not None:
            self.search_pluse_state = search_pluse_state

    @property
    def end_time(self):
        """Gets the end_time of this ResponseInfoAdvert.  # noqa: E501

        Data zaverhenia kampanii  # noqa: E501

        :return: The end_time of this ResponseInfoAdvert.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ResponseInfoAdvert.

        Data zaverhenia kampanii  # noqa: E501

        :param end_time: The end_time of this ResponseInfoAdvert.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def create_time(self):
        """Gets the create_time of this ResponseInfoAdvert.  # noqa: E501

        Vrema sozdania kampanii  # noqa: E501

        :return: The create_time of this ResponseInfoAdvert.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ResponseInfoAdvert.

        Vrema sozdania kampanii  # noqa: E501

        :param create_time: The create_time of this ResponseInfoAdvert.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def change_time(self):
        """Gets the change_time of this ResponseInfoAdvert.  # noqa: E501

        Vrema poslednego izmenenia kampanii  # noqa: E501

        :return: The change_time of this ResponseInfoAdvert.  # noqa: E501
        :rtype: str
        """
        return self._change_time

    @change_time.setter
    def change_time(self, change_time):
        """Sets the change_time of this ResponseInfoAdvert.

        Vrema poslednego izmenenia kampanii  # noqa: E501

        :param change_time: The change_time of this ResponseInfoAdvert.  # noqa: E501
        :type: str
        """

        self._change_time = change_time

    @property
    def start_time(self):
        """Gets the start_time of this ResponseInfoAdvert.  # noqa: E501

        Data poslednego zapuska kampanii  # noqa: E501

        :return: The start_time of this ResponseInfoAdvert.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ResponseInfoAdvert.

        Data poslednego zapuska kampanii  # noqa: E501

        :param start_time: The start_time of this ResponseInfoAdvert.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def name(self):
        """Gets the name of this ResponseInfoAdvert.  # noqa: E501

        Nazvanie kampanii  # noqa: E501

        :return: The name of this ResponseInfoAdvert.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseInfoAdvert.

        Nazvanie kampanii  # noqa: E501

        :param name: The name of this ResponseInfoAdvert.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def params(self):
        """Gets the params of this ResponseInfoAdvert.  # noqa: E501

        Parametry kampanii  # noqa: E501

        :return: The params of this ResponseInfoAdvert.  # noqa: E501
        :rtype: list[ResponseInfoAdvertParams]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ResponseInfoAdvert.

        Parametry kampanii  # noqa: E501

        :param params: The params of this ResponseInfoAdvert.  # noqa: E501
        :type: list[ResponseInfoAdvertParams]
        """

        self._params = params

    @property
    def daily_budget(self):
        """Gets the daily_budget of this ResponseInfoAdvert.  # noqa: E501

        Dnevnoi budhet, esli ne ustanovlen, to 0  # noqa: E501

        :return: The daily_budget of this ResponseInfoAdvert.  # noqa: E501
        :rtype: int
        """
        return self._daily_budget

    @daily_budget.setter
    def daily_budget(self, daily_budget):
        """Sets the daily_budget of this ResponseInfoAdvert.

        Dnevnoi budhet, esli ne ustanovlen, to 0  # noqa: E501

        :param daily_budget: The daily_budget of this ResponseInfoAdvert.  # noqa: E501
        :type: int
        """

        self._daily_budget = daily_budget

    @property
    def advert_id(self):
        """Gets the advert_id of this ResponseInfoAdvert.  # noqa: E501

        ID kampanii  # noqa: E501

        :return: The advert_id of this ResponseInfoAdvert.  # noqa: E501
        :rtype: int
        """
        return self._advert_id

    @advert_id.setter
    def advert_id(self, advert_id):
        """Sets the advert_id of this ResponseInfoAdvert.

        ID kampanii  # noqa: E501

        :param advert_id: The advert_id of this ResponseInfoAdvert.  # noqa: E501
        :type: int
        """

        self._advert_id = advert_id

    @property
    def status(self):
        """Gets the status of this ResponseInfoAdvert.  # noqa: E501

        <dl> <dt>Status kampanii:</dt> <dd><code>-1</code> - kampania v processe udalenia </dd> <dd><code>4</code> - gotova k zapusku </dd> <dd><code>7</code> - Kampania zaverhena</dd> <dd><code>8</code> - otkazalsa</dd> <dd><code>9</code> - idut pokazy</dd> <dd><code>11</code> - Kampania na pauze</dd> </dl> Kampania v processe udalenia. Status oznahaet, hto kampania byla udalena, i herez 3-10 minut ona isheznet iz otveta metoda.      # noqa: E501

        :return: The status of this ResponseInfoAdvert.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseInfoAdvert.

        <dl> <dt>Status kampanii:</dt> <dd><code>-1</code> - kampania v processe udalenia </dd> <dd><code>4</code> - gotova k zapusku </dd> <dd><code>7</code> - Kampania zaverhena</dd> <dd><code>8</code> - otkazalsa</dd> <dd><code>9</code> - idut pokazy</dd> <dd><code>11</code> - Kampania na pauze</dd> </dl> Kampania v processe udalenia. Status oznahaet, hto kampania byla udalena, i herez 3-10 minut ona isheznet iz otveta metoda.      # noqa: E501

        :param status: The status of this ResponseInfoAdvert.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this ResponseInfoAdvert.  # noqa: E501

        <dl>   <dt>Tip kampanii:</dt>     <dd><code>4</code> - kampania v kataloge (<strong>ustarevhii tip</strong>)</dd>     <dd><code>5</code> - kampania v kartohke tovara (<strong>ustarevhii tip</strong>)</dd>     <dd><code>6</code> - kampania v poiske (<strong>ustarevhii tip</strong>)</dd>     <dd><code>7</code> - kampania v rekomendaciah na glavnoi stranice (<strong>ustarevhii tip</strong>)</dd>   </dl>   # noqa: E501

        :return: The type of this ResponseInfoAdvert.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseInfoAdvert.

        <dl>   <dt>Tip kampanii:</dt>     <dd><code>4</code> - kampania v kataloge (<strong>ustarevhii tip</strong>)</dd>     <dd><code>5</code> - kampania v kartohke tovara (<strong>ustarevhii tip</strong>)</dd>     <dd><code>6</code> - kampania v poiske (<strong>ustarevhii tip</strong>)</dd>     <dd><code>7</code> - kampania v rekomendaciah na glavnoi stranice (<strong>ustarevhii tip</strong>)</dd>   </dl>   # noqa: E501

        :param type: The type of this ResponseInfoAdvert.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def payment_type(self):
        """Gets the payment_type of this ResponseInfoAdvert.  # noqa: E501

        Model oplaty: - `cpm` â€” za pokazy   # noqa: E501

        :return: The payment_type of this ResponseInfoAdvert.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this ResponseInfoAdvert.

        Model oplaty: - `cpm` â€” za pokazy   # noqa: E501

        :param payment_type: The payment_type of this ResponseInfoAdvert.  # noqa: E501
        :type: str
        """

        self._payment_type = payment_type

    @property
    def search_pluse_state(self):
        """Gets the search_pluse_state of this ResponseInfoAdvert.  # noqa: E501

        Aktivnost fiksirovannyh fraz:   - `false` â€” ne aktivny   - `true` â€” aktivny   # noqa: E501

        :return: The search_pluse_state of this ResponseInfoAdvert.  # noqa: E501
        :rtype: bool
        """
        return self._search_pluse_state

    @search_pluse_state.setter
    def search_pluse_state(self, search_pluse_state):
        """Sets the search_pluse_state of this ResponseInfoAdvert.

        Aktivnost fiksirovannyh fraz:   - `false` â€” ne aktivny   - `true` â€” aktivny   # noqa: E501

        :param search_pluse_state: The search_pluse_state of this ResponseInfoAdvert.  # noqa: E501
        :type: bool
        """

        self._search_pluse_state = search_pluse_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseInfoAdvert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseInfoAdvert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
