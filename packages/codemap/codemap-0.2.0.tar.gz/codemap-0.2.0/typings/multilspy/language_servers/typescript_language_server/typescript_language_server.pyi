"""
This type stub file was generated by pyright.
"""

from contextlib import asynccontextmanager
from typing import AsyncIterator
from multilspy.multilspy_logger import MultilspyLogger
from multilspy.language_server import LanguageServer
from multilspy.multilspy_config import MultilspyConfig
from multilspy.multilspy_utils import PlatformUtils

"""
Provides TypeScript specific instantiation of the LanguageServer class. Contains various configurations and settings specific to TypeScript.
"""
if not PlatformUtils.get_platform_id().value.startswith("win"):
    ...
class TypeScriptLanguageServer(LanguageServer):
    """
    Provides TypeScript specific instantiation of the LanguageServer class. Contains various configurations and settings specific to TypeScript.
    """
    def __init__(self, config: MultilspyConfig, logger: MultilspyLogger, repository_root_path: str) -> None:
        """
        Creates a TypeScriptLanguageServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.
        """
        ...
    
    def setup_runtime_dependencies(self, logger: MultilspyLogger, config: MultilspyConfig) -> str:
        """
        Setup runtime dependencies for TypeScript Language Server.
        """
        ...
    
    @asynccontextmanager
    async def start_server(self) -> AsyncIterator[TypeScriptLanguageServer]:
        """
        Starts the TypeScript Language Server, waits for the server to be ready and yields the LanguageServer instance.

        Usage:
        ```
        async with lsp.start_server():
            # LanguageServer has been initialized and ready to serve requests
            await lsp.request_definition(...)
            await lsp.request_references(...)
            # Shutdown the LanguageServer on exit from scope
        # LanguageServer has been shutdown
        """
        ...
    


