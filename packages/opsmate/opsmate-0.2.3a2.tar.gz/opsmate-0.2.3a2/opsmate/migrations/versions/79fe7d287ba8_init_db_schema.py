"""init db schema

Revision ID: 79fe7d287ba8
Revises: 
Create Date: 2025-03-02 14:00:45.963741

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '79fe7d287ba8'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('opsmate_workflow',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('state', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'SKIPPED', name='workflowstate'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('workflowstep',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('fn', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('step_type', sa.Enum('PARALLEL', 'SEQUENTIAL', 'NONE', 'COND_TRUE', 'COND_FALSE', name='workflowtype'), nullable=False),
    sa.Column('workflow_id', sa.Integer(), nullable=False),
    sa.Column('prev_ids', sa.JSON(), nullable=True),
    sa.Column('marshalled_result', sa.LargeBinary(), nullable=True),
    sa.Column('marshalled_metadata', sa.LargeBinary(), nullable=True),
    sa.Column('error', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('failed_reason', sa.Enum('PREV_STEP_FAILED', 'RUNTIME_ERROR', 'NONE', name='workflowfailedreason'), nullable=False),
    sa.Column('state', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'SKIPPED', name='workflowstate'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['workflow_id'], ['opsmate_workflow.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workflowstep_workflow_id'), 'workflowstep', ['workflow_id'], unique=False)
    op.create_table('ingestions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('data_source_provider', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('data_source', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('branch', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('glob', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('documents',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('ingestion_id', sa.Integer(), nullable=False),
    sa.Column('path', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('chunk_count', sa.Integer(), nullable=False),
    sa.Column('sha', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('chunk_config', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['ingestion_id'], ['ingestions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('taskitem',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('args', sa.JSON(), nullable=True),
    sa.Column('kwargs', sa.JSON(), nullable=True),
    sa.Column('func', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('result', sa.JSON(), nullable=True),
    sa.Column('error', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='taskstatus'), nullable=False),
    sa.Column('generation_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('max_retries', sa.Integer(), nullable=False),
    sa.Column('wait_until', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_taskitem_status'), 'taskitem', ['status'], unique=False)
    op.create_table('blueprint',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_blueprint_name'), 'blueprint', ['name'], unique=True)
    op.create_table('envvar',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('value', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_envvar_key'), 'envvar', ['key'], unique=True)
    op.create_table('kvstore',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('value', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_kvstore_key'), 'kvstore', ['key'], unique=True)
    op.create_table('workflow',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('blueprint_id', sa.Integer(), nullable=False),
    sa.Column('depending_workflow_ids', sa.JSON(), nullable=True),
    sa.Column('result', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['blueprint_id'], ['blueprint.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workflow_name'), 'workflow', ['name'], unique=False)
    op.create_table('cell',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('input', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('output', sa.LargeBinary(), nullable=True),
    sa.Column('lang', sa.Enum('TEXT_INSTRUCTION', 'NOTES', 'BASH', name='celllangenum'), nullable=True),
    sa.Column('thinking_system', sa.Enum('SIMPLE', 'REASONING', 'TYPE2', name='thinkingsystemenum'), nullable=False),
    sa.Column('sequence', sa.Integer(), nullable=False),
    sa.Column('execution_sequence', sa.Integer(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('state', sa.Enum('INITIAL', 'RUNNING', 'COMPLETED', 'STOPPING', 'STOPPED', 'FAILED', name='cellstateenum'), nullable=False),
    sa.Column('workflow_id', sa.Integer(), nullable=False),
    sa.Column('internal_workflow_id', sa.Integer(), nullable=False),
    sa.Column('internal_workflow_step_id', sa.Integer(), nullable=False),
    sa.Column('hidden', sa.Boolean(), nullable=False),
    sa.Column('cell_type', sa.Enum('UNDERSTANDING_ASK_QUESTIONS', 'UNDERSTANDING_GATHER_INFO', 'UNDERSTANDING_GENERATE_REPORT', 'UNDERSTANDING_REPORT_BREAKDOWN', 'UNDERSTANDING_SOLUTION', 'PLANNING_OPTIMAL_SOLUTION', 'PLANNING_KNOWLEDGE_RETRIEVAL', 'PLANNING_TASK_PLAN', 'REASONING_THOUGHTS', 'REASONING_OBSERVATION', 'REASONING_ANSWER', 'SIMPLE_RESULT', name='celltype'), nullable=True),
    sa.Column('created_by', sa.Enum('USER', 'ASSISTANT', name='createdbytype'), nullable=False),
    sa.Column('parent_cell_ids', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflow.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('executionconfirmation',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('cell_id', sa.Integer(), nullable=False),
    sa.Column('command', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('confirmed', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['cell_id'], ['cell.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('executionconfirmation')
    op.drop_table('cell')
    op.drop_index(op.f('ix_workflow_name'), table_name='workflow')
    op.drop_table('workflow')
    op.drop_index(op.f('ix_kvstore_key'), table_name='kvstore')
    op.drop_table('kvstore')
    op.drop_index(op.f('ix_envvar_key'), table_name='envvar')
    op.drop_table('envvar')
    op.drop_index(op.f('ix_blueprint_name'), table_name='blueprint')
    op.drop_table('blueprint')
    op.drop_index(op.f('ix_taskitem_status'), table_name='taskitem')
    op.drop_table('taskitem')
    op.drop_table('documents')
    op.drop_table('ingestions')
    op.drop_index(op.f('ix_workflowstep_workflow_id'), table_name='workflowstep')
    op.drop_table('workflowstep')
    op.drop_table('opsmate_workflow')
    # ### end Alembic commands ###
