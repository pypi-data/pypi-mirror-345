# coding: utf-8

"""
    Tickforge API

    An API to interact with Uptick Internal Resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from tickforge_client.models.profile import Profile
from typing import Optional, Set
from typing_extensions import Self

class SlackMember(BaseModel):
    """
    SlackMember
    """ # noqa: E501
    id: StrictStr
    team_id: Optional[StrictStr] = None
    name: StrictStr
    deleted: Optional[StrictBool] = None
    real_name: Optional[StrictStr] = None
    tz: Optional[StrictStr] = None
    tz_label: Optional[StrictStr] = None
    tz_offset: Optional[StrictInt] = None
    profile: Profile
    is_admin: Optional[StrictBool] = None
    is_owner: Optional[StrictBool] = None
    is_primary_owner: Optional[StrictBool] = None
    is_restricted: Optional[StrictBool] = None
    is_bot: Optional[StrictBool] = None
    is_app_user: Optional[StrictBool] = None
    updated: Optional[StrictInt] = None
    is_email_confirmed: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "team_id", "name", "deleted", "real_name", "tz", "tz_label", "tz_offset", "profile", "is_admin", "is_owner", "is_primary_owner", "is_restricted", "is_bot", "is_app_user", "updated", "is_email_confirmed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SlackMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['team_id'] = None

        # set to None if deleted (nullable) is None
        # and model_fields_set contains the field
        if self.deleted is None and "deleted" in self.model_fields_set:
            _dict['deleted'] = None

        # set to None if real_name (nullable) is None
        # and model_fields_set contains the field
        if self.real_name is None and "real_name" in self.model_fields_set:
            _dict['real_name'] = None

        # set to None if tz (nullable) is None
        # and model_fields_set contains the field
        if self.tz is None and "tz" in self.model_fields_set:
            _dict['tz'] = None

        # set to None if tz_label (nullable) is None
        # and model_fields_set contains the field
        if self.tz_label is None and "tz_label" in self.model_fields_set:
            _dict['tz_label'] = None

        # set to None if tz_offset (nullable) is None
        # and model_fields_set contains the field
        if self.tz_offset is None and "tz_offset" in self.model_fields_set:
            _dict['tz_offset'] = None

        # set to None if is_admin (nullable) is None
        # and model_fields_set contains the field
        if self.is_admin is None and "is_admin" in self.model_fields_set:
            _dict['is_admin'] = None

        # set to None if is_owner (nullable) is None
        # and model_fields_set contains the field
        if self.is_owner is None and "is_owner" in self.model_fields_set:
            _dict['is_owner'] = None

        # set to None if is_primary_owner (nullable) is None
        # and model_fields_set contains the field
        if self.is_primary_owner is None and "is_primary_owner" in self.model_fields_set:
            _dict['is_primary_owner'] = None

        # set to None if is_restricted (nullable) is None
        # and model_fields_set contains the field
        if self.is_restricted is None and "is_restricted" in self.model_fields_set:
            _dict['is_restricted'] = None

        # set to None if is_bot (nullable) is None
        # and model_fields_set contains the field
        if self.is_bot is None and "is_bot" in self.model_fields_set:
            _dict['is_bot'] = None

        # set to None if is_app_user (nullable) is None
        # and model_fields_set contains the field
        if self.is_app_user is None and "is_app_user" in self.model_fields_set:
            _dict['is_app_user'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict['updated'] = None

        # set to None if is_email_confirmed (nullable) is None
        # and model_fields_set contains the field
        if self.is_email_confirmed is None and "is_email_confirmed" in self.model_fields_set:
            _dict['is_email_confirmed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SlackMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "team_id": obj.get("team_id"),
            "name": obj.get("name"),
            "deleted": obj.get("deleted"),
            "real_name": obj.get("real_name"),
            "tz": obj.get("tz"),
            "tz_label": obj.get("tz_label"),
            "tz_offset": obj.get("tz_offset"),
            "profile": Profile.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "is_admin": obj.get("is_admin"),
            "is_owner": obj.get("is_owner"),
            "is_primary_owner": obj.get("is_primary_owner"),
            "is_restricted": obj.get("is_restricted"),
            "is_bot": obj.get("is_bot"),
            "is_app_user": obj.get("is_app_user"),
            "updated": obj.get("updated"),
            "is_email_confirmed": obj.get("is_email_confirmed")
        })
        return _obj


