"""
This type stub file was generated by pyright.
"""

import numpy as np
from abc import ABC, abstractmethod
from typing import List, Union
from pydantic import BaseModel
from .utils import TEXT

class EmbeddingFunction(BaseModel, ABC):
    """
    An ABC for embedding functions.

    All concrete embedding functions must implement the following methods:
    1. compute_query_embeddings() which takes a query and returns a list of embeddings
    2. compute_source_embeddings() which returns a list of embeddings for
       the source column
    For text data, the two will be the same. For multi-modal data, the source column
    might be images and the vector column might be text.
    3. ndims() which returns the number of dimensions of the vector column
    """
    __slots__ = ...
    max_retries: int = ...
    _ndims: int = ...
    _original_args: dict = ...
    @classmethod
    def create(cls, **kwargs): # -> Self:
        """
        Create an instance of the embedding function
        """
        ...
    
    @staticmethod
    def sensitive_keys() -> List[str]:
        """
        Return a list of keys that are sensitive and should not be allowed
        to be set to hardcoded values in the config. For example, API keys.
        """
        ...
    
    @abstractmethod
    def compute_query_embeddings(self, *args, **kwargs) -> list[Union[np.array, None]]:
        """
        Compute the embeddings for a given user query

        Returns
        -------
        A list of embeddings for each input. The embedding of each input can be None
        when the embedding is not valid.
        """
        ...
    
    @abstractmethod
    def compute_source_embeddings(self, *args, **kwargs) -> list[Union[np.array, None]]:
        """Compute the embeddings for the source column in the database

        Returns
        -------
        A list of embeddings for each input. The embedding of each input can be None
        when the embedding is not valid.
        """
        ...
    
    def compute_query_embeddings_with_retry(self, *args, **kwargs) -> list[Union[np.array, None]]:
        """Compute the embeddings for a given user query with retries

        Returns
        -------
        A list of embeddings for each input. The embedding of each input can be None
        when the embedding is not valid.
        """
        ...
    
    def compute_source_embeddings_with_retry(self, *args, **kwargs) -> list[Union[np.array, None]]:
        """Compute the embeddings for the source column in the database with retries.

        Returns
        -------
        A list of embeddings for each input. The embedding of each input can be None
        when the embedding is not valid.
        """
        ...
    
    def sanitize_input(self, texts: TEXT) -> Union[List[str], np.ndarray]:
        """
        Sanitize the input to the embedding function.
        """
        ...
    
    def safe_model_dump(self): # -> dict[Any, Any]:
        ...
    
    @abstractmethod
    def ndims(self) -> int:
        """
        Return the dimensions of the vector column
        """
        ...
    
    def SourceField(self, **kwargs):
        """
        Creates a pydantic Field that can automatically annotate
        the source column for this embedding function
        """
        ...
    
    def VectorField(self, **kwargs):
        """
        Creates a pydantic Field that can automatically annotate
        the target vector column for this embedding function
        """
        ...
    
    def __eq__(self, __value: object) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    


class EmbeddingFunctionConfig(BaseModel):
    """
    This model encapsulates the configuration for a embedding function
    in a lancedb table. It holds the embedding function, the source column,
    and the vector column
    """
    vector_column: str
    source_column: str
    function: EmbeddingFunction
    ...


class TextEmbeddingFunction(EmbeddingFunction):
    """
    A callable ABC for embedding functions that take text as input
    """
    def compute_query_embeddings(self, query: str, *args, **kwargs) -> list[Union[np.array, None]]:
        ...
    
    def compute_source_embeddings(self, texts: TEXT, *args, **kwargs) -> list[Union[np.array, None]]:
        ...
    
    @abstractmethod
    def generate_embeddings(self, texts: Union[List[str], np.ndarray], *args, **kwargs) -> list[Union[np.array, None]]:
        """Generate the embeddings for the given texts"""
        ...
    


