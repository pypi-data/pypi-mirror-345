"""
This type stub file was generated by pyright.
"""

from types import ModuleType
from typing import Any, ClassVar, TYPE_CHECKING

_NUMPY_AVAILABLE = ...
_PANDAS_AVAILABLE = ...
_POLARS_AVAILABLE = ...
_TORCH_AVAILABLE = ...
_HUGGING_FACE_AVAILABLE = ...
_TENSORFLOW_AVAILABLE = ...
_RAY_AVAILABLE = ...
_LANCE_AVAILABLE = ...
class _LazyModule(ModuleType):
    """
    Module that can act both as a lazy-loader and as a proxy.

    Notes
    -----
    We do NOT register this module with `sys.modules` so as not to cause
    confusion in the global environment. This way we have a valid proxy
    module for our own use, but it lives _exclusively_ within lance.

    """
    __lazy__ = ...
    _mod_pfx: ClassVar[dict[str, str]] = ...
    def __init__(self, module_name: str, *, module_available: bool) -> None:
        """
        Initialise lazy-loading proxy module.

        Parameters
        ----------
        module_name : str
            the name of the module to lazy-load (if available).

        module_available : bool
            indicate if the referenced module is actually available (we will proxy it
            in both cases, but raise a helpful error when invoked if it doesn't exist).

        """
        ...
    
    def __getattr__(self, attr: Any) -> Any:
        ...
    


if TYPE_CHECKING:
    ...
else:
    ...
__all__ = ["datasets", "numpy", "pandas", "polars", "ray", "tensorflow", "torch", "lance", "_check_for_hugging_face", "_check_for_numpy", "_check_for_pandas", "_check_for_polars", "_check_for_tensorflow", "_check_for_torch", "_check_for_ray", "_check_for_lance", "_LazyModule", "_NUMPY_AVAILABLE", "_PANDAS_AVAILABLE", "_POLARS_AVAILABLE", "_TORCH_AVAILABLE", "_HUGGING_FACE_AVAILABLE", "_TENSORFLOW_AVAILABLE", "_RAY_AVAILABLE", "_LANCE_AVAILABLE"]
