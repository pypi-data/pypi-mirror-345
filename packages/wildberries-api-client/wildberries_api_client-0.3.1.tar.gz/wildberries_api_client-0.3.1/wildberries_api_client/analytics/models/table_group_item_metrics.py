# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableGroupItemMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avg_position': 'TableGroupItemMetricsAvgPosition',
        'open_card': 'VisibilityInfoOpenCard',
        'add_to_cart': 'TableGroupItemMetricsAddToCart',
        'open_to_cart': 'TableGroupItemMetricsOpenToCart',
        'orders': 'TableGroupItemMetricsOrders',
        'cart_to_order': 'TableGroupItemMetricsCartToOrder',
        'visibility': 'TableGroupItemMetricsVisibility'
    }

    attribute_map = {
        'avg_position': 'avgPosition',
        'open_card': 'openCard',
        'add_to_cart': 'addToCart',
        'open_to_cart': 'openToCart',
        'orders': 'orders',
        'cart_to_order': 'cartToOrder',
        'visibility': 'visibility'
    }

    def __init__(self, avg_position=None, open_card=None, add_to_cart=None, open_to_cart=None, orders=None, cart_to_order=None, visibility=None):  # noqa: E501
        """TableGroupItemMetrics - a model defined in Swagger"""  # noqa: E501
        self._avg_position = None
        self._open_card = None
        self._add_to_cart = None
        self._open_to_cart = None
        self._orders = None
        self._cart_to_order = None
        self._visibility = None
        self.discriminator = None
        self.avg_position = avg_position
        self.open_card = open_card
        self.add_to_cart = add_to_cart
        self.open_to_cart = open_to_cart
        self.orders = orders
        self.cart_to_order = cart_to_order
        self.visibility = visibility

    @property
    def avg_position(self):
        """Gets the avg_position of this TableGroupItemMetrics.  # noqa: E501


        :return: The avg_position of this TableGroupItemMetrics.  # noqa: E501
        :rtype: TableGroupItemMetricsAvgPosition
        """
        return self._avg_position

    @avg_position.setter
    def avg_position(self, avg_position):
        """Sets the avg_position of this TableGroupItemMetrics.


        :param avg_position: The avg_position of this TableGroupItemMetrics.  # noqa: E501
        :type: TableGroupItemMetricsAvgPosition
        """
        if avg_position is None:
            raise ValueError("Invalid value for `avg_position`, must not be `None`")  # noqa: E501

        self._avg_position = avg_position

    @property
    def open_card(self):
        """Gets the open_card of this TableGroupItemMetrics.  # noqa: E501


        :return: The open_card of this TableGroupItemMetrics.  # noqa: E501
        :rtype: VisibilityInfoOpenCard
        """
        return self._open_card

    @open_card.setter
    def open_card(self, open_card):
        """Sets the open_card of this TableGroupItemMetrics.


        :param open_card: The open_card of this TableGroupItemMetrics.  # noqa: E501
        :type: VisibilityInfoOpenCard
        """
        if open_card is None:
            raise ValueError("Invalid value for `open_card`, must not be `None`")  # noqa: E501

        self._open_card = open_card

    @property
    def add_to_cart(self):
        """Gets the add_to_cart of this TableGroupItemMetrics.  # noqa: E501


        :return: The add_to_cart of this TableGroupItemMetrics.  # noqa: E501
        :rtype: TableGroupItemMetricsAddToCart
        """
        return self._add_to_cart

    @add_to_cart.setter
    def add_to_cart(self, add_to_cart):
        """Sets the add_to_cart of this TableGroupItemMetrics.


        :param add_to_cart: The add_to_cart of this TableGroupItemMetrics.  # noqa: E501
        :type: TableGroupItemMetricsAddToCart
        """
        if add_to_cart is None:
            raise ValueError("Invalid value for `add_to_cart`, must not be `None`")  # noqa: E501

        self._add_to_cart = add_to_cart

    @property
    def open_to_cart(self):
        """Gets the open_to_cart of this TableGroupItemMetrics.  # noqa: E501


        :return: The open_to_cart of this TableGroupItemMetrics.  # noqa: E501
        :rtype: TableGroupItemMetricsOpenToCart
        """
        return self._open_to_cart

    @open_to_cart.setter
    def open_to_cart(self, open_to_cart):
        """Sets the open_to_cart of this TableGroupItemMetrics.


        :param open_to_cart: The open_to_cart of this TableGroupItemMetrics.  # noqa: E501
        :type: TableGroupItemMetricsOpenToCart
        """
        if open_to_cart is None:
            raise ValueError("Invalid value for `open_to_cart`, must not be `None`")  # noqa: E501

        self._open_to_cart = open_to_cart

    @property
    def orders(self):
        """Gets the orders of this TableGroupItemMetrics.  # noqa: E501


        :return: The orders of this TableGroupItemMetrics.  # noqa: E501
        :rtype: TableGroupItemMetricsOrders
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this TableGroupItemMetrics.


        :param orders: The orders of this TableGroupItemMetrics.  # noqa: E501
        :type: TableGroupItemMetricsOrders
        """
        if orders is None:
            raise ValueError("Invalid value for `orders`, must not be `None`")  # noqa: E501

        self._orders = orders

    @property
    def cart_to_order(self):
        """Gets the cart_to_order of this TableGroupItemMetrics.  # noqa: E501


        :return: The cart_to_order of this TableGroupItemMetrics.  # noqa: E501
        :rtype: TableGroupItemMetricsCartToOrder
        """
        return self._cart_to_order

    @cart_to_order.setter
    def cart_to_order(self, cart_to_order):
        """Sets the cart_to_order of this TableGroupItemMetrics.


        :param cart_to_order: The cart_to_order of this TableGroupItemMetrics.  # noqa: E501
        :type: TableGroupItemMetricsCartToOrder
        """
        if cart_to_order is None:
            raise ValueError("Invalid value for `cart_to_order`, must not be `None`")  # noqa: E501

        self._cart_to_order = cart_to_order

    @property
    def visibility(self):
        """Gets the visibility of this TableGroupItemMetrics.  # noqa: E501


        :return: The visibility of this TableGroupItemMetrics.  # noqa: E501
        :rtype: TableGroupItemMetricsVisibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this TableGroupItemMetrics.


        :param visibility: The visibility of this TableGroupItemMetrics.  # noqa: E501
        :type: TableGroupItemMetricsVisibility
        """
        if visibility is None:
            raise ValueError("Invalid value for `visibility`, must not be `None`")  # noqa: E501

        self._visibility = visibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableGroupItemMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableGroupItemMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
