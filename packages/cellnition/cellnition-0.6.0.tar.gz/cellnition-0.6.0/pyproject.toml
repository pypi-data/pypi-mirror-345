# --------------------( LICENSE                            )--------------------
# Copyright (c) 2023-2025 Alexis Pietak & Cecil Curry.
# See "LICENSE" for further details.
#
# --------------------( SYNOPSIS                           )--------------------
# Project-wide packager-agnostic configuration. Unlike all other top-level
# configuration files (e.g., "setup.py", "MANIFEST.in") specific to some
# utility in Python's package management ecosystem (e.g., "pip", "setuptools"),
# this file strictly conforms to a standards-compliant PEP and hence
# generically applies to *ALL* such utilities.
#
# Welcome to project distribution hell, where only twenty distinct files in
# twenty distinct formats suffice to distribute a single project.
#
# --------------------( CAVEATS                            )--------------------
# Python-agnostic low-level system requirements (e.g., GraphViz) *MUST* be
# externally declared in the Streamlit-specific "packages.txt" file. Sadly,
# Poetry itself provides *NO* means of declaring these requirements here.
#
# --------------------( MOTIVATION                         )--------------------
# Streamlit currently requires either:
# * This standard file to be defined in a poetry-specific way. Poetry violates
#   PEP standards and is thus non-ideal. Nonetheless, ignoring poetry, this
#   single file suffices to package this entire project. Doing so avoids
#   repetition of this fragile core metadata elsewhere and thus preserves the
#   Don't Repeat Yourself (DRY) principle.
# * The non-standard "requirements.txt" file to be defined. That single file
#   does *NOT* suffice to package this entire project, requiring repetition of
#   fragile core metadata elsewhere and thus violating DRY.
#
# Since the benefit of preserving DRY in packaging significantly exceeds any
# marginal harm of using poetry, this single file is the optimal solution.
#
# --------------------( USAGE                              )--------------------
# Common Hatch commands include:
#
#     # Validate this file. *ALWAYS* run this command after modifying this file.
#     $ hatch project metadata | less
#
#     # Build both a source (tarball) *AND* binary distribution (wheel).
#     $ hatch build -t sdist -t wheel
#
# --------------------( SEE ALSO                           )--------------------
# * https://snarky.ca/clarifying-pep-518
#   "Clarifying PEP 518 (a.k.a. pyproject.toml)", a human-readable article from
#   one of the principal authors of the "pyproject.toml" standard.

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# CAUTION: Synchronize the live Streamlit Cloud-hosted instance of this app
# against modifications to this file by manually rebooting that instance *AFTER*
# pushing commits performing these modifications. Streamlit Cloud itself does
# *NOT* automatically detect these modifications and reboot that instance.
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# ....................{ TODO                               }....................
#FIXME: Poetry violates standards and is thus non-ideal. Hatch, on the other
#hand, embraces standards and has been officially adopted by the Python
#Packaging Authority (PyPA) organization that manage the cheeshop (PyPI). I can
#personally confirm that Hatch is a substantial improvement over poetry that we
#are strongly considering using in @beartype as well.
#
#So... what's the holdup, then? In a word, Streamlit. Streamlit currently
#requires this file to be defined in a poetry-specific way. Since that is bad,
#consider submitting a feature request to the Streamlit issue tracker politely
#begging them to generalize their Streamlit Cloud deployment strategy to
#generically support *ANY* PEP 517-compliant build backend -- including Hatch.

# ....................{ PEP 621                            }....................
# PEP 621-compliant section generically defining project metadata in a build
# tool-agnostic manner.
#
# Note that poetry currently ignores this section but does intend to comply with
# PEP 621 for some future release. Indeed, it appears likely that poetry (and
# other "pyproject.toml"-based build tools) will *EVENTUALLY* deprecate their
# existing support for build tool-specific metadata. See also this currently
# open issue on the subject:
#     https://github.com/python-poetry/roadmap/issues/3
[project]

# Fully-qualified name of this project's top-level Python package.
name = "cellnition"

# Human-readable single-line synopsis of this project.
#
# Note that, by PyPI design, this string *MUST*:
# * Prefix each newline in this string with a continuation character, which then
#   forces line wrapping.
# * Otherwise not span multiple lines or paragraphs.
description = """\
Open-source cross-platform biology simulator analyzing \
gene regulatory networks (GRNs) with Network Finite State Machines (NFSMs).
"""

# Relative filename of the file of the license this project is licensed under.
#
# Note that PEP 621 prohibits this table (i.e., dictionary) from defining both
# the "file" and "text" keys (e.g., 'text = "MIT"'). While defining both would
# certainly be preferable, the "file" key takes precedence over the "text" key.
license = { file = "LICENSE" }

# Relative filename of the file of the license this project is licensed under.
readme = "README.rst"

# List of all lowercase alphabetic keywords synopsising this project.
#
# These keywords may be arbitrarily selected so as to pretend to improve search
# engine optimization (SEO). In actuality, they do absolutely nothing.
keywords = [
    "python",
    "biology",
    "science",
    "simulator",
]

# List of all PyPI-specific trove classifier strings synopsizing this project.
# Each such string *MUST* contain either two or three " :: " substrings
# delimiting human-readable capitalized English words formally recognized by the
# "distutils"-specific register() command. See also:
# * https://pypi.org/classifiers
#   Plaintext list of all trove classifier strings recognized by PyPI.
classifiers = [
    # PyPI-specific version type. The number specified here is a magic constant
    # with no relation to this package's version numbering scheme. *sigh*
    "Development Status :: 5 - Production/Stable",

    # Miscellaneous metadata.
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]

# List of all principal authors of this package as a list of tables (i.e.,
# dictionaries) defining both the names and e-mail addresses of these authors.
#
# These authors should be thought of as the corresponding authors of a paper.
# Academic correspondence should be redirected to these authors.
authors = [
    { name="Alexis Pietak", email="alexis.pietak@gmail.com" },
]

# List of all secondary authors of this package as a list of tables (i.e.,
# dictionaries) defining both the names and e-mail addresses of these authors.
#
# These authors significantly contributed to the development of this project,
# but lack the scientific expertise to respond to external inquiries. Therefore,
# academic correspondence should *NOT* be redirected to these authors.
maintainers = [
    { name="Cecil Curry", email="leycec@gmail.com" },
]

# List of the names of all "[project]" fields to be resolved dynamically through
# build toolchain-specific plugins (rather than defined statically above).
dynamic = [
    # Dynamically resolve the "[project]" "version" field via the Hatch-specific
    # "[tool.hatch.version]" subsection, subsequently defined below.
    "version",
]

# ....................{ PEP 621 ~ dependencies             }....................
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# CAUTION: Synchronize this section with dependencies listed below.
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# Python interpreter versions required by this package.
#
# A relatively recent version of Python is required due to:
# * PEP 585-compliant type hints (e.g., "list[str]"), now leveraged through the
#   codebase due both to convenience and PEP 585's timely deprecation of PEP
#   484-compliant type hints (e.g., "typing.list[str]") by 2026 -- which
#   renders PEP 484-compliant type hints genuinely dangerous in 2021.
# * "importlib.metadata", first introduced with Python 3.8.0.
#
# Note that:
# * Our mandatory runtime dependency on "pyvista" transitively requires "vtk".
#   For unknown reasons, "vtk" has yet to publish Python 3.10 wheels. Since
#   "vtk" is *ONLY* installable via binary wheels, this effectively means that
#   "vtk" and thus "pyvista" and thus this package currently *CANNOT* be
#   installed under Python 3.10 using "pip". See also this unresolved VTK issue:
#       https://gitlab.kitware.com/vtk/vtk/-/issues/18335
requires-python = ">=3.10"

# List of all mandatory runtime dependencies.
dependencies = [
    # QA stack. Dismantled, this is:
    # * beartype 0.15.0 first introduced the pivotal "beartype.claw" import hook
    #   API enabling hybrid runtime-static type-checking.
    "beartype >=0.15.0",

    # Science stack.
    "numpy >=1.22.0",
    "pandas >=1.5.0",
    "scipy >=1.7.0",
    "sympy >=1.9.0",

    # # Web stack.
    # "streamlit >=1.19.0",

    #FIXME: Before enabling "trame", note that we'll need to add "trame" to our
    #mandatory conda-based dependencies as well, please.
    # "trame >=3.3.0",

    # 3D stack. Dismantled, this is:
    # * pyvista 0.42.0 first introduced support for "trame", an increasingly
    #   popular third-party package for web-centric 3D visualization.
    "pyvista >=0.42.0",

    # # Graph stack.
    # "streamlit-agraph >= 0.0.45",
    # "pydot >=1.4.1",

    # Network stack.
    "networkx >=3.4.0",
    "pygraphviz >=1.10",
]

# ....................{ PEP 621 ~ dependencies : optional  }....................
# Optional dependencies specified as a set of zero or more assignments of the
# form "{extra_name} = [{extra_dependency_1}, ...]", where:
# * "{extra_name}" is the arbitrary name of a project-specific "extra" (i.e.,
#   category of optional dependencies).
# * "{{extra_dependency_1}, ..." is a comma-delimited list of optional
#   dependencies installed under this "extra".
#
# When installing this project with "pip", users may additionally install these
# optional dependencies by subscripting the name of this project by these
# extras in comma-delimited fashion: e.g.,
#     $ pip install cellnition[doc-rtd,test-tox]
#
# Note that PEP 621 explicitly supports dependency composition through
# self-referential "extras". See also this awesome StackOverflow answer:
#     https://stackoverflow.com/a/72524073/2809027
[project.optional-dependencies]

# MkDocs-specific documentation-time dependencies required to generate
# documentation for this package via the third-party "mkdocs" command at the
# command line.
docs = [
    # Theme stack -- which transitively requires reasonably recent versions of
    # both MkDocs itself as well as all requisite MkDocs plugins.
    "mkdocs-material >=9.6.0",

    # API reference generation stack.
    "mkdocstrings-python >= 1.16.0",
]

# Tox-specific test-time dependencies required to test this package via
# the third-party "tox" command at the command line.
#
# Note that:
# * The "extras" key of the top-level "tox.ini" file explicitly references this
#   extra.
# * Failure to list *ALL* optional test-time dependencies here commonly results
#   in errors from mypy, which raises false positives on parsing import
#   statements for uninstalled third-party packages (e.g., "import numpy").
test-tox = [
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # CAUTION: Avoid constraining optional test-time dependencies to version
    # ranges, which commonly fail for edge-case test environments -- including:
    # * The oldest Python version still supported by @beartype, which typically
    #   is *NOT* supported by newer versions of these dependencies.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # A relatively modern version of "pytest" is required. It's probably quite
    # old by now. I feel depressed just reading comments like this...
    "pytest >=4.0.0",
]

# Tox-specific test-time coverage dependencies required to measure test coverage
# for this package.
#
# Note that the "extras" key of the top-level "tox.ini" file explicitly
# references this extra.
test-tox-coverage = [
    "coverage >=5.5",
]

# Developer-specific test-time dependencies required to test this package via
# the third-party "pytest" and "tox" commands at the command line.
test = [
    # Tox-specific test-time dependencies.
    "cellnition[test-tox,test-tox-coverage]",

    # A relatively modern version of "tox" is required. It's probably quite old
    # by now. I feel depressed just reading comments like this...
    'tox >=3.20.1',
]

# Developer-specific dependencies required to develop and contribute pull
# requests (PRs) for this project. Notably, this includes *ALL* test- and
# documentation-time dependencies.
dev = ["cellnition[docs,test]"]

# ....................{ PEP 621 ~ urls                     }....................
# Table (i.e., dictionary) mapping from the PyPI-recognized name of each
# relevant project URL to that URL.
[project.urls]
#FIXME: Replace with a link to more suitable documentation, please.
Docs =     "https://betsee.github.io/cellnition"
GitHub =   "https://github.com/betsee/cellnition"
Forums =   "https://github.com/betsee/cellnition/discussions"
Issues =   "https://github.com/betsee/cellnition/issues"
Releases = "https://github.com/betsee/cellnition/releases"

# ....................{ PEP 517                            }....................
# PEP 517-compliant section declaring the third-party build tools required to
# install this "pyproject.toml"-based project.
[build-system]

# List of all third-party Python packages required to build (i.e., install) this
# project from both codebase tarballs and binary wheels.
requires = ["hatchling >=1.14.0"]

# Fully-qualified name of the Python submodule of a third-party Python package
# listed above to be imported at runtime by third-party Python package managers
# (e.g., "pip") to build this project.
build-backend = "hatchling.build"

# ....................{ NON-PEP ~ hatch                    }....................
# PEP-noncompliant section declaring Hatch-specific version settings. See also:
# * Official documentation for this section.
#   https://hatch.pypa.io/latest/version
[tool.hatch.version]

# Relative filename of the Python submodule defining either a PEP 8-compliant
# "__version__" dunder global *OR* a PEP-noncompliant "VERSION" global, which
# Hatch then statically parses to obtain the current version of this project.
path = "cellnition/__init__.py"

# ....................{ NON-PEP ~ hatch : path             }....................
# PEP-noncompliant section declaring Hatch-specific build settings. Note that:
# * Hatch silently ignores *ALL* pathnames matched by ".gitignore" files
#   distributed throughout this codebase.
[tool.hatch.build]

# PEP-noncompliant section declaring Hatch-specific build settings when
# building binary distributions (e.g., wheels).
[tool.hatch.build.targets.wheel]

# Whitelist of one or more Bash-style glob expressions matching the relative
# pathnames of all paths to be included in binary distributions (e.g., wheels)
# but *NOT* source distributions (e.g., tarballs) created by Hatch.
include = [
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # CAUTION: Synchronize with glob expressions for source distributions below.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Glob expression recursively matching *ALL* Python submodules in this
    # project's package directory.
    "/cellnition/**/*.py",

    # Relative filenames of all requisite package-level installation-time files.
    "/cellnition/py.typed",

    # Relative dirname of this project's data subdirectory (i.e., unimportable
    # subdirectory bundled with this project containing *ONLY* Python-agnostic
    # media files).
    "/cellnition/data/",
]

# PEP-noncompliant section declaring Hatch-specific build settings when
# building source distributions (e.g., tarballs).
[tool.hatch.build.targets.sdist]

# Whitelist of one or more Bash-style glob expressions matching the relative
# pathnames of all paths to be included in source distributions (e.g., tarballs)
# but *NOT* binary distributions (e.g., wheels) created by Hatch.
#
# Note that:
# * This setting is the Hatch-specific equivalent of the setuptools-specific
#   "MANIFEST.in" file, which serves a similar (albeit non-standard, poorly
#   documented, and obfuscatory) purpose in the setuptools community.
# * Hatch *ALWAYS* implicitly includes at least these files in source
#   distributions:
#   * ".gitignore".
#   * "AUTHORS".
#   * "LICENSE".
#   * "README*".
#   * "pyproject.toml".
#
# Nonetheless, explicit is better than implicit. Trusting all future versions of
# Hatch to preserve this contract is a bridge too far for us. Ergo, we
# explicitly match *ALL* paths to be included in source distributions here.
include = [
    # Relative basenames of all requisite files residing in *ANY* directory.
    ".gitignore",

    # Relative basenames of all requisite top-level installation-time files.
    "/LICENSE",
    "/README.rst",
    "/conftest.py",
    "/pyproject.toml",
    "/pytest",
    "/pytest.ini",
    "/tox",
    "/tox.ini",
    "/.codecov.yml",
    "/.coveragerc",
    "/.readthedocs.yaml",

    # Relative dirnames of all requisite top-level installation-time
    # directories, including:
    # * All files documenting this project.
    "/doc/",

    # Glob expression recursively matching *ALL* Python submodules in this
    # project's test suite.
    "/cellnition_test/**/*.py",

    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # CAUTION: Synchronize with glob expressions for binary distributions above.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Glob expression recursively matching *ALL* Python submodules in this
    # project's package directory.
    "/cellnition/**/*.py",

    # Relative filenames of all requisite package-level installation-time files.
    "/cellnition/py.typed",

    # Relative dirname of this project's data subdirectory (i.e., unimportable
    # subdirectory bundled with this project containing *ONLY* Python-agnostic
    # media files).
    "/cellnition/data/",
]
