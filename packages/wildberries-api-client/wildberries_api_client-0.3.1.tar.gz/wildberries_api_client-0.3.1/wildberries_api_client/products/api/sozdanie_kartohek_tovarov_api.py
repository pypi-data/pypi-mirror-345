# coding: utf-8

"""
    Rabota s tovarami

    <div class=\"description_ref\">     Uznat, kak ispolzovat metody v biznes-keisah, mohno v <a href=\"https://dev.wildberries.ru/news/101\">instrukcii po rabote s tovarami</a> </div>  Rabota s tovarami vkluhaet v seba:   1. [Sozdanie](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov) i [redaktirovanie](/openapi/work-with-products#tag/Kartochki-tovarov) kartohek tovarov: v tom hisle, poluhenie [kategorii, predmetov i harakteristik tovarov](/openapi/work-with-products#tag/Kategorii-predmety-i-harakteristiki) i zagruzku [mediafailov](/openapi/work-with-products#tag/Mediafajly).   2. Nastroiku [arlykov](/openapi/work-with-products#tag/Yarlyki) dla udobnogo poiska tovarov.   3. Ustanovku [cen i skidok](/openapi/work-with-products#tag/Ceny-i-skidki).   4. Upravlenie [ostatkami tovarov](/openapi/work-with-products#tag/Ostatki-na-skladah-prodavca) i [skladami](/openapi/work-with-products#tag/Sklady-prodavca), esli vy rabotaete po modeli prodah so sklada prodavca.   # noqa: E501

    OpenAPI spec version: products
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.products.api_client import ApiClient


class SozdanieKartohekTovarovApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def content_v2_barcodes_post(self, body, **kwargs):  # noqa: E501
        """Generacia barkodov  # noqa: E501

        Metod generiruet massiv unikalnyh barkodov dla sozdania razmera v [kartohke tovara](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov/paths/~1content~1v2~1cards~1upload/post). Mohno ispolzovat, esli u vas net sobstvennyh barkodov.  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_barcodes_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2BarcodesBody body: (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_barcodes_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_barcodes_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def content_v2_barcodes_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generacia barkodov  # noqa: E501

        Metod generiruet massiv unikalnyh barkodov dla sozdania razmera v [kartohke tovara](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov/paths/~1content~1v2~1cards~1upload/post). Mohno ispolzovat, esli u vas net sobstvennyh barkodov.  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_barcodes_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2BarcodesBody body: (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_barcodes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `content_v2_barcodes_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/barcodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_cards_limits_get(self, **kwargs):  # noqa: E501
        """Limity kartohek tovarov  # noqa: E501

        Vozvrahaet besplatnye i platnye limity prodavca na [sozdanie kartohek tovarov](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov/paths/~1content~1v2~1cards~1upload/post).<br><br>  Formula dla poluhenia kolihestva kartohek, kotorye mohno sozdat:    > (`freeLimits` + `paidLimits`) - kolihestvo sozdannyh kartohek  Sozdannymi shitautsa kartohki, kotorye mohno poluhit herez metody [spisok kartohek tovarov](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1get~1cards~1list/post) i [spisok kartohek tovarov v korzine](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1get~1cards~1trash/post).  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_limits_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_cards_limits_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_cards_limits_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_v2_cards_limits_get_with_http_info(self, **kwargs):  # noqa: E501
        """Limity kartohek tovarov  # noqa: E501

        Vozvrahaet besplatnye i platnye limity prodavca na [sozdanie kartohek tovarov](/openapi/work-with-products#tag/Sozdanie-kartochek-tovarov/paths/~1content~1v2~1cards~1upload/post).<br><br>  Formula dla poluhenia kolihestva kartohek, kotorye mohno sozdat:    > (`freeLimits` + `paidLimits`) - kolihestvo sozdannyh kartohek  Sozdannymi shitautsa kartohki, kotorye mohno poluhit herez metody [spisok kartohek tovarov](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1get~1cards~1list/post) i [spisok kartohek tovarov v korzine](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1get~1cards~1trash/post).  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_limits_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_cards_limits_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/cards/limits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_cards_upload_add_post(self, **kwargs):  # noqa: E501
        """Sozdanie kartohek tovarov s prisoedineniem  # noqa: E501

        Metod sozdaet novye kartohki tovarov, prisoedinaa ih k suhestvuuhim kartohkam.  Gabarity tovarov mohno ukazat tolko v `santimetrah`, ves tovara s upakovkoi — v `kilogrammah`. <br><br> Sozdanie kartohki tovara proishodit asinhronno. Posle otpravki zapros stanovitsa v ohered na obrabotku.<br>Maksimalnyi razmer zaprosa 10 Mb.<br> Esli otvet `Uspehno` (`200`), no kakie-to kartohki ne obnovilis, poluhite [spisok nesozdannyh kartohek tovarov](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1cards~1error~1list/get).  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_upload_add_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadAddBody body:
        :return: ResponseCardCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_cards_upload_add_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_cards_upload_add_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_v2_cards_upload_add_post_with_http_info(self, **kwargs):  # noqa: E501
        """Sozdanie kartohek tovarov s prisoedineniem  # noqa: E501

        Metod sozdaet novye kartohki tovarov, prisoedinaa ih k suhestvuuhim kartohkam.  Gabarity tovarov mohno ukazat tolko v `santimetrah`, ves tovara s upakovkoi — v `kilogrammah`. <br><br> Sozdanie kartohki tovara proishodit asinhronno. Posle otpravki zapros stanovitsa v ohered na obrabotku.<br>Maksimalnyi razmer zaprosa 10 Mb.<br> Esli otvet `Uspehno` (`200`), no kakie-to kartohki ne obnovilis, poluhite [spisok nesozdannyh kartohek tovarov](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1cards~1error~1list/get).  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_upload_add_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadAddBody body:
        :return: ResponseCardCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_cards_upload_add_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/cards/upload/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseCardCreate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_v2_cards_upload_post(self, **kwargs):  # noqa: E501
        """Sozdanie kartohek tovarov  # noqa: E501

        Metod sozdaet kartohki tovarov c ukazaniem opisanii i harakteristik tovarov.<br>  <div class=\"description_important\">   Est dve formy zaprosa: dla sozdania otdelnyh i obedinennyh kartohek tovarov. </div>  Gabarity tovarov mohno ukazat tolko v `santimetrah`, ves tovara s upakovkoi — v `kilogrammah`. <br><br> Sozdanie kartohki tovara proishodit asinhronno. Posle otpravki zapros stanovitsa v ohered na obrabotku.<br> V odnom zaprose mohno sozdat maksimum 100 obedinennyh kartohek tovarov (`imtID`), po 30 kartohek tovarov v kahdoi. Maksimalnyi razmer zaprosa 10 Mb.<br> Esli otvet `Uspehno` (`200`), no kakie-to kartohki ne obnovilis, poluhite [spisok nesozdannyh kartohek tovarov](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1cards~1error~1list/get).  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_upload_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CardsUploadBody] body:
        :return: ResponseCardCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_v2_cards_upload_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.content_v2_cards_upload_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def content_v2_cards_upload_post_with_http_info(self, **kwargs):  # noqa: E501
        """Sozdanie kartohek tovarov  # noqa: E501

        Metod sozdaet kartohki tovarov c ukazaniem opisanii i harakteristik tovarov.<br>  <div class=\"description_important\">   Est dve formy zaprosa: dla sozdania otdelnyh i obedinennyh kartohek tovarov. </div>  Gabarity tovarov mohno ukazat tolko v `santimetrah`, ves tovara s upakovkoi — v `kilogrammah`. <br><br> Sozdanie kartohki tovara proishodit asinhronno. Posle otpravki zapros stanovitsa v ohered na obrabotku.<br> V odnom zaprose mohno sozdat maksimum 100 obedinennyh kartohek tovarov (`imtID`), po 30 kartohek tovarov v kahdoi. Maksimalnyi razmer zaprosa 10 Mb.<br> Esli otvet `Uspehno` (`200`), no kakie-to kartohki ne obnovilis, poluhite [spisok nesozdannyh kartohek tovarov](/openapi/work-with-products#tag/Kartochki-tovarov/paths/~1content~1v2~1cards~1error~1list/get).  <div class=\"description_limit\">   Maksimum 100 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> dla vseh metodov kategorii <a href=\"/openapi/api-information#tag/Avtorizaciya/Kak-sozdat-token\">Kontent</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_v2_cards_upload_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CardsUploadBody] body:
        :return: ResponseCardCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_v2_cards_upload_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/content/v2/cards/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseCardCreate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
