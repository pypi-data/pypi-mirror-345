"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from sifflet_sdk.client.api_client import ApiClient
from sifflet_sdk.client.api_client import Endpoint as _Endpoint
from sifflet_sdk.client.model.api_problem_schema import ApiProblemSchema
from sifflet_sdk.client.model.rule_generated_text_request_dto import (
    RuleGeneratedTextRequestDto,
)
from sifflet_sdk.client.model.rule_generated_text_response_dto import (
    RuleGeneratedTextResponseDto,
)
from sifflet_sdk.client.model.sql_query_correction_request_dto import (
    SqlQueryCorrectionRequestDto,
)
from sifflet_sdk.client.model.sql_query_correction_response_dto import (
    SqlQueryCorrectionResponseDto,
)
from sifflet_sdk.client.model.text_to_sql_request_dto import TextToSqlRequestDto
from sifflet_sdk.client.model.text_to_sql_response_dto import TextToSqlResponseDto
from sifflet_sdk.client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class AIPredictionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.generate_text_for_rule_endpoint = _Endpoint(
            settings={
                "response_type": (RuleGeneratedTextResponseDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/ai-predictions/_generate-text-for-rule",
                "operation_id": "generate_text_for_rule",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "rule_generated_text_request_dto",
                ],
                "required": [
                    "rule_generated_text_request_dto",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "rule_generated_text_request_dto": (RuleGeneratedTextRequestDto,),
                },
                "attribute_map": {},
                "location_map": {
                    "rule_generated_text_request_dto": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.sql_query_correction_endpoint = _Endpoint(
            settings={
                "response_type": (SqlQueryCorrectionResponseDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/ai-predictions/_sql-query-correction",
                "operation_id": "sql_query_correction",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "sql_query_correction_request_dto",
                ],
                "required": [
                    "sql_query_correction_request_dto",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "sql_query_correction_request_dto": (SqlQueryCorrectionRequestDto,),
                },
                "attribute_map": {},
                "location_map": {
                    "sql_query_correction_request_dto": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.text_to_sql_endpoint = _Endpoint(
            settings={
                "response_type": (TextToSqlResponseDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/ai-predictions/_text-to-sql",
                "operation_id": "text_to_sql",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "text_to_sql_request_dto",
                ],
                "required": [
                    "text_to_sql_request_dto",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "text_to_sql_request_dto": (TextToSqlRequestDto,),
                },
                "attribute_map": {},
                "location_map": {
                    "text_to_sql_request_dto": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )

    def generate_text_for_rule(self, rule_generated_text_request_dto, **kwargs):
        """Creates a name and a description for a given monitor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_text_for_rule(rule_generated_text_request_dto, async_req=True)
        >>> result = thread.get()

        Args:
            rule_generated_text_request_dto (RuleGeneratedTextRequestDto):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RuleGeneratedTextResponseDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["rule_generated_text_request_dto"] = rule_generated_text_request_dto
        return self.generate_text_for_rule_endpoint.call_with_http_info(**kwargs)

    def sql_query_correction(self, sql_query_correction_request_dto, **kwargs):
        """Suggests a correction for a SQL query which is computed by ML model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sql_query_correction(sql_query_correction_request_dto, async_req=True)
        >>> result = thread.get()

        Args:
            sql_query_correction_request_dto (SqlQueryCorrectionRequestDto):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SqlQueryCorrectionResponseDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["sql_query_correction_request_dto"] = sql_query_correction_request_dto
        return self.sql_query_correction_endpoint.call_with_http_info(**kwargs)

    def text_to_sql(self, text_to_sql_request_dto, **kwargs):
        """Creates a SQL query based on input text in natural language and context  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.text_to_sql(text_to_sql_request_dto, async_req=True)
        >>> result = thread.get()

        Args:
            text_to_sql_request_dto (TextToSqlRequestDto):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TextToSqlResponseDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["text_to_sql_request_dto"] = text_to_sql_request_dto
        return self.text_to_sql_endpoint.call_with_http_info(**kwargs)
