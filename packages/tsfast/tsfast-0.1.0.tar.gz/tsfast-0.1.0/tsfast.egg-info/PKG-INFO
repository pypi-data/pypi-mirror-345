Metadata-Version: 2.4
Name: tsfast
Version: 0.1.0
Summary: A description of your project
Home-page: https://github.com/daniel-om-weber/tsfast
Author: Daniel Oliver Martin Weber
Author-email: daniel.om.weber@gmail.com
License: Apache Software License 2.0
Keywords: fastai time-series system-identification deep-learning pytorch fransys
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: License :: OSI Approved :: Apache Software License
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: fastai>=2.7.0
Requires-Dist: identibench
Requires-Dist: matplotlib
Requires-Dist: ray[tune]
Provides-Extra: dev
Requires-Dist: nbdev>2; extra == "dev"
Requires-Dist: matplotlib; extra == "dev"
Requires-Dist: ipykernel; extra == "dev"
Requires-Dist: twine; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: license-file
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# tsfast


<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->

# tsfast

## Description

> A deep learning library for time series analysis and system
> identification built on top of PyTorch & fastai.

`tsfast` is an open-source deep learning package that focuses on system
identification and time series analysis tasks. Built on the foundations
of PyTorch and fastai, it provides efficient implementations of various
deep learning models and utilities.

## Installation

You can install the **latest stable** version from pip using:

``` python
pip install tsfast
```

For development installation:

``` python
git clone https://github.com/daniel-om-weber/tsfast
cd tsfast
pip install -e '.[dev]'
```

## Quick Start

Here is a quick example using a test dataloader. It demonstrates loading
and visualizing data, training a RNN, and visualizing the results.

``` python
from tsfast.basics import *
dls = create_dls_test()
dls.show_batch(max_n=1)
```

![](index_files/figure-commonmark/cell-3-output-1.png)

``` python
lrn = RNNLearner(dls)
lrn.fit_flat_cos(1)
```

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>

<div>
      <progress value='0' class='' max='1' style='width:300px; height:20px; vertical-align: middle;'></progress>
      0.00% [0/1 00:00&lt;?]
    </div>
    &#10;

| epoch | train_loss | valid_loss | fun_rmse | time |
|-------|------------|------------|----------|------|

<p>
&#10;    <div>
      <progress value='0' class='' max='12' style='width:300px; height:20px; vertical-align: middle;'></progress>
      0.00% [0/12 00:00&lt;?]
    </div>

``` python
lrn.show_results(max_n=1)
```

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>

![](index_files/figure-commonmark/cell-5-output-3.png)

## Documentation

For detailed documentation, visit our [documentation
site](https://daniel-om-weber.github.io/tsfast/).

Key documentation sections: - Core Functions - Data Processing -
Models - Learner API - Hyperparameter Optimization

## Requirements

- Python â‰¥ 3.9
- fastai
- PyTorch
- identibench
- matplotlib
- ray\[tune\] (for hyperparameter optimization)

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.
For major changes, please open an issue first to discuss what you would
like to change.

## License

This project is licensed under the Apache 2.0 License.

## Citation

If you use tsfast in your research, please cite:

``` text
@Misc{tsfast,
author = {Daniel O.M. Weber},
title = {tsfast - A deep learning library for time series analysis and system identification},
howpublished = {Github},
year = {2024},
url = {https://github.com/daniel-om-weber/tsfast}
}
```
