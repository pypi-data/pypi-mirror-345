# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.analytics.api_client import ApiClient


class StatistikaPoProdviheniuApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adv_v0_stats_keywords_get(self, advert_id, _from, to, **kwargs):  # noqa: E501
        """Statistika po kluhevym frazam  # noqa: E501

        Metod formiruet statistiku po kluhevym frazam iz poiskovoi stroki: kolihestvo prosmotrov tovara i zatraty po odnoi kluhevoi fraze. Podhodit dla avtomatiheskih kampanii i Aukcionov. <br><br>  Statistika formiruetsa za kahdyi den, kogda kampania byla aktivna. V odnom zaprose mohno poluhit dannye maksimum za 7 dnei. <br>  Dannye obnovlautsa kahdyi has.  <div class=\"description_limit\">     Maksimum 4 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_stats_keywords_get(advert_id, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advert_id: ID kampanii (required)
        :param date _from: Nahalo perioda (required)
        :param date to: Konec perioda (required)
        :return: V0KeywordsStatisticsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v0_stats_keywords_get_with_http_info(advert_id, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v0_stats_keywords_get_with_http_info(advert_id, _from, to, **kwargs)  # noqa: E501
            return data

    def adv_v0_stats_keywords_get_with_http_info(self, advert_id, _from, to, **kwargs):  # noqa: E501
        """Statistika po kluhevym frazam  # noqa: E501

        Metod formiruet statistiku po kluhevym frazam iz poiskovoi stroki: kolihestvo prosmotrov tovara i zatraty po odnoi kluhevoi fraze. Podhodit dla avtomatiheskih kampanii i Aukcionov. <br><br>  Statistika formiruetsa za kahdyi den, kogda kampania byla aktivna. V odnom zaprose mohno poluhit dannye maksimum za 7 dnei. <br>  Dannye obnovlautsa kahdyi has.  <div class=\"description_limit\">     Maksimum 4 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v0_stats_keywords_get_with_http_info(advert_id, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advert_id: ID kampanii (required)
        :param date _from: Nahalo perioda (required)
        :param date to: Konec perioda (required)
        :return: V0KeywordsStatisticsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advert_id', '_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v0_stats_keywords_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advert_id' is set
        if ('advert_id' not in params or
                params['advert_id'] is None):
            raise ValueError("Missing the required parameter `advert_id` when calling `adv_v0_stats_keywords_get`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `adv_v0_stats_keywords_get`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `adv_v0_stats_keywords_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advert_id' in params:
            query_params.append(('advert_id', params['advert_id']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v0/stats/keywords', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V0KeywordsStatisticsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_stat_words_get(self, id, **kwargs):  # noqa: E501
        """Statistika poiskovoi kampanii po kluhevym frazam  # noqa: E501

        Metod formiruet statistiku kampanii tipa **Poisk** po kluhevym frazam iz poiskovoi stroki: kolihestvo prosmotrov tovara i zatraty po odnoi kluhevoi fraze. <br><br>  Informacia obnovlaetsa kahdye 30 minut.  <div class=\"description_important\">     Tip reklamnyh kampanii <strong>Poisk</strong> ustarel. </div>  <div class=\"description_limit\">     Maksimum 4 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_stat_words_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_stat_words_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_stat_words_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def adv_v1_stat_words_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Statistika poiskovoi kampanii po kluhevym frazam  # noqa: E501

        Metod formiruet statistiku kampanii tipa **Poisk** po kluhevym frazam iz poiskovoi stroki: kolihestvo prosmotrov tovara i zatraty po odnoi kluhevoi fraze. <br><br>  Informacia obnovlaetsa kahdye 30 minut.  <div class=\"description_important\">     Tip reklamnyh kampanii <strong>Poisk</strong> ustarel. </div>  <div class=\"description_limit\">     Maksimum 4 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_stat_words_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_stat_words_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v1_stat_words_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/stat/words', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v1_stats_post(self, body, **kwargs):  # noqa: E501
        """Statistika mediakampanii  # noqa: E501

        Metod formiruet statistiku kampanii servisa [VB.Media](https://cmp.wildberries.ru/cmpf/statistics). Statistiku mohno gruppirovat po datam i/ili intervalam.  <div class=\"description_limit\">     Maksimum 10 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_stats_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1StatsBody body: (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v1_stats_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v1_stats_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def adv_v1_stats_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Statistika mediakampanii  # noqa: E501

        Metod formiruet statistiku kampanii servisa [VB.Media](https://cmp.wildberries.ru/cmpf/statistics). Statistiku mohno gruppirovat po datam i/ili intervalam.  <div class=\"description_limit\">     Maksimum 10 zaprosov v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v1_stats_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1StatsBody body: (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v1_stats_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v1_stats_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v1/stats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v2_auto_stat_words_get(self, id, **kwargs):  # noqa: E501
        """Statistika avtomatiheskoi kampanii po klasteram fraz  # noqa: E501

        Metod formiruet klastery kluhevyh — to est, nabory pohohih — fraz iz poiskovoi stroki, esli po nim hota by odin raz byli pokazany tovary iz kampanii. V otvete metoda takhe ukazano kolihestvo pokazov etih tovarov. <br><br> Informacia obnovlaetsa kahdye 15 minut.  <div class=\"description_limit\">     Maksimum 4 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v2_auto_stat_words_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v2_auto_stat_words_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v2_auto_stat_words_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def adv_v2_auto_stat_words_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Statistika avtomatiheskoi kampanii po klasteram fraz  # noqa: E501

        Metod formiruet klastery kluhevyh — to est, nabory pohohih — fraz iz poiskovoi stroki, esli po nim hota by odin raz byli pokazany tovary iz kampanii. V otvete metoda takhe ukazano kolihestvo pokazov etih tovarov. <br><br> Informacia obnovlaetsa kahdye 15 minut.  <div class=\"description_limit\">     Maksimum 4 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekundu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v2_auto_stat_words_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID kampanii (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v2_auto_stat_words_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `adv_v2_auto_stat_words_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v2/auto/stat-words', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adv_v2_fullstats_post(self, body, **kwargs):  # noqa: E501
        """Statistika kampanii  # noqa: E501

        Metod formiruet statistiku dla vseh kampanii, nezavisimo ot tipa.<br><br>  Dannye vernutsa dla kampanii v statusah:   - `7` — zaverhena   - `9` — idut pokazy   - `11` — pauza iz-za rashoda budheta  Esli v zaprose ukazan tolko ID kampanii, po nei vernutsa dannye tolko za poslednie sutki.  <div class=\"description_important\">   V zaprose mohno peredavat odin iz parametrov: <code>dates</code> libo <code>interval</code>, no ne oba srazu. </div>  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v2_fullstats_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2FullstatsBody body: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adv_v2_fullstats_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.adv_v2_fullstats_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def adv_v2_fullstats_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Statistika kampanii  # noqa: E501

        Metod formiruet statistiku dla vseh kampanii, nezavisimo ot tipa.<br><br>  Dannye vernutsa dla kampanii v statusah:   - `7` — zaverhena   - `9` — idut pokazy   - `11` — pauza iz-za rashoda budheta  Esli v zaprose ukazan tolko ID kampanii, po nei vernutsa dannye tolko za poslednie sutki.  <div class=\"description_important\">   V zaprose mohno peredavat odin iz parametrov: <code>dates</code> libo <code>interval</code>, no ne oba srazu. </div>  <div class=\"description_limit\">     Maksimum 1 zapros v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adv_v2_fullstats_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2FullstatsBody body: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adv_v2_fullstats_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `adv_v2_fullstats_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/adv/v2/fullstats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
