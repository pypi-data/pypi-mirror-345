# coding: utf-8

"""
    Dokumenty i buhgalteria

    <div class=\"description_important\">       Uznat bolhe o dokumentah i buhgalterii mohno v <a href=\"https://seller.wildberries.ru/instructions/category/ba929b64-1f89-4426-82d7-ce998ee552bd?goBackOption=prevRoute&categoryId=3c971375-9939-45e8-ab82-376019be8942\">spravohnom centre</a> </div>  Prosmotr [finansovyh othetov](/openapi/financial-reports-and-accounting#tag/Finansovye-otchyoty) i [dokumentov](/openapi/financial-reports-and-accounting#tag/Dokumenty) prodavca.   # noqa: E501

    OpenAPI spec version: finances
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.finances.api_client import ApiClient


class DokumentyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_documents_categories_get(self, **kwargs):  # noqa: E501
        """Kategorii dokumentov  # noqa: E501

        Metod predostavlaet kategorii dokumentov dla poluhenia [spiska dokumentov prodavca](/openapi/financial-reports-and-accounting#tag/Dokumenty/paths/~1api~1v1~1documents~1list/get).  <div class=\"description_limit\">     Maksimum 1 zapros v 10 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_documents_categories_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: azyk pola `title`:     - `ru` — russkii   - `en` — angliiskii   - `zh` — kitaiskii 
        :return: GetCategories
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_documents_categories_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_documents_categories_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_documents_categories_get_with_http_info(self, **kwargs):  # noqa: E501
        """Kategorii dokumentov  # noqa: E501

        Metod predostavlaet kategorii dokumentov dla poluhenia [spiska dokumentov prodavca](/openapi/financial-reports-and-accounting#tag/Dokumenty/paths/~1api~1v1~1documents~1list/get).  <div class=\"description_limit\">     Maksimum 1 zapros v 10 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_documents_categories_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: azyk pola `title`:     - `ru` — russkii   - `en` — angliiskii   - `zh` — kitaiskii 
        :return: GetCategories
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_documents_categories_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/documents/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCategories',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_documents_download_all_post(self, **kwargs):  # noqa: E501
        """Poluhit dokumenty  # noqa: E501

        Metod zagruhaet neskolko dokumentov iz [spiska dokumentov prodavca](/openapi/financial-reports-and-accounting#tag/Dokumenty/paths/~1api~1v1~1documents~1list/get). Kolihestvo dokumentov ne ograniheno.  <div class=\"description_limit\">     Maksimum 1 zapros v 5 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minut</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_documents_download_all_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestDownload body:
        :return: GetDocs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_documents_download_all_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_documents_download_all_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_documents_download_all_post_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit dokumenty  # noqa: E501

        Metod zagruhaet neskolko dokumentov iz [spiska dokumentov prodavca](/openapi/financial-reports-and-accounting#tag/Dokumenty/paths/~1api~1v1~1documents~1list/get). Kolihestvo dokumentov ne ograniheno.  <div class=\"description_limit\">     Maksimum 1 zapros v 5 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minut</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_documents_download_all_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestDownload body:
        :return: GetDocs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_documents_download_all_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/documents/download/all', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDocs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_documents_download_get(self, service_name, extension, **kwargs):  # noqa: E501
        """Poluhit dokument  # noqa: E501

        Metod zagruhaet odin dokument iz [spiska dokumentov prodavca](/openapi/financial-reports-and-accounting#tag/Dokumenty/paths/~1api~1v1~1documents~1list/get).  <div class=\"description_limit\">     Maksimum 1 zapros v 10 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_documents_download_get(service_name, extension, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: (required)
        :param str extension: (required)
        :return: GetDoc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_documents_download_get_with_http_info(service_name, extension, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_documents_download_get_with_http_info(service_name, extension, **kwargs)  # noqa: E501
            return data

    def api_v1_documents_download_get_with_http_info(self, service_name, extension, **kwargs):  # noqa: E501
        """Poluhit dokument  # noqa: E501

        Metod zagruhaet odin dokument iz [spiska dokumentov prodavca](/openapi/financial-reports-and-accounting#tag/Dokumenty/paths/~1api~1v1~1documents~1list/get).  <div class=\"description_limit\">     Maksimum 1 zapros v 10 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_documents_download_get_with_http_info(service_name, extension, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: (required)
        :param str extension: (required)
        :return: GetDoc
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'extension']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_documents_download_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if ('service_name' not in params or
                params['service_name'] is None):
            raise ValueError("Missing the required parameter `service_name` when calling `api_v1_documents_download_get`")  # noqa: E501
        # verify the required parameter 'extension' is set
        if ('extension' not in params or
                params['extension'] is None):
            raise ValueError("Missing the required parameter `extension` when calling `api_v1_documents_download_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'service_name' in params:
            query_params.append(('serviceName', params['service_name']))  # noqa: E501
        if 'extension' in params:
            query_params.append(('extension', params['extension']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/documents/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDoc',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_documents_list_get(self, **kwargs):  # noqa: E501
        """Spisok dokumentov  # noqa: E501

        Metod predostavlaet spisok dokumentov prodavca. Vy mohete poluhit [odin](/openapi/financial-reports-and-accounting#tag/Dokumenty/paths/~1api~1v1~1documents~1download/get) ili [neskolko](/openapi/financial-reports-and-accounting#tag/Dokumenty/paths/~1api~1v1~1documents~1download~1all/post) dokumentov iz poluhennogo spiska.  <div class=\"description_limit\">     Maksimum 1 zapros v 10 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_documents_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: azyk pola `category`:     - `ru` — russkii   - `en` — angliiskii   - `zh` — kitaiskii          
        :param date begin_time:
        :param date end_time:
        :param str sort:
        :param str order:
        :param str category:
        :param str service_name:
        :return: GetList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_documents_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_documents_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_documents_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """Spisok dokumentov  # noqa: E501

        Metod predostavlaet spisok dokumentov prodavca. Vy mohete poluhit [odin](/openapi/financial-reports-and-accounting#tag/Dokumenty/paths/~1api~1v1~1documents~1download/get) ili [neskolko](/openapi/financial-reports-and-accounting#tag/Dokumenty/paths/~1api~1v1~1documents~1download~1all/post) dokumentov iz poluhennogo spiska.  <div class=\"description_limit\">     Maksimum 1 zapros v 10 <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">sekund</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_documents_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: azyk pola `category`:     - `ru` — russkii   - `en` — angliiskii   - `zh` — kitaiskii          
        :param date begin_time:
        :param date end_time:
        :param str sort:
        :param str order:
        :param str category:
        :param str service_name:
        :return: GetList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale', 'begin_time', 'end_time', 'sort', 'order', 'category', 'service_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_documents_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'begin_time' in params:
            query_params.append(('beginTime', params['begin_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'service_name' in params:
            query_params.append(('serviceName', params['service_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/documents/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
