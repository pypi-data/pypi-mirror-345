# coding: utf-8

"""
    Marketing i prodvihenie

    <div class=\"description_important\">       Uznat bolhe o marketinge i prodvihenii mohno v <a href=\"https://seller.wildberries.ru/instructions/category/59d92bd3-6ea0-40f2-b762-ca8835d7d42e?goBackOption=prevRoute&categoryId=479385c6-de01-4b4d-ad4e-ed941e65582e\">spravohnom centre</a> </div>    Metody marketinga i prodvihenia pozvolaut:   1. Poluhat informaciu o [reklamnyh kampaniah](/openapi/promotion#tag/Kampanii) i [mediakampaniah](/openapi/promotion#tag/Media).   2. [Sozdavat](/openapi/promotion#tag/Sozdanie-kampanij) i [upravlat](/openapi/promotion#tag/Upravlenie-kampaniyami) kampaniami.   3. Nastraivat [parametry kampanii](/openapi/promotion#tag/Parametry-kampanij) â€” klastery fraz, prodvigaemye tovary i tak dalee.   4. Upravlat [finansami kampanii](/openapi/promotion#tag/Finansy).   5. Rabotat s [kalendarem akcii](/openapi/promotion#tag/Kalendar-akcij).  Dannye sinhroniziruutsa s bazoi raz v 3 minuty. Statusy kampanii menautsa raz v minutu. Stavki kampanii menautsa raz v 30 sekund.   # noqa: E501

    OpenAPI spec version: promotion
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20011(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advert_id': 'int',
        'name': 'str',
        'brand': 'str',
        'type': 'int',
        'status': 'int',
        'create_time': 'datetime',
        'extended': 'InlineResponse20011Extended',
        'items': 'list[InlineResponse20011Items]'
    }

    attribute_map = {
        'advert_id': 'advertId',
        'name': 'name',
        'brand': 'brand',
        'type': 'type',
        'status': 'status',
        'create_time': 'createTime',
        'extended': 'extended',
        'items': 'items'
    }

    def __init__(self, advert_id=None, name=None, brand=None, type=None, status=None, create_time=None, extended=None, items=None):  # noqa: E501
        """InlineResponse20011 - a model defined in Swagger"""  # noqa: E501
        self._advert_id = None
        self._name = None
        self._brand = None
        self._type = None
        self._status = None
        self._create_time = None
        self._extended = None
        self._items = None
        self.discriminator = None
        if advert_id is not None:
            self.advert_id = advert_id
        if name is not None:
            self.name = name
        if brand is not None:
            self.brand = brand
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if create_time is not None:
            self.create_time = create_time
        if extended is not None:
            self.extended = extended
        if items is not None:
            self.items = items

    @property
    def advert_id(self):
        """Gets the advert_id of this InlineResponse20011.  # noqa: E501

        ID mediakampanii  # noqa: E501

        :return: The advert_id of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._advert_id

    @advert_id.setter
    def advert_id(self, advert_id):
        """Sets the advert_id of this InlineResponse20011.

        ID mediakampanii  # noqa: E501

        :param advert_id: The advert_id of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._advert_id = advert_id

    @property
    def name(self):
        """Gets the name of this InlineResponse20011.  # noqa: E501

        Nazvanie mediakampanii  # noqa: E501

        :return: The name of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20011.

        Nazvanie mediakampanii  # noqa: E501

        :param name: The name of this InlineResponse20011.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def brand(self):
        """Gets the brand of this InlineResponse20011.  # noqa: E501

        Nazvanie brenda  # noqa: E501

        :return: The brand of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this InlineResponse20011.

        Nazvanie brenda  # noqa: E501

        :param brand: The brand of this InlineResponse20011.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def type(self):
        """Gets the type of this InlineResponse20011.  # noqa: E501

        <dl> <dt>Tip mediakampanii:</dt> <dd><code>1</code> - razmehenie po dnam</dd> <dd><code>2</code> - razmehenie po prosmotram</dd> </dl>   # noqa: E501

        :return: The type of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20011.

        <dl> <dt>Tip mediakampanii:</dt> <dd><code>1</code> - razmehenie po dnam</dd> <dd><code>2</code> - razmehenie po prosmotram</dd> </dl>   # noqa: E501

        :param type: The type of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this InlineResponse20011.  # noqa: E501

        <dl> <dt>Status mediakampanii:</dt>   <dd><code>1</code> - hernovik</dd>   <dd><code>2</code> - moderacia   <dd><code>3</code> - otkloneno (s vozmohnostu vernut na moderaciu)</dd>   <dd><code>4</code> - odobreno</dd>   <dd><code>5</code> - zaplanirovano</dd>   <dd><code>6</code> - na pokazah</dd>   <dd><code>7</code> - zaverheno</dd>   <dd><code>8</code> - otkazalsa</dd>   <dd><code>9</code> - priostanovlena prodavcom</dd>   <dd><code>10</code> - pauza po dnevnomu limitu</dd>   <dd><code>11</code> - pauza po rashodu budheta</dd> </dl>   # noqa: E501

        :return: The status of this InlineResponse20011.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20011.

        <dl> <dt>Status mediakampanii:</dt>   <dd><code>1</code> - hernovik</dd>   <dd><code>2</code> - moderacia   <dd><code>3</code> - otkloneno (s vozmohnostu vernut na moderaciu)</dd>   <dd><code>4</code> - odobreno</dd>   <dd><code>5</code> - zaplanirovano</dd>   <dd><code>6</code> - na pokazah</dd>   <dd><code>7</code> - zaverheno</dd>   <dd><code>8</code> - otkazalsa</dd>   <dd><code>9</code> - priostanovlena prodavcom</dd>   <dd><code>10</code> - pauza po dnevnomu limitu</dd>   <dd><code>11</code> - pauza po rashodu budheta</dd> </dl>   # noqa: E501

        :param status: The status of this InlineResponse20011.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def create_time(self):
        """Gets the create_time of this InlineResponse20011.  # noqa: E501

        Vrema sozdania mediakampanii  # noqa: E501

        :return: The create_time of this InlineResponse20011.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InlineResponse20011.

        Vrema sozdania mediakampanii  # noqa: E501

        :param create_time: The create_time of this InlineResponse20011.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def extended(self):
        """Gets the extended of this InlineResponse20011.  # noqa: E501


        :return: The extended of this InlineResponse20011.  # noqa: E501
        :rtype: InlineResponse20011Extended
        """
        return self._extended

    @extended.setter
    def extended(self, extended):
        """Sets the extended of this InlineResponse20011.


        :param extended: The extended of this InlineResponse20011.  # noqa: E501
        :type: InlineResponse20011Extended
        """

        self._extended = extended

    @property
    def items(self):
        """Gets the items of this InlineResponse20011.  # noqa: E501

        Informacia o bannere. <br> Nalihie v otvete teh ili inyh polei zavisit ot konfiguracii mediakampanii.   # noqa: E501

        :return: The items of this InlineResponse20011.  # noqa: E501
        :rtype: list[InlineResponse20011Items]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this InlineResponse20011.

        Informacia o bannere. <br> Nalihie v otvete teh ili inyh polei zavisit ot konfiguracii mediakampanii.   # noqa: E501

        :param items: The items of this InlineResponse20011.  # noqa: E501
        :type: list[InlineResponse20011Items]
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20011, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20011):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
