"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from sifflet_sdk.client.exceptions import ApiAttributeError
from sifflet_sdk.client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    OpenApiModel,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)


def lazy_import():
    from sifflet_sdk.client.model.airflow_params import AirflowParams
    from sifflet_sdk.client.model.athena_params import AthenaParams
    from sifflet_sdk.client.model.big_query_params import BigQueryParams
    from sifflet_sdk.client.model.composer_params import ComposerParams
    from sifflet_sdk.client.model.databricks_params import DatabricksParams
    from sifflet_sdk.client.model.dbt_cloud_params import DBTCloudParams
    from sifflet_sdk.client.model.dbt_params import DBTParams
    from sifflet_sdk.client.model.declarative_params import DeclarativeParams
    from sifflet_sdk.client.model.fivetran_params import FivetranParams
    from sifflet_sdk.client.model.git_connection import GitConnection
    from sifflet_sdk.client.model.looker_params import LookerParams
    from sifflet_sdk.client.model.microstrategy_params import MicrostrategyParams
    from sifflet_sdk.client.model.mssql_params import MssqlParams
    from sifflet_sdk.client.model.mwaa_params import MwaaParams
    from sifflet_sdk.client.model.mysql_params import MysqlParams
    from sifflet_sdk.client.model.oracle_params import OracleParams
    from sifflet_sdk.client.model.postgresql_params import PostgresqlParams
    from sifflet_sdk.client.model.power_bi_params import PowerBiParams
    from sifflet_sdk.client.model.qlik_params import QlikParams
    from sifflet_sdk.client.model.qlik_space import QlikSpace
    from sifflet_sdk.client.model.quick_sight_params import QuickSightParams
    from sifflet_sdk.client.model.redshift_params import RedshiftParams
    from sifflet_sdk.client.model.snowflake_params import SnowflakeParams
    from sifflet_sdk.client.model.synapse_params import SynapseParams
    from sifflet_sdk.client.model.tableau_params import TableauParams
    from sifflet_sdk.client.model.time_zone_dto import TimeZoneDto
    from sifflet_sdk.client.model.unknown_datasource_params import (
        UnknownDatasourceParams,
    )

    globals()["AirflowParams"] = AirflowParams
    globals()["AthenaParams"] = AthenaParams
    globals()["BigQueryParams"] = BigQueryParams
    globals()["ComposerParams"] = ComposerParams
    globals()["DBTCloudParams"] = DBTCloudParams
    globals()["DBTParams"] = DBTParams
    globals()["DatabricksParams"] = DatabricksParams
    globals()["DeclarativeParams"] = DeclarativeParams
    globals()["FivetranParams"] = FivetranParams
    globals()["GitConnection"] = GitConnection
    globals()["LookerParams"] = LookerParams
    globals()["MicrostrategyParams"] = MicrostrategyParams
    globals()["MssqlParams"] = MssqlParams
    globals()["MwaaParams"] = MwaaParams
    globals()["MysqlParams"] = MysqlParams
    globals()["OracleParams"] = OracleParams
    globals()["PostgresqlParams"] = PostgresqlParams
    globals()["PowerBiParams"] = PowerBiParams
    globals()["QlikParams"] = QlikParams
    globals()["QlikSpace"] = QlikSpace
    globals()["QuickSightParams"] = QuickSightParams
    globals()["RedshiftParams"] = RedshiftParams
    globals()["SnowflakeParams"] = SnowflakeParams
    globals()["SynapseParams"] = SynapseParams
    globals()["TableauParams"] = TableauParams
    globals()["TimeZoneDto"] = TimeZoneDto
    globals()["UnknownDatasourceParams"] = UnknownDatasourceParams


class GetAllDatasourceParamsType200ResponseInner(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ("datasource_type",): {
            "ATHENA": "ATHENA",
            "BIGQUERY": "BIGQUERY",
            "REDSHIFT": "REDSHIFT",
            "SNOWFLAKE": "SNOWFLAKE",
            "DATABRICKS": "DATABRICKS",
            "MSSQL": "MSSQL",
            "MYSQL": "MYSQL",
            "POSTGRES": "POSTGRES",
            "ORACLE": "ORACLE",
            "SYNAPSE": "SYNAPSE",
            "POWER_BI": "POWER_BI",
            "LOOKER": "LOOKER",
            "TABLEAU": "TABLEAU",
            "QUICKSIGHT": "QUICKSIGHT",
            "MICROSTRATEGY": "MICROSTRATEGY",
            "QLIK": "QLIK",
            "AIRFLOW": "AIRFLOW",
            "MWAA": "MWAA",
            "COMPOSER": "COMPOSER",
            "DBT": "DBT",
            "DBTCLOUD": "DBTCLOUD",
            "FIVETRAN": "FIVETRAN",
            "DECLARATIVE": "DECLARATIVE",
            "_UNKNOWN_": "_UNKNOWN_",
        },
        ("mysql_tls_version",): {
            "2": "TLS_V_1_2",
            "3": "TLS_V_1_3",
        },
    }

    validations = {
        ("worker_project_ids",): {},
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (
            bool,
            date,
            datetime,
            dict,
            float,
            int,
            list,
            str,
            none_type,
        )  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            "type": (str,),  # noqa: E501
            "datasource_type": (str,),  # noqa: E501
            "vpc_url": (str,),  # noqa: E501
            "billing_project_id": (str,),  # noqa: E501
            "worker_project_ids": ([str],),  # noqa: E501
            "create_incident_on_fail": (bool,),  # noqa: E501
            "job_definition_id": (str,),  # noqa: E501
            "authentication": (str,),  # noqa: E501
            "site": (str,),  # noqa: E501
            "default_refresh_rate": (str,),  # noqa: E501
            "timezone_data": (TimeZoneDto,),  # noqa: E501
            "database": (str,),  # noqa: E501
            "datasource": (str,),  # noqa: E501
            "region": (str,),  # noqa: E501
            "role_arn": (str,),  # noqa: E501
            "s3_output_location": (str,),  # noqa: E501
            "workgroup": (str,),  # noqa: E501
            "dataset_id": (str,),  # noqa: E501
            "project_id": (str,),  # noqa: E501
            "environment_name": (str,),  # noqa: E501
            "account_id": (str,),  # noqa: E501
            "base_url": (str,),  # noqa: E501
            "project_name": (str,),  # noqa: E501
            "target": (str,),  # noqa: E501
            "catalog": (str,),  # noqa: E501
            "host": (str,),  # noqa: E501
            "http_path": (str,),  # noqa: E501
            "port": (int,),  # noqa: E501
            "schema": (str,),  # noqa: E501
            "asset_name_separator": (str,),  # noqa: E501
            "authority": (str,),  # noqa: E501
            "authority_suffix": (str,),  # noqa: E501
            "declared_type": (str,),  # noqa: E501
            "scheme": (str,),  # noqa: E501
            "unique_name": (str,),  # noqa: E501
            "git_connections": ([GitConnection],),  # noqa: E501
            "ssl": (bool,),  # noqa: E501
            "mysql_tls_version": (str,),  # noqa: E501
            "sifflet_agent_enabled": (bool,),  # noqa: E501
            "client_id": (str,),  # noqa: E501
            "tenant_id": (str,),  # noqa: E501
            "workspace_id": (str,),  # noqa: E501
            "excluded_spaces": ([QlikSpace],),  # noqa: E501
            "included_spaces": ([QlikSpace],),  # noqa: E501
            "aws_region": (str,),  # noqa: E501
            "account_identifier": (str,),  # noqa: E501
            "warehouse": (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        lazy_import()
        val = {
            "AirflowParams": AirflowParams,
            "AthenaParams": AthenaParams,
            "BigQueryParams": BigQueryParams,
            "ComposerParams": ComposerParams,
            "DBTCloudParams": DBTCloudParams,
            "DBTParams": DBTParams,
            "DatabricksParams": DatabricksParams,
            "DeclarativeParams": DeclarativeParams,
            "FivetranParams": FivetranParams,
            "LookerParams": LookerParams,
            "MicrostrategyParams": MicrostrategyParams,
            "MssqlParams": MssqlParams,
            "MwaaParams": MwaaParams,
            "MysqlParams": MysqlParams,
            "OracleParams": OracleParams,
            "PostgresqlParams": PostgresqlParams,
            "PowerBiParams": PowerBiParams,
            "QlikParams": QlikParams,
            "QuickSightParams": QuickSightParams,
            "RedshiftParams": RedshiftParams,
            "SnowflakeParams": SnowflakeParams,
            "SynapseParams": SynapseParams,
            "TableauParams": TableauParams,
            "UnknownDatasourceParams": UnknownDatasourceParams,
        }
        if not val:
            return None
        return {"type": val}

    attribute_map = {
        "type": "type",  # noqa: E501
        "datasource_type": "datasourceType",  # noqa: E501
        "vpc_url": "vpcUrl",  # noqa: E501
        "billing_project_id": "billingProjectId",  # noqa: E501
        "worker_project_ids": "workerProjectIds",  # noqa: E501
        "create_incident_on_fail": "createIncidentOnFail",  # noqa: E501
        "job_definition_id": "jobDefinitionId",  # noqa: E501
        "authentication": "authentication",  # noqa: E501
        "site": "site",  # noqa: E501
        "default_refresh_rate": "defaultRefreshRate",  # noqa: E501
        "timezone_data": "timezoneData",  # noqa: E501
        "database": "database",  # noqa: E501
        "datasource": "datasource",  # noqa: E501
        "region": "region",  # noqa: E501
        "role_arn": "roleArn",  # noqa: E501
        "s3_output_location": "s3OutputLocation",  # noqa: E501
        "workgroup": "workgroup",  # noqa: E501
        "dataset_id": "datasetId",  # noqa: E501
        "project_id": "projectId",  # noqa: E501
        "environment_name": "environmentName",  # noqa: E501
        "account_id": "accountId",  # noqa: E501
        "base_url": "baseUrl",  # noqa: E501
        "project_name": "projectName",  # noqa: E501
        "target": "target",  # noqa: E501
        "catalog": "catalog",  # noqa: E501
        "host": "host",  # noqa: E501
        "http_path": "httpPath",  # noqa: E501
        "port": "port",  # noqa: E501
        "schema": "schema",  # noqa: E501
        "asset_name_separator": "assetNameSeparator",  # noqa: E501
        "authority": "authority",  # noqa: E501
        "authority_suffix": "authoritySuffix",  # noqa: E501
        "declared_type": "declaredType",  # noqa: E501
        "scheme": "scheme",  # noqa: E501
        "unique_name": "uniqueName",  # noqa: E501
        "git_connections": "gitConnections",  # noqa: E501
        "ssl": "ssl",  # noqa: E501
        "mysql_tls_version": "mysqlTlsVersion",  # noqa: E501
        "sifflet_agent_enabled": "siffletAgentEnabled",  # noqa: E501
        "client_id": "clientId",  # noqa: E501
        "tenant_id": "tenantId",  # noqa: E501
        "workspace_id": "workspaceId",  # noqa: E501
        "excluded_spaces": "excludedSpaces",  # noqa: E501
        "included_spaces": "includedSpaces",  # noqa: E501
        "aws_region": "awsRegion",  # noqa: E501
        "account_identifier": "accountIdentifier",  # noqa: E501
        "warehouse": "warehouse",  # noqa: E501
    }

    read_only_vars = {
        "default_refresh_rate",  # noqa: E501
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """GetAllDatasourceParamsType200ResponseInner - a model defined in OpenAPI

        Keyword Args:
            type (str):
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            datasource_type (str): [optional]  # noqa: E501
            vpc_url (str): [optional]  # noqa: E501
            billing_project_id (str): [optional]  # noqa: E501
            worker_project_ids ([str]): [optional]  # noqa: E501
            create_incident_on_fail (bool): [optional]  # noqa: E501
            job_definition_id (str): [optional]  # noqa: E501
            authentication (str): [optional]  # noqa: E501
            site (str): [optional]  # noqa: E501
            default_refresh_rate (str): [optional]  # noqa: E501
            timezone_data (TimeZoneDto): [optional]  # noqa: E501
            database (str): [optional]  # noqa: E501
            datasource (str): [optional]  # noqa: E501
            region (str): [optional]  # noqa: E501
            role_arn (str): [optional]  # noqa: E501
            s3_output_location (str): [optional]  # noqa: E501
            workgroup (str): [optional]  # noqa: E501
            dataset_id (str): [optional]  # noqa: E501
            project_id (str): [optional]  # noqa: E501
            environment_name (str): [optional]  # noqa: E501
            account_id (str): [optional]  # noqa: E501
            base_url (str): [optional]  # noqa: E501
            project_name (str): [optional]  # noqa: E501
            target (str): [optional]  # noqa: E501
            catalog (str): [optional]  # noqa: E501
            host (str): [optional]  # noqa: E501
            http_path (str): [optional]  # noqa: E501
            port (int): [optional]  # noqa: E501
            schema (str): [optional]  # noqa: E501
            asset_name_separator (str): [optional]  # noqa: E501
            authority (str): [optional]  # noqa: E501
            authority_suffix (str): [optional]  # noqa: E501
            declared_type (str): [optional]  # noqa: E501
            scheme (str): [optional]  # noqa: E501
            unique_name (str): [optional]  # noqa: E501
            git_connections ([GitConnection]): [optional]  # noqa: E501
            ssl (bool): [optional]  # noqa: E501
            mysql_tls_version (str): [optional]  # noqa: E501
            sifflet_agent_enabled (bool): [optional]  # noqa: E501
            client_id (str): [optional]  # noqa: E501
            tenant_id (str): [optional]  # noqa: E501
            workspace_id (str): [optional]  # noqa: E501
            excluded_spaces ([QlikSpace]): [optional]  # noqa: E501
            included_spaces ([QlikSpace]): [optional]  # noqa: E501
            aws_region (str): [optional]  # noqa: E501
            account_identifier (str): [optional]  # noqa: E501
            warehouse (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", False)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                        % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            "_check_type": _check_type,
            "_path_to_item": _path_to_item,
            "_spec_property_naming": _spec_property_naming,
            "_configuration": _configuration,
            "_visited_composed_classes": self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if (
                var_name in discarded_args
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self._additional_properties_model_instances
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set(
        [
            "_data_store",
            "_check_type",
            "_spec_property_naming",
            "_path_to_item",
            "_configuration",
            "_visited_composed_classes",
            "_composed_instances",
            "_var_name_to_model_instances",
            "_additional_properties_model_instances",
        ]
    )

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """GetAllDatasourceParamsType200ResponseInner - a model defined in OpenAPI

        Keyword Args:
            type (str):
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            datasource_type (str): [optional]  # noqa: E501
            vpc_url (str): [optional]  # noqa: E501
            billing_project_id (str): [optional]  # noqa: E501
            worker_project_ids ([str]): [optional]  # noqa: E501
            create_incident_on_fail (bool): [optional]  # noqa: E501
            job_definition_id (str): [optional]  # noqa: E501
            authentication (str): [optional]  # noqa: E501
            site (str): [optional]  # noqa: E501
            default_refresh_rate (str): [optional]  # noqa: E501
            timezone_data (TimeZoneDto): [optional]  # noqa: E501
            database (str): [optional]  # noqa: E501
            datasource (str): [optional]  # noqa: E501
            region (str): [optional]  # noqa: E501
            role_arn (str): [optional]  # noqa: E501
            s3_output_location (str): [optional]  # noqa: E501
            workgroup (str): [optional]  # noqa: E501
            dataset_id (str): [optional]  # noqa: E501
            project_id (str): [optional]  # noqa: E501
            environment_name (str): [optional]  # noqa: E501
            account_id (str): [optional]  # noqa: E501
            base_url (str): [optional]  # noqa: E501
            project_name (str): [optional]  # noqa: E501
            target (str): [optional]  # noqa: E501
            catalog (str): [optional]  # noqa: E501
            host (str): [optional]  # noqa: E501
            http_path (str): [optional]  # noqa: E501
            port (int): [optional]  # noqa: E501
            schema (str): [optional]  # noqa: E501
            asset_name_separator (str): [optional]  # noqa: E501
            authority (str): [optional]  # noqa: E501
            authority_suffix (str): [optional]  # noqa: E501
            declared_type (str): [optional]  # noqa: E501
            scheme (str): [optional]  # noqa: E501
            unique_name (str): [optional]  # noqa: E501
            git_connections ([GitConnection]): [optional]  # noqa: E501
            ssl (bool): [optional]  # noqa: E501
            mysql_tls_version (str): [optional]  # noqa: E501
            sifflet_agent_enabled (bool): [optional]  # noqa: E501
            client_id (str): [optional]  # noqa: E501
            tenant_id (str): [optional]  # noqa: E501
            workspace_id (str): [optional]  # noqa: E501
            excluded_spaces ([QlikSpace]): [optional]  # noqa: E501
            included_spaces ([QlikSpace]): [optional]  # noqa: E501
            aws_region (str): [optional]  # noqa: E501
            account_identifier (str): [optional]  # noqa: E501
            warehouse (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", False)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                        % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            "_check_type": _check_type,
            "_path_to_item": _path_to_item,
            "_spec_property_naming": _spec_property_naming,
            "_configuration": _configuration,
            "_visited_composed_classes": self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if (
                var_name in discarded_args
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self._additional_properties_model_instances
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(
                    f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                    f"class with read only attributes."
                )

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
            "anyOf": [],
            "allOf": [],
            "oneOf": [
                AirflowParams,
                AthenaParams,
                BigQueryParams,
                ComposerParams,
                DBTCloudParams,
                DBTParams,
                DatabricksParams,
                DeclarativeParams,
                FivetranParams,
                LookerParams,
                MicrostrategyParams,
                MssqlParams,
                MwaaParams,
                MysqlParams,
                OracleParams,
                PostgresqlParams,
                PowerBiParams,
                QlikParams,
                QuickSightParams,
                RedshiftParams,
                SnowflakeParams,
                SynapseParams,
                TableauParams,
                UnknownDatasourceParams,
            ],
        }
