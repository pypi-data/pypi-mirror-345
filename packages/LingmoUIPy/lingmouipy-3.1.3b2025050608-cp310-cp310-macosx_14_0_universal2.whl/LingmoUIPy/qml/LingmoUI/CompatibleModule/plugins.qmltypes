import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "menupopupwindow.h"
        name: "MenuPopupWindow"
        accessSemantics: "reference"
        defaultProperty: "popupContentItem"
        prototype: "QQuickWindow"
        exports: ["LingmoUI.CompatibleModule/MenuPopupWindow 3.0"]
        exportMetaObjectRevisions: [768]
        Property {
            name: "popupContentItem"
            type: "QQuickItem"
            isPointer: true
            read: "popupContentItem"
            write: "setPopupContentItem"
            index: 0
        }
        Property {
            name: "parentItem"
            type: "QQuickItem"
            isPointer: true
            read: "parentItem"
            write: "setParentItem"
            index: 1
        }
        Signal { name: "popupDismissed" }
        Signal { name: "geometryChanged" }
        Method { name: "show" }
        Method { name: "dismissPopup" }
        Method { name: "updateGeometry" }
        Method {
            name: "applicationStateChanged"
            Parameter { name: "state"; type: "Qt::ApplicationState" }
        }
    }
    Component {
        file: "newiconitem.h"
        name: "NewIconItem"
        accessSemantics: "reference"
        prototype: "QQuickPaintedItem"
        exports: ["LingmoUI.CompatibleModule/IconItem 3.0"]
        exportMetaObjectRevisions: [768]
        Property {
            name: "source"
            type: "QVariant"
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 0
        }
        Signal { name: "sourceChanged" }
        Method { name: "updateIcon" }
    }
    Component {
        file: "qabstractproxymodel.h"
        name: "QAbstractProxyModel"
        accessSemantics: "reference"
        prototype: "QAbstractItemModel"
        Property {
            name: "sourceModel"
            type: "QAbstractItemModel"
            isPointer: true
            bindable: "bindableSourceModel"
            read: "sourceModel"
            write: "setSourceModel"
            notify: "sourceModelChanged"
            index: 0
        }
        Signal { name: "sourceModelChanged" }
        Method { name: "_q_sourceModelDestroyed" }
        Method {
            name: "_q_sourceModelRowsAboutToBeInserted"
            Parameter { type: "QModelIndex" }
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method {
            name: "_q_sourceModelRowsInserted"
            Parameter { type: "QModelIndex" }
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method {
            name: "_q_sourceModelRowsRemoved"
            Parameter { type: "QModelIndex" }
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method {
            name: "_q_sourceModelColumnsAboutToBeInserted"
            Parameter { type: "QModelIndex" }
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method {
            name: "_q_sourceModelColumnsInserted"
            Parameter { type: "QModelIndex" }
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method {
            name: "_q_sourceModelColumnsRemoved"
            Parameter { type: "QModelIndex" }
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component {
        file: "qqmlsortfilterproxymodel.h"
        name: "QQmlSortFilterProxyModel"
        accessSemantics: "reference"
        prototype: "QSortFilterProxyModel"
        exports: ["LingmoUI.CompatibleModule/SortFilterProxyModel 3.0"]
        exportMetaObjectRevisions: [768]
        Property {
            name: "count"
            type: "int"
            read: "count"
            notify: "countChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "filterRoleName"
            type: "QString"
            read: "filterRoleName"
            write: "setFilterRoleName"
            notify: "filterRoleNameChanged"
            index: 1
        }
        Property {
            name: "filterPattern"
            type: "QString"
            read: "filterPattern"
            write: "setFilterPattern"
            notify: "filterPatternChanged"
            index: 2
        }
        Property {
            name: "filterValue"
            type: "QVariant"
            read: "filterValue"
            write: "setFilterValue"
            notify: "filterValueChanged"
            index: 3
        }
        Property {
            name: "filterExpression"
            type: "QQmlScriptString"
            read: "filterExpression"
            write: "setFilterExpression"
            notify: "filterExpressionChanged"
            index: 4
        }
        Property {
            name: "sortRoleName"
            type: "QString"
            read: "sortRoleName"
            write: "setSortRoleName"
            notify: "sortRoleNameChanged"
            index: 5
        }
        Property {
            name: "sortOrder"
            type: "Qt::SortOrder"
            read: "sortOrder"
            write: "setSortOrder"
            notify: "sortOrderChanged"
            index: 6
        }
        Property {
            name: "sortExpression"
            type: "QQmlScriptString"
            read: "sortExpression"
            write: "setSortExpression"
            notify: "sortExpressionChanged"
            index: 7
        }
        Signal { name: "countChanged" }
        Signal { name: "filterRoleNameChanged" }
        Signal { name: "filterPatternChanged" }
        Signal { name: "filterValueChanged" }
        Signal { name: "filterExpressionChanged" }
        Signal { name: "sortRoleNameChanged" }
        Signal { name: "sortOrderChanged" }
        Signal { name: "sortExpressionChanged" }
        Method { name: "invalidateFilter" }
        Method { name: "updateFilterRole" }
        Method { name: "updateSortRole" }
        Method { name: "updateRoles" }
    }
    Component {
        file: "qsortfilterproxymodel.h"
        name: "QSortFilterProxyModel"
        accessSemantics: "reference"
        prototype: "QAbstractProxyModel"
        Property {
            name: "filterRegularExpression"
            type: "QRegularExpression"
            bindable: "bindableFilterRegularExpression"
            read: "filterRegularExpression"
            write: "setFilterRegularExpression"
            index: 0
        }
        Property {
            name: "filterKeyColumn"
            type: "int"
            bindable: "bindableFilterKeyColumn"
            read: "filterKeyColumn"
            write: "setFilterKeyColumn"
            index: 1
        }
        Property {
            name: "dynamicSortFilter"
            type: "bool"
            bindable: "bindableDynamicSortFilter"
            read: "dynamicSortFilter"
            write: "setDynamicSortFilter"
            index: 2
        }
        Property {
            name: "filterCaseSensitivity"
            type: "Qt::CaseSensitivity"
            bindable: "bindableFilterCaseSensitivity"
            read: "filterCaseSensitivity"
            write: "setFilterCaseSensitivity"
            notify: "filterCaseSensitivityChanged"
            index: 3
        }
        Property {
            name: "sortCaseSensitivity"
            type: "Qt::CaseSensitivity"
            bindable: "bindableSortCaseSensitivity"
            read: "sortCaseSensitivity"
            write: "setSortCaseSensitivity"
            notify: "sortCaseSensitivityChanged"
            index: 4
        }
        Property {
            name: "isSortLocaleAware"
            type: "bool"
            bindable: "bindableIsSortLocaleAware"
            read: "isSortLocaleAware"
            write: "setSortLocaleAware"
            notify: "sortLocaleAwareChanged"
            index: 5
        }
        Property {
            name: "sortRole"
            type: "int"
            bindable: "bindableSortRole"
            read: "sortRole"
            write: "setSortRole"
            notify: "sortRoleChanged"
            index: 6
        }
        Property {
            name: "filterRole"
            type: "int"
            bindable: "bindableFilterRole"
            read: "filterRole"
            write: "setFilterRole"
            notify: "filterRoleChanged"
            index: 7
        }
        Property {
            name: "recursiveFilteringEnabled"
            type: "bool"
            bindable: "bindableRecursiveFilteringEnabled"
            read: "isRecursiveFilteringEnabled"
            write: "setRecursiveFilteringEnabled"
            notify: "recursiveFilteringEnabledChanged"
            index: 8
        }
        Property {
            name: "autoAcceptChildRows"
            type: "bool"
            bindable: "bindableAutoAcceptChildRows"
            read: "autoAcceptChildRows"
            write: "setAutoAcceptChildRows"
            notify: "autoAcceptChildRowsChanged"
            index: 9
        }
        Signal {
            name: "dynamicSortFilterChanged"
            Parameter { name: "dynamicSortFilter"; type: "bool" }
        }
        Signal {
            name: "filterCaseSensitivityChanged"
            Parameter { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        }
        Signal {
            name: "sortCaseSensitivityChanged"
            Parameter { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        }
        Signal {
            name: "sortLocaleAwareChanged"
            Parameter { name: "sortLocaleAware"; type: "bool" }
        }
        Signal {
            name: "sortRoleChanged"
            Parameter { name: "sortRole"; type: "int" }
        }
        Signal {
            name: "filterRoleChanged"
            Parameter { name: "filterRole"; type: "int" }
        }
        Signal {
            name: "recursiveFilteringEnabledChanged"
            Parameter { name: "recursiveFilteringEnabled"; type: "bool" }
        }
        Signal {
            name: "autoAcceptChildRowsChanged"
            Parameter { name: "autoAcceptChildRows"; type: "bool" }
        }
        Method {
            name: "setFilterRegularExpression"
            Parameter { name: "pattern"; type: "QString" }
        }
        Method {
            name: "setFilterRegularExpression"
            Parameter { name: "regularExpression"; type: "QRegularExpression" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "QString" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "QString" }
        }
        Method { name: "invalidate" }
    }
    Component {
        file: "thememanager.h"
        name: "ThemeManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["LingmoUI.CompatibleModule/ThemeManager 3.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [768]
        Property {
            name: "darkMode"
            type: "bool"
            read: "darkMode"
            notify: "darkModeChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "accentColor"
            type: "QColor"
            read: "accentColor"
            notify: "accentColorChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "blueColor"
            type: "QColor"
            read: "blueColor"
            notify: "colorChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "redColor"
            type: "QColor"
            read: "redColor"
            notify: "colorChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "greenColor"
            type: "QColor"
            read: "greenColor"
            notify: "colorChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "purpleColor"
            type: "QColor"
            read: "purpleColor"
            notify: "colorChanged"
            index: 5
            isReadonly: true
        }
        Property {
            name: "pinkColor"
            type: "QColor"
            read: "pinkColor"
            notify: "colorChanged"
            index: 6
            isReadonly: true
        }
        Property {
            name: "orangeColor"
            type: "QColor"
            read: "orangeColor"
            notify: "colorChanged"
            index: 7
            isReadonly: true
        }
        Property {
            name: "greyColor"
            type: "QColor"
            read: "greyColor"
            notify: "colorChanged"
            index: 8
            isReadonly: true
        }
        Property {
            name: "color0"
            type: "QColor"
            read: "blueColor"
            notify: "colorChanged"
            index: 9
            isReadonly: true
        }
        Property {
            name: "color1"
            type: "QColor"
            read: "redColor"
            notify: "colorChanged"
            index: 10
            isReadonly: true
        }
        Property {
            name: "color2"
            type: "QColor"
            read: "greenColor"
            notify: "colorChanged"
            index: 11
            isReadonly: true
        }
        Property {
            name: "color3"
            type: "QColor"
            read: "purpleColor"
            notify: "colorChanged"
            index: 12
            isReadonly: true
        }
        Property {
            name: "color4"
            type: "QColor"
            read: "pinkColor"
            notify: "colorChanged"
            index: 13
            isReadonly: true
        }
        Property {
            name: "color5"
            type: "QColor"
            read: "orangeColor"
            notify: "colorChanged"
            index: 14
            isReadonly: true
        }
        Property {
            name: "color6"
            type: "QColor"
            read: "greyColor"
            notify: "colorChanged"
            index: 15
            isReadonly: true
        }
        Property {
            name: "devicePixelRatio"
            type: "double"
            read: "devicePixelRatio"
            index: 16
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "fontSize"
            type: "double"
            read: "fontSize"
            notify: "fontSizeChanged"
            index: 17
            isReadonly: true
        }
        Property {
            name: "fontFamily"
            type: "QString"
            read: "fontFamily"
            notify: "fontFamilyChanged"
            index: 18
            isReadonly: true
        }
        Signal { name: "darkModeChanged" }
        Signal { name: "accentColorChanged" }
        Signal { name: "fontSizeChanged" }
        Signal { name: "fontFamilyChanged" }
        Signal { name: "colorChanged" }
        Method { name: "initData" }
        Method { name: "initDBusSignals" }
        Method {
            name: "onDBusDarkModeChanged"
            Parameter { name: "darkMode"; type: "bool" }
        }
        Method {
            name: "onDBusAccentColorChanged"
            Parameter { name: "accentColorID"; type: "int" }
        }
        Method { name: "onDBusFontSizeChanged" }
        Method { name: "onDBusFontFamilyChanged" }
    }
    Component {
        file: "wheelhandler.h"
        name: "WheelHandler"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["LingmoUI.CompatibleModule/WheelHandler 3.0"]
        exportMetaObjectRevisions: [768]
        Property {
            name: "target"
            type: "QQuickItem"
            isPointer: true
            read: "target"
            write: "setTarget"
            notify: "targetChanged"
            index: 0
        }
        Property { name: "blockTargetWheel"; type: "bool"; notify: "blockTargetWheelChanged"; index: 1 }
        Property {
            name: "scrollFlickableTarget"
            type: "bool"
            notify: "scrollFlickableTargetChanged"
            index: 2
        }
        Signal { name: "targetChanged" }
        Signal { name: "blockTargetWheelChanged" }
        Signal { name: "scrollFlickableTargetChanged" }
        Signal {
            name: "wheel"
            Parameter { name: "wheel"; type: "KirigamiWheelEvent"; isPointer: true }
        }
    }
    Component {
        file: "windowblur.h"
        name: "WindowBlur"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: ["LingmoUI.CompatibleModule/WindowBlur 3.0"]
        exportMetaObjectRevisions: [768]
        Property {
            name: "view"
            type: "QWindow"
            isPointer: true
            read: "view"
            write: "setView"
            notify: "viewChanged"
            index: 0
        }
        Property {
            name: "geometry"
            type: "QRect"
            read: "geometry"
            write: "setGeometry"
            notify: "geometryChanged"
            index: 1
        }
        Property {
            name: "enabled"
            type: "bool"
            read: "enabled"
            write: "setEnabled"
            notify: "enabledChanged"
            index: 2
        }
        Property {
            name: "windowRadius"
            type: "double"
            read: "windowRadius"
            write: "setWindowRadius"
            notify: "windowRadiusChanged"
            index: 3
        }
        Signal { name: "viewChanged" }
        Signal { name: "enabledChanged" }
        Signal { name: "windowRadiusChanged" }
        Signal { name: "geometryChanged" }
        Method {
            name: "onViewVisibleChanged"
            Parameter { type: "bool" }
        }
    }
    Component {
        file: "windowhelper.h"
        name: "WindowHelper"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["LingmoUI.CompatibleModule/WindowHelper 3.0"]
        exportMetaObjectRevisions: [768]
        Method {
            name: "startSystemMove"
            Parameter { name: "w"; type: "QWindow"; isPointer: true }
        }
        Method {
            name: "startSystemResize"
            Parameter { name: "w"; type: "QWindow"; isPointer: true }
            Parameter { name: "edges"; type: "Qt::Edges" }
        }
        Method {
            name: "minimizeWindow"
            Parameter { name: "w"; type: "QWindow"; isPointer: true }
        }
    }
    Component {
        file: "windowshadow.h"
        name: "WindowShadow"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: ["LingmoUI.CompatibleModule/WindowShadow 3.0"]
        exportMetaObjectRevisions: [768]
        Property {
            name: "view"
            type: "QWindow"
            isPointer: true
            read: "view"
            write: "setView"
            notify: "viewChanged"
            index: 0
        }
        Property {
            name: "geometry"
            type: "QRect"
            read: "geometry"
            write: "setGeometry"
            notify: "geometryChanged"
            index: 1
        }
        Property {
            name: "radius"
            type: "double"
            read: "radius"
            write: "setRadius"
            notify: "radiusChanged"
            index: 2
        }
        Property {
            name: "strength"
            type: "double"
            read: "strength"
            write: "setStrength"
            notify: "strengthChanged"
            index: 3
        }
        Signal { name: "geometryChanged" }
        Signal { name: "enabledChanged" }
        Signal { name: "viewChanged" }
        Signal { name: "edgesChanged" }
        Signal { name: "radiusChanged" }
        Signal { name: "strengthChanged" }
        Method {
            name: "onViewVisibleChanged"
            Parameter { type: "bool" }
        }
    }
}
