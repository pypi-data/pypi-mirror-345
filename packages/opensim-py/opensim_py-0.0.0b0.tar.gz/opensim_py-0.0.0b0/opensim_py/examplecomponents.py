# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _examplecomponents
else:
    import _examplecomponents

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import opensim.actuators
import opensim.simulation
import opensim.common
import opensim.simbody
class ToyReflexController(opensim.simulation.Controller):
    r"""
    ToyReflexController is a concrete controller that excites muscles in response
    to muscle lengthening to simulate a simple stretch reflex. This controller
    is meant to serve as an example how to implement a controller in
    OpenSim. It is intended for demonstration purposes only.

    Author: Ajay Seth
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        return _examplecomponents.ToyReflexController_safeDownCast(obj)

    def assign(self, aObject):
        return _examplecomponents.ToyReflexController_assign(self, aObject)

    @staticmethod
    def getClassName():
        return _examplecomponents.ToyReflexController_getClassName()

    def clone(self):
        return _examplecomponents.ToyReflexController_clone(self)

    def getConcreteClassName(self):
        return _examplecomponents.ToyReflexController_getConcreteClassName(self)

    def copyProperty_gain(self, source):
        return _examplecomponents.ToyReflexController_copyProperty_gain(self, source)

    def append_gain(self, value):
        return _examplecomponents.ToyReflexController_append_gain(self, value)

    def constructProperty_gain(self, initValue):
        return _examplecomponents.ToyReflexController_constructProperty_gain(self, initValue)

    def get_gain(self, *args):
        return _examplecomponents.ToyReflexController_get_gain(self, *args)

    def upd_gain(self, *args):
        return _examplecomponents.ToyReflexController_upd_gain(self, *args)

    def set_gain(self, *args):
        return _examplecomponents.ToyReflexController_set_gain(self, *args)

    def __init__(self, *args):
        r"""
        *Overload 1:*
         Default constructor.

        |

        *Overload 2:*
         Convenience constructor
        :type gain: float
        :param gain:       gain on the stretch response
        """
        _examplecomponents.ToyReflexController_swiginit(self, _examplecomponents.new_ToyReflexController(*args))

    def computeControls(self, s, controls):
        r"""
         Compute the controls for actuators (muscles)
         This method defines the behavior of the ToyReflexController

        :type s: :py:class:`State`
        :param s:         system state
        :type controls: :py:class:`Vector`
        :param controls:  writable model controls
        """
        return _examplecomponents.ToyReflexController_computeControls(self, s, controls)
    __swig_destroy__ = _examplecomponents.delete_ToyReflexController

# Register ToyReflexController in _examplecomponents:
_examplecomponents.ToyReflexController_swigregister(ToyReflexController)
class ToyPropMyoController(opensim.simulation.Controller):
    r"""
     PropMyoController is a type of Controller that produces a control signal
    k*a, where 'k' is the gain property and 'a' is the activation input (note,
    however, that the control signal is 0 for a < 0.31). This Controller is
    intended to simulate a proportional myoelectric controller [1], and can control
    any ScalarActuator (set using the "actuator" socket). This class intended for
    demonstration purposes only.
    [1] https://en.wikipedia.org/wiki/Proportional_myoelectric_control
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        return _examplecomponents.ToyPropMyoController_safeDownCast(obj)

    def assign(self, aObject):
        return _examplecomponents.ToyPropMyoController_assign(self, aObject)

    @staticmethod
    def getClassName():
        return _examplecomponents.ToyPropMyoController_getClassName()

    def clone(self):
        return _examplecomponents.ToyPropMyoController_clone(self)

    def getConcreteClassName(self):
        return _examplecomponents.ToyPropMyoController_getConcreteClassName(self)

    def copyProperty_gain(self, source):
        return _examplecomponents.ToyPropMyoController_copyProperty_gain(self, source)

    def append_gain(self, value):
        return _examplecomponents.ToyPropMyoController_append_gain(self, value)

    def constructProperty_gain(self, initValue):
        return _examplecomponents.ToyPropMyoController_constructProperty_gain(self, initValue)

    def get_gain(self, *args):
        return _examplecomponents.ToyPropMyoController_get_gain(self, *args)

    def upd_gain(self, *args):
        return _examplecomponents.ToyPropMyoController_upd_gain(self, *args)

    def set_gain(self, *args):
        return _examplecomponents.ToyPropMyoController_set_gain(self, *args)
    PropertyIndex_socket_actuator = property(_examplecomponents.ToyPropMyoController_PropertyIndex_socket_actuator_get, _examplecomponents.ToyPropMyoController_PropertyIndex_socket_actuator_set)

    def connectSocket_actuator(self, object):
        return _examplecomponents.ToyPropMyoController_connectSocket_actuator(self, object)
    PropertyIndex_input_activation = property(_examplecomponents.ToyPropMyoController_PropertyIndex_input_activation_get, _examplecomponents.ToyPropMyoController_PropertyIndex_input_activation_set)

    def connectInput_activation(self, *args):
        return _examplecomponents.ToyPropMyoController_connectInput_activation(self, *args)
    _has_output_myo_control = property(_examplecomponents.ToyPropMyoController__has_output_myo_control_get, _examplecomponents.ToyPropMyoController__has_output_myo_control_set)

    def __init__(self):
        _examplecomponents.ToyPropMyoController_swiginit(self, _examplecomponents.new_ToyPropMyoController())

    def computeControl(self, s):
        return _examplecomponents.ToyPropMyoController_computeControl(self, s)

    def computeControls(self, s, controls):
        return _examplecomponents.ToyPropMyoController_computeControls(self, s, controls)
    __swig_destroy__ = _examplecomponents.delete_ToyPropMyoController

# Register ToyPropMyoController in _examplecomponents:
_examplecomponents.ToyPropMyoController_swigregister(ToyPropMyoController)
class HopperDevice(opensim.simulation.ModelComponent):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        return _examplecomponents.HopperDevice_safeDownCast(obj)

    def assign(self, aObject):
        return _examplecomponents.HopperDevice_assign(self, aObject)

    @staticmethod
    def getClassName():
        return _examplecomponents.HopperDevice_getClassName()

    def clone(self):
        return _examplecomponents.HopperDevice_clone(self)

    def getConcreteClassName(self):
        return _examplecomponents.HopperDevice_getConcreteClassName(self)
    _has_output_length = property(_examplecomponents.HopperDevice__has_output_length_get, _examplecomponents.HopperDevice__has_output_length_set)
    _has_output_speed = property(_examplecomponents.HopperDevice__has_output_speed_get, _examplecomponents.HopperDevice__has_output_speed_set)
    _has_output_tension = property(_examplecomponents.HopperDevice__has_output_tension_get, _examplecomponents.HopperDevice__has_output_tension_set)
    _has_output_power = property(_examplecomponents.HopperDevice__has_output_power_get, _examplecomponents.HopperDevice__has_output_power_set)
    _has_output_height = property(_examplecomponents.HopperDevice__has_output_height_get, _examplecomponents.HopperDevice__has_output_height_set)
    _has_output_com_height = property(_examplecomponents.HopperDevice__has_output_com_height_get, _examplecomponents.HopperDevice__has_output_com_height_set)

    def copyProperty_actuator_name(self, source):
        return _examplecomponents.HopperDevice_copyProperty_actuator_name(self, source)

    def append_actuator_name(self, value):
        return _examplecomponents.HopperDevice_append_actuator_name(self, value)

    def constructProperty_actuator_name(self, initValue):
        return _examplecomponents.HopperDevice_constructProperty_actuator_name(self, initValue)

    def get_actuator_name(self, *args):
        return _examplecomponents.HopperDevice_get_actuator_name(self, *args)

    def upd_actuator_name(self, *args):
        return _examplecomponents.HopperDevice_upd_actuator_name(self, *args)

    def set_actuator_name(self, *args):
        return _examplecomponents.HopperDevice_set_actuator_name(self, *args)

    def __init__(self):
        _examplecomponents.HopperDevice_swiginit(self, _examplecomponents.new_HopperDevice())

    def getLength(self, s):
        return _examplecomponents.HopperDevice_getLength(self, s)

    def getSpeed(self, s):
        return _examplecomponents.HopperDevice_getSpeed(self, s)

    def getTension(self, s):
        return _examplecomponents.HopperDevice_getTension(self, s)

    def getPower(self, s):
        return _examplecomponents.HopperDevice_getPower(self, s)

    def getHeight(self, s):
        return _examplecomponents.HopperDevice_getHeight(self, s)

    def getCenterOfMassHeight(self, s):
        return _examplecomponents.HopperDevice_getCenterOfMassHeight(self, s)
    __swig_destroy__ = _examplecomponents.delete_HopperDevice

# Register HopperDevice in _examplecomponents:
_examplecomponents.HopperDevice_swigregister(HopperDevice)

