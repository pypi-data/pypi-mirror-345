# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchReportGroupReqParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_period': 'Period',
        'past_period': 'PastPeriod',
        'nm_ids': 'list[int]',
        'subject_ids': 'list[int]',
        'brand_names': 'list[str]',
        'tag_ids': 'list[int]',
        'order_by': 'OrderByGrTe',
        'position_cluster': 'PositionCluster'
    }

    attribute_map = {
        'current_period': 'currentPeriod',
        'past_period': 'pastPeriod',
        'nm_ids': 'nmIds',
        'subject_ids': 'subjectIds',
        'brand_names': 'brandNames',
        'tag_ids': 'tagIds',
        'order_by': 'orderBy',
        'position_cluster': 'positionCluster'
    }

    def __init__(self, current_period=None, past_period=None, nm_ids=None, subject_ids=None, brand_names=None, tag_ids=None, order_by=None, position_cluster=None):  # noqa: E501
        """SearchReportGroupReqParams - a model defined in Swagger"""  # noqa: E501
        self._current_period = None
        self._past_period = None
        self._nm_ids = None
        self._subject_ids = None
        self._brand_names = None
        self._tag_ids = None
        self._order_by = None
        self._position_cluster = None
        self.discriminator = None
        self.current_period = current_period
        if past_period is not None:
            self.past_period = past_period
        if nm_ids is not None:
            self.nm_ids = nm_ids
        self.subject_ids = subject_ids
        if brand_names is not None:
            self.brand_names = brand_names
        if tag_ids is not None:
            self.tag_ids = tag_ids
        self.order_by = order_by
        self.position_cluster = position_cluster

    @property
    def current_period(self):
        """Gets the current_period of this SearchReportGroupReqParams.  # noqa: E501


        :return: The current_period of this SearchReportGroupReqParams.  # noqa: E501
        :rtype: Period
        """
        return self._current_period

    @current_period.setter
    def current_period(self, current_period):
        """Sets the current_period of this SearchReportGroupReqParams.


        :param current_period: The current_period of this SearchReportGroupReqParams.  # noqa: E501
        :type: Period
        """
        if current_period is None:
            raise ValueError("Invalid value for `current_period`, must not be `None`")  # noqa: E501

        self._current_period = current_period

    @property
    def past_period(self):
        """Gets the past_period of this SearchReportGroupReqParams.  # noqa: E501


        :return: The past_period of this SearchReportGroupReqParams.  # noqa: E501
        :rtype: PastPeriod
        """
        return self._past_period

    @past_period.setter
    def past_period(self, past_period):
        """Sets the past_period of this SearchReportGroupReqParams.


        :param past_period: The past_period of this SearchReportGroupReqParams.  # noqa: E501
        :type: PastPeriod
        """

        self._past_period = past_period

    @property
    def nm_ids(self):
        """Gets the nm_ids of this SearchReportGroupReqParams.  # noqa: E501

        Artikuly WB, po kotorym sostavit othet. Ostavte pustym, htoby poluhit othet obo vseh tovarah   # noqa: E501

        :return: The nm_ids of this SearchReportGroupReqParams.  # noqa: E501
        :rtype: list[int]
        """
        return self._nm_ids

    @nm_ids.setter
    def nm_ids(self, nm_ids):
        """Sets the nm_ids of this SearchReportGroupReqParams.

        Artikuly WB, po kotorym sostavit othet. Ostavte pustym, htoby poluhit othet obo vseh tovarah   # noqa: E501

        :param nm_ids: The nm_ids of this SearchReportGroupReqParams.  # noqa: E501
        :type: list[int]
        """

        self._nm_ids = nm_ids

    @property
    def subject_ids(self):
        """Gets the subject_ids of this SearchReportGroupReqParams.  # noqa: E501

        Spisok ID predmetov dla filtracii. Ostavte pustym, htoby poluhit othet po vsem predmetam  # noqa: E501

        :return: The subject_ids of this SearchReportGroupReqParams.  # noqa: E501
        :rtype: list[int]
        """
        return self._subject_ids

    @subject_ids.setter
    def subject_ids(self, subject_ids):
        """Sets the subject_ids of this SearchReportGroupReqParams.

        Spisok ID predmetov dla filtracii. Ostavte pustym, htoby poluhit othet po vsem predmetam  # noqa: E501

        :param subject_ids: The subject_ids of this SearchReportGroupReqParams.  # noqa: E501
        :type: list[int]
        """
        if subject_ids is None:
            raise ValueError("Invalid value for `subject_ids`, must not be `None`")  # noqa: E501

        self._subject_ids = subject_ids

    @property
    def brand_names(self):
        """Gets the brand_names of this SearchReportGroupReqParams.  # noqa: E501

        Spisok brendov dla filtracii  # noqa: E501

        :return: The brand_names of this SearchReportGroupReqParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._brand_names

    @brand_names.setter
    def brand_names(self, brand_names):
        """Sets the brand_names of this SearchReportGroupReqParams.

        Spisok brendov dla filtracii  # noqa: E501

        :param brand_names: The brand_names of this SearchReportGroupReqParams.  # noqa: E501
        :type: list[str]
        """

        self._brand_names = brand_names

    @property
    def tag_ids(self):
        """Gets the tag_ids of this SearchReportGroupReqParams.  # noqa: E501

        Spisok ID arlykov dla filtracii  # noqa: E501

        :return: The tag_ids of this SearchReportGroupReqParams.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this SearchReportGroupReqParams.

        Spisok ID arlykov dla filtracii  # noqa: E501

        :param tag_ids: The tag_ids of this SearchReportGroupReqParams.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def order_by(self):
        """Gets the order_by of this SearchReportGroupReqParams.  # noqa: E501


        :return: The order_by of this SearchReportGroupReqParams.  # noqa: E501
        :rtype: OrderByGrTe
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this SearchReportGroupReqParams.


        :param order_by: The order_by of this SearchReportGroupReqParams.  # noqa: E501
        :type: OrderByGrTe
        """
        if order_by is None:
            raise ValueError("Invalid value for `order_by`, must not be `None`")  # noqa: E501

        self._order_by = order_by

    @property
    def position_cluster(self):
        """Gets the position_cluster of this SearchReportGroupReqParams.  # noqa: E501


        :return: The position_cluster of this SearchReportGroupReqParams.  # noqa: E501
        :rtype: PositionCluster
        """
        return self._position_cluster

    @position_cluster.setter
    def position_cluster(self, position_cluster):
        """Sets the position_cluster of this SearchReportGroupReqParams.


        :param position_cluster: The position_cluster of this SearchReportGroupReqParams.  # noqa: E501
        :type: PositionCluster
        """
        if position_cluster is None:
            raise ValueError("Invalid value for `position_cluster`, must not be `None`")  # noqa: E501

        self._position_cluster = position_cluster

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchReportGroupReqParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchReportGroupReqParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
