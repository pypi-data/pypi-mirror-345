[build-system]
requires = ["setuptools>=78", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "enve"
authors = [{name = "AurÃ©lien Chick", email = "aurelien.chick@gmail.com"}]
description = "An environment variable parser library with type hint and conversion support."
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
dependencies = []
keywords = [
    "env",
    "environment",
    "environment variables",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dynamic = ["version"]

[dependency-groups]
dev = [
    "mkdocs==1.6.1",
    "mkdocs-material==9.6.12",
    "mkdocstrings[python]==0.29.1",
    "mypy==1.15.0",
    "pyfakefs==5.8.0",
    "pytest==8.3.5",
    "pytest-cov==6.1.1",
    "ruff==0.11.7",
]

[project.urls]
Homepage = "https://github.com/aachick/enve"
Documentation = "https://aachick.github.io/enve"
Repository = "https://github.com/aachick/enve"
Issues = "https://github.com/aachick/enve/issues"

[tool.setuptools_scm]
write_to = "src/enve/_version.py"

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
exclude_lines = [
    '@overload',
    'if TYPE_CHECKING:',
    'if __name__ == .__main__.:',
]

[tool.coverage.run]
branch = true

[tool.mypy]
python_version = "3.10"
strict = true
disallow_any_generics = false

[tool.ruff]
indent-width = 4
line-length = 100
target-version = "py310"

[tool.ruff.lint]
ignore = [
    "PLC0414",  # pylint (convention) (useless-import-alias)
    "PLR0911",  # pylint (refactor) (too many return statements)
    "PLR0912",  # pylint (refactor) (too many branches)
    "PLR0913",  # pylint (refactor) (too many arguments)
]
select = [
    "A",    # flake8-builtins
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "D",    # pydocstyle
    "E",    # pycodestyle (error)
    "EM",   # flake8-errormsg
    "FBT",  # flake8-boolean-trap
    "FURB", # refurb
    "I",    # isort
    "N",    # pep8-naming
    "PERF", # perflint
    "PLC",  # pylint (convention)
    "PLE",  # pylint (error)
    "PLR",  # pylint (refactor)
    "PLW",  # pylint (warning)
    "PT",   # flake8-pytest-style
    "RUF",  # ruff
    "SIM",  # flake8-simplify
    "T20",  # flake8-print
    "TRY",  # tryceratops
    "UP",   # pyupgrade
    "W",    # pycodestyle (warning)
]

[tool.ruff.lint.isort]
lines-after-imports = 2
lines-between-types = 1

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
addopts = "-ra --cov=src --cov-report=term-missing --cov-report=html --cov-report=xml --doctest-modules"
minversion = "8.0"
