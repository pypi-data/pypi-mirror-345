# coding: utf-8

"""
    Wildberries cifrovoi

    Po voprosam raboty s WBD API, obrahaites v <a href=\"https://digital.wildberries.ru/support\" target=\"_blank\">tehniheskuu podderhku</a>.   # noqa: E501

    OpenAPI spec version: wbd
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OfferUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'price': 'int',
        'discount_price': 'int',
        'gallery': 'list[str]',
        'age_rating': 'str',
        'tags': 'list[str]',
        'status': 'int',
        'catalog_path': 'list[int]',
        'meta': 'OfferMetaRequest'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'price': 'price',
        'discount_price': 'discount_price',
        'gallery': 'gallery',
        'age_rating': 'age_rating',
        'tags': 'tags',
        'status': 'status',
        'catalog_path': 'catalog_path',
        'meta': 'meta'
    }

    def __init__(self, title=None, description=None, price=None, discount_price=None, gallery=None, age_rating=None, tags=None, status=None, catalog_path=None, meta=None):  # noqa: E501
        """OfferUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._description = None
        self._price = None
        self._discount_price = None
        self._gallery = None
        self._age_rating = None
        self._tags = None
        self._status = None
        self._catalog_path = None
        self._meta = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if price is not None:
            self.price = price
        if discount_price is not None:
            self.discount_price = discount_price
        if gallery is not None:
            self.gallery = gallery
        if age_rating is not None:
            self.age_rating = age_rating
        if tags is not None:
            self.tags = tags
        if status is not None:
            self.status = status
        if catalog_path is not None:
            self.catalog_path = catalog_path
        if meta is not None:
            self.meta = meta

    @property
    def title(self):
        """Gets the title of this OfferUpdateRequest.  # noqa: E501

        Nazvanie predlohenia.</br>Maksimalnaa dlina — **500 simvolov.**  # noqa: E501

        :return: The title of this OfferUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OfferUpdateRequest.

        Nazvanie predlohenia.</br>Maksimalnaa dlina — **500 simvolov.**  # noqa: E501

        :param title: The title of this OfferUpdateRequest.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this OfferUpdateRequest.  # noqa: E501

        Opisanie predlohenia. Eto tekst, kotoryi opisyvaet vahe predlohenie i pomogaet ludam ponat, hto imenno predstavlaet iz seba prodavaemyi vami tovar i hem on mohet byt polezen. Vahno pravilno nazvat predlohenie i bolee podrobno propisat ego opisanie, htoby polzovateli uznali kak mohno bolhe informacii ehe do pokupki.</br>Maksimalnaa dlina — **5000 simvolov.**  # noqa: E501

        :return: The description of this OfferUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OfferUpdateRequest.

        Opisanie predlohenia. Eto tekst, kotoryi opisyvaet vahe predlohenie i pomogaet ludam ponat, hto imenno predstavlaet iz seba prodavaemyi vami tovar i hem on mohet byt polezen. Vahno pravilno nazvat predlohenie i bolee podrobno propisat ego opisanie, htoby polzovateli uznali kak mohno bolhe informacii ehe do pokupki.</br>Maksimalnaa dlina — **5000 simvolov.**  # noqa: E501

        :param description: The description of this OfferUpdateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def price(self):
        """Gets the price of this OfferUpdateRequest.  # noqa: E501

        cena predlohenia v rublah  # noqa: E501

        :return: The price of this OfferUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OfferUpdateRequest.

        cena predlohenia v rublah  # noqa: E501

        :param price: The price of this OfferUpdateRequest.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def discount_price(self):
        """Gets the discount_price of this OfferUpdateRequest.  # noqa: E501

        cena s uhetom skidki v rublah  # noqa: E501

        :return: The discount_price of this OfferUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._discount_price

    @discount_price.setter
    def discount_price(self, discount_price):
        """Sets the discount_price of this OfferUpdateRequest.

        cena s uhetom skidki v rublah  # noqa: E501

        :param discount_price: The discount_price of this OfferUpdateRequest.  # noqa: E501
        :type: int
        """

        self._discount_price = discount_price

    @property
    def gallery(self):
        """Gets the gallery of this OfferUpdateRequest.  # noqa: E501

        Spisok URL-adresov dopolnitelnyh izobrahenii, a tak he video prevu.</br> **Mohno peredat do 8 media-failov.**</br> **Vahno, htoby vse izobrahenia byli v formate .jpg ili .png, a video v formate .mp4**   # noqa: E501

        :return: The gallery of this OfferUpdateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._gallery

    @gallery.setter
    def gallery(self, gallery):
        """Sets the gallery of this OfferUpdateRequest.

        Spisok URL-adresov dopolnitelnyh izobrahenii, a tak he video prevu.</br> **Mohno peredat do 8 media-failov.**</br> **Vahno, htoby vse izobrahenia byli v formate .jpg ili .png, a video v formate .mp4**   # noqa: E501

        :param gallery: The gallery of this OfferUpdateRequest.  # noqa: E501
        :type: list[str]
        """

        self._gallery = gallery

    @property
    def age_rating(self):
        """Gets the age_rating of this OfferUpdateRequest.  # noqa: E501

        Vozrastnoe ogranihenie. Eto sistema, kotoraa ispolzuetsa dla opredelenia, podhodit li vahe predlohenie dla opredelennoi vozrastnoi gruppy.  # noqa: E501

        :return: The age_rating of this OfferUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._age_rating

    @age_rating.setter
    def age_rating(self, age_rating):
        """Sets the age_rating of this OfferUpdateRequest.

        Vozrastnoe ogranihenie. Eto sistema, kotoraa ispolzuetsa dla opredelenia, podhodit li vahe predlohenie dla opredelennoi vozrastnoi gruppy.  # noqa: E501

        :param age_rating: The age_rating of this OfferUpdateRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["0+", "6+", "12+", "14+", "16+", "18+"]  # noqa: E501
        if age_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `age_rating` ({0}), must be one of {1}"  # noqa: E501
                .format(age_rating, allowed_values)
            )

        self._age_rating = age_rating

    @property
    def tags(self):
        """Gets the tags of this OfferUpdateRequest.  # noqa: E501

        Massiv tegov. Tegi nuhny dla gruppirovania, ranhirovania i obleghenia poiska vahego tovara.  **Ogranihenia**: - Maksimalnoe kolihestvo tegov — **5** - Maksimalnaa dlina tega — **45 simvolov**   # noqa: E501

        :return: The tags of this OfferUpdateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this OfferUpdateRequest.

        Massiv tegov. Tegi nuhny dla gruppirovania, ranhirovania i obleghenia poiska vahego tovara.  **Ogranihenia**: - Maksimalnoe kolihestvo tegov — **5** - Maksimalnaa dlina tega — **45 simvolov**   # noqa: E501

        :param tags: The tags of this OfferUpdateRequest.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def status(self):
        """Gets the status of this OfferUpdateRequest.  # noqa: E501

        Status vahego predlohenia:  - `0` — Dobavit v hernovik  - `1` — Opublikovat  - `2` — Priostanovit prodahu  - `3` — Udalit   # noqa: E501

        :return: The status of this OfferUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OfferUpdateRequest.

        Status vahego predlohenia:  - `0` — Dobavit v hernovik  - `1` — Opublikovat  - `2` — Priostanovit prodahu  - `3` — Udalit   # noqa: E501

        :param status: The status of this OfferUpdateRequest.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def catalog_path(self):
        """Gets the catalog_path of this OfferUpdateRequest.  # noqa: E501

        Massiv ID podkategorii, v kotorom nahoditsa predlohenie.</br> Vospolzuites metodom [Poluhit kategorii i ih podkategorii](#operation/GetCatalog) dla poluhenia ID i pravilnogo sopostavlenia s kategoriei.   # noqa: E501

        :return: The catalog_path of this OfferUpdateRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._catalog_path

    @catalog_path.setter
    def catalog_path(self, catalog_path):
        """Sets the catalog_path of this OfferUpdateRequest.

        Massiv ID podkategorii, v kotorom nahoditsa predlohenie.</br> Vospolzuites metodom [Poluhit kategorii i ih podkategorii](#operation/GetCatalog) dla poluhenia ID i pravilnogo sopostavlenia s kategoriei.   # noqa: E501

        :param catalog_path: The catalog_path of this OfferUpdateRequest.  # noqa: E501
        :type: list[int]
        """

        self._catalog_path = catalog_path

    @property
    def meta(self):
        """Gets the meta of this OfferUpdateRequest.  # noqa: E501


        :return: The meta of this OfferUpdateRequest.  # noqa: E501
        :rtype: OfferMetaRequest
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this OfferUpdateRequest.


        :param meta: The meta of this OfferUpdateRequest.  # noqa: E501
        :type: OfferMetaRequest
        """

        self._meta = meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OfferUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfferUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
