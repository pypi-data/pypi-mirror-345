# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['PreventionPolicyAttachmentArgs', 'PreventionPolicyAttachment']

@pulumi.input_type
class PreventionPolicyAttachmentArgs:
    def __init__(__self__, *,
                 id_property: pulumi.Input[builtins.str],
                 host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a PreventionPolicyAttachment resource.
        :param pulumi.Input[builtins.str] id_property: The prevention policy id you want to attach to.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        """
        pulumi.set(__self__, "id_property", id_property)
        if host_groups is not None:
            pulumi.set(__self__, "host_groups", host_groups)
        if ioa_rule_groups is not None:
            pulumi.set(__self__, "ioa_rule_groups", ioa_rule_groups)

    @property
    @pulumi.getter(name="idProperty")
    def id_property(self) -> pulumi.Input[builtins.str]:
        """
        The prevention policy id you want to attach to.
        """
        return pulumi.get(self, "id_property")

    @id_property.setter
    def id_property(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "id_property", value)

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Host Group ids to attach to the prevention policy.
        """
        return pulumi.get(self, "host_groups")

    @host_groups.setter
    def host_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "host_groups", value)

    @property
    @pulumi.getter(name="ioaRuleGroups")
    def ioa_rule_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        IOA Rule Group to attach to the prevention policy.
        """
        return pulumi.get(self, "ioa_rule_groups")

    @ioa_rule_groups.setter
    def ioa_rule_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ioa_rule_groups", value)


@pulumi.input_type
class _PreventionPolicyAttachmentState:
    def __init__(__self__, *,
                 host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 id_property: Optional[pulumi.Input[builtins.str]] = None,
                 ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 last_updated: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering PreventionPolicyAttachment resources.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[builtins.str] id_property: The prevention policy id you want to attach to.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        """
        if host_groups is not None:
            pulumi.set(__self__, "host_groups", host_groups)
        if id_property is not None:
            pulumi.set(__self__, "id_property", id_property)
        if ioa_rule_groups is not None:
            pulumi.set(__self__, "ioa_rule_groups", ioa_rule_groups)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Host Group ids to attach to the prevention policy.
        """
        return pulumi.get(self, "host_groups")

    @host_groups.setter
    def host_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "host_groups", value)

    @property
    @pulumi.getter(name="idProperty")
    def id_property(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The prevention policy id you want to attach to.
        """
        return pulumi.get(self, "id_property")

    @id_property.setter
    def id_property(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id_property", value)

    @property
    @pulumi.getter(name="ioaRuleGroups")
    def ioa_rule_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        IOA Rule Group to attach to the prevention policy.
        """
        return pulumi.get(self, "ioa_rule_groups")

    @ioa_rule_groups.setter
    def ioa_rule_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ioa_rule_groups", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "last_updated", value)


class PreventionPolicyAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 id_property: Optional[pulumi.Input[builtins.str]] = None,
                 ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        This resource allows managing the host groups and ioa rule groups attached to a prevention policy. This resource takes exclusive ownership over the host groups and ioa rule groups assigned to a prevention policy. If you want to fully create or manage a prevention policy please use the `prevention_policy_*` resource for the platform you want to manage.

        ## API Scopes

        The following API scopes are required:

        - Prevention policies | Read & Write

        ## Example Usage

        ```python
        import pulumi
        import crowdstrike_pulumi as crowdstrike

        example = crowdstrike.PreventionPolicyAttachment("example",
            id_property="16c0eecfeebb47ce95185fda2e5b3112",
            host_groups=["df868c936cd443e5a95b2603e2483602"],
            ioa_rule_groups=["507117bc669d41bb93d0a009f557bb23"])
        pulumi.export("preventionPolicyAttachment", example)
        ```

        ## Import

        Prevention Policy Attachment can be imported by specifying the id.

        ```sh
        $ pulumi import crowdstrike:index/preventionPolicyAttachment:PreventionPolicyAttachment example 7fb858a949034a0cbca175f660f1e769
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[builtins.str] id_property: The prevention policy id you want to attach to.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PreventionPolicyAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows managing the host groups and ioa rule groups attached to a prevention policy. This resource takes exclusive ownership over the host groups and ioa rule groups assigned to a prevention policy. If you want to fully create or manage a prevention policy please use the `prevention_policy_*` resource for the platform you want to manage.

        ## API Scopes

        The following API scopes are required:

        - Prevention policies | Read & Write

        ## Example Usage

        ```python
        import pulumi
        import crowdstrike_pulumi as crowdstrike

        example = crowdstrike.PreventionPolicyAttachment("example",
            id_property="16c0eecfeebb47ce95185fda2e5b3112",
            host_groups=["df868c936cd443e5a95b2603e2483602"],
            ioa_rule_groups=["507117bc669d41bb93d0a009f557bb23"])
        pulumi.export("preventionPolicyAttachment", example)
        ```

        ## Import

        Prevention Policy Attachment can be imported by specifying the id.

        ```sh
        $ pulumi import crowdstrike:index/preventionPolicyAttachment:PreventionPolicyAttachment example 7fb858a949034a0cbca175f660f1e769
        ```

        :param str resource_name: The name of the resource.
        :param PreventionPolicyAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PreventionPolicyAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 id_property: Optional[pulumi.Input[builtins.str]] = None,
                 ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PreventionPolicyAttachmentArgs.__new__(PreventionPolicyAttachmentArgs)

            __props__.__dict__["host_groups"] = host_groups
            if id_property is None and not opts.urn:
                raise TypeError("Missing required property 'id_property'")
            __props__.__dict__["id_property"] = id_property
            __props__.__dict__["ioa_rule_groups"] = ioa_rule_groups
            __props__.__dict__["last_updated"] = None
        super(PreventionPolicyAttachment, __self__).__init__(
            'crowdstrike:index/preventionPolicyAttachment:PreventionPolicyAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            host_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            id_property: Optional[pulumi.Input[builtins.str]] = None,
            ioa_rule_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            last_updated: Optional[pulumi.Input[builtins.str]] = None) -> 'PreventionPolicyAttachment':
        """
        Get an existing PreventionPolicyAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] host_groups: Host Group ids to attach to the prevention policy.
        :param pulumi.Input[builtins.str] id_property: The prevention policy id you want to attach to.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ioa_rule_groups: IOA Rule Group to attach to the prevention policy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PreventionPolicyAttachmentState.__new__(_PreventionPolicyAttachmentState)

        __props__.__dict__["host_groups"] = host_groups
        __props__.__dict__["id_property"] = id_property
        __props__.__dict__["ioa_rule_groups"] = ioa_rule_groups
        __props__.__dict__["last_updated"] = last_updated
        return PreventionPolicyAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="hostGroups")
    def host_groups(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        Host Group ids to attach to the prevention policy.
        """
        return pulumi.get(self, "host_groups")

    @property
    @pulumi.getter(name="idProperty")
    def id_property(self) -> pulumi.Output[builtins.str]:
        """
        The prevention policy id you want to attach to.
        """
        return pulumi.get(self, "id_property")

    @property
    @pulumi.getter(name="ioaRuleGroups")
    def ioa_rule_groups(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        IOA Rule Group to attach to the prevention policy.
        """
        return pulumi.get(self, "ioa_rule_groups")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "last_updated")

