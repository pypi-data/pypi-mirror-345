# coding: utf-8

"""
    Othety

    <div class=\"description_important\">     Uznat bolhe ob othetah mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/5f2162c5-069b-416d-a4e1-48da2a76e6b0\">spravohnom centre</a> </div>  S pomohu etih metodov vy mohete poluhit [osnovnye othety](/openapi/reports#tag/Osnovnye-otchyoty) i othety o:   1. [Ostatkah na skladah](/openapi/reports#tag/Otchyot-ob-ostatkah-na-skladah)   2. [Tovarah s obazatelnoi markirovkoi](/openapi/reports#tag/Otchyot-o-tovarah-c-obyazatelnoj-markirovkoj)   3. [Uderhaniah](/openapi/reports#tag/Otchyoty-ob-uderzhaniyah)   4. [Platnoi priemke](/openapi/reports#tag/Platnaya-priyomka)   5. [Platnom hranenii](/openapi/reports#tag/Platnoe-hranenie)   6. [Prodahah po regionam](/openapi/reports#tag/Prodazhi-po-regionam)   7. [Dole brenda v prodahah](/openapi/reports#tag/Dolya-brenda-v-prodazhah)   8. [Skrytyh tovarah](/openapi/reports#tag/Skrytye-tovary)   9. [Vozvratah i peremehenii tovarov](/openapi/reports#tag/Otchyot-o-vozvratah-i-peremeshenii-tovarov)   10. [Dinamike oborahivaemosti](/openapi/reports#tag/Dinamika-oborachivaemosti)   # noqa: E501

    OpenAPI spec version: reports
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2004Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        '_date': 'datetime',
        'income_id': 'int',
        'nm_id': 'int',
        'photo_urls': 'list[str]',
        'shk_id': 'int',
        'sku': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        '_date': 'date',
        'income_id': 'incomeId',
        'nm_id': 'nmID',
        'photo_urls': 'photoUrls',
        'shk_id': 'shkID',
        'sku': 'sku'
    }

    def __init__(self, amount=None, _date=None, income_id=None, nm_id=None, photo_urls=None, shk_id=None, sku=None):  # noqa: E501
        """InlineResponse2004Report - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self.__date = None
        self._income_id = None
        self._nm_id = None
        self._photo_urls = None
        self._shk_id = None
        self._sku = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if _date is not None:
            self._date = _date
        if income_id is not None:
            self.income_id = income_id
        if nm_id is not None:
            self.nm_id = nm_id
        if photo_urls is not None:
            self.photo_urls = photo_urls
        if shk_id is not None:
            self.shk_id = shk_id
        if sku is not None:
            self.sku = sku

    @property
    def amount(self):
        """Gets the amount of this InlineResponse2004Report.  # noqa: E501

        Summa htrafa, rub  # noqa: E501

        :return: The amount of this InlineResponse2004Report.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse2004Report.

        Summa htrafa, rub  # noqa: E501

        :param amount: The amount of this InlineResponse2004Report.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def _date(self):
        """Gets the _date of this InlineResponse2004Report.  # noqa: E501

        Data  # noqa: E501

        :return: The _date of this InlineResponse2004Report.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse2004Report.

        Data  # noqa: E501

        :param _date: The _date of this InlineResponse2004Report.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def income_id(self):
        """Gets the income_id of this InlineResponse2004Report.  # noqa: E501

        Nomer postavki  # noqa: E501

        :return: The income_id of this InlineResponse2004Report.  # noqa: E501
        :rtype: int
        """
        return self._income_id

    @income_id.setter
    def income_id(self, income_id):
        """Sets the income_id of this InlineResponse2004Report.

        Nomer postavki  # noqa: E501

        :param income_id: The income_id of this InlineResponse2004Report.  # noqa: E501
        :type: int
        """

        self._income_id = income_id

    @property
    def nm_id(self):
        """Gets the nm_id of this InlineResponse2004Report.  # noqa: E501

        Artikul WB  # noqa: E501

        :return: The nm_id of this InlineResponse2004Report.  # noqa: E501
        :rtype: int
        """
        return self._nm_id

    @nm_id.setter
    def nm_id(self, nm_id):
        """Sets the nm_id of this InlineResponse2004Report.

        Artikul WB  # noqa: E501

        :param nm_id: The nm_id of this InlineResponse2004Report.  # noqa: E501
        :type: int
        """

        self._nm_id = nm_id

    @property
    def photo_urls(self):
        """Gets the photo_urls of this InlineResponse2004Report.  # noqa: E501

        URL foto tovara  # noqa: E501

        :return: The photo_urls of this InlineResponse2004Report.  # noqa: E501
        :rtype: list[str]
        """
        return self._photo_urls

    @photo_urls.setter
    def photo_urls(self, photo_urls):
        """Sets the photo_urls of this InlineResponse2004Report.

        URL foto tovara  # noqa: E501

        :param photo_urls: The photo_urls of this InlineResponse2004Report.  # noqa: E501
        :type: list[str]
        """

        self._photo_urls = photo_urls

    @property
    def shk_id(self):
        """Gets the shk_id of this InlineResponse2004Report.  # noqa: E501

        htrihkod tovara v WB  # noqa: E501

        :return: The shk_id of this InlineResponse2004Report.  # noqa: E501
        :rtype: int
        """
        return self._shk_id

    @shk_id.setter
    def shk_id(self, shk_id):
        """Sets the shk_id of this InlineResponse2004Report.

        htrihkod tovara v WB  # noqa: E501

        :param shk_id: The shk_id of this InlineResponse2004Report.  # noqa: E501
        :type: int
        """

        self._shk_id = shk_id

    @property
    def sku(self):
        """Gets the sku of this InlineResponse2004Report.  # noqa: E501

        Barkod iz kartohki tovara  # noqa: E501

        :return: The sku of this InlineResponse2004Report.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this InlineResponse2004Report.

        Barkod iz kartohki tovara  # noqa: E501

        :param sku: The sku of this InlineResponse2004Report.  # noqa: E501
        :type: str
        """

        self._sku = sku

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2004Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
