# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SensorUpdatePolicyPrecedenceArgs', 'SensorUpdatePolicyPrecedence']

@pulumi.input_type
class SensorUpdatePolicyPrecedenceArgs:
    def __init__(__self__, *,
                 enforcement: pulumi.Input[builtins.str],
                 ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 platform_name: pulumi.Input[builtins.str]):
        """
        The set of arguments for constructing a SensorUpdatePolicyPrecedence resource.
        :param pulumi.Input[builtins.str] enforcement: The enforcement type for this resource. `strict` requires all non-default sensor update policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ids: The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
        :param pulumi.Input[builtins.str] platform_name: That platform of the sensor update policies. (Windows, Mac, Linux)
        """
        pulumi.set(__self__, "enforcement", enforcement)
        pulumi.set(__self__, "ids", ids)
        pulumi.set(__self__, "platform_name", platform_name)

    @property
    @pulumi.getter
    def enforcement(self) -> pulumi.Input[builtins.str]:
        """
        The enforcement type for this resource. `strict` requires all non-default sensor update policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
        """
        return pulumi.get(self, "enforcement")

    @enforcement.setter
    def enforcement(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "enforcement", value)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter(name="platformName")
    def platform_name(self) -> pulumi.Input[builtins.str]:
        """
        That platform of the sensor update policies. (Windows, Mac, Linux)
        """
        return pulumi.get(self, "platform_name")

    @platform_name.setter
    def platform_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "platform_name", value)


@pulumi.input_type
class _SensorUpdatePolicyPrecedenceState:
    def __init__(__self__, *,
                 enforcement: Optional[pulumi.Input[builtins.str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 last_updated: Optional[pulumi.Input[builtins.str]] = None,
                 platform_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering SensorUpdatePolicyPrecedence resources.
        :param pulumi.Input[builtins.str] enforcement: The enforcement type for this resource. `strict` requires all non-default sensor update policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ids: The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
        :param pulumi.Input[builtins.str] platform_name: That platform of the sensor update policies. (Windows, Mac, Linux)
        """
        if enforcement is not None:
            pulumi.set(__self__, "enforcement", enforcement)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if platform_name is not None:
            pulumi.set(__self__, "platform_name", platform_name)

    @property
    @pulumi.getter
    def enforcement(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The enforcement type for this resource. `strict` requires all non-default sensor update policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
        """
        return pulumi.get(self, "enforcement")

    @enforcement.setter
    def enforcement(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enforcement", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter(name="platformName")
    def platform_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        That platform of the sensor update policies. (Windows, Mac, Linux)
        """
        return pulumi.get(self, "platform_name")

    @platform_name.setter
    def platform_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "platform_name", value)


class SensorUpdatePolicyPrecedence(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enforcement: Optional[pulumi.Input[builtins.str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 platform_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        This resource allows you to set the precedence of Sensor Update Policies based on the order of IDs.

        ## API Scopes

        The following API scopes are required:

        - Sensor update policies | Read & Write

        ## Example Usage

        ```python
        import pulumi
        import crowdstrike_pulumi as crowdstrike

        example = crowdstrike.SensorUpdatePolicyPrecedence("example",
            ids=[
                "a1j09y3yq0wnrpb5o6jlij9e4f40k6lq",
                "2asia54xti93bg0jbr5hfpqqbhxbyeoa",
                "xuzq8hs1uyc2s7zdar3fli0shiyl22vc",
            ],
            platform_name="linux",
            enforcement="dynamic")
        pulumi.export("sensorUpdatePolicyPrecedence", example)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] enforcement: The enforcement type for this resource. `strict` requires all non-default sensor update policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ids: The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
        :param pulumi.Input[builtins.str] platform_name: That platform of the sensor update policies. (Windows, Mac, Linux)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SensorUpdatePolicyPrecedenceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to set the precedence of Sensor Update Policies based on the order of IDs.

        ## API Scopes

        The following API scopes are required:

        - Sensor update policies | Read & Write

        ## Example Usage

        ```python
        import pulumi
        import crowdstrike_pulumi as crowdstrike

        example = crowdstrike.SensorUpdatePolicyPrecedence("example",
            ids=[
                "a1j09y3yq0wnrpb5o6jlij9e4f40k6lq",
                "2asia54xti93bg0jbr5hfpqqbhxbyeoa",
                "xuzq8hs1uyc2s7zdar3fli0shiyl22vc",
            ],
            platform_name="linux",
            enforcement="dynamic")
        pulumi.export("sensorUpdatePolicyPrecedence", example)
        ```

        :param str resource_name: The name of the resource.
        :param SensorUpdatePolicyPrecedenceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SensorUpdatePolicyPrecedenceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enforcement: Optional[pulumi.Input[builtins.str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 platform_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SensorUpdatePolicyPrecedenceArgs.__new__(SensorUpdatePolicyPrecedenceArgs)

            if enforcement is None and not opts.urn:
                raise TypeError("Missing required property 'enforcement'")
            __props__.__dict__["enforcement"] = enforcement
            if ids is None and not opts.urn:
                raise TypeError("Missing required property 'ids'")
            __props__.__dict__["ids"] = ids
            if platform_name is None and not opts.urn:
                raise TypeError("Missing required property 'platform_name'")
            __props__.__dict__["platform_name"] = platform_name
            __props__.__dict__["last_updated"] = None
        super(SensorUpdatePolicyPrecedence, __self__).__init__(
            'crowdstrike:index/sensorUpdatePolicyPrecedence:SensorUpdatePolicyPrecedence',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enforcement: Optional[pulumi.Input[builtins.str]] = None,
            ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            last_updated: Optional[pulumi.Input[builtins.str]] = None,
            platform_name: Optional[pulumi.Input[builtins.str]] = None) -> 'SensorUpdatePolicyPrecedence':
        """
        Get an existing SensorUpdatePolicyPrecedence resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] enforcement: The enforcement type for this resource. `strict` requires all non-default sensor update policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ids: The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
        :param pulumi.Input[builtins.str] platform_name: That platform of the sensor update policies. (Windows, Mac, Linux)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SensorUpdatePolicyPrecedenceState.__new__(_SensorUpdatePolicyPrecedenceState)

        __props__.__dict__["enforcement"] = enforcement
        __props__.__dict__["ids"] = ids
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["platform_name"] = platform_name
        return SensorUpdatePolicyPrecedence(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enforcement(self) -> pulumi.Output[builtins.str]:
        """
        The enforcement type for this resource. `strict` requires all non-default sensor update policy ids for platform to be provided. `dynamic` will ensure the provided policies have precedence over others. When using dynamic, policy ids not included in `ids` will retain their current ordering after the managed ids.
        """
        return pulumi.get(self, "enforcement")

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The policy ids in order. The first ID specified will have the highest precedence and the last ID specified will have the lowest.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter(name="platformName")
    def platform_name(self) -> pulumi.Output[builtins.str]:
        """
        That platform of the sensor update policies. (Windows, Mac, Linux)
        """
        return pulumi.get(self, "platform_name")

