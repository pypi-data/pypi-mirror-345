# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.analytics.api_client import ApiClient


class PoiskovyeZaprosyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_search_report_product_orders_post(self, body, **kwargs):  # noqa: E501
        """Zakazy i pozicii po poiskovym zaprosam tovara  # noqa: E501

        Metod formiruet dannye dla tablicy po kolihestvu zakazov i pozicii v poiske po zaprosam pokupatela. Dannye ukazany v ramkah perioda dla [zaprohennogo tovara](/openapi/analytics#tag/Poiskovye-zaprosy/paths/~1api~1v2~1search-report~1product~1search-texts/post).  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_search_report_product_orders_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductOrdersRequest body: (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_search_report_product_orders_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_search_report_product_orders_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_search_report_product_orders_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Zakazy i pozicii po poiskovym zaprosam tovara  # noqa: E501

        Metod formiruet dannye dla tablicy po kolihestvu zakazov i pozicii v poiske po zaprosam pokupatela. Dannye ukazany v ramkah perioda dla [zaprohennogo tovara](/openapi/analytics#tag/Poiskovye-zaprosy/paths/~1api~1v2~1search-report~1product~1search-texts/post).  <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_search_report_product_orders_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductOrdersRequest body: (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_search_report_product_orders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_search_report_product_orders_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search-report/product/orders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_search_report_product_search_texts_post(self, body, **kwargs):  # noqa: E501
        """Poiskovye zaprosy po tovaru  # noqa: E501

        Metod formiruet top poiskovyh zaprosov po tovaru.  Parametry vybora poiskovyh zaprosov:  - `limit` — kolihestvo zaprosov, maksimum 30  - `topOrderBy` — sposob vybora topa zaprosov      <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_search_report_product_search_texts_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductSearchTextsRequest body: (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_search_report_product_search_texts_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_search_report_product_search_texts_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_search_report_product_search_texts_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Poiskovye zaprosy po tovaru  # noqa: E501

        Metod formiruet top poiskovyh zaprosov po tovaru.  Parametry vybora poiskovyh zaprosov:  - `limit` — kolihestvo zaprosov, maksimum 30  - `topOrderBy` — sposob vybora topa zaprosov      <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_search_report_product_search_texts_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductSearchTextsRequest body: (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_search_report_product_search_texts_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_search_report_product_search_texts_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search-report/product/search-texts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_search_report_report_post(self, body, **kwargs):  # noqa: E501
        """Osnovnaa stranica  # noqa: E501

        Metod formiruet nabor dannyh dla osnovnoi stranicy otheta po poiskovym zaprosam s:  - obhei informaciei  - poziciami tovarov  - dannymi po vidimosti i perehodam v kartohku  - dannymi dla tablicy po gruppam  Dla poluhenia dopolnitelnyh dannyh v tablice ispolzuite otdelnyi zapros dla:  - [paginacii po gruppam](/openapi/analytics#tag/Poiskovye-zaprosy/paths/~1api~1v2~1search-report~1table~1groups/post)  - [poluhenia po tovaram v gruppe](/openapi/analytics#tag/Poiskovye-zaprosy/paths/~1api~1v2~1search-report~1table~1details/post)  Dopolnitelnyi parametr vybora spiska tovarov v tablice:  - `positionCluster` — srednaa pozicia v poiske      <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_search_report_report_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MainRequest body: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_search_report_report_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_search_report_report_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_search_report_report_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Osnovnaa stranica  # noqa: E501

        Metod formiruet nabor dannyh dla osnovnoi stranicy otheta po poiskovym zaprosam s:  - obhei informaciei  - poziciami tovarov  - dannymi po vidimosti i perehodam v kartohku  - dannymi dla tablicy po gruppam  Dla poluhenia dopolnitelnyh dannyh v tablice ispolzuite otdelnyi zapros dla:  - [paginacii po gruppam](/openapi/analytics#tag/Poiskovye-zaprosy/paths/~1api~1v2~1search-report~1table~1groups/post)  - [poluhenia po tovaram v gruppe](/openapi/analytics#tag/Poiskovye-zaprosy/paths/~1api~1v2~1search-report~1table~1details/post)  Dopolnitelnyi parametr vybora spiska tovarov v tablice:  - `positionCluster` — srednaa pozicia v poiske      <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_search_report_report_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MainRequest body: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_search_report_report_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_search_report_report_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search-report/report', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_search_report_table_details_post(self, body, **kwargs):  # noqa: E501
        """Paginacia po tovaram v gruppe  # noqa: E501

        Metod formiruet dopolnitelnye dannye k [osnovnomu othetu](/openapi/analytics#tag/Poiskovye-zaprosy/paths/~1api~1v2~1search-report~1report/post) s paginaciei po tovaram v gruppe. Paginacia vozmohna vne zavisimosti ot nalihia filtrov.<br><br>  Filtry dla paginacii po tovaram v gruppe ili bez filtrov:  - korteh `subjectId`,`brandName`,`tagId` — filtr dla gruppy  - `nmIds` — filtr po kartohke tovara  Dopolnitelnyi parametr vybora spiska tovarov:  - `positionCluster` — srednaa pozicia v poiske      <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>              # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_search_report_table_details_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableDetailsRequest body: (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_search_report_table_details_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_search_report_table_details_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_search_report_table_details_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Paginacia po tovaram v gruppe  # noqa: E501

        Metod formiruet dopolnitelnye dannye k [osnovnomu othetu](/openapi/analytics#tag/Poiskovye-zaprosy/paths/~1api~1v2~1search-report~1report/post) s paginaciei po tovaram v gruppe. Paginacia vozmohna vne zavisimosti ot nalihia filtrov.<br><br>  Filtry dla paginacii po tovaram v gruppe ili bez filtrov:  - korteh `subjectId`,`brandName`,`tagId` — filtr dla gruppy  - `nmIds` — filtr po kartohke tovara  Dopolnitelnyi parametr vybora spiska tovarov:  - `positionCluster` — srednaa pozicia v poiske      <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>              # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_search_report_table_details_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableDetailsRequest body: (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_search_report_table_details_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_search_report_table_details_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search-report/table/details', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_search_report_table_groups_post(self, body, **kwargs):  # noqa: E501
        """Paginacia po gruppam  # noqa: E501

        Metod formiruet dopolnitelnye dannye k [osnovnomu othetu](/openapi/analytics#tag/Poiskovye-zaprosy/paths/~1api~1v2~1search-report~1report/post) s paginaciei po gruppam. Paginacia vozmohna tolko pri nalihii filtra po brendu, predmetu ili arlyku.<br><br>  Dopolnitelnyi parametr vybora spiska tovarov v tablice:  - `positionCluster` — srednaa pozicia v poiske      <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_search_report_table_groups_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableGroupRequest body: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_search_report_table_groups_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_search_report_table_groups_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v2_search_report_table_groups_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Paginacia po gruppam  # noqa: E501

        Metod formiruet dopolnitelnye dannye k [osnovnomu othetu](/openapi/analytics#tag/Poiskovye-zaprosy/paths/~1api~1v2~1search-report~1report/post) s paginaciei po gruppam. Paginacia vozmohna tolko pri nalihii filtra po brendu, predmetu ili arlyku.<br><br>  Dopolnitelnyi parametr vybora spiska tovarov v tablice:  - `positionCluster` — srednaa pozicia v poiske      <div class=\"description_limit\">     Maksimum 3 zaprosa v <a href=\"/openapi/api-information#tag/Vvedenie/Limity-zaprosov\">minutu</a> na odin akkaunt prodavca </div>            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_search_report_table_groups_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TableGroupRequest body: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_search_report_table_groups_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_search_report_table_groups_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search-report/table/groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
