# coding: utf-8

"""
    Analitika i dannye

    <div class=\"description_important\">     Uznat bolhe ob analitike i dannyh mohno v <a href=\"https://seller.wildberries.ru/instructions/subcategory/be1a4034-53f9-47d6-8f12-9a2923280026\">spravohnom centre</a> </div>  V dannom razdele dostupny metody poluhenia:   1. [Statistiki po prodviheniu](/openapi/analytics#tag/Statistika-po-prodvizheniyu)   2. [Voronki prodah](/openapi/analytics#tag/Voronka-prodazh)   3. [Poiskovyh zaprosov](/openapi/analytics#tag/Poiskovye-zaprosy)   4. [Istorii ostatkov](/openapi/analytics#tag/Istoriya-ostatkov)   5. [Analitiki prodavca v formate CSV](/openapi/analytics#tag/Analitika-prodavca-CSV)   # noqa: E501

    OpenAPI spec version: analytics
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableGroupItemSt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject_id': 'int',
        'subject_name': 'str',
        'brand_name': 'str',
        'tag_id': 'int',
        'tag_name': 'str',
        'metrics': 'AllOfTableGroupItemStMetrics',
        'items': 'list[TableProductItemSt]'
    }

    attribute_map = {
        'subject_id': 'subjectID',
        'subject_name': 'subjectName',
        'brand_name': 'brandName',
        'tag_id': 'tagID',
        'tag_name': 'tagName',
        'metrics': 'metrics',
        'items': 'items'
    }

    def __init__(self, subject_id=None, subject_name=None, brand_name=None, tag_id=None, tag_name=None, metrics=None, items=None):  # noqa: E501
        """TableGroupItemSt - a model defined in Swagger"""  # noqa: E501
        self._subject_id = None
        self._subject_name = None
        self._brand_name = None
        self._tag_id = None
        self._tag_name = None
        self._metrics = None
        self._items = None
        self.discriminator = None
        self.subject_id = subject_id
        self.subject_name = subject_name
        self.brand_name = brand_name
        self.tag_id = tag_id
        self.tag_name = tag_name
        self.metrics = metrics
        self.items = items

    @property
    def subject_id(self):
        """Gets the subject_id of this TableGroupItemSt.  # noqa: E501

        ID predmeta  # noqa: E501

        :return: The subject_id of this TableGroupItemSt.  # noqa: E501
        :rtype: int
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this TableGroupItemSt.

        ID predmeta  # noqa: E501

        :param subject_id: The subject_id of this TableGroupItemSt.  # noqa: E501
        :type: int
        """
        if subject_id is None:
            raise ValueError("Invalid value for `subject_id`, must not be `None`")  # noqa: E501

        self._subject_id = subject_id

    @property
    def subject_name(self):
        """Gets the subject_name of this TableGroupItemSt.  # noqa: E501

        Nazvanie predmeta  # noqa: E501

        :return: The subject_name of this TableGroupItemSt.  # noqa: E501
        :rtype: str
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this TableGroupItemSt.

        Nazvanie predmeta  # noqa: E501

        :param subject_name: The subject_name of this TableGroupItemSt.  # noqa: E501
        :type: str
        """
        if subject_name is None:
            raise ValueError("Invalid value for `subject_name`, must not be `None`")  # noqa: E501

        self._subject_name = subject_name

    @property
    def brand_name(self):
        """Gets the brand_name of this TableGroupItemSt.  # noqa: E501

        Brend  # noqa: E501

        :return: The brand_name of this TableGroupItemSt.  # noqa: E501
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this TableGroupItemSt.

        Brend  # noqa: E501

        :param brand_name: The brand_name of this TableGroupItemSt.  # noqa: E501
        :type: str
        """
        if brand_name is None:
            raise ValueError("Invalid value for `brand_name`, must not be `None`")  # noqa: E501

        self._brand_name = brand_name

    @property
    def tag_id(self):
        """Gets the tag_id of this TableGroupItemSt.  # noqa: E501

        ID arlyka  # noqa: E501

        :return: The tag_id of this TableGroupItemSt.  # noqa: E501
        :rtype: int
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """Sets the tag_id of this TableGroupItemSt.

        ID arlyka  # noqa: E501

        :param tag_id: The tag_id of this TableGroupItemSt.  # noqa: E501
        :type: int
        """
        if tag_id is None:
            raise ValueError("Invalid value for `tag_id`, must not be `None`")  # noqa: E501

        self._tag_id = tag_id

    @property
    def tag_name(self):
        """Gets the tag_name of this TableGroupItemSt.  # noqa: E501

        Nazvanie arlyka  # noqa: E501

        :return: The tag_name of this TableGroupItemSt.  # noqa: E501
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """Sets the tag_name of this TableGroupItemSt.

        Nazvanie arlyka  # noqa: E501

        :param tag_name: The tag_name of this TableGroupItemSt.  # noqa: E501
        :type: str
        """
        if tag_name is None:
            raise ValueError("Invalid value for `tag_name`, must not be `None`")  # noqa: E501

        self._tag_name = tag_name

    @property
    def metrics(self):
        """Gets the metrics of this TableGroupItemSt.  # noqa: E501

        Metriki gruppy  # noqa: E501

        :return: The metrics of this TableGroupItemSt.  # noqa: E501
        :rtype: AllOfTableGroupItemStMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this TableGroupItemSt.

        Metriki gruppy  # noqa: E501

        :param metrics: The metrics of this TableGroupItemSt.  # noqa: E501
        :type: AllOfTableGroupItemStMetrics
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501

        self._metrics = metrics

    @property
    def items(self):
        """Gets the items of this TableGroupItemSt.  # noqa: E501

        Tovary gruppy  # noqa: E501

        :return: The items of this TableGroupItemSt.  # noqa: E501
        :rtype: list[TableProductItemSt]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this TableGroupItemSt.

        Tovary gruppy  # noqa: E501

        :param items: The items of this TableGroupItemSt.  # noqa: E501
        :type: list[TableProductItemSt]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableGroupItemSt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableGroupItemSt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
