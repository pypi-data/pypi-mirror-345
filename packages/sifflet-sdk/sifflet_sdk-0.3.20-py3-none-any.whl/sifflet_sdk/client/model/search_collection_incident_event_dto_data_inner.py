"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from sifflet_sdk.client.exceptions import ApiAttributeError
from sifflet_sdk.client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    OpenApiModel,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)


def lazy_import():
    from sifflet_sdk.client.model.assignees_change_incident_event_dto import (
        AssigneesChangeIncidentEventDto,
    )
    from sifflet_sdk.client.model.collaboration_tool_disconnected_incident_event_dto import (
        CollaborationToolDisconnectedIncidentEventDto,
    )
    from sifflet_sdk.client.model.collaboration_tool_item_linked_by_monitor_incident_event_dto import (
        CollaborationToolItemLinkedByMonitorIncidentEventDto,
    )
    from sifflet_sdk.client.model.collaboration_tool_item_linked_by_user_incident_event_dto import (
        CollaborationToolItemLinkedByUserIncidentEventDto,
    )
    from sifflet_sdk.client.model.collaboration_tool_item_unlinked_incident_event_dto import (
        CollaborationToolItemUnlinkedIncidentEventDto,
    )
    from sifflet_sdk.client.model.collaboration_tool_status_change_event_dto import (
        CollaborationToolStatusChangeEventDto,
    )
    from sifflet_sdk.client.model.comment_incident_event_dto import (
        CommentIncidentEventDto,
    )
    from sifflet_sdk.client.model.creation_by_rule_run_incident_event_dto import (
        CreationByRuleRunIncidentEventDto,
    )
    from sifflet_sdk.client.model.creation_by_user_incident_event_dto import (
        CreationByUserIncidentEventDto,
    )
    from sifflet_sdk.client.model.incident_light_dto import IncidentLightDto
    from sifflet_sdk.client.model.name_change_incident_event_dto import (
        NameChangeIncidentEventDto,
    )
    from sifflet_sdk.client.model.new_failures_incident_event_dto import (
        NewFailuresIncidentEventDto,
    )
    from sifflet_sdk.client.model.rule_brief_dto import RuleBriefDto
    from sifflet_sdk.client.model.rule_in_new_failures_incident_event_dto import (
        RuleInNewFailuresIncidentEventDto,
    )
    from sifflet_sdk.client.model.rule_run_dto import RuleRunDto
    from sifflet_sdk.client.model.rules_added_incident_event_dto import (
        RulesAddedIncidentEventDto,
    )
    from sifflet_sdk.client.model.rules_moved_from_incident_event_dto import (
        RulesMovedFromIncidentEventDto,
    )
    from sifflet_sdk.client.model.rules_moved_to_incident_event_dto import (
        RulesMovedToIncidentEventDto,
    )
    from sifflet_sdk.client.model.severity_change_incident_event_dto import (
        SeverityChangeIncidentEventDto,
    )
    from sifflet_sdk.client.model.status_change_incident_event_dto import (
        StatusChangeIncidentEventDto,
    )
    from sifflet_sdk.client.model.user_dto import UserDto

    globals()["AssigneesChangeIncidentEventDto"] = AssigneesChangeIncidentEventDto
    globals()["CollaborationToolDisconnectedIncidentEventDto"] = CollaborationToolDisconnectedIncidentEventDto
    globals()[
        "CollaborationToolItemLinkedByMonitorIncidentEventDto"
    ] = CollaborationToolItemLinkedByMonitorIncidentEventDto
    globals()["CollaborationToolItemLinkedByUserIncidentEventDto"] = CollaborationToolItemLinkedByUserIncidentEventDto
    globals()["CollaborationToolItemUnlinkedIncidentEventDto"] = CollaborationToolItemUnlinkedIncidentEventDto
    globals()["CollaborationToolStatusChangeEventDto"] = CollaborationToolStatusChangeEventDto
    globals()["CommentIncidentEventDto"] = CommentIncidentEventDto
    globals()["CreationByRuleRunIncidentEventDto"] = CreationByRuleRunIncidentEventDto
    globals()["CreationByUserIncidentEventDto"] = CreationByUserIncidentEventDto
    globals()["IncidentLightDto"] = IncidentLightDto
    globals()["NameChangeIncidentEventDto"] = NameChangeIncidentEventDto
    globals()["NewFailuresIncidentEventDto"] = NewFailuresIncidentEventDto
    globals()["RuleBriefDto"] = RuleBriefDto
    globals()["RuleInNewFailuresIncidentEventDto"] = RuleInNewFailuresIncidentEventDto
    globals()["RuleRunDto"] = RuleRunDto
    globals()["RulesAddedIncidentEventDto"] = RulesAddedIncidentEventDto
    globals()["RulesMovedFromIncidentEventDto"] = RulesMovedFromIncidentEventDto
    globals()["RulesMovedToIncidentEventDto"] = RulesMovedToIncidentEventDto
    globals()["SeverityChangeIncidentEventDto"] = SeverityChangeIncidentEventDto
    globals()["StatusChangeIncidentEventDto"] = StatusChangeIncidentEventDto
    globals()["UserDto"] = UserDto


class SearchCollectionIncidentEventDtoDataInner(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ("type",): {
            "CREATION_BY_USER": "CREATION_BY_USER",
            "CREATION_BY_RULE_RUN": "CREATION_BY_RULE_RUN",
            "COMMENT": "COMMENT",
            "STATUS_CHANGE": "STATUS_CHANGE",
            "SEVERITY_CHANGE": "SEVERITY_CHANGE",
            "NAME_CHANGE": "NAME_CHANGE",
            "ASSIGNEES_CHANGE": "ASSIGNEES_CHANGE",
            "NEW_FAILURES": "NEW_FAILURES",
            "RULES_ADDED": "RULES_ADDED",
            "RULES_MOVED_TO": "RULES_MOVED_TO",
            "RULES_MOVED_FROM": "RULES_MOVED_FROM",
            "COLLABORATION_TOOL_ITEM_LINKED": "COLLABORATION_TOOL_ITEM_LINKED",
            "COLLABORATION_TOOL_ITEM_UNLINKED": "COLLABORATION_TOOL_ITEM_UNLINKED",
            "COLLABORATION_TOOL_DISCONNECTED": "COLLABORATION_TOOL_DISCONNECTED",
            "COLLABORATION_TOOL_STATUS_CHANGE": "COLLABORATION_TOOL_STATUS_CHANGE",
            "COLLABORATION_TOOL_ITEM_LINKED_BY_MONITOR": "COLLABORATION_TOOL_ITEM_LINKED_BY_MONITOR",
        },
        ("incident_qualification",): {
            "FIXED": "FIXED",
            "FALSE_POSITIVE": "FALSE_POSITIVE",
            "NO_ACTION_NEEDED": "NO_ACTION_NEEDED",
            "REVIEWED": "REVIEWED",
            "DUPLICATE": "DUPLICATE",
            "AUTOMATIC": "AUTOMATIC",
            "QUALIFIED_MONITORS_REVIEWED": "QUALIFIED_MONITORS_REVIEWED",
            "QUALIFIED_MONITORS_NO_ACTION_NEEDED": "QUALIFIED_MONITORS_NO_ACTION_NEEDED",
            "QUALIFIED_MONITORS_FALSE_POSITIVE": "QUALIFIED_MONITORS_FALSE_POSITIVE",
        },
        ("new_qualification",): {
            "None": None,
            "FIXED": "FIXED",
            "FALSE_POSITIVE": "FALSE_POSITIVE",
            "NO_ACTION_NEEDED": "NO_ACTION_NEEDED",
            "REVIEWED": "REVIEWED",
            "DUPLICATE": "DUPLICATE",
            "AUTOMATIC": "AUTOMATIC",
            "QUALIFIED_MONITORS_REVIEWED": "QUALIFIED_MONITORS_REVIEWED",
            "QUALIFIED_MONITORS_NO_ACTION_NEEDED": "QUALIFIED_MONITORS_NO_ACTION_NEEDED",
            "QUALIFIED_MONITORS_FALSE_POSITIVE": "QUALIFIED_MONITORS_FALSE_POSITIVE",
        },
        ("old_qualification",): {
            "None": None,
            "FIXED": "FIXED",
            "FALSE_POSITIVE": "FALSE_POSITIVE",
            "NO_ACTION_NEEDED": "NO_ACTION_NEEDED",
            "REVIEWED": "REVIEWED",
            "DUPLICATE": "DUPLICATE",
            "AUTOMATIC": "AUTOMATIC",
            "QUALIFIED_MONITORS_REVIEWED": "QUALIFIED_MONITORS_REVIEWED",
            "QUALIFIED_MONITORS_NO_ACTION_NEEDED": "QUALIFIED_MONITORS_NO_ACTION_NEEDED",
            "QUALIFIED_MONITORS_FALSE_POSITIVE": "QUALIFIED_MONITORS_FALSE_POSITIVE",
        },
        ("item_type",): {
            "JIRA": "JIRA",
            "SERVICENOW": "SERVICENOW",
        },
        ("incident_status",): {
            "OPEN": "OPEN",
            "IN_PROGRESS": "IN_PROGRESS",
            "CLOSED": "CLOSED",
        },
        ("new_severity",): {
            "LOW": "Low",
            "MODERATE": "Moderate",
            "HIGH": "High",
            "CRITICAL": "Critical",
        },
        ("old_severity",): {
            "LOW": "Low",
            "MODERATE": "Moderate",
            "HIGH": "High",
            "CRITICAL": "Critical",
        },
        ("new_status",): {
            "OPEN": "OPEN",
            "IN_PROGRESS": "IN_PROGRESS",
            "CLOSED": "CLOSED",
        },
        ("old_status",): {
            "OPEN": "OPEN",
            "IN_PROGRESS": "IN_PROGRESS",
            "CLOSED": "CLOSED",
        },
    }

    validations = {
        ("new_assignees",): {},
        ("old_assignees",): {},
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (
            bool,
            date,
            datetime,
            dict,
            float,
            int,
            list,
            str,
            none_type,
        )  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            "type": (str,),  # noqa: E501
            "created_by_user": (UserDto,),  # noqa: E501
            "item_url": (str,),  # noqa: E501
            "incident_qualification": (str,),  # noqa: E501
            "created_by_rule_run": (RuleRunDto,),  # noqa: E501
            "rule": (RuleBriefDto,),  # noqa: E501
            "changed_by_user": (UserDto,),  # noqa: E501
            "from_incident": (IncidentLightDto,),  # noqa: E501
            "to_incident": (IncidentLightDto,),  # noqa: E501
            "new_qualification": (
                str,
                none_type,
            ),  # noqa: E501
            "old_qualification": (
                str,
                none_type,
            ),  # noqa: E501
            "date": (int,),  # noqa: E501
            "item_key": (str,),  # noqa: E501
            "item_type": (str,),  # noqa: E501
            "incident_status": (str,),  # noqa: E501
            "comment": (str,),  # noqa: E501
            "comment_id": (str,),  # noqa: E501
            "first_date": (int,),  # noqa: E501
            "last_date": (int,),  # noqa: E501
            "new_name": (str,),  # noqa: E501
            "old_name": (str,),  # noqa: E501
            "rule_failures": ([RuleInNewFailuresIncidentEventDto],),  # noqa: E501
            "rules": ([RuleBriefDto],),  # noqa: E501
            "new_severity": (str,),  # noqa: E501
            "old_severity": (str,),  # noqa: E501
            "new_status": (str,),  # noqa: E501
            "old_status": (str,),  # noqa: E501
            "new_assignees": ([UserDto],),  # noqa: E501
            "old_assignees": ([UserDto],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        lazy_import()
        val = {
            "ASSIGNEES_CHANGE": AssigneesChangeIncidentEventDto,
            "AssigneesChangeIncidentEventDto": AssigneesChangeIncidentEventDto,
            "COLLABORATION_TOOL_DISCONNECTED": CollaborationToolDisconnectedIncidentEventDto,
            "COLLABORATION_TOOL_ITEM_LINKED": CollaborationToolItemLinkedByUserIncidentEventDto,
            "COLLABORATION_TOOL_ITEM_LINKED_BY_MONITOR": CollaborationToolItemLinkedByMonitorIncidentEventDto,
            "COLLABORATION_TOOL_ITEM_UNLINKED": CollaborationToolItemUnlinkedIncidentEventDto,
            "COLLABORATION_TOOL_STATUS_CHANGE": CollaborationToolStatusChangeEventDto,
            "COMMENT": CommentIncidentEventDto,
            "CREATION_BY_RULE_RUN": CreationByRuleRunIncidentEventDto,
            "CREATION_BY_USER": CreationByUserIncidentEventDto,
            "CollaborationToolDisconnectedIncidentEventDto": CollaborationToolDisconnectedIncidentEventDto,
            "CollaborationToolItemLinkedByMonitorIncidentEventDto": CollaborationToolItemLinkedByMonitorIncidentEventDto,
            "CollaborationToolItemLinkedByUserIncidentEventDto": CollaborationToolItemLinkedByUserIncidentEventDto,
            "CollaborationToolItemUnlinkedIncidentEventDto": CollaborationToolItemUnlinkedIncidentEventDto,
            "CollaborationToolStatusChangeEventDto": CollaborationToolStatusChangeEventDto,
            "CommentIncidentEventDto": CommentIncidentEventDto,
            "CreationByRuleRunIncidentEventDto": CreationByRuleRunIncidentEventDto,
            "CreationByUserIncidentEventDto": CreationByUserIncidentEventDto,
            "NAME_CHANGE": NameChangeIncidentEventDto,
            "NEW_FAILURES": NewFailuresIncidentEventDto,
            "NameChangeIncidentEventDto": NameChangeIncidentEventDto,
            "NewFailuresIncidentEventDto": NewFailuresIncidentEventDto,
            "RULES_ADDED": RulesAddedIncidentEventDto,
            "RULES_MOVED_FROM": RulesMovedFromIncidentEventDto,
            "RULES_MOVED_TO": RulesMovedToIncidentEventDto,
            "RulesAddedIncidentEventDto": RulesAddedIncidentEventDto,
            "RulesMovedFromIncidentEventDto": RulesMovedFromIncidentEventDto,
            "RulesMovedToIncidentEventDto": RulesMovedToIncidentEventDto,
            "SEVERITY_CHANGE": SeverityChangeIncidentEventDto,
            "STATUS_CHANGE": StatusChangeIncidentEventDto,
            "SeverityChangeIncidentEventDto": SeverityChangeIncidentEventDto,
            "StatusChangeIncidentEventDto": StatusChangeIncidentEventDto,
        }
        if not val:
            return None
        return {"type": val}

    attribute_map = {
        "type": "type",  # noqa: E501
        "created_by_user": "createdByUser",  # noqa: E501
        "item_url": "itemUrl",  # noqa: E501
        "incident_qualification": "incidentQualification",  # noqa: E501
        "created_by_rule_run": "createdByRuleRun",  # noqa: E501
        "rule": "rule",  # noqa: E501
        "changed_by_user": "changedByUser",  # noqa: E501
        "from_incident": "fromIncident",  # noqa: E501
        "to_incident": "toIncident",  # noqa: E501
        "new_qualification": "newQualification",  # noqa: E501
        "old_qualification": "oldQualification",  # noqa: E501
        "date": "date",  # noqa: E501
        "item_key": "itemKey",  # noqa: E501
        "item_type": "itemType",  # noqa: E501
        "incident_status": "incidentStatus",  # noqa: E501
        "comment": "comment",  # noqa: E501
        "comment_id": "commentId",  # noqa: E501
        "first_date": "firstDate",  # noqa: E501
        "last_date": "lastDate",  # noqa: E501
        "new_name": "newName",  # noqa: E501
        "old_name": "oldName",  # noqa: E501
        "rule_failures": "ruleFailures",  # noqa: E501
        "rules": "rules",  # noqa: E501
        "new_severity": "newSeverity",  # noqa: E501
        "old_severity": "oldSeverity",  # noqa: E501
        "new_status": "newStatus",  # noqa: E501
        "old_status": "oldStatus",  # noqa: E501
        "new_assignees": "newAssignees",  # noqa: E501
        "old_assignees": "oldAssignees",  # noqa: E501
    }

    read_only_vars = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """SearchCollectionIncidentEventDtoDataInner - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            type (str): [optional]  # noqa: E501
            created_by_user (UserDto): [optional]  # noqa: E501
            item_url (str): [optional]  # noqa: E501
            incident_qualification (str): [optional]  # noqa: E501
            created_by_rule_run (RuleRunDto): [optional]  # noqa: E501
            rule (RuleBriefDto): [optional]  # noqa: E501
            changed_by_user (UserDto): [optional]  # noqa: E501
            from_incident (IncidentLightDto): [optional]  # noqa: E501
            to_incident (IncidentLightDto): [optional]  # noqa: E501
            new_qualification (str, none_type): [optional]  # noqa: E501
            old_qualification (str, none_type): [optional]  # noqa: E501
            date (int): [optional]  # noqa: E501
            item_key (str): [optional]  # noqa: E501
            item_type (str): [optional]  # noqa: E501
            incident_status (str): [optional]  # noqa: E501
            comment (str): [optional]  # noqa: E501
            comment_id (str): [optional]  # noqa: E501
            first_date (int): [optional]  # noqa: E501
            last_date (int): [optional]  # noqa: E501
            new_name (str): [optional]  # noqa: E501
            old_name (str): [optional]  # noqa: E501
            rule_failures ([RuleInNewFailuresIncidentEventDto]): [optional]  # noqa: E501
            rules ([RuleBriefDto]): [optional]  # noqa: E501
            new_severity (str): [optional]  # noqa: E501
            old_severity (str): [optional]  # noqa: E501
            new_status (str): [optional]  # noqa: E501
            old_status (str): [optional]  # noqa: E501
            new_assignees ([UserDto]): [optional]  # noqa: E501
            old_assignees ([UserDto]): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", False)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                        % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            "_check_type": _check_type,
            "_path_to_item": _path_to_item,
            "_spec_property_naming": _spec_property_naming,
            "_configuration": _configuration,
            "_visited_composed_classes": self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if (
                var_name in discarded_args
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self._additional_properties_model_instances
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set(
        [
            "_data_store",
            "_check_type",
            "_spec_property_naming",
            "_path_to_item",
            "_configuration",
            "_visited_composed_classes",
            "_composed_instances",
            "_var_name_to_model_instances",
            "_additional_properties_model_instances",
        ]
    )

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """SearchCollectionIncidentEventDtoDataInner - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            type (str): [optional]  # noqa: E501
            created_by_user (UserDto): [optional]  # noqa: E501
            item_url (str): [optional]  # noqa: E501
            incident_qualification (str): [optional]  # noqa: E501
            created_by_rule_run (RuleRunDto): [optional]  # noqa: E501
            rule (RuleBriefDto): [optional]  # noqa: E501
            changed_by_user (UserDto): [optional]  # noqa: E501
            from_incident (IncidentLightDto): [optional]  # noqa: E501
            to_incident (IncidentLightDto): [optional]  # noqa: E501
            new_qualification (str, none_type): [optional]  # noqa: E501
            old_qualification (str, none_type): [optional]  # noqa: E501
            date (int): [optional]  # noqa: E501
            item_key (str): [optional]  # noqa: E501
            item_type (str): [optional]  # noqa: E501
            incident_status (str): [optional]  # noqa: E501
            comment (str): [optional]  # noqa: E501
            comment_id (str): [optional]  # noqa: E501
            first_date (int): [optional]  # noqa: E501
            last_date (int): [optional]  # noqa: E501
            new_name (str): [optional]  # noqa: E501
            old_name (str): [optional]  # noqa: E501
            rule_failures ([RuleInNewFailuresIncidentEventDto]): [optional]  # noqa: E501
            rules ([RuleBriefDto]): [optional]  # noqa: E501
            new_severity (str): [optional]  # noqa: E501
            old_severity (str): [optional]  # noqa: E501
            new_status (str): [optional]  # noqa: E501
            old_status (str): [optional]  # noqa: E501
            new_assignees ([UserDto]): [optional]  # noqa: E501
            old_assignees ([UserDto]): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", False)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                        % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            "_check_type": _check_type,
            "_path_to_item": _path_to_item,
            "_spec_property_naming": _spec_property_naming,
            "_configuration": _configuration,
            "_visited_composed_classes": self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if (
                var_name in discarded_args
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self._additional_properties_model_instances
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(
                    f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                    f"class with read only attributes."
                )

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
            "anyOf": [],
            "allOf": [],
            "oneOf": [
                AssigneesChangeIncidentEventDto,
                CollaborationToolDisconnectedIncidentEventDto,
                CollaborationToolItemLinkedByMonitorIncidentEventDto,
                CollaborationToolItemLinkedByUserIncidentEventDto,
                CollaborationToolItemUnlinkedIncidentEventDto,
                CollaborationToolStatusChangeEventDto,
                CommentIncidentEventDto,
                CreationByRuleRunIncidentEventDto,
                CreationByUserIncidentEventDto,
                NameChangeIncidentEventDto,
                NewFailuresIncidentEventDto,
                RulesAddedIncidentEventDto,
                RulesMovedFromIncidentEventDto,
                RulesMovedToIncidentEventDto,
                SeverityChangeIncidentEventDto,
                StatusChangeIncidentEventDto,
            ],
        }
