# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.1.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictInt, confloat, conint

class BiddingConfigurationPerDirection(BaseModel):
    """
    BiddingConfigurationPerDirection
    """
    maximum_bid_capacity: Optional[StrictInt] = Field(default=None, alias="maximumBidCapacity", description="Capacity value in kilowatts (kW) - the required system precision allows for handling capacity values as integers")
    warning_bid_price: Optional[Union[confloat(multiple_of=0.01, strict=True), conint(strict=True)]] = Field(default=None, alias="warningBidPrice", description="Currency value in Euros (€), accepted with a precision of maximum 2 decimal places")
    maximum_bid_price: Optional[Union[confloat(multiple_of=0.01, strict=True), conint(strict=True)]] = Field(default=None, alias="maximumBidPrice", description="Currency value in Euros (€), accepted with a precision of maximum 2 decimal places")
    __properties = ["maximumBidCapacity", "warningBidPrice", "maximumBidPrice"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BiddingConfigurationPerDirection:
        """Create an instance of BiddingConfigurationPerDirection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BiddingConfigurationPerDirection:
        """Create an instance of BiddingConfigurationPerDirection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BiddingConfigurationPerDirection.parse_obj(obj)

        _obj = BiddingConfigurationPerDirection.parse_obj({
            "maximum_bid_capacity": obj.get("maximumBidCapacity"),
            "warning_bid_price": obj.get("warningBidPrice"),
            "maximum_bid_price": obj.get("maximumBidPrice")
        })
        return _obj


