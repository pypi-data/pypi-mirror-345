## How to install

### Generate locally (recommended)

You can generate type annotations for `{{ package.library_name }}` package locally with `{{ builder_package_name }}`.
Use [uv](https://docs.astral.sh/uv/getting-started/installation/) for build isolation.

1. Run {{ builder_package_name }} in your package root directory: `uvx --with '{{ package.library_name }}=={{ package.library_version }}' {{ builder_package_name }}`
1. Select `{{ package.library_chat_choice }}` AWS SDK.
1. Add all available services.
1. Use provided commands to install generated packages.

{% if package.data.is_vscode_supported -%}
### VSCode extension

Add [AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Auto-discover services` and select services you use in the current project.
{%- endif %}

### From PyPI with pip

Install `{{ package.data.pypi_name }}` to add type checking for `{{ package.library_name }}` package.

```bash
# install type annotations
python -m pip install '{{ package.data.pypi_stubs_name }}[full]'

# or install annotations in sync with {{ package.library_name }} version
python -m pip install '{{ package.data.pypi_stubs_name }}[full,{{ package.library_name }}]'
```

{% if package.data.is_conda_forge_supported -%}
### From conda-forge

Add `conda-forge` to your channels with:

```bash
conda config --add channels conda-forge
conda config --set channel_priority strict
```

Once the `conda-forge` channel has been enabled, `{{ package.data.pypi_name }}`
can be installed with:

```bash
conda install {{ package.data.pypi_stubs_name }}
```

It is possible to list all of the versions of `{{ package.data.pypi_name }}` available on your platform with:

```bash
conda search {{ package.data.pypi_stubs_name }} --channel conda-forge
```
{%- endif %}

## How to uninstall

```bash
# uninstall {{ package.data.pypi_stubs_name }}
python -m pip uninstall -y {{ package.data.pypi_name }} {{ package.data.pypi_stubs_name }}
```
