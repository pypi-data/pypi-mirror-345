"""Configuration management for OpenAPI schema generation.

This module provides configuration classes and utilities for managing
parameter prefixes and other settings for OpenAPI schema generation.

Includes classes for managing conventional parameter prefixes, caching behavior,
and OpenAPI schema generation settings, along with thread-safe global configuration.
"""

import threading
from dataclasses import dataclass, field
from typing import Any

# Default parameter prefixes
DEFAULT_BODY_PREFIX = "_x_body"
DEFAULT_QUERY_PREFIX = "_x_query"
DEFAULT_PATH_PREFIX = "_x_path"
DEFAULT_FILE_PREFIX = "_x_file"

# Default OpenAPI info
DEFAULT_TITLE = "API Documentation"
DEFAULT_VERSION = "1.0.0"
DEFAULT_DESCRIPTION = "API Documentation generated by flask-x-openapi-schema"


@dataclass(frozen=True)
class ConventionalPrefixConfig:
    """Configuration class for OpenAPI parameter prefixes.

    This class holds configuration settings for parameter prefixes used in
    binding request data to function parameters.

    Attributes:
        request_body_prefix: Prefix for request body parameters (default: "_x_body")
        request_query_prefix: Prefix for query parameters (default: "_x_query")
        request_path_prefix: Prefix for path parameters (default: "_x_path")
        request_file_prefix: Prefix for file parameters (default: "_x_file")
        extra_options: Additional configuration options

    Examples:
        >>> from flask_x_openapi_schema import ConventionalPrefixConfig
        >>> config = ConventionalPrefixConfig(
        ...     request_body_prefix="req_body",
        ...     request_query_prefix="req_query",
        ...     request_path_prefix="req_path",
        ...     request_file_prefix="req_file",
        ... )

    """

    request_body_prefix: str = DEFAULT_BODY_PREFIX
    request_query_prefix: str = DEFAULT_QUERY_PREFIX
    request_path_prefix: str = DEFAULT_PATH_PREFIX
    request_file_prefix: str = DEFAULT_FILE_PREFIX
    extra_options: dict[str, Any] = field(default_factory=dict)


@dataclass(frozen=True)
class CacheConfig:
    """Configuration class for caching behavior.

    This class holds configuration settings for controlling cache behavior
    in the library.

    Attributes:
        enabled: Global flag to enable/disable function metadata caching (default: True)

    """

    enabled: bool = True


@dataclass(frozen=True)
class OpenAPIConfig:
    """Configuration class for OpenAPI schema generation.

    This class holds configuration settings for OpenAPI schema generation.

    Attributes:
        title: API title
        version: API version
        description: API description
        prefix_config: Parameter prefix configuration
        security_schemes: Security schemes configuration
        openapi_version: OpenAPI specification version
        servers: List of server objects
        external_docs: External documentation
        webhooks: Webhook definitions
        json_schema_dialect: JSON Schema dialect
        cache_config: Configuration for caching behavior

    """

    title: str = DEFAULT_TITLE
    version: str = DEFAULT_VERSION
    description: str = DEFAULT_DESCRIPTION
    prefix_config: ConventionalPrefixConfig = field(default_factory=ConventionalPrefixConfig)
    security_schemes: dict[str, dict[str, Any]] = field(default_factory=dict)
    openapi_version: str = "3.1.0"
    servers: list[dict[str, Any]] = field(default_factory=list)
    external_docs: dict[str, Any] | None = None
    webhooks: dict[str, dict[str, Any]] = field(default_factory=dict)
    json_schema_dialect: str | None = None
    cache_config: CacheConfig = field(default_factory=CacheConfig)


# Global configuration instance with thread safety
class ThreadSafeConfig:
    """Thread-safe configuration holder.

    This class provides thread-safe access to configuration settings.
    """

    def __init__(self) -> None:  # noqa: D107
        self._prefix_config = ConventionalPrefixConfig()
        self._openapi_config = OpenAPIConfig()
        self._cache_config = CacheConfig(enabled=True)
        self._lock = threading.RLock()

    def get(self) -> ConventionalPrefixConfig:
        """Get the current prefix configuration.

        Returns:
            ConventionalPrefixConfig: Current prefix configuration

        """
        with self._lock:
            # Return a copy to prevent modification
            return ConventionalPrefixConfig(
                request_body_prefix=self._prefix_config.request_body_prefix,
                request_query_prefix=self._prefix_config.request_query_prefix,
                request_path_prefix=self._prefix_config.request_path_prefix,
                request_file_prefix=self._prefix_config.request_file_prefix,
                extra_options=dict(self._prefix_config.extra_options),
            )

    def get_cache_config(self) -> CacheConfig:
        """Get the current cache configuration.

        Returns:
            CacheConfig: Current cache configuration

        """
        with self._lock:
            # Return a copy to prevent modification
            return CacheConfig(
                enabled=self._cache_config.enabled,
            )

    def get_openapi_config(self) -> OpenAPIConfig:
        """Get the current OpenAPI configuration.

        Returns:
            OpenAPIConfig: Current OpenAPI configuration

        """
        with self._lock:
            # Return a copy to prevent modification
            return OpenAPIConfig(
                title=self._openapi_config.title,
                version=self._openapi_config.version,
                description=self._openapi_config.description,
                prefix_config=self.get(),
                security_schemes=dict(self._openapi_config.security_schemes),
                openapi_version=self._openapi_config.openapi_version,
                servers=[dict(server) for server in self._openapi_config.servers]
                if self._openapi_config.servers
                else [],
                external_docs=dict(self._openapi_config.external_docs) if self._openapi_config.external_docs else None,
                webhooks=dict(self._openapi_config.webhooks) if self._openapi_config.webhooks else {},
                json_schema_dialect=self._openapi_config.json_schema_dialect,
                cache_config=self.get_cache_config(),
            )

    def set(self, config: ConventionalPrefixConfig) -> None:
        """Set a new prefix configuration.

        Args:
            config: New prefix configuration

        """
        with self._lock:
            self._prefix_config = ConventionalPrefixConfig(
                request_body_prefix=config.request_body_prefix,
                request_query_prefix=config.request_query_prefix,
                request_path_prefix=config.request_path_prefix,
                request_file_prefix=config.request_file_prefix,
                extra_options=dict(config.extra_options),
            )

    def set_openapi_config(self, config: OpenAPIConfig) -> None:
        """Set a new OpenAPI configuration.

        Args:
            config: New OpenAPI configuration

        """
        with self._lock:
            self._openapi_config = OpenAPIConfig(
                title=config.title,
                version=config.version,
                description=config.description,
                prefix_config=config.prefix_config,
                security_schemes=dict(config.security_schemes),
                openapi_version=config.openapi_version,
                servers=[dict(server) for server in config.servers] if config.servers else [],
                external_docs=dict(config.external_docs) if config.external_docs else None,
                webhooks=dict(config.webhooks) if config.webhooks else {},
                json_schema_dialect=config.json_schema_dialect,
                cache_config=config.cache_config,
            )
            # Also update prefix config
            self.set(config.prefix_config)
            # Also update cache config
            self.set_cache_config(config.cache_config)

    def set_cache_config(self, config: CacheConfig) -> None:
        """Set a new cache configuration.

        Args:
            config: New cache configuration

        """
        with self._lock:
            self._cache_config = CacheConfig(
                enabled=config.enabled,
            )

    def reset(self) -> None:
        """Reset to default prefix configuration.

        Returns:
            None

        """
        with self._lock:
            self._prefix_config = ConventionalPrefixConfig(
                request_body_prefix=DEFAULT_BODY_PREFIX,
                request_query_prefix=DEFAULT_QUERY_PREFIX,
                request_path_prefix=DEFAULT_PATH_PREFIX,
                request_file_prefix=DEFAULT_FILE_PREFIX,
                extra_options={},
            )

    def reset_all(self) -> None:
        """Reset all configurations to defaults.

        Returns:
            None

        """
        with self._lock:
            self.reset()
            self._openapi_config = OpenAPIConfig()
            self._cache_config = CacheConfig(enabled=True)


# Create a singleton instance
GLOBAL_CONFIG_HOLDER = ThreadSafeConfig()


def configure_prefixes(config: ConventionalPrefixConfig) -> None:
    """Configure global parameter prefixes.

    Sets the global configuration for parameter prefixes used in binding request data
    to function parameters. This affects all decorators that don't specify their own
    prefix configuration.

    Args:
        config: Configuration object with parameter prefixes

    Examples:
        >>> from flask_x_openapi_schema import ConventionalPrefixConfig, configure_prefixes
        >>> custom_config = ConventionalPrefixConfig(request_body_prefix="req_body", request_query_prefix="req_query")
        >>> configure_prefixes(custom_config)

    """
    # Update the configuration in a thread-safe manner
    GLOBAL_CONFIG_HOLDER.set(config)


def configure_openapi(config: OpenAPIConfig) -> None:
    """Configure global OpenAPI settings.

    Args:
        config: Configuration object with OpenAPI settings

    """
    # Update the configuration in a thread-safe manner
    GLOBAL_CONFIG_HOLDER.set_openapi_config(config)


def reset_prefixes() -> None:
    """Reset parameter prefixes to default values.

    Resets the global parameter prefix configuration to the default values:
    - request_body_prefix: "_x_body"
    - request_query_prefix: "_x_query"
    - request_path_prefix: "_x_path"
    - request_file_prefix: "_x_file"

    Examples:
        >>> from flask_x_openapi_schema import reset_prefixes
        >>> reset_prefixes()  # Resets to default prefixes

    """
    # Reset the configuration in a thread-safe manner
    GLOBAL_CONFIG_HOLDER.reset()


def reset_all_config() -> None:
    """Reset all configuration to default values.

    Resets all configuration settings to their default values, including
    parameter prefixes, OpenAPI settings, and cache configuration.
    """
    # Reset the configuration in a thread-safe manner
    GLOBAL_CONFIG_HOLDER.reset_all()


def get_openapi_config() -> OpenAPIConfig:
    """Get the current OpenAPI configuration.

    Returns:
        OpenAPIConfig: Current OpenAPI configuration

    """
    return GLOBAL_CONFIG_HOLDER.get_openapi_config()


def get_cache_config() -> CacheConfig:
    """Get the current cache configuration.

    Returns:
        CacheConfig: Current cache configuration

    """
    return GLOBAL_CONFIG_HOLDER.get_cache_config()


def configure_cache(config: CacheConfig) -> None:
    """Configure global cache settings.

    Args:
        config: Configuration object with cache settings

    Examples:
        >>> from flask_x_openapi_schema import CacheConfig, configure_cache
        >>> cache_config = CacheConfig(enabled=True)
        >>> configure_cache(cache_config)

    """
    # Update the configuration in a thread-safe manner
    GLOBAL_CONFIG_HOLDER.set_cache_config(config)
