"""
    Sifflet Backend API

    Requirements: <br>    - [Create your access token through the UI](https://docs.siffletdata.com/docs/generate-an-api-token#create-an-api-token) <br>    - Get your tenant name: if you access to Sifflet with `https://abcdef.siffletdata.com`, then your tenant would be `abcdef`  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from sifflet_sdk.client.api_client import ApiClient
from sifflet_sdk.client.api_client import Endpoint as _Endpoint
from sifflet_sdk.client.model.api_problem_schema import ApiProblemSchema
from sifflet_sdk.client.model.get_sifflet_rule_graph200_response_inner import (
    GetSiffletRuleGraph200ResponseInner,
)
from sifflet_sdk.client.model.group_decrypted_values_dto import GroupDecryptedValuesDto
from sifflet_sdk.client.model.rule_group_request_dto import RuleGroupRequestDto
from sifflet_sdk.client.model.rule_overview_group_count_per_status_dto import (
    RuleOverviewGroupCountPerStatusDto,
)
from sifflet_sdk.client.model.rule_run_debug_dto import RuleRunDebugDto
from sifflet_sdk.client.model.rule_run_dto import RuleRunDto
from sifflet_sdk.client.model.search_collection_rule_run_details_by_group_dto import (
    SearchCollectionRuleRunDetailsByGroupDto,
)
from sifflet_sdk.client.model.search_collection_rule_run_dto import (
    SearchCollectionRuleRunDto,
)
from sifflet_sdk.client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class RuleRunApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.decrypt_rule_run_groups_endpoint = _Endpoint(
            settings={
                "response_type": (GroupDecryptedValuesDto,),
                "auth": ["JWT"],
                "endpoint_path": "/v1/rules/runs/{runId}/decrypt",
                "operation_id": "decrypt_rule_run_groups",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "run_id",
                ],
                "required": [
                    "run_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "run_id": (str,),
                },
                "attribute_map": {
                    "run_id": "runId",
                },
                "location_map": {
                    "run_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_sifflet_rule_graph_by_run_and_group_endpoint = _Endpoint(
            settings={
                "response_type": ([GetSiffletRuleGraph200ResponseInner],),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/rules/{id}/runs/{runId}/groups/_graph",
                "operation_id": "get_sifflet_rule_graph_by_run_and_group",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "run_id",
                    "rule_group_request_dto",
                ],
                "required": [
                    "id",
                    "run_id",
                    "rule_group_request_dto",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (str,),
                    "run_id": (str,),
                    "rule_group_request_dto": (RuleGroupRequestDto,),
                },
                "attribute_map": {
                    "id": "id",
                    "run_id": "runId",
                },
                "location_map": {
                    "id": "path",
                    "run_id": "path",
                    "rule_group_request_dto": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.get_sifflet_rule_overview_group_count_per_status_endpoint = _Endpoint(
            settings={
                "response_type": (RuleOverviewGroupCountPerStatusDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/rules/{ruleId}/overview/group-count-per-status",
                "operation_id": "get_sifflet_rule_overview_group_count_per_status",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "rule_id",
                ],
                "required": [
                    "rule_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "rule_id": (str,),
                },
                "attribute_map": {
                    "rule_id": "ruleId",
                },
                "location_map": {
                    "rule_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_sifflet_rule_run_endpoint = _Endpoint(
            settings={
                "response_type": (RuleRunDto,),
                "auth": ["JWT"],
                "endpoint_path": "/v1/rules/{id}/runs/{runId}",
                "operation_id": "get_sifflet_rule_run",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "run_id",
                    "expand",
                ],
                "required": [
                    "id",
                    "run_id",
                ],
                "nullable": [],
                "enum": [
                    "expand",
                ],
                "validation": [
                    "expand",
                ],
            },
            root_map={
                "validations": {
                    ("expand",): {},
                },
                "allowed_values": {
                    ("expand",): {"VALUES": "VALUES"},
                },
                "openapi_types": {
                    "id": (str,),
                    "run_id": (str,),
                    "expand": ([str],),
                },
                "attribute_map": {
                    "id": "id",
                    "run_id": "runId",
                    "expand": "expand",
                },
                "location_map": {
                    "id": "path",
                    "run_id": "path",
                    "expand": "query",
                },
                "collection_format_map": {
                    "expand": "multi",
                },
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_sifflet_rule_run_details_endpoint = _Endpoint(
            settings={
                "response_type": (SearchCollectionRuleRunDetailsByGroupDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/rules/{id}/runs/{runId}/details",
                "operation_id": "get_sifflet_rule_run_details",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "run_id",
                    "text_search",
                    "page",
                    "items_per_page",
                    "sort",
                ],
                "required": [
                    "id",
                    "run_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (str,),
                    "run_id": (str,),
                    "text_search": (str,),
                    "page": (int,),
                    "items_per_page": (int,),
                    "sort": ([str],),
                },
                "attribute_map": {
                    "id": "id",
                    "run_id": "runId",
                    "text_search": "textSearch",
                    "page": "page",
                    "items_per_page": "itemsPerPage",
                    "sort": "sort",
                },
                "location_map": {
                    "id": "path",
                    "run_id": "path",
                    "text_search": "query",
                    "page": "query",
                    "items_per_page": "query",
                    "sort": "query",
                },
                "collection_format_map": {
                    "sort": "multi",
                },
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_sifflet_rule_run_overview_details_endpoint = _Endpoint(
            settings={
                "response_type": (SearchCollectionRuleRunDetailsByGroupDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/rules/{ruleId}/overview/details",
                "operation_id": "get_sifflet_rule_run_overview_details",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "rule_id",
                    "text_search",
                    "page",
                    "items_per_page",
                    "sort",
                    "rule_group_status",
                ],
                "required": [
                    "rule_id",
                ],
                "nullable": [],
                "enum": [
                    "rule_group_status",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("rule_group_status",): {
                        "NOT_EVALUATED": "NOT_EVALUATED",
                        "PASSING": "PASSING",
                        "NEEDS_ATTENTION": "NEEDS_ATTENTION",
                        "FAILING": "FAILING",
                    },
                },
                "openapi_types": {
                    "rule_id": (str,),
                    "text_search": (str,),
                    "page": (int,),
                    "items_per_page": (int,),
                    "sort": ([str],),
                    "rule_group_status": (str,),
                },
                "attribute_map": {
                    "rule_id": "ruleId",
                    "text_search": "textSearch",
                    "page": "page",
                    "items_per_page": "itemsPerPage",
                    "sort": "sort",
                    "rule_group_status": "ruleGroupStatus",
                },
                "location_map": {
                    "rule_id": "path",
                    "text_search": "query",
                    "page": "query",
                    "items_per_page": "query",
                    "sort": "query",
                    "rule_group_status": "query",
                },
                "collection_format_map": {
                    "sort": "multi",
                },
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.get_sifflet_rule_runs_endpoint = _Endpoint(
            settings={
                "response_type": (SearchCollectionRuleRunDto,),
                "auth": ["JWT"],
                "endpoint_path": "/v1/rules/{id}/runs",
                "operation_id": "get_sifflet_rule_runs",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "status",
                    "page",
                    "items_per_page",
                    "sort",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [
                    "status",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("status",): {
                        "PENDING": "PENDING",
                        "RUNNING": "RUNNING",
                        "SUCCESS": "SUCCESS",
                        "REQUIRES_YOUR_ATTENTION": "REQUIRES_YOUR_ATTENTION",
                        "TECHNICAL_ERROR": "TECHNICAL_ERROR",
                        "FAILED": "FAILED",
                    },
                },
                "openapi_types": {
                    "id": (str,),
                    "status": ([str],),
                    "page": (int,),
                    "items_per_page": (int,),
                    "sort": ([str],),
                },
                "attribute_map": {
                    "id": "id",
                    "status": "status",
                    "page": "page",
                    "items_per_page": "itemsPerPage",
                    "sort": "sort",
                },
                "location_map": {
                    "id": "path",
                    "status": "query",
                    "page": "query",
                    "items_per_page": "query",
                    "sort": "query",
                },
                "collection_format_map": {
                    "status": "multi",
                    "sort": "multi",
                },
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.sifflet_rule_run_debug_endpoint = _Endpoint(
            settings={
                "response_type": (RuleRunDebugDto,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/rules/{id}/runs/{runId}/_debug",
                "operation_id": "sifflet_rule_run_debug",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "run_id",
                    "rule_group_request_dto",
                ],
                "required": [
                    "id",
                    "run_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (str,),
                    "run_id": (str,),
                    "rule_group_request_dto": (RuleGroupRequestDto,),
                },
                "attribute_map": {
                    "id": "id",
                    "run_id": "runId",
                },
                "location_map": {
                    "id": "path",
                    "run_id": "path",
                    "rule_group_request_dto": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "application/problem+json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.sifflet_rule_run_download_by_run_endpoint = _Endpoint(
            settings={
                "response_type": (file_type,),
                "auth": ["JWT"],
                "endpoint_path": "/ui/v1/rules/{id}/runs/{runId}/_download",
                "operation_id": "sifflet_rule_run_download_by_run",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                    "run_id",
                    "export_format",
                    "filtered_column_names",
                    "rule_group_request_dto",
                ],
                "required": [
                    "id",
                    "run_id",
                ],
                "nullable": [],
                "enum": [
                    "export_format",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("export_format",): {"CSV": "CSV", "CSV_FOR_EXCEL": "CSV_FOR_EXCEL", "TSV": "TSV"},
                },
                "openapi_types": {
                    "id": (str,),
                    "run_id": (str,),
                    "export_format": (str,),
                    "filtered_column_names": ([str],),
                    "rule_group_request_dto": (RuleGroupRequestDto,),
                },
                "attribute_map": {
                    "id": "id",
                    "run_id": "runId",
                    "export_format": "exportFormat",
                    "filtered_column_names": "filteredColumnNames",
                },
                "location_map": {
                    "id": "path",
                    "run_id": "path",
                    "export_format": "query",
                    "filtered_column_names": "query",
                    "rule_group_request_dto": "body",
                },
                "collection_format_map": {
                    "filtered_column_names": "multi",
                },
            },
            headers_map={
                "accept": ["application/json", "text/csv", "application/problem+json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )

    def decrypt_rule_run_groups(self, run_id, **kwargs):
        """Decrypt rule run groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.decrypt_rule_run_groups(run_id, async_req=True)
        >>> result = thread.get()

        Args:
            run_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GroupDecryptedValuesDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["run_id"] = run_id
        return self.decrypt_rule_run_groups_endpoint.call_with_http_info(**kwargs)

    def get_sifflet_rule_graph_by_run_and_group(self, id, run_id, rule_group_request_dto, **kwargs):
        """Get a single Sifflet rule graph  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sifflet_rule_graph_by_run_and_group(id, run_id, rule_group_request_dto, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):
            run_id (str):
            rule_group_request_dto (RuleGroupRequestDto):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetSiffletRuleGraph200ResponseInner]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        kwargs["run_id"] = run_id
        kwargs["rule_group_request_dto"] = rule_group_request_dto
        return self.get_sifflet_rule_graph_by_run_and_group_endpoint.call_with_http_info(**kwargs)

    def get_sifflet_rule_overview_group_count_per_status(self, rule_id, **kwargs):
        """Fetch a Sifflet rule group count per status for overview  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sifflet_rule_overview_group_count_per_status(rule_id, async_req=True)
        >>> result = thread.get()

        Args:
            rule_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RuleOverviewGroupCountPerStatusDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["rule_id"] = rule_id
        return self.get_sifflet_rule_overview_group_count_per_status_endpoint.call_with_http_info(**kwargs)

    def get_sifflet_rule_run(self, id, run_id, **kwargs):
        """Get a Sifflet rule run by rule id and run id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sifflet_rule_run(id, run_id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):
            run_id (str):

        Keyword Args:
            expand ([str]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RuleRunDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        kwargs["run_id"] = run_id
        return self.get_sifflet_rule_run_endpoint.call_with_http_info(**kwargs)

    def get_sifflet_rule_run_details(self, id, run_id, **kwargs):
        """Fetch a Rule Run details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sifflet_rule_run_details(id, run_id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):
            run_id (str):

        Keyword Args:
            text_search (str): Global text search. [optional]
            page (int): The requested page number. Zero-based page index (0..N). [optional] if omitted the server will use the default value of 0
            items_per_page (int): The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items. [optional] if omitted the server will use the default value of 25
            sort ([str]): The resource fields on which to apply the sort, format : property,ASC|DESC. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SearchCollectionRuleRunDetailsByGroupDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        kwargs["run_id"] = run_id
        return self.get_sifflet_rule_run_details_endpoint.call_with_http_info(**kwargs)

    def get_sifflet_rule_run_overview_details(self, rule_id, **kwargs):
        """Fetch a Rule Run details for overview tab (dynamic statuses)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sifflet_rule_run_overview_details(rule_id, async_req=True)
        >>> result = thread.get()

        Args:
            rule_id (str):

        Keyword Args:
            text_search (str): Global text search. [optional]
            page (int): The requested page number. Zero-based page index (0..N). [optional] if omitted the server will use the default value of 0
            items_per_page (int): The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items. [optional] if omitted the server will use the default value of 25
            sort ([str]): The resource fields on which to apply the sort, format : property,ASC|DESC. [optional]
            rule_group_status (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SearchCollectionRuleRunDetailsByGroupDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["rule_id"] = rule_id
        return self.get_sifflet_rule_run_overview_details_endpoint.call_with_http_info(**kwargs)

    def get_sifflet_rule_runs(self, id, **kwargs):
        """Get all Sifflet rule runs by rule id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sifflet_rule_runs(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):

        Keyword Args:
            status ([str]): Filter by run status. [optional]
            page (int): The requested page number. Zero-based page index (0..N). [optional] if omitted the server will use the default value of 0
            items_per_page (int): The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items. [optional] if omitted the server will use the default value of 25
            sort ([str]): The resource fields on which to apply the sort, format : property,ASC|DESC. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SearchCollectionRuleRunDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        return self.get_sifflet_rule_runs_endpoint.call_with_http_info(**kwargs)

    def sifflet_rule_run_debug(self, id, run_id, **kwargs):
        """Debug a Sifflet Rule run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sifflet_rule_run_debug(id, run_id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):
            run_id (str):

        Keyword Args:
            rule_group_request_dto (RuleGroupRequestDto): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RuleRunDebugDto
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        kwargs["run_id"] = run_id
        return self.sifflet_rule_run_debug_endpoint.call_with_http_info(**kwargs)

    def sifflet_rule_run_download_by_run(self, id, run_id, **kwargs):
        """Download failing results of a Sifflet Rule run. The CSV created contains the first 20000 rows sent by the Database  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sifflet_rule_run_download_by_run(id, run_id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):
            run_id (str):

        Keyword Args:
            export_format (str): [optional] if omitted the server will use the default value of "CSV"
            filtered_column_names ([str]): [optional]
            rule_group_request_dto (RuleGroupRequestDto): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["id"] = id
        kwargs["run_id"] = run_id
        return self.sifflet_rule_run_download_by_run_endpoint.call_with_http_info(**kwargs)
