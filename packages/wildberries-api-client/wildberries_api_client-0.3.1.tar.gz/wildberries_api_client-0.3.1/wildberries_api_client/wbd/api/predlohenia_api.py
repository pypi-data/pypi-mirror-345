# coding: utf-8

"""
    Wildberries cifrovoi

    Po voprosam raboty s WBD API, obrahaites v <a href=\"https://digital.wildberries.ru/support\" target=\"_blank\">tehniheskuu podderhku</a>.   # noqa: E501

    OpenAPI spec version: wbd
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.wbd.api_client import ApiClient


class PredloheniaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_catalog(self, **kwargs):  # noqa: E501
        """Poluhit kategorii i ih podkategorii  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit derevo(struktura dannyh) s kategoriam i ih podkategoriami.</br>  ### Ierarhia struktury dannyh  #### V nahei strukture est tri urovna ierarhii: 1. **Kornevoi uzel** — suhnost **Katalog** 2. **Vnehnie uzly** predstavlaut soboi kategorii (`section`): - `1` — Videokontent - `2` — Audiokontent - `3` — Kluhi aktivacii - `4` — Elektronnye knigi - `5` — Audioknigi - `6` — cifrovye tovary - `8` — Uslugi - `12` — Kupony i razvlehenia - `13` — Podarohnye sertifikaty 3. **Lista dereva** avlautsa podkategoriami (`catalog_path`): - `65` — Obuhauhie video - `66` — Sport - `67` — Master-klass - `68` — Ioga - `69` — Meditacii   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_catalog(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetFullCatalogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_catalog_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_catalog_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_catalog_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit kategorii i ih podkategorii  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit derevo(struktura dannyh) s kategoriam i ih podkategoriami.</br>  ### Ierarhia struktury dannyh  #### V nahei strukture est tri urovna ierarhii: 1. **Kornevoi uzel** — suhnost **Katalog** 2. **Vnehnie uzly** predstavlaut soboi kategorii (`section`): - `1` — Videokontent - `2` — Audiokontent - `3` — Kluhi aktivacii - `4` — Elektronnye knigi - `5` — Audioknigi - `6` — cifrovye tovary - `8` — Uslugi - `12` — Kupony i razvlehenia - `13` — Podarohnye sertifikaty 3. **Lista dereva** avlautsa podkategoriami (`catalog_path`): - `65` — Obuhauhie video - `66` — Sport - `67` — Master-klass - `68` — Ioga - `69` — Meditacii   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_catalog_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetFullCatalogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_catalog" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/catalog', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetFullCatalogResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def offer_create(self, body, **kwargs):  # noqa: E501
        """Sozdat novoe predlohenie  # noqa: E501

        Maksimum 50 zaprosov v sekundu  Metod pozvolaet sozdat novoe predlohenie.</br>  #### Obazatelnye pola: - `title` — Nazvanie predlohenia - `description` — Opisanie predlohenia - `tags` — Tegi predlohenia - `section` — Kategoria predlohenia - `catalog_path` — Podkategoria predlohenia. - `age_rating` — Vozrastnoe ogranihenie predlohenia - `price` — cena predlohenia   #### Dobavit oblohku  Oblohka dla predlohenia zagruhaetsa **otdelno posle sozdania predlohenia**.</br> Vam neobhodimo vospolzovatsa metodom [Dobavit ili obnovit oblohku predlohenia](#operation/offersUploadThumbnail).  #### Dobavit dopolnitelnye media-faily  1. Zagruzit mediafaily s pomohu metoda [Zagruzit media-fail dla predlohenia](#operation/contentGallery), metod vozvrahaet spisok URI adresov zagruhennyh media-failov 2. Dobavit URI media-failov v pole `gallery`  #### Kategoria i podkateogria predlohenia Vospolzuites metodom [Poluhit kategorii i ih podkategorii](#operation/GetCatalog) dla poluhenia ID podkategorii i pravilnogo sopostavlenia s kategoriei.   ### Predlohenie iz kategorii \"Uslugi\"  `section` — `8`  Dostup k publikacii kontenta etoi kategorii predostavlaetsa herez zaavku v <a href=\"https://digital.wildberries.ru/support\" target=\"_blank\">tehniheskuu podderhku</a>.  ### Predlohenie c unikalnymi kluhami   Predlohenie c unikalnymi kluhami otnosatsa k kategoriam (`section`): - **Kluhi aktivacii** — `3` - **Kupony i razvlehenia** — `12` - **Podarohnye sertifikaty** — `13`  Obazatelnye dannye: - Kluhi k predloheniu  - Instrukcia po aktivacii kluha  #### Zagruzka kluhei Spisok kluhei peredaetsa v pole `keys` vahego zaprosa pri sozdanii predlohenia.</br>  V dalneihem vy mohete dobavlat kluhi s pomohu metoda [Dobavit kluhi aktivacii](#operation/LoadKeys).  #### Dobavlenie instrukcii po aktivacii kluha Instrukciu po aktivacii kluha neobhodimo dobavit v pole `meta` v formate **JSON** ispolzua sleduuhii primer.</br> htoby sdelat tekst bolee privlekatelnym i udobohitaemym, **ispolzuite perenos stroki** `\\n`.  **Primer:**</br> ```json {     \"meta\":{         \"key_instruction\": \"Instrukcia po aktivacii\\n1. Zaidite na sait ...\\n2.Vstavte kluh v pole ...\"     } } ```  ### Predlohenie s kontentom  Predlohenie s kontentom otnositsa k kategoriam (`section`): - **Videokontent** — `1` - **Audiokontent** — `2` - **Elektronnye knigi** — `4` - **Audioknigi** — `5` - **cifrovye tovary** — `6`  Obazatelnye dannye: - Kontent dla predlohenia  #### Dobavlenie kontenta  Esli vy ehe ne dobavili kontent v lihnyi kabinet prodavca, to vy mohete eto sdelat po [instrukcii](#add-content).  Dla dobavlenia kontenta vam neobhodimo peredat v pole `content` spisok dannyh ispolzua primer nihe.</br>  **Primer:**</br> ```json \"content\": [     {         \"category_id\": 1,         \"content\": 8942     },     {         \"category_id\": 1,         \"content\": 4211     } ] ```  gde: - `category_id` — ID kategorii kontenta - `content` — ID kontenta  Etu informaciu vy mohete poluhit s pomohu metod [Poluhit spisok svoego kontenta](#operation/contentAuthorGet).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offer_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OfferCreateRequest body: (required)
        :return: OfferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.offer_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.offer_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def offer_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Sozdat novoe predlohenie  # noqa: E501

        Maksimum 50 zaprosov v sekundu  Metod pozvolaet sozdat novoe predlohenie.</br>  #### Obazatelnye pola: - `title` — Nazvanie predlohenia - `description` — Opisanie predlohenia - `tags` — Tegi predlohenia - `section` — Kategoria predlohenia - `catalog_path` — Podkategoria predlohenia. - `age_rating` — Vozrastnoe ogranihenie predlohenia - `price` — cena predlohenia   #### Dobavit oblohku  Oblohka dla predlohenia zagruhaetsa **otdelno posle sozdania predlohenia**.</br> Vam neobhodimo vospolzovatsa metodom [Dobavit ili obnovit oblohku predlohenia](#operation/offersUploadThumbnail).  #### Dobavit dopolnitelnye media-faily  1. Zagruzit mediafaily s pomohu metoda [Zagruzit media-fail dla predlohenia](#operation/contentGallery), metod vozvrahaet spisok URI adresov zagruhennyh media-failov 2. Dobavit URI media-failov v pole `gallery`  #### Kategoria i podkateogria predlohenia Vospolzuites metodom [Poluhit kategorii i ih podkategorii](#operation/GetCatalog) dla poluhenia ID podkategorii i pravilnogo sopostavlenia s kategoriei.   ### Predlohenie iz kategorii \"Uslugi\"  `section` — `8`  Dostup k publikacii kontenta etoi kategorii predostavlaetsa herez zaavku v <a href=\"https://digital.wildberries.ru/support\" target=\"_blank\">tehniheskuu podderhku</a>.  ### Predlohenie c unikalnymi kluhami   Predlohenie c unikalnymi kluhami otnosatsa k kategoriam (`section`): - **Kluhi aktivacii** — `3` - **Kupony i razvlehenia** — `12` - **Podarohnye sertifikaty** — `13`  Obazatelnye dannye: - Kluhi k predloheniu  - Instrukcia po aktivacii kluha  #### Zagruzka kluhei Spisok kluhei peredaetsa v pole `keys` vahego zaprosa pri sozdanii predlohenia.</br>  V dalneihem vy mohete dobavlat kluhi s pomohu metoda [Dobavit kluhi aktivacii](#operation/LoadKeys).  #### Dobavlenie instrukcii po aktivacii kluha Instrukciu po aktivacii kluha neobhodimo dobavit v pole `meta` v formate **JSON** ispolzua sleduuhii primer.</br> htoby sdelat tekst bolee privlekatelnym i udobohitaemym, **ispolzuite perenos stroki** `\\n`.  **Primer:**</br> ```json {     \"meta\":{         \"key_instruction\": \"Instrukcia po aktivacii\\n1. Zaidite na sait ...\\n2.Vstavte kluh v pole ...\"     } } ```  ### Predlohenie s kontentom  Predlohenie s kontentom otnositsa k kategoriam (`section`): - **Videokontent** — `1` - **Audiokontent** — `2` - **Elektronnye knigi** — `4` - **Audioknigi** — `5` - **cifrovye tovary** — `6`  Obazatelnye dannye: - Kontent dla predlohenia  #### Dobavlenie kontenta  Esli vy ehe ne dobavili kontent v lihnyi kabinet prodavca, to vy mohete eto sdelat po [instrukcii](#add-content).  Dla dobavlenia kontenta vam neobhodimo peredat v pole `content` spisok dannyh ispolzua primer nihe.</br>  **Primer:**</br> ```json \"content\": [     {         \"category_id\": 1,         \"content\": 8942     },     {         \"category_id\": 1,         \"content\": 4211     } ] ```  gde: - `category_id` — ID kategorii kontenta - `content` — ID kontenta  Etu informaciu vy mohete poluhit s pomohu metod [Poluhit spisok svoego kontenta](#operation/contentAuthorGet).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offer_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OfferCreateRequest body: (required)
        :return: OfferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offer_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `offer_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/offers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OfferResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def offer_get(self, offer_id, **kwargs):  # noqa: E501
        """Poluhit informaciu o predlohenii  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit informaciu o konkretnom predlohenii.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offer_get(offer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offer_id: ID predlohenia (required)
        :return: OfferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.offer_get_with_http_info(offer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.offer_get_with_http_info(offer_id, **kwargs)  # noqa: E501
            return data

    def offer_get_with_http_info(self, offer_id, **kwargs):  # noqa: E501
        """Poluhit informaciu o predlohenii  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit informaciu o konkretnom predlohenii.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offer_get_with_http_info(offer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offer_id: ID predlohenia (required)
        :return: OfferResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offer_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'offer_id' is set
        if ('offer_id' not in params or
                params['offer_id'] is None):
            raise ValueError("Missing the required parameter `offer_id` when calling `offer_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'offer_id' in params:
            path_params['offer_id'] = params['offer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/offers/{offer_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OfferResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def offer_update(self, body, offer_id, **kwargs):  # noqa: E501
        """Redaktirovat predlohenie  # noqa: E501

        Maksimum 50 zaprosov v sekundu  Metod pozvolaet redaktirovat informaciu o predlohenii.  #### Kategoria i podkateogria predlohenia Vospolzuites metodom [Poluhit kategorii i ih podkategorii](#operation/GetCatalog) dla poluhenia ID podkategorii i pravilnogo sopostavlenia s kategoriei.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offer_update(body, offer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OfferUpdateRequest body: (required)
        :param int offer_id: ID predlohenia (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.offer_update_with_http_info(body, offer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.offer_update_with_http_info(body, offer_id, **kwargs)  # noqa: E501
            return data

    def offer_update_with_http_info(self, body, offer_id, **kwargs):  # noqa: E501
        """Redaktirovat predlohenie  # noqa: E501

        Maksimum 50 zaprosov v sekundu  Metod pozvolaet redaktirovat informaciu o predlohenii.  #### Kategoria i podkateogria predlohenia Vospolzuites metodom [Poluhit kategorii i ih podkategorii](#operation/GetCatalog) dla poluhenia ID podkategorii i pravilnogo sopostavlenia s kategoriei.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offer_update_with_http_info(body, offer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OfferUpdateRequest body: (required)
        :param int offer_id: ID predlohenia (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'offer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offer_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `offer_update`")  # noqa: E501
        # verify the required parameter 'offer_id' is set
        if ('offer_id' not in params or
                params['offer_id'] is None):
            raise ValueError("Missing the required parameter `offer_id` when calling `offer_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'offer_id' in params:
            path_params['offer_id'] = params['offer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/offers/{offer_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def offer_update_price(self, body, offer_id, **kwargs):  # noqa: E501
        """Obnovit cenu  # noqa: E501

        Maksimum 50 zaprosov v sekundu  Metod pozvolaet izmenit cenu predlohenia i cenu s uhetom skidok.   Esli vy ne hotite vystavlat skidku, to v zaprose neobhodimo **ne peredavat** parametr `discount_price` ili vystavit u nego znahenie `0`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offer_update_price(body, offer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OfferPriceUpdateRequest body: (required)
        :param int offer_id: ID predlohenia (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.offer_update_price_with_http_info(body, offer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.offer_update_price_with_http_info(body, offer_id, **kwargs)  # noqa: E501
            return data

    def offer_update_price_with_http_info(self, body, offer_id, **kwargs):  # noqa: E501
        """Obnovit cenu  # noqa: E501

        Maksimum 50 zaprosov v sekundu  Metod pozvolaet izmenit cenu predlohenia i cenu s uhetom skidok.   Esli vy ne hotite vystavlat skidku, to v zaprose neobhodimo **ne peredavat** parametr `discount_price` ili vystavit u nego znahenie `0`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offer_update_price_with_http_info(body, offer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OfferPriceUpdateRequest body: (required)
        :param int offer_id: ID predlohenia (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'offer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offer_update_price" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `offer_update_price`")  # noqa: E501
        # verify the required parameter 'offer_id' is set
        if ('offer_id' not in params or
                params['offer_id'] is None):
            raise ValueError("Missing the required parameter `offer_id` when calling `offer_update_price`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'offer_id' in params:
            path_params['offer_id'] = params['offer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/offer/price/{offer_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def offer_update_status(self, body, offer_id, **kwargs):  # noqa: E501
        """Obnovit status  # noqa: E501

        Maksimum 50 zaprosov v sekundu  Metod pozvolaet obnovit status vahego predlohenia.  Status mohet byt: - `0` — hernovik - `1` — Opublikovan - `2` — Priostanovlen - `3` — Udalen   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offer_update_status(body, offer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OfferStatusUpdateRequest body: (required)
        :param int offer_id: ID predlohenia (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.offer_update_status_with_http_info(body, offer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.offer_update_status_with_http_info(body, offer_id, **kwargs)  # noqa: E501
            return data

    def offer_update_status_with_http_info(self, body, offer_id, **kwargs):  # noqa: E501
        """Obnovit status  # noqa: E501

        Maksimum 50 zaprosov v sekundu  Metod pozvolaet obnovit status vahego predlohenia.  Status mohet byt: - `0` — hernovik - `1` — Opublikovan - `2` — Priostanovlen - `3` — Udalen   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offer_update_status_with_http_info(body, offer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OfferStatusUpdateRequest body: (required)
        :param int offer_id: ID predlohenia (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'offer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offer_update_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `offer_update_status`")  # noqa: E501
        # verify the required parameter 'offer_id' is set
        if ('offer_id' not in params or
                params['offer_id'] is None):
            raise ValueError("Missing the required parameter `offer_id` when calling `offer_update_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'offer_id' in params:
            path_params['offer_id'] = params['offer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/offer/{offer_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def offers_author_get(self, **kwargs):  # noqa: E501
        """Poluhit spisok svoih predlohenii  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit spisok svoih predlohenii s ispolzovaniem filtracii.  ### Opisanie parametrov filtracii:  - `search` — Poisk predlohenii po nazvaniu. Ukahite hast ili polnoe nazvanie predlohenia dla poiska. - `category` — Filtracia predlohenii po kategorii kontenta. Spisok kategorii nahoditsa v [tablice](#content-categories). - `status` — Filtracia predlohenii po statusu. Vozmohnye znahenia:     - `0` — hernovik     - `1` — Opublikovan     - `2` — Priostanovlen - `sort` — Sortirovka predlohenii po date sozdania ili obnovlenia. Ukahite `created` dla sortirovki po date sozdania i `updated` dla sortirovki po date obnovlenia. - `sort_dir` — Napravlenie sortirovki. Ukahite `asc` dla sortirovki po vozrastaniu ili `desc` dla sortirovki po ubyvaniu.              - `skip` — Smehenie. Pozvolaet **propustit** opredelennoe kolihestvo predlohenii v rezultiruuhem nabore.</br> **Naprimer**, esli `skip` ravno 20, to vyborka nahnetsa s 21-i zapisi.                 - `take` — Kolihestvo predlohenii, kotoroe nuhno vernut v otvete.</br> **Naprimer**, esli `take` ravno 10, to v otvete budet ne bolee 10 zapisei.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offers_author_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: Poisk po nazvaniu predlohenia
        :param int category: Filtracia po kategorii kontenta: - `1` — Videokontent - `2` — Audiokontent - `4` — Dokument 
        :param int status: Filtracia po statusu: - `0` — hernovik - `1` — Opublikovan - `2` — Priostanovlen 
        :param str sort: Sortirovka predlohenii po date sozdania ili obnovlenia
        :param str sort_dir: Napravlenie sortirovki: - `asc` — po vozrastaniu - `desc` — po ubyvaniu 
        :param int skip: Smehenie. Kolihestvo predlohenii, kotorye nuhno propustit v rezultiruuhem nabore.
        :param int take: Kolihestvo predlohenii dla poluhenia
        :return: OfferResponseList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.offers_author_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.offers_author_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def offers_author_get_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit spisok svoih predlohenii  # noqa: E501

        Maksimum 100 zaprosov v sekundu  Metod pozvolaet poluhit spisok svoih predlohenii s ispolzovaniem filtracii.  ### Opisanie parametrov filtracii:  - `search` — Poisk predlohenii po nazvaniu. Ukahite hast ili polnoe nazvanie predlohenia dla poiska. - `category` — Filtracia predlohenii po kategorii kontenta. Spisok kategorii nahoditsa v [tablice](#content-categories). - `status` — Filtracia predlohenii po statusu. Vozmohnye znahenia:     - `0` — hernovik     - `1` — Opublikovan     - `2` — Priostanovlen - `sort` — Sortirovka predlohenii po date sozdania ili obnovlenia. Ukahite `created` dla sortirovki po date sozdania i `updated` dla sortirovki po date obnovlenia. - `sort_dir` — Napravlenie sortirovki. Ukahite `asc` dla sortirovki po vozrastaniu ili `desc` dla sortirovki po ubyvaniu.              - `skip` — Smehenie. Pozvolaet **propustit** opredelennoe kolihestvo predlohenii v rezultiruuhem nabore.</br> **Naprimer**, esli `skip` ravno 20, to vyborka nahnetsa s 21-i zapisi.                 - `take` — Kolihestvo predlohenii, kotoroe nuhno vernut v otvete.</br> **Naprimer**, esli `take` ravno 10, to v otvete budet ne bolee 10 zapisei.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offers_author_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: Poisk po nazvaniu predlohenia
        :param int category: Filtracia po kategorii kontenta: - `1` — Videokontent - `2` — Audiokontent - `4` — Dokument 
        :param int status: Filtracia po statusu: - `0` — hernovik - `1` — Opublikovan - `2` — Priostanovlen 
        :param str sort: Sortirovka predlohenii po date sozdania ili obnovlenia
        :param str sort_dir: Napravlenie sortirovki: - `asc` — po vozrastaniu - `desc` — po ubyvaniu 
        :param int skip: Smehenie. Kolihestvo predlohenii, kotorye nuhno propustit v rezultiruuhem nabore.
        :param int take: Kolihestvo predlohenii dla poluhenia
        :return: OfferResponseList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'category', 'status', 'sort', 'sort_dir', 'skip', 'take']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offers_author_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'sort_dir' in params:
            query_params.append(('sort_dir', params['sort_dir']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/offers/author', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OfferResponseList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def offers_upload_thumbnail(self, body, x_content_type, x_wbd_offer_id, **kwargs):  # noqa: E501
        """Dobavit ili obnovit oblohku predlohenia  # noqa: E501

        Maksimum 10 zaprosov v sekundu  Metod pozvolaet dobavit ili obnovit oblohku predlohenia.</br> Dla dobavlenia bolee privlekatelnoi kartohki predlohenia, my rekomenduem:</br>     1. Dobavlat izobrahenia s sootnoheniem storon 1:1</br>     2. Minimalnyi razmer izobrahenia 1200h1200 pikselei</br>     3. Fon kontrastnyi belomu</br>  <div class=\"description_important\">   Maksimalnyi razmer faila: 5 Mb.</br>   Dopustimye formaty: .png, .jpeg </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offers_upload_thumbnail(body, x_content_type, x_wbd_offer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: (required)
        :param str x_content_type: Tip izobrahenia (required)
        :param int x_wbd_offer_id: ID predlohenia (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.offers_upload_thumbnail_with_http_info(body, x_content_type, x_wbd_offer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.offers_upload_thumbnail_with_http_info(body, x_content_type, x_wbd_offer_id, **kwargs)  # noqa: E501
            return data

    def offers_upload_thumbnail_with_http_info(self, body, x_content_type, x_wbd_offer_id, **kwargs):  # noqa: E501
        """Dobavit ili obnovit oblohku predlohenia  # noqa: E501

        Maksimum 10 zaprosov v sekundu  Metod pozvolaet dobavit ili obnovit oblohku predlohenia.</br> Dla dobavlenia bolee privlekatelnoi kartohki predlohenia, my rekomenduem:</br>     1. Dobavlat izobrahenia s sootnoheniem storon 1:1</br>     2. Minimalnyi razmer izobrahenia 1200h1200 pikselei</br>     3. Fon kontrastnyi belomu</br>  <div class=\"description_important\">   Maksimalnyi razmer faila: 5 Mb.</br>   Dopustimye formaty: .png, .jpeg </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.offers_upload_thumbnail_with_http_info(body, x_content_type, x_wbd_offer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: (required)
        :param str x_content_type: Tip izobrahenia (required)
        :param int x_wbd_offer_id: ID predlohenia (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_content_type', 'x_wbd_offer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method offers_upload_thumbnail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `offers_upload_thumbnail`")  # noqa: E501
        # verify the required parameter 'x_content_type' is set
        if ('x_content_type' not in params or
                params['x_content_type'] is None):
            raise ValueError("Missing the required parameter `x_content_type` when calling `offers_upload_thumbnail`")  # noqa: E501
        # verify the required parameter 'x_wbd_offer_id' is set
        if ('x_wbd_offer_id' not in params or
                params['x_wbd_offer_id'] is None):
            raise ValueError("Missing the required parameter `x_wbd_offer_id` when calling `offers_upload_thumbnail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_content_type' in params:
            header_params['X-Content-Type'] = params['x_content_type']  # noqa: E501
        if 'x_wbd_offer_id' in params:
            header_params['X-Wbd-OfferId'] = params['x_wbd_offer_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/offers/thumb', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
