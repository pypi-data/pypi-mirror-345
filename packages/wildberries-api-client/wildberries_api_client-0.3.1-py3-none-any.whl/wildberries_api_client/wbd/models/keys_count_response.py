# coding: utf-8

"""
    Wildberries cifrovoi

    Po voprosam raboty s WBD API, obrahaites v <a href=\"https://digital.wildberries.ru/support\" target=\"_blank\">tehniheskuu podderhku</a>.   # noqa: E501

    OpenAPI spec version: wbd
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KeysCountResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'int',
        'available': 'int',
        'reserved': 'int',
        'deleted': 'int'
    }

    attribute_map = {
        'total': 'total',
        'available': 'available',
        'reserved': 'reserved',
        'deleted': 'deleted'
    }

    def __init__(self, total=None, available=None, reserved=None, deleted=None):  # noqa: E501
        """KeysCountResponse - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._available = None
        self._reserved = None
        self._deleted = None
        self.discriminator = None
        self.total = total
        self.available = available
        self.reserved = reserved
        self.deleted = deleted

    @property
    def total(self):
        """Gets the total of this KeysCountResponse.  # noqa: E501

        Obhee kolihestvo kluhei  # noqa: E501

        :return: The total of this KeysCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this KeysCountResponse.

        Obhee kolihestvo kluhei  # noqa: E501

        :param total: The total of this KeysCountResponse.  # noqa: E501
        :type: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def available(self):
        """Gets the available of this KeysCountResponse.  # noqa: E501

        Kolihestvo svobodnyh kluhei  # noqa: E501

        :return: The available of this KeysCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this KeysCountResponse.

        Kolihestvo svobodnyh kluhei  # noqa: E501

        :param available: The available of this KeysCountResponse.  # noqa: E501
        :type: int
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")  # noqa: E501

        self._available = available

    @property
    def reserved(self):
        """Gets the reserved of this KeysCountResponse.  # noqa: E501

        Kolihestvo zarezervirovannyh kluhei  # noqa: E501

        :return: The reserved of this KeysCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this KeysCountResponse.

        Kolihestvo zarezervirovannyh kluhei  # noqa: E501

        :param reserved: The reserved of this KeysCountResponse.  # noqa: E501
        :type: int
        """
        if reserved is None:
            raise ValueError("Invalid value for `reserved`, must not be `None`")  # noqa: E501

        self._reserved = reserved

    @property
    def deleted(self):
        """Gets the deleted of this KeysCountResponse.  # noqa: E501

        Kolihestvo udalennyh kluhei  # noqa: E501

        :return: The deleted of this KeysCountResponse.  # noqa: E501
        :rtype: int
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this KeysCountResponse.

        Kolihestvo udalennyh kluhei  # noqa: E501

        :param deleted: The deleted of this KeysCountResponse.  # noqa: E501
        :type: int
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeysCountResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeysCountResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
