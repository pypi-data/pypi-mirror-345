{"content": "## EXISTING STRUCTURES\n\n### Iron Smelting Facility at Position (0.0, 0.0)\nConsists of the following entities:\n- Stone Furnace at position (0.0, 0.0) used for smelting iron ore into iron plates. Currently has no ingredients to smelt and contains 4 iron plates in its result inventory.\n\n### Electricity Generator at Position (-9.5, 24.5)\nConsists of the following entities:\n- Offshore Pump at position (-9.5, 24.5) supplying water.\n- Boiler at position (-2.5, 24.0) fueled with coal, converting water to steam. Connected to the offshore pump with pipes.\n- PipeGroup connecting the offshore pump to the boiler, facilitating water flow. Pipes are positioned from (x=-8.5, y=23.5) to (x=-4.5, y=24.5).\n\n## ERROR TIPS\n\n### Errors when Crafting Items without Required Ingredients\n- Ensure all required ingredients are available in the inventory before attempting to craft an item. For example, crafting electronic circuits requires copper cables, which in turn require copper plates that must be smelted in a furnace.\n\n### Errors when Placing Entities in Invalid Locations\n- Verify that the target location is suitable for placing an entity. For instance, placing a boiler next to an offshore pump failed due to water collision. Consider adjusting the spacing, direction, or reference position.\n\n### Errors when Extracting Items from Entities\n- Confirm that the target entity contains the expected items before attempting extraction. For example, extracting copper plates from a stone furnace failed because there were no copper plates present.\n\n### Errors when Using Undefined Variables\n- Ensure all variables are properly defined before use. For example, attempting to connect a steam engine failed due to the steam engine not being defined.\n\n### Errors when Inserting Items without Inventory Stock\n- Check that the inventory contains the necessary items before inserting them into another entity. For example, inserting coal into a boiler failed due to a lack of coal in the inventory.\n\n### Errors when Performing Arithmetic Operations with Unsupported Types\n- Avoid performing arithmetic operations on incompatible types. For example, adding an integer to a 'ModelPrivateAttr' type resulted in a TypeError. Ensure type compatibility before performing operations."}